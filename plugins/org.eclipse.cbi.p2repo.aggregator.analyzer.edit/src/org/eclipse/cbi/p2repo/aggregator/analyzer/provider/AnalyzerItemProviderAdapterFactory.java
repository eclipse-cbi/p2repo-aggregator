/**
 * Copyright (c) 2021 Eclipse Foundation and others.
 *
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package org.eclipse.cbi.p2repo.aggregator.analyzer.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.cbi.p2repo.aggregator.analyzer.util.AnalyzerAdapterFactory;
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemColorProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AnalyzerItemProviderAdapterFactory extends AnalyzerAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AnalyzerItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
		supportedTypes.add(IItemColorProvider.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cbi.p2repo.aggregator.analyzer.Analysis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnalysisItemProvider analysisItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cbi.p2repo.aggregator.analyzer.Analysis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnalysisAdapter() {
		if (analysisItemProvider == null) {
			analysisItemProvider = new AnalysisItemProvider(this);
		}

		return analysisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cbi.p2repo.aggregator.analyzer.ContributionAnalysis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContributionAnalysisItemProvider contributionAnalysisItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cbi.p2repo.aggregator.analyzer.ContributionAnalysis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContributionAnalysisAdapter() {
		if (contributionAnalysisItemProvider == null) {
			contributionAnalysisItemProvider = new ContributionAnalysisItemProvider(this);
		}

		return contributionAnalysisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cbi.p2repo.aggregator.analyzer.InstallableUnitAnalysis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstallableUnitAnalysisItemProvider installableUnitAnalysisItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cbi.p2repo.aggregator.analyzer.InstallableUnitAnalysis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstallableUnitAnalysisAdapter() {
		if (installableUnitAnalysisItemProvider == null) {
			installableUnitAnalysisItemProvider = new InstallableUnitAnalysisItemProvider(this);
		}

		return installableUnitAnalysisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cbi.p2repo.aggregator.analyzer.RequirementAnalysis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequirementAnalysisItemProvider requirementAnalysisItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cbi.p2repo.aggregator.analyzer.RequirementAnalysis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequirementAnalysisAdapter() {
		if (requirementAnalysisItemProvider == null) {
			requirementAnalysisItemProvider = new RequirementAnalysisItemProvider(this);
		}

		return requirementAnalysisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cbi.p2repo.aggregator.analyzer.RequirementResolution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequirementResolutionItemProvider requirementResolutionItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cbi.p2repo.aggregator.analyzer.RequirementResolution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequirementResolutionAdapter() {
		if (requirementResolutionItemProvider == null) {
			requirementResolutionItemProvider = new RequirementResolutionItemProvider(this);
		}

		return requirementResolutionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cbi.p2repo.aggregator.analyzer.CapabilityAnalysis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CapabilityAnalysisItemProvider capabilityAnalysisItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cbi.p2repo.aggregator.analyzer.CapabilityAnalysis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCapabilityAnalysisAdapter() {
		if (capabilityAnalysisItemProvider == null) {
			capabilityAnalysisItemProvider = new CapabilityAnalysisItemProvider(this);
		}

		return capabilityAnalysisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cbi.p2repo.aggregator.analyzer.CapabilityResolution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CapabilityResolutionItemProvider capabilityResolutionItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cbi.p2repo.aggregator.analyzer.CapabilityResolution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCapabilityResolutionAdapter() {
		if (capabilityResolutionItemProvider == null) {
			capabilityResolutionItemProvider = new CapabilityResolutionItemProvider(this);
		}

		return capabilityResolutionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cbi.p2repo.aggregator.analyzer.Project} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProjectItemProvider projectItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cbi.p2repo.aggregator.analyzer.Project}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProjectAdapter() {
		if (projectItemProvider == null) {
			projectItemProvider = new ProjectItemProvider(this);
		}

		return projectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cbi.p2repo.aggregator.analyzer.GitRepository} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GitRepositoryItemProvider gitRepositoryItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cbi.p2repo.aggregator.analyzer.GitRepository}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGitRepositoryAdapter() {
		if (gitRepositoryItemProvider == null) {
			gitRepositoryItemProvider = new GitRepositoryItemProvider(this);
		}

		return gitRepositoryItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (analysisItemProvider != null)
			analysisItemProvider.dispose();
		if (contributionAnalysisItemProvider != null)
			contributionAnalysisItemProvider.dispose();
		if (installableUnitAnalysisItemProvider != null)
			installableUnitAnalysisItemProvider.dispose();
		if (requirementAnalysisItemProvider != null)
			requirementAnalysisItemProvider.dispose();
		if (requirementResolutionItemProvider != null)
			requirementResolutionItemProvider.dispose();
		if (capabilityAnalysisItemProvider != null)
			capabilityAnalysisItemProvider.dispose();
		if (capabilityResolutionItemProvider != null)
			capabilityResolutionItemProvider.dispose();
		if (projectItemProvider != null)
			projectItemProvider.dispose();
		if (gitRepositoryItemProvider != null)
			gitRepositoryItemProvider.dispose();
	}

}
