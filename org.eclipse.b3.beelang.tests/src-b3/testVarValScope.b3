import java.lang.Object;
import java.lang.Integer;
import java.util.List;
import java.lang.Exception;

function Object main(List argv) {
	testVal();
	testVar();
	testFinalVar();
}
function Object testVar() {
	var x = 10;
	Integer y; y = 1; // set y separately, can not test type of "null"
	
	assertType("x should be an integer", Integer, x);
	assertType("y should be an integer", Integer, y);
	
	Integer z = try x = 5 catch Exception e: 0 endtry;
	assertEquals("x should have changed", 5, x);
	assertEquals("assignment to val should not have thrown exception", 5, z);
}

function Object testFinalVar() {
	final var x = 10;
	Integer y = 10;
	
	Integer z = try x = 5 catch Exception e: 0 endtry;
	assertEquals("x should have changed", 5, x);
	assertEquals("assignment to val should not have thrown exception", 5, z);
	z = try
	{ var x = 20; // this redeclaration is not allowed
	  assertTrue("Should not be reached", false);
	} catch Exception e: 0 endtry;
	assertEquals("exception should have been caught for redeclaring final x", 0, z);
}

function Object testVal() {
	val x = 10;
	val Integer y = 10;
	
	assertType("x should be an integer", Integer, x);
	assertType("y should be an integer", Integer, y);

	Integer z = try x = 5 catch Exception e: 0 endtry;
	assertEquals("x should not have changed", 10, x);
	assertEquals("assignment to val should have thrown exception", 0, z);
}
