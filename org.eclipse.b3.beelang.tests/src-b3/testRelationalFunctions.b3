use java.lang.Object;
use java.util.List;
use java.lang.Number;

function Object main(List argv) {
	testInstanceOf();
	testRelationalFunctions();
	testRegexp();
	testRegexpNotMatch();
	testRegexpList();
	testRegexpListNotMatch();
	testSimplePattern();
	testSimplePatternNotMatch();
	testSimplePatternList();
	testSimplePatternListNotMatch();
}
function Object testInstanceOf() {
	assertTrue("1 instanceof Number", 1 instanceof Number);
	assertFalse("'hello' instanceof Number", "hello" instanceof Number);
}
function Object testRelationalFunctions() {
	assertTrue("1 < 2", 1 < 2);
	assertTrue("2 > 1", 2 > 1);

	assertTrue("1.0 < 2", 1.0 < 2);
	assertTrue("2.0 > 1", 2.0 > 1);
	
	assertTrue("2 == 2", 2 == 2);
	assertTrue("2.0 == 2", 2.0 == 2);
	assertTrue("2 == 2.0", 2 == 2.0);

	assertTrue("1 <= 2", 1 <= 2);
	assertTrue("2 <= 2", 2 <= 2);
	assertFalse("3 <= 2", 3 <= 2);

	assertTrue("1.0 <= 2", 1.0 <= 2);
	assertTrue("2.0 <= 2", 2.0 <= 2);
	assertFalse("3.0 <= 2", 3.0 <= 2);

	assertTrue("2 >= 1", 2 >= 1);
	assertTrue("2 >= 2", 2 >= 2);
	assertFalse("2 >= 3", 2 >= 3);

	assertTrue("2.0 >= 1", 2.0 >= 1);
	assertTrue("2.0 >= 2", 2.0 >= 2);
	assertFalse("2.0 >= 3", 2.0 >= 3);
	
	assertTrue("true === true", true === true);
	assertFalse("1 === 1", 1 === 1);
	assertTrue("1 !==1", 1 !==1);
	Number x = 1;
	assertTrue("x === x", x === x);
}
function Object testRegexp() {
	assertTrue("'abc' ~= ~/.*/", "abc" ~= ~/.*/);
	assertTrue("~/.*/ ~= 'abc'" , ~/.*/  ~= "abc" );
}

function Object testRegexpNotMatch() {
	assertFalse("'abc' !~ ~/.*/", "abc" !~ ~/.*/);
	assertFalse("~/.*/ !~ 'abc'" , ~/.*/  !~ "abc" );
}

function Object testRegexpList() {
	assertTrue("['abc'] ~= [~/.*/]", ["abc"] ~= [~/.*/]);
	assertTrue("[~/.*/] ~= ['abc']" , [~/.*/]  ~= ["abc"] );
}

function Object testRegexpListNotMatch() {
	assertFalse("['abc'] !~ [~/.*/]", ["abc"] !~ [~/.*/]);
	assertFalse("[~/.*/] !~ ['abc']" , [~/.*/]  !~ ["abc"] );
}

function Object testSimplePattern() {
	assertTrue("'abc123' ~= ~'abc*'", "abc123" ~= ~"abc*");
	assertTrue("'abc123' ~= ~'abc?23'", "abc123" ~= ~"abc?23");
	assertTrue("'abc123' ~= ~'a*3'", "abc123" ~= ~"a*3");
}
function Object testSimplePatternNotMatch() {
	assertFalse("'abc123' !~ ~'abc*'", "abc123" !~ ~"abc*");
	assertFalse("'abc123' !~ ~'abc?23'", "abc123" !~ ~"abc?23");
	assertFalse("'abc123' !~ ~'a*3'", "abc123" !~ ~"a*3");
}
function Object testSimplePatternList() {
	assertTrue("['abc123'] ~= [~'abc*']", ["abc123"] ~= [~"abc*"]);
	assertTrue("['abc123'] ~= [~'abc?23']", ["abc123"] ~= [~"abc?23"]);
	assertTrue("['abc123'] ~= [~'a*3']", ["abc123"] ~= [~"a*3"]);
}
function Object testSimplePatternListNotMatch() {
	assertFalse("['abc123'] ~= [~'abc*']", ["abc123"] !~ [~"abc*"]);
	assertFalse("['abc123'] ~= [~'abc?23']", ["abc123"] !~ [~"abc?23"]);
	assertFalse("['abc123'] ~= [~'a*3']", ["abc123"] !~ [~"a*3"]);
}