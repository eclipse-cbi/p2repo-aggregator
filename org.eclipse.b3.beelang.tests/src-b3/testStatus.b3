
function main(List argv) {
	testOk();
	testInfo();
	testWarning();
	testError();
	testMultiStatus();
	OK("Worked just fine");
}

function testOk() {
	assertTrue("Ok is Ok", produceOk().isOK());
}
function testInfo() {
	assertTrue("Produced Info is an INFO", produceInfo() ~= INFO());
}
function testWarning() {
	assertTrue("Produced Warning is a Warning", produceWarning() ~= WARNING());
}
function testError() {
	assertTrue("Produced Error is an Error", produceError() ~= ERROR());
}
function testMultiStatus() {
	assertTrue("Produced Multistatus contains an error1", produceMultiStatus() ~= ERROR());
	assertTrue("Produced Multistatus contains an error2", produceMultiStatus() ~= [ERROR(), WARNING()]);
	assertTrue("Produced Multistatus contains an error3", produceMultiStatus().matches(ERROR(), WARNING()));
	
	assertTrue("A MultiStatus isMultiStatus()", produceMultiStatus().isMultiStatus());
}
function produceOk() {
	OK();
}
function produceOkWithYou() {
	OK("You");
}
function produceInfo() {
	INFO("Chocolate is addictive!");
}
function produceError() {
	ERROR("This is an error");
}
function produceWarning() {
	WARNING("Let this be a warning to you all!");
}
function produceMultiStatus() {
	MULTISTATUS("Multiple statuses", OK(), INFO("info"), ERROR("This is an error"));
}
function foo(Integer a) { a; }
function bar() : foo();

