import java.lang.Iterable;
import java.util.List;
import org.eclipse.b3.beelang.tests.buildunittypes.Fruit;
import org.eclipse.b3.build.build.BuildUnit;
import org.eclipse.b3.beelang.tests.repo.TestRepo;

/**
* Used to advice 'Fruit' that the waste (seeds and peel) can be built.
*/
concern FruitProcessing {
	builder waste(Fruit unit ) { 
		input : [ unit.peel() , unit.seeds() ];
	}
}

/**
 * Runs test in the IDE.
 */
function main(List argv) {
	testBuildingFruitSallad();
	testFruitWaste();
	testRunBuildersAndMergeResult();
}

/**
* Tests that a fruitsallad can be build - i.e, that its prerequisites in input has
* been resolved, the builders are found, exectuted, returns a result that is merged
* as expected.
*/
function testBuildingFruitSallad() {
	var engine = $test.engine;
	var sallad = $test.fruitsallad;
	assertEquals("The fruitsallad unit is found", "fruitsallad", sallad.^name);
	assertEquals("The fruitsallad unit is found", "fruitsallad", ($test.fruitsallad).^name);
	var e = sallad.getEffectiveFacade(engine.getBuildContext());
	var x = sallad.make();
	x.schedule();
	x.join();
	var r = x.getBuildResult();
	
	assertContainsAll("All input in fruitsallaed is merged", 
	r.getPathIterator().toList().collect(x|x.toString()),
	[
		"resource:/org.eclipse.b3.beelang.tests/src-b3/testunits/apple/applepulp.txt",
		"resource:/org.eclipse.b3.beelang.tests/src-b3/testunits/banana/bananapulp.txt",
		"resource:/org.eclipse.b3.beelang.tests/src-b3/testunits/orange/orangepulp.txt", 
		"resource:/org.eclipse.b3.beelang.tests/src-b3/testunits/orange/orangepeel.txt"
	]);	
}

/**
* Basic test of running simplest type of builder (returns source), and merging result.
*/
function testRunBuildersAndMergeResult() {
	assertTrue("Test should have initialized property $test.banana", $test.banana instanceof Fruit);	
	assertTrue("Test should have initialized property $test.orange", $test.orange instanceof Fruit);	
	Fruit banana = $test.banana;
	Fruit orange = $test.orange;
	
	var x = banana.pulp();
	x.schedule();
	x.join();
	var r = x.getBuildResult();
	
	x = orange.peel();
	x.schedule();
	x.join();
	r.merge(x.getBuildResult());
	
	// needs typecast to List see Bug 303920
	assertContainsAll("Orange and Banana should have been merged", 
		r.getPathIterator().toList().collect(x|x.toString()),
	[
		"resource:/org.eclipse.b3.beelang.tests/src-b3/testunits/banana/bananapulp.txt",
		"resource:/org.eclipse.b3.beelang.tests/src-b3/testunits/orange/orangepeel.txt"
	]);
}


private function fruitWaste() {
	var apple = $test.apple;
	var x = apple.waste();
	x.schedule();
	x.join();
	// needs typecast to List see Bug 303920
	assertContainsAll("Advice used and two files returned", 
		x.getBuildResult().getPathIterator().toList().collect(x|x.toString()),
		[
			"resource:/org.eclipse.b3.beelang.tests/src-b3/testunits/apple/applepeel.txt",
			"resource:/org.eclipse.b3.beelang.tests/src-b3/testunits/apple/appleseeds.txt"
		]);	
	
}
/**
* Test that builder advice is applied on Fruit as expected and that the correct result is
* produced.
*/
function testFruitWaste() {
		with FruitProcessing : fruitWaste();
}

/**
* A Buildunit that has prerequisites on build units, and on a non unit capability.
* Declared with a b3test:/... repository (a repository that only looks at units visible in
* the current execution context). 
*/
unit fruitsallad version 1.0.0 {
	requires :  unit  { name : "apple"; version : [1.0.0,2.0.0]; } as theBigApple;
	builder make {
	
		input : [
			theBigApple.pulp(), // indirect requirement
			unit  { name: "banana"; version : 1.0.0; }.pulp(),
			unit  { name: "orange"; version : 1.0.0; }.pulp(),
			capability { name-space: gastronomy.taste; name: "zestyPeel";}.peel()
		];
	}
}

/**
* A Fruit with the simplest form of builders (source).
*/
unit apple version 1.0.0  implements Fruit {
	source : "resource:/org.eclipse.b3.beelang.tests/src-b3/testunits/apple/";
	builder peel {
		source : [ applepeel.txt ];
	}
	builder seeds {
		source : [ appleseeds.txt ];
	}
	builder pulp {
		source : [ applepulp.txt ];
	}
}

/**
* A Fruit with the simplest form of builders (source).
* Has some extra provided capabilities.
*/
unit banana version 1.0.0 implements Fruit {
	source : "resource:/org.eclipse.b3.beelang.tests/src-b3/testunits/banana/";
	
//	provides : food.nutrition.vitamin B6;
//	provides : food.nutrition.vitamin C;
//	provides : food.nutrition.mineral potassium;
	
	builder peel {
		source : [ bananapeel.txt ];
	}
	builder seeds {
		source : [ bananaseeds.txt ];
	}
	builder pulp {
		source :[ bananapulp.txt ];
	}
}

/**
* A Fruit with the simplest form of builders (source).
* Has some extra provided capabilities, and a capability provided by a builder.
*/
unit orange version 1.0.0 implements Fruit {
	source : "resource:/org.eclipse.b3.beelang.tests/src-b3/testunits/orange/";
	
	provides : capability {name-space: food.nutrition.vitamin; name : "C";};
	
	builder peel {
		provides :  capability {name-space: gastronomy.taste; name: "zestyPeel"; };
		source : [ orangepeel.txt ];
	}
	builder seeds {
		source : [ orangeseeds.txt ];
	}
	builder pulp {
		source : [ orangepulp.txt ];
	}
}