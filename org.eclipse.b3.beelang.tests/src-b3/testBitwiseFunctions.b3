import java.lang.Object;
import java.util.List;
import java.lang.Number;

/** Assert function returns true */
function Object main(List argv) {
	testBitwiseFunctions();
	//testBitwiseAssignment();
}
function Object testBitwiseFunctions() {
	assertEquals("0x1 | 0x2 == 0x3", 0x3, 0x1 | 0x2);
	assertEquals("0x7 & 0x2 == 0x2", 0x2, 0x7 & 0x2);
	assertEquals("0x2 ^ 0x1 == 0x3", 0x3, 0x2 ^ 0x1);
	assertEquals("0x4 >> 1 == 0x2", 0x2, 0x4 >> 1);
	assertEquals("0x2 << 1 == 0x4", 0x4, 0x2 << 1);
	assertEquals("0x4 >>> 1 == 0x2", 0x2, 0x4 >>> 1);
	assertEquals("-0x4 >>> 1 == 2147483646", 2147483646, -0x4 >>> 1);
	assertEquals("-0x4 >> 1 == -0x2", -0x2, -0x4 >> 1);
	assertEquals("~0x2 == -0x3", -0x3, ~0x2);
}
function Object testBitwiseAssignment() {
	Number x = 0x0;
	assertEquals("x = 0x1; x |= 0x2; x == 0x3", 0x3, {x = 0x1; x |= 0x2; x;});
	assertEquals("x = 0x7; x &= 0x2; x == 0x2", 0x2, {x = 0x7; x &= 0x2; x;});
	assertEquals("x = 0x2; x ^= 0x1; x == 0x3", 0x3, {x = 0x2; x ^= 0x1; x;});
	assertEquals("x = 0x4; x >>= 0x1; x == 0x2", 0x2, {x = 0x4; x >>= 0x1; x;});
	assertEquals("x = 0x2; x <<= 0x1; x == 0x4", 0x4, {x = 0x2; x <<= 0x1; x;});
	assertEquals("x = 0x4; x >>>= 0x1; x == 0x2", 0x2, {x = 0x4; x >>>= 0x1; x;});
	assertEquals("x = -0x4; x >>>= 0x1; x == 2147483646", 2147483646, {x = -0x4; x >>>= 0x1; x;});	
}