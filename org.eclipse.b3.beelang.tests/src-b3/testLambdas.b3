// TODO: Test literal functions. Definition, Calling, passing,
// TODO: Test closure parameter a(x| x+1);
use java.lang.Object;
use java.util.List;
use java.lang.Integer;
use java.lang.Number;

function Object main(List argv) {
	testClosure();
	testLiteralLambda();
	testClosureParameter();
	testFunctionType();
	testDelegation();
	testClosureOverwrite();
}
function Object testClosureParameter() {
	List<Integer> list = [<Integer> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
	
	// short form lambda parameter with two expressions
	List<Integer> odd = list.select(Integer x | Integer y = x.bitwiseAnd(0x1); y == 0x1;);
	assertEquals("Selection of odd values 1", [<Integer> 1, 3, 5, 7, 9 ], odd);

	// short form lambda parameter with one expressions
	odd = list.select(Integer x | x.bitwiseAnd(0x1) == 0x1);
	assertEquals("Selection of odd values 2", [<Integer> 1, 3, 5, 7, 9 ], odd);

	// longer form lambda - equivalent to the above
	odd = list.select({Integer x | Integer y = x.bitwiseAnd(0x1); y == 0x1;});
	assertEquals("Selection of odd values 3", [<Integer> 1, 3, 5, 7, 9 ], odd);
}
function Object testLiteralLambda() {
	// type of zum inferred
	var zum = {<Integer> Integer x, Integer y | x + y };
	// calling via expression
	assertEquals("(zum)(1,2) == 3",3, (zum)(1,2));
	assertEquals("zum.evaluate(1,2) == 3", 3, zum.evaluate(1,2));
}
function Object testClosure() {
	// a variable that a lambda should be able to access
	Integer outside = 10;
	Integer x = 100; // a variable the lambda should not see (hidden by parameter)
	// type of zum inferred
	var zum = {<Integer> Integer x, Integer y | x + y + outside};
	// calling via expression
	assertEquals("(zum)(1,2) == 3",13, (zum)(1,2));
	assertEquals("zum.evaluate(1,2) == 3", 13, zum.evaluate(1,2));
}
function Object testFunctionType() {
	// Test declaration of function type
	(Integer, Integer)=>Integer zum;
	// Test assignability of function
	zum = {<Integer> Integer x, Integer y | x + y };
	
	// A more generic variable - test that the more specific Integer lambda can be assigned to this
	// variable.
	(Number, Number) => Number zee;
	zee = zum;
	assertEquals("zee evaluates to 3", 3, (zee)(1,2));
	assertEquals("zum evaluates to 3", 3, (zum)(1,2));
	assertEquals("zee and zum returns the same value", zee.evaluate(1,2), zum.evaluate(1,2));
}
function Object testDelegation() {
	// a variable that a lambda should be able to access
	Integer outside = 10;
	// type of zum inferred
	var zum = {<Integer> Integer x, Integer y | x + y + outside};
	// calling via expression
	delegate(zum);

}
private function Object delegate((Integer, Integer)=>Integer func) {
	Integer outside = 100;
	assertEquals("delegated call should see original context", 13, func.evaluate(1,2));
}
function Object testClosureOverwrite() {
	var fredLambda = nameLambda("fred");
	var maryLambda = nameLambda("mary");
	assertEquals("Closure was erased", "fred", (fredLambda)());
	assertEquals("Closure was erased", "mary", (maryLambda)());
}
private function nameLambda(String aPersonName) {
	{| aPersonName };
}