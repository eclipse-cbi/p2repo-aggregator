import java.util.List;
import java.lang.Integer;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Double;

function main(List argv) {
	testInject();
	testSelect();
	testReject();
	testAllFunction();
	testExistsFunction();
	testDo();
	testWhileTrue();
	testWhileFalse();
	testCollect();
}
function testInject() {
	assertEquals("looping over a sequence 1-9 (auto-curry)", 45, (1..9).inject(0, <Integer> Integer x, Integer y | x + y));
	assertEquals("looping over a sequence 1-9 (curry 1)", 45, (1..9).inject(0, _, <Integer> Integer x, Integer y | x + y));
	assertEquals("looping over a sequence 1-9 (curry 0)", 45, (1..9).inject(_, 0, <Integer> Integer x, Integer y | x + y));
	assertEquals("looping over a sequence 1-9 with | and no type", 45, (1..9).inject( _ , 0, | x, y | (Integer)(x)+ (Integer)(y)));
}
function testSelect() {
	assertEquals("select odd values 1-9", 
		[<Integer> 1, 3, 5, 7, 9], (1..9).select(Integer x| x.bitwiseAnd(1) == 1));
	assertEquals("select odd values 1-9 (with curry 1)", 
		[<Integer> 1, 3, 5, 7, 9], (1..9).select(1,_, Integer bits, Integer x| x.bitwiseAnd(bits) == bits));
	assertEquals("select odd values 1-9 (with curry 2)", 
		[<Integer> 1, 3, 5, 7, 9], (1..9).select(_,1, Integer x, Integer bits| x.bitwiseAnd(bits) == bits));
	assertEquals("select odd values 1-9 (with curry 2)",
		[<Integer> ], (1..9).select(Integer x | false));
		
}
function testReject() {
	assertEquals("select even values 1-9", 
		[<Integer> 2, 4, 6, 8], (1..9).reject(<Integer> Integer x| x.bitwiseAnd(1) == 1));
	assertEquals("select even values 1-9 (with curry 1)", 
		[<Integer> 2, 4, 6, 8], (1..9).reject(1,_, Integer bits, Integer x| x.bitwiseAnd(bits) == bits));
	assertEquals("select odd values 1-9 (with curry 2)", 
		[<Integer> 2, 4, 6, 8], (1..9).reject(_,1, Integer x, Integer bits| x.bitwiseAnd(bits) == bits));
}
function testAllFunction() {
	assertTrue("check if all values are < 10", (1..9).all(Integer x| x < 10));
	assertFalse("check if all values are < 9", (1..9).all(Integer x| x < 9));
	assertFalse("check empty 'all' is false", [<Integer>].all(Integer x| x < 9));
}
function testExistsFunction() {
	assertTrue("check if there is a value 5", (1..9).exists(Integer x| x == 5));
	assertFalse("check if there is a value 10", (1..9).exists(Integer x| x == 10));
	assertFalse("check empty 'exists' is false", [<Integer>].exists(Integer x| x == 1));
}
function testDo() {
	assertEquals("do something 9 times", 81, (1..9).do(Integer x| x * x));
	assertNull("do something null times", [<Integer>].do(Integer x| x == 1));
}
function testWhileTrue() {
	Integer counter = 0;
	{<Boolean> | counter < 5}.whileTrue(| ++counter);
	assertEquals("whileTrue 1", 5, counter);
	counter = 0;
	whileTrue(<Boolean>|counter < 7, | ++counter);
	assertEquals("whileTrue 2", 7, counter);
}
function testWhileFalse() {
	Integer counter = 0;
	{<Boolean> | counter > 5}.whileFalse(| ++counter);
	assertEquals("whileTrue 1", 6, counter);
	counter = 0;
	whileFalse(<Boolean>|counter > 7, | ++counter);
	assertEquals("whileTrue 2", 8, counter);
}
function testCollect() {
	assertEquals("Should be list with 2x values", 
		[<Integer> 2, 4, 6, 8], 
		[<Integer> 1, 2, 3, 4].collect(Integer x | x * 2));
}