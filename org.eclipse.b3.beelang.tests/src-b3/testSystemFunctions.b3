import java.util.List;
import java.lang.Integer;
import java.lang.Boolean;

function main(List argv) {
	testInject();
	testSelect();
	testReject();
	testAllFunction();
}
function testInject() {
	assertEquals("looping over a sequence 1-9 (auto-curry)", 45, (1..9).inject(0, <Integer> Integer x, Integer y | x + y));
	assertEquals("looping over a sequence 1-9 (curry 1)", 45, (1..9).inject(0, _, <Integer> Integer x, Integer y | x + y));
	assertEquals("looping over a sequence 1-9 (curry 0)", 45, (1..9).inject(_, 0, <Integer> Integer x, Integer y | x + y));
}
function testSelect() {
	assertEquals("select odd values 1-9", 
		[<Integer> 1, 3, 5, 7, 9], (1..9).select(Integer x| x.bitwiseAnd(1) == 1));
	assertEquals("select odd values 1-9 (with curry 1)", 
		[<Integer> 1, 3, 5, 7, 9], (1..9).select(1,_, Integer bits, Integer x| x.bitwiseAnd(bits) == bits));
	assertEquals("select odd values 1-9 (with curry 2)", 
		[<Integer> 1, 3, 5, 7, 9], (1..9).select(_,1, Integer x, Integer bits| x.bitwiseAnd(bits) == bits));
	assertEquals("select odd values 1-9 (with curry 2)",
		[<Integer> ], (1..9).select(Integer x | false));
		
}
function testReject() {
	assertEquals("select even values 1-9", 
		[<Integer> 2, 4, 6, 8], (1..9).reject(<Integer> Integer x| x.bitwiseAnd(1) == 1));
	assertEquals("select even values 1-9 (with curry 1)", 
		[<Integer> 2, 4, 6, 8], (1..9).reject(1,_, Integer bits, Integer x| x.bitwiseAnd(bits) == bits));
	assertEquals("select odd values 1-9 (with curry 2)", 
		[<Integer> 2, 4, 6, 8], (1..9).reject(_,1, Integer x, Integer bits| x.bitwiseAnd(bits) == bits));
}
function testAllFunction() {
	assertTrue("check if all values are < 10", (1..9).all(Integer x| x < 10));
	assertFalse("check if all values are < 9", (1..9).all(Integer x| x < 9));
}
