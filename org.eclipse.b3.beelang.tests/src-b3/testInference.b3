function main(List argv) {
	testNullAssignment();
	testDirectParameterInference();
	testIndirectParameterInference();
	testListParameterInference();
	testMapParameterInference();
}

function testNullAssignment() {
	Integer x = null;
	Integer y = nullProducer();
	List<Integer> z = [null, nullProducer()];
	assertNull("Assignment of literal null", x);
	assertNull("Assignment of function product", y);
	assertEquals("List with two nulls", [<Integer> null, null], z);
}
private function nullProducer : null;

function testDirectParameterInference() {
	(Integer)=>Integer a ={ y | y.bitwiseAnd(2) };
	assertEquals("Call is made and result is 2", 2, a.invoke(2));
}
function testMapParameterInference() {
	// TODO: See https://bugs.eclipse.org/bugs/show_bug.cgi?id=328536 why this is not a straight
	// declaration with type.
	var a = [<String, (Integer)=>Integer>]; 
	a = [myfunc: { y | y.bitwiseAnd(2) }];
	assertEquals("Call is made and result is 2", 2, a["myfunc"].invoke(2));
}
function testListParameterInference() {
	// TODO: See https://bugs.eclipse.org/bugs/show_bug.cgi?id=328536 why this is not a straight
	// declaration with type.
	var a = [<(Integer)=>Integer>]; 
	a = [{ y | y.bitwiseAnd(2) }];
	assertEquals("Call is made and result is 2", 2, a[0].invoke(2));
}

function testIndirectParameterInference() {
	(Integer)=>Integer a;
	a = { y | y.bitwiseAnd(2) };
	assertEquals("Call is made and result is 2", 2, a.invoke(2));
}