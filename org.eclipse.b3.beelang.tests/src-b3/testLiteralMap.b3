use java.util.List;
use java.lang.String;
use java.lang.Integer;
use java.util.Map;

function main(List argv) {
	testLiteralMap();
	testAnyComparison();
	testCallLambdaInList();
}
function testLiteralMap() {
	Map a = [a:1,b:2,c:3];
	Map b = [a:1+2, b:"hello", c:[<String,String>], d:['a', 'b', 'c', 'd'], e:a['a']];
	
	assertEquals("accessing map", 2, a['b']);
	assertTrue("empty map is a map", b['c'] instanceof Map);
	assertEquals("an empty map", [<String,String>], b['c']);
	assertEquals("an evaluated entry", 3, b['a']);
	assertEquals("chained at expression", "c", b['d'][2]);
	assertEquals("calling size", 5, b.size());
	
}
function testAnyComparison() {
	Map b = [a:1+2, b:"hello", c:[<String,String>], d:['a', 'b', 'c', 'd'], e:1];
	assertEquals("a map and any", [a:_,b:_,c:_,d:_,e:_], b);
}
function testCallLambdaInList() {
	Integer outside = 10;
	var a = [<String,()=>Integer> a:{<Integer>| outside +10;}];
	assertEquals("calling a lambda in a map", 20, (a['a'])());
}