use java.lang.Object;
use java.util.List;
use java.util.Map;
use java.lang.Integer;
use java.lang.Double;
use java.lang.Float;
use java.lang.String;
use java.lang.String as Text;

function Object main(List argv) {
	testTypes();
	testNull();
	testNullInList();
	testNullInMap();
	testNullAssignment();
	testNullInCall();
}
function Object testTypes() {
	Integer a = 1;
	// assertType("An Integer is an Integer", Integer.getClass(), a);
	assertType("-0x4 is an Integer", Integer, -0x4);
	assertType("-3.2 is a Double", Double, -3.2);
	assertType("Creating a float", Float, new Float(2.floatValue()));
	assertType("An aliased type", Text, "hello");
	// continue with more tests
}
function testNull() {
	Integer a;
	assertEquals("test uninitialized variable == null", null, a);
	
	a = 1;
	a = null;
	assertEquals("test assign null to Integer variable == null", null, a);
}
function testNullInList() {	
	List<Integer> b = [<Integer> 1, 2, 3];
	b[0] = null;
	assertEquals("assigning null to Integer list entry", null, b[0]);
}
function testNullInMap() {
	Map<String, Integer> c = [<String, Integer> a: 1, b: 2];
	c['a'] = null;
	assertEquals("assigning null to Integer map entry", null, c['a']);
}
function testNullAssignment() {
	var d = null;
	assertEquals("null assignment", null, d);
}
function testNullInCall() {
	Integer a = null;
	assertEquals("null parameter and return value", null, callWithNull(a));
}
private function callWithNull(Integer param) {
	assertEquals("integer parameter having null value", null, param);
	param;
}