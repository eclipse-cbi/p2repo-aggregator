/*
* Test syntax of build unit and related concerns.
* 
*/
import java.util.List; // cheat, need a type, don't have the actual types yet...
import java.util.Map; // - " -
import org.eclipse.b3.beelang.tests.repo.TestRepo;

function main(List argv) {
	testBuildUnitSyntax();
}
function testBuildUnitSyntax() {
	true; // test is ok if this file can be parsed without errors
}

/**
* Test the mix of statements (function, unit and builder contexts).
*/
concern TestingBuildUnitConcernSyntaxSimple {
	// define functions intermixed with other things
	function foo() : "foo";
	
	// implements with type reference
	unit-context implements List { /* what to do with units that implements List*/ }
	
	function bar() : "bar";
	
	// all builders having an exact name.
	builder-context builder { name == someBuilder;} { /* what to do with builder called 'someBuilder' */ }
	
	function fee() : "fee";
}
/**
* Test all options regarding selection of units
*/ 
concern TestingUnitContextSyntax {
	
	//--requires
	// ns, name (no version)
	unit-context requires capability { name-space == a.b ; name == c.d;} {
		/* what to do with units that requires the capability */ 
	}

	// any ns, any name
	unit-context requires capability { name-space ~= _; name ~= _; } { }

	// regexp namespace and name (check for osgi.*, and org.myorg.*
	unit-context requires capability { 
		name-space ~= ~/osgi\..*/; 
		name ~= ~/org\.myorg\..*/; 
		version ~= 1.0.0; } { }
	
	// ns, name, version range in short form
	unit-context requires capability { name-space == a.b; name == c.d; version ~= 1.0.0; } { }
	
	// ns, name, version range in full form
	unit-context requires capability { name-space == a.b; name == c.d; version ~= [1.0.0, 2.0.0]; } { }
	
	//--provides
	unit-context provides capability { name-space == a.b; name == c.d; version ~= 1.0.0.qualifier; } { }
	
	//--unit name
	unit-context unit { name ~= _; } { }
	unit-context unit { name ~= _; version ~= 1.0.0;} { }
	unit-context unit { name ~= ~/org\.myorg\..*/;} { }
	unit-context unit { name == "my unit with exactly this funny name & stuff";} { }
	
	// logical expressions selecting the unit
	unit-context unit { name ~= _; } 
		&& implements List 
		&& implements Map 
		&& requires capability { name-space == a; name == b; version ~= [0.0.0, 9.9.9]; }
		|| ! unit { name ~= ~/org\.myorg\.fixed/; }
	{ }
}
concern TestingBuilderContextSyntax {
	// addresses builder using any input in same unit
	builder-context input { builder  ~= _; } {}
	
	// same as above, but explicit
	builder-context input { unit builder ~= _; } {}
	// addresses builder with a complex name in same unit
	builder-context input { unit builder == a.^builder.called.wanda; } {}

	// selecting a builder that provides a capability	
	builder-context provides capability { name-space == a; name == b;} {}
	
	// selecting a builder that provides a capability of a particular version
	builder-context provides capability { name-space == a; name == c;  version ~= 2.0.0.someQualifier;} {}
	
	// selecting a builder with any name
	builder-context builder {name ~=_;} {}
	
	builder-context builder { name == "a.builder.with.a.qualified.type";} {}
	builder-context input { unit builder == foo; } {}
	
	// builders that have a unit with a name matching a regexp, calling builders matching a regexp.
	builder-context  input { unit { name ~= ~/my\.unit\..*/; } builder ~= ~/make.*/; }{}
	
	// regexp for ns and name capability reference
	builder-context  input { capability { 
		name-space ~= ~/osgi\..*/; name ~= ~/my\.unit\..*/; version ~= 1.0.0; } builder ~= ~/make.*/; }{}
}
concern TestingNestedBuilderContextSyntax {
	unit-context unit { name ~= _; } { 
		/* what to do to units (in this case all untis as name ~= _ */
		builder-context input { builder == foo; } { /* what to do with builders named foo */ }
		builder-context input { builder == bar; } { /* what to do with builders named bar */ }
		
		/** 
		* Adding a builder called "fee" to the matched units.
		*/
		builder fee {
			input : [ unit.somebuilder() ];
			output : [ basePath [somePath/foo, anotherPath/bar] ];		
		}
	}
}

concern TestingBuilderContextBody {
	builder-context builder { name ~= _;} {
		// adds a dependency to a/b/1.0.0 and calls its foo builder with arguments
		+ input when ($this.property.is.set) 
			capability { name-space : a; name :"b"; version : 1.0.0; }.foo("hello", "goodbye") ;

		// removes the builder's input of a/b calling builder named c
		- input { capability { name-space == a; name == b; } builder == c; };
		
		// removes all calls to a builder called x in any of the builder's inputs
		- input { capability {name-space ~= _; name ~= _; } builder == x; };		
		- source a/b ;
		+ source x/y [a,b,c] ;
		- annotations source $a.b, $a.c;
		+ annotations source { $a = 1; $b = 2; }
		
		+ output "http://somewhere.com/a/base%20Path" [ subpathA, subpathB/c];
		- output ~/\/a\/b.*/;
		- output /a/basePath [subpathX];
		
		- annotations output $a.b, $a.c;
		+ annotations output { $a = 1; $b = 2; }
	}
}
concern TestingUnitContextBody {
	unit-context unit { name ~= _; } {
		+ requires : capability { name-space : foo;  name : "bar"; version : 1.0.0; };
		+ requires : capability { name-space : a;  name : "b"; }; // NO {} 
		+ requires : capability { 
			name-space : something; 
			name : "green" ;
			version : [1.0.0,2.0.0]; 
			when : $a.b.c == "green";
			} as greenStuff ; 
		- requires capability { name-space ~= _; name == "mipspelled"; };
		
		// can find the "greenStuff" declared above
		builder buildGreen { input : [ greenStuff.files() ]; }
	}
}
	repository cvs TestRepo {
			connection : "http://abc.org" ; 
			local : "file://aLocalURL/"; 
			user : "hello";
			password : "hush-hush";
		}

// Define a unit
unit aTestUnit version 1.0.0 {
	provides : [ 
		capability { name-space: food.nutrion.vitamin; name : "B6"; },
		capability { name-space: food.nutrion.vitamin; name : "C"; },
		capability { name-space: food.nutrion.minarl; name : "pottassium"; } 
		];
		
	source : "resource:/a.b.c/src/";
	output : "output:/a.b.c/";
	
	repository cvs TestRepo {
			connection : "http://abc.org" ; 
			local : "file://aLocalURL/"; 
			user : "hello";
			password : "hush-hush";
		}

	resolution : [
		select-switch request.^name 
			case "a" : 	repository TestRepo { path : "foo"; }
			case _ : 	repository TestRepo
			endswitch
	];
	
	builder peel {
		output : [ bananapeel.txt ];
	}
	builder seeds {
		output : [ bananaseeds.txt ] ;
	}
	builder pulp {
		output : [ bananapulp.txt ] ;	
	}
	
}
