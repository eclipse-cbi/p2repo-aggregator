/*
* Test syntax of build unit and related concerns.
* 
*/
import java.util.List; // cheat, need a type, don't have the actual types yet...
import java.util.Map; // - " - 
import org.eclipse.b3.beelang.tests.repo.TestRepo;

function main(List argv) {
	testBuildUnitSyntax();
}
function testBuildUnitSyntax {
	true; // test is ok if this file can be parsed without errors
}

/**
* Test the mix of statements (function, unit and builder contexts).
*/
concern TestingBuildUnitConcernSyntaxSimple {
	// define functions intermixed with other things
	function foo() : "foo"; 
	
	// implements with type reference
	unit-context {
		select-units : implements == List ;
		modify-selected :
		 { /* what to do with units that implements List*/ };
	}
	
	function bar() : "bar";
	
	// all builders having an exact name.
	builder-context {
		select-builders : builder ~= { name == someBuilder;};
		modify-selected : { 
			/* what to do with builder called 'someBuilder' */ 
		};
	}
	
	function fee() : "fee"; // 
}
/**
* Test all options regarding selection of units
*/ 
concern TestingUnitContextSyntax {
	
	//--requires
	// ns, name (no version)
	unit-context {
		select-units : requires ~= capability { name-space == a.b ; name == c.d;};
		modify-selected : {
		/* what to do with units that requires the capability */ 
		};
	}

	// any ns, any name
	unit-context {
		select-units: requires ~= capability { name-space ~= _; name ~= _; }; 
		modify-selected: { };
	}
	
	// regexp namespace and name (check for osgi.*, and org.myorg.*
	unit-context { 
		select-units: requires ~= capability { 
			name-space ~= ~/osgi\..*/; 
			name ~= ~/org\.myorg\..*/; 
			version ~= 1.0.0; 
		};
		modify-selected : { };
		}
	
	// ns, name, version range in short form
	unit-context {
		select-units: requires ~= capability { name-space == a.b; name == c.d; version ~= 1.0.0; };
	 	modify-selected : { }; 
	 }

	// ns, name, version range in full form
	unit-context { 
		select-units: requires ~= capability { name-space == a.b; name == c.d; version ~= [1.0.0, 2.0.0]; }; 
		modify-selected: { }; 
	}
	
	//--provides
	unit-context {
		select-units : provides ~= capability { name-space == a.b; name == c.d; version ~= 1.0.0.qualifier; };
		modify-selected : { };
	}
	
	//--unit name
	unit-context { select-units : unit ~= { name ~= _; }; modify-selected:{ };}
	unit-context { select-units : unit ~= { name ~= _; version ~= 1.0.0;}; modify-selected : { }; }
	unit-context { select-units : unit ~= { name ~= ~/org\.myorg\..*/;}; modify-selected: { };}
	unit-context { select-units : unit ~= { name == "my unit with exactly this funny name & stuff";}; modify-selected: { }; }
	
	// logical expressions selecting the unit
	unit-context { 
	select-units: 
			unit ~= { name ~= _; } 
		&& 	implements == List 
		&& 	implements == Map 
		&& 	requires ~= capability { name-space == a; name == b; version ~= [0.0.0, 9.9.9]; }
		|| 	! unit ~= { name ~= ~/org\.myorg\.fixed/; };
	modify-selected: { }; 
	}
}
concern TestingBuilderContextSyntax {
	// addresses builder using any input in same unit
	builder-context { select-builders: input ~= { called-builder ~= _; }; modify-selected : {}; }
	
	// same as above, but explicit 'unit'
	builder-context { select-builders: input ~= { unit called-builder ~= _; }; modify-selected : {}; }
	
	// addresses builder with a complex name in same unit
	builder-context { select-builders: input ~= { unit called-builder == a.builder.called.wanda; }; modify-selected : {}; }

	// selecting a builder that provides a capability	
	builder-context { select-builders: provides ~= capability { name-space == a; name == b;}; modify-selected : {}; }
	
	// selecting a builder that provides a capability of a particular version
	builder-context { select-builders: provides ~= capability { name-space == a; name == c;  version ~= 2.0.0.someQualifier;}; modify-selected : {};}
	
	// selecting a builder with any name
	builder-context { select-builders: builder ~= { name ~= _; }; modify-selected : {}; }
	
	builder-context { select-builders: builder ~= { name == "a.builder.with.a.qualified.type"; }; modify-selected : {}; }
	builder-context { select-builders: input ~= { unit called-builder == foo; }; modify-selected: {}; }
	
	// builders that have a unit with a name matching a regexp, calling builders matching a regexp.
	builder-context { select-builders: input ~= { unit ~= { name ~= ~/my\.unit\..*/; } called-builder ~= ~/make.*/; }; modify-selected: {};}
	
	// regexp for ns and name capability reference
	builder-context { 
		select-builders: input ~= { capability { 
			name-space ~= ~/osgi\..*/; name ~= ~/my\.unit\..*/; version ~= 1.0.0; } called-builder ~= ~/make.*/; }; 
		modify-selected:{}; }
}
concern TestingNestedBuilderContextSyntax {
	unit-context {
		select-units :  unit ~= { name ~= _; };
	 	modify-selected: { 
			/* what to do to units (in this case all untis as name ~= _ */
			builder-context { 
				select-builders: input ~= { called-builder == foo; }; 
				modify-selected: { /* what to do with builders named foo */ }; 
			}
			builder-context { 
				select-builders: input ~= { called-builder == bar; }; 
				modify-selected: { /* what to do with builders named bar */ };
			}
			/** 
			* Adding a builder called "fee" to the matched units.
			*/
			builder fee {
				input : [ unit.somebuilder() ];
				output : [ basePath [somePath/foo, anotherPath/bar] ];		
			}
		};
	}
}

concern TestingBuilderContextBody {
	builder-context {
		select-builders: builder ~= { name ~= _;};
		modify-selected: {
			input : {
				// adds a dependency to a/b/1.0.0 and calls its foo builder with arguments
				+ when (${this.property.is.set}) 
					capability { 
						name-space : a; 
						name :"b"; 
						version : 1.0.0; }.foo("hello", "goodbye") ;
		
				// removes the builder's input of a/b calling builder named c
				- input ~= { capability { name-space == a; name == b; } called-builder == c; };
				
				// removes all calls to a builder called x in any of the builder's inputs
				- input ~= { capability {name-space ~= _; name ~= _; } called-builder == x; };		
			};
			source : {
				- source ~= a/b ;
				+ x/y [a,b,c] ;
				- annotations  ~= [${a.b}, ${a.c}]; // TODO
				+ annotations  : { ${a} = 1; ${b} = 2; } // TODO
			};
			output : {
				+ "http://somewhere.com/a/base%20Path" [ subpathA, subpathB/c];
				- output ~= ~/\/a\/b.*/;
				- output ~= /a/basePath [subpathX];	
				- annotations ~= [${a.b}, ${a.c}]; // TODO
				+ annotations : { ${a} = 1; ${b} = 2; } // TODO
			}; 
		};
	}
}
concern TestingUnitContextBody {
	unit-context { 
		select-units: unit ~={ name ~= _; }; 
		modify-selected: {
			// TODO - group these rather than having them as :
			requires : {
			+ capability { name-space : foo;  name : "bar"; version : 1.0.0; };
			+ capability { name-space : a;  name : "b"; }; // NO {} 
			+ capability { 
				name-space : something; 
				name : "green" ;
				version : [1.0.0,2.0.0]; 
				when : ${a.b.c} == "green";
				} as greenStuff ; 
			- requires ~= capability { name-space ~= _; name == "mipspelled"; };
			};
			// can find the "greenStuff" declared above
			builder buildGreen { input : [ greenStuff.files() ]; }
		};
	}
}
	repository cvs TestRepo {
			connection : "http://abc.org" ; 
			local : "file://aLocalURL/"; 
			user : "hello";
			password : "hush-hush";
		}

// Define a unit
unit aTestUnit version 1.0.0 {
	provides : [ 
		capability { name-space: food.nutrion.vitamin; name : "B6"; },
		capability { name-space: food.nutrion.vitamin; name : "C"; },
		capability { name-space: food.nutrion.minarl; name : "pottassium"; } 
		];
		
	source : "resource:/a.b.c/src/";
	output : "output:/a.b.c/";
	
	repository cvs TestRepo {
			connection : "http://abc.org" ; 
			local : "file://aLocalURL/"; 
			user : "hello";
			password : "hush-hush";
			branches : [ branch main { exclude : [ "1_Complex.Name" ]; update-policy : fail_modified; }];
		}

	resolution : [
		select-switch request.name 
			case "a" : 	repository TestRepo { path : "foo"; }
			case _ : 	repository TestRepo
			endswitch
	];
	
	builder peel {
		output : [ bananapeel.txt ];
		result: output;
	}
	builder seeds {
		output : [ bananaseeds.txt ] ;
	}
	builder pulp {
		// test that groups in the input are available as variables in "result" 
		// why does 
		input : [ capability {name : "bar.a"; }.bar() as theBars, capability { name : "foo"; }.foo() as theFoos];
		output : [ bananapulp.txt ] ;
		result : theFoos.merge(theBars);
	}
}
unit testUnit2 {
	builder foo {
		input : [ capability {name : "bar.a"; }.bar() as aaaBBB, capability { name : "foo"; }.foo() as aaaCCC];
	
	}
}
