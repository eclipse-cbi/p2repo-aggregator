/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.b3.aggregator.p2.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.b3.aggregator.p2.util.P2AdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemColorProvider;
import org.eclipse.emf.edit.provider.IItemFontProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The adapters generated by this
 * factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The adapters
 * also support Eclipse property sheets. Note that most of the adapters are shared among multiple instances. <!--
 * begin-user-doc --> <!-- end-user-doc -->
 * 
 * @generated
 */
public class P2ItemProviderAdapterFactory extends P2AdapterFactory implements ComposeableAdapterFactory,
		IChangeNotifier, IDisposable
{
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.b3.aggregator.p2.ArtifactKey} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	protected ArtifactKeyItemProvider artifactKeyItemProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.b3.aggregator.p2.Copyright} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	protected CopyrightItemProvider copyrightItemProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.b3.aggregator.p2.MetadataRepository} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	protected MetadataRepositoryItemProvider metadataRepositoryItemProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.b3.aggregator.p2.InstallableUnit} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	protected InstallableUnitItemProvider installableUnitItemProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.b3.aggregator.p2.InstallableUnitFragment} instances.
	 * <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * @generated
	 */
	protected InstallableUnitFragmentItemProvider installableUnitFragmentItemProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.b3.aggregator.p2.License} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	protected LicenseItemProvider licenseItemProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.b3.aggregator.p2.ProvidedCapability} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	protected ProvidedCapabilityItemProvider providedCapabilityItemProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.b3.aggregator.p2.RequiredCapability} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	protected RequiredCapabilityItemProvider requiredCapabilityItemProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.b3.aggregator.p2.TouchpointData} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	protected TouchpointDataItemProvider touchpointDataItemProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.b3.aggregator.p2.TouchpointInstruction} instances.
	 * <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * @generated
	 */
	protected TouchpointInstructionItemProvider touchpointInstructionItemProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.b3.aggregator.p2.TouchpointType} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	protected TouchpointTypeItemProvider touchpointTypeItemProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.b3.aggregator.p2.UpdateDescriptor} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	protected UpdateDescriptorItemProvider updateDescriptorItemProvider;

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyItemProvider propertyItemProvider;

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstructionMapItemProvider instructionMapItemProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.b3.aggregator.p2.RepositoryReference} instances.
	 * <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * @generated
	 */
	protected RepositoryReferenceItemProvider repositoryReferenceItemProvider;

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	public P2ItemProviderAdapterFactory()
	{
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
		supportedTypes.add(IItemColorProvider.class);
		supportedTypes.add(IItemFontProvider.class);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type)
	{
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type)
	{
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener)
	{
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This creates an adapter for a {@link org.eclipse.b3.aggregator.p2.ArtifactKey}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArtifactKeyAdapter()
	{
		if (artifactKeyItemProvider == null) {
			artifactKeyItemProvider = new ArtifactKeyItemProvider(this);
		}

		return artifactKeyItemProvider;
	}

	/**
	 * This creates an adapter for a {@link org.eclipse.b3.aggregator.p2.Copyright}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCopyrightAdapter()
	{
		if (copyrightItemProvider == null) {
			copyrightItemProvider = new CopyrightItemProvider(this);
		}

		return copyrightItemProvider;
	}

	/**
	 * This creates an adapter for a {@link org.eclipse.b3.aggregator.p2.InstallableUnit}.
	 * <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstallableUnitAdapter()
	{
		if (installableUnitItemProvider == null) {
			installableUnitItemProvider = new InstallableUnitItemProvider(this);
		}

		return installableUnitItemProvider;
	}

	/**
	 * This creates an adapter for a {@link org.eclipse.b3.aggregator.p2.InstallableUnitFragment}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createInstallableUnitFragmentAdapter()
	{
		if (installableUnitFragmentItemProvider == null) {
			installableUnitFragmentItemProvider = new InstallableUnitFragmentItemProvider(this);
		}

		return installableUnitFragmentItemProvider;
	}

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstructionMapAdapter()
	{
		if (instructionMapItemProvider == null) {
			instructionMapItemProvider = new InstructionMapItemProvider(this);
		}

		return instructionMapItemProvider;
	}

	/**
	 * This creates an adapter for a {@link org.eclipse.b3.aggregator.p2.License}.
	 * <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLicenseAdapter()
	{
		if (licenseItemProvider == null) {
			licenseItemProvider = new LicenseItemProvider(this);
		}

		return licenseItemProvider;
	}

	/**
	 * This creates an adapter for a {@link org.eclipse.b3.aggregator.p2.MetadataRepository}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createMetadataRepositoryAdapter()
	{
		if (metadataRepositoryItemProvider == null) {
			metadataRepositoryItemProvider = new MetadataRepositoryItemProvider(this);
		}

		return metadataRepositoryItemProvider;
	}

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAdapter()
	{
		if (propertyItemProvider == null) {
			propertyItemProvider = new PropertyItemProvider(this);
		}

		return propertyItemProvider;
	}

	/**
	 * This creates an adapter for a {@link org.eclipse.b3.aggregator.p2.ProvidedCapability}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createProvidedCapabilityAdapter()
	{
		if (providedCapabilityItemProvider == null) {
			providedCapabilityItemProvider = new ProvidedCapabilityItemProvider(this);
		}

		return providedCapabilityItemProvider;
	}

	/**
	 * This creates an adapter for a {@link org.eclipse.b3.aggregator.p2.RepositoryReference}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createRepositoryReferenceAdapter()
	{
		if (repositoryReferenceItemProvider == null) {
			repositoryReferenceItemProvider = new RepositoryReferenceItemProvider(this);
		}

		return repositoryReferenceItemProvider;
	}

	/**
	 * This creates an adapter for a {@link org.eclipse.b3.aggregator.p2.RequiredCapability}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createRequiredCapabilityAdapter()
	{
		if (requiredCapabilityItemProvider == null) {
			requiredCapabilityItemProvider = new RequiredCapabilityItemProvider(this);
		}

		return requiredCapabilityItemProvider;
	}

	/**
	 * This creates an adapter for a {@link org.eclipse.b3.aggregator.p2.TouchpointData}.
	 * <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTouchpointDataAdapter()
	{
		if (touchpointDataItemProvider == null) {
			touchpointDataItemProvider = new TouchpointDataItemProvider(this);
		}

		return touchpointDataItemProvider;
	}

	/**
	 * This creates an adapter for a {@link org.eclipse.b3.aggregator.p2.TouchpointInstruction}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createTouchpointInstructionAdapter()
	{
		if (touchpointInstructionItemProvider == null) {
			touchpointInstructionItemProvider = new TouchpointInstructionItemProvider(this);
		}

		return touchpointInstructionItemProvider;
	}

	/**
	 * This creates an adapter for a {@link org.eclipse.b3.aggregator.p2.TouchpointType}.
	 * <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTouchpointTypeAdapter()
	{
		if (touchpointTypeItemProvider == null) {
			touchpointTypeItemProvider = new TouchpointTypeItemProvider(this);
		}

		return touchpointTypeItemProvider;
	}

	/**
	 * This creates an adapter for a {@link org.eclipse.b3.aggregator.p2.UpdateDescriptor}.
	 * <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUpdateDescriptorAdapter()
	{
		if (updateDescriptorItemProvider == null) {
			updateDescriptorItemProvider = new UpdateDescriptorItemProvider(this);
		}

		return updateDescriptorItemProvider;
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose()
	{
		if (artifactKeyItemProvider != null) artifactKeyItemProvider.dispose();
		if (copyrightItemProvider != null) copyrightItemProvider.dispose();
		if (metadataRepositoryItemProvider != null) metadataRepositoryItemProvider.dispose();
		if (installableUnitItemProvider != null) installableUnitItemProvider.dispose();
		if (installableUnitFragmentItemProvider != null) installableUnitFragmentItemProvider.dispose();
		if (licenseItemProvider != null) licenseItemProvider.dispose();
		if (providedCapabilityItemProvider != null) providedCapabilityItemProvider.dispose();
		if (requiredCapabilityItemProvider != null) requiredCapabilityItemProvider.dispose();
		if (touchpointDataItemProvider != null) touchpointDataItemProvider.dispose();
		if (touchpointInstructionItemProvider != null) touchpointInstructionItemProvider.dispose();
		if (touchpointTypeItemProvider != null) touchpointTypeItemProvider.dispose();
		if (updateDescriptorItemProvider != null) updateDescriptorItemProvider.dispose();
		if (propertyItemProvider != null) propertyItemProvider.dispose();
		if (instructionMapItemProvider != null) instructionMapItemProvider.dispose();
		if (repositoryReferenceItemProvider != null) repositoryReferenceItemProvider.dispose();
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification)
	{
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory()
	{
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type)
	{
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener)
	{
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
	{
		this.parentAdapterFactory = parentAdapterFactory;
	}

}
