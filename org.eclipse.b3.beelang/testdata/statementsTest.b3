
unit statementsTest {

	emptyStuff {
		1+1; // statement with no side effect - should be caught by validation
		; // empty statement - also has no side effect - validate as warning if no comment before ; ?
		// {} // empty compound statement = syntax error - is an uninitialized literal object
		{;} // is an empty compound statement - should be caught/warning if no comment? by validation
	}
	varTest {
		var a=10;
	}
	whileTest {
		var a = 0;
		while(a < 100) 
			a += 10;
		while(a >= 100 && !b)
			{ a = Thing.doSomething(); }

	}
	doWhileTest {
		var a = 0;
		do {a += 10; } while(a <= 100);

	}
	forTest {			
		for(var i = 1; i < 100; i++)
			i++;

		var a = 0;	
		for(var j = 0; j < 10; j++)
			for(var i = 0; i < 100; i++)
				a += aMatrix[j][i];
			
		// same loop but using expression lists
		var a = 0;	
		for(var i = 0, var j = 0; i < 100 && j < 10; j += i == 99 ? 1 : 0, i += i == 99 ? -99 : 1 )
			a += aMatrix[j][i];

		for(;;)
			{
			break;
			}
		for(;;)
			{
			continue;
			}
		for(; a < 10;)
			; 
			
		// For/In loops
		for(var a in ba.bar())
			;
		for(a in wunder.bar())
			;
			
		// using labels to break out of multiple loops
		outerloop:
		for(;;)
			for(;;)
				break outerloop;
				
		secondloop:
		for(;;)
			for(;;)
				continue secondloop;
		
	}
	switchTest {
		var a = 10;
		
		// empty variants
		switch(a) { case 1: }
		
		switch(a) {
			case 1:
			case 2:
			case 3:
			default:
		}
		switch(a) {
			case 1: break;
			case 2:
			case 3: break;
			default:
		}
		switch(a) {
			case 1: {break;} a = 10;
			case 2: /* empty */;
			case 3: break;
			default: /* empty */;
		}

		switch(a) {
			case 1: for(var i = 0; i < 10;i++)
						a++;
					break;
			case 2:
			case 3:
			default:
		}
		switch(a) {
			case "roy": ownsAGasStation = true; break;
			case 1: var gibberish = true; break;
			default: gibberish = ownsAGasStation = false; break;
		}
	}
	functionTest {
		// function statement - nested
		function hypothenuse(a, b) {
			function square(x) { return x * x; }
				return Math.sqrt(square(a) + square(b));
			}
			
		// function expression/literal
		var callback = function(data) { return data == "error" ? false : true; };
		Something.doitAndCallMe(callback);
	}
	ifThenElseTest {
	
		if(a==1) 
			$b = 1; 
		else if($c == 2) 
			$d = 2; 
		else 
			$e = 3; 

		if(a==1){ 
			$b = 1; 
			if($c == 2) 
				$d = 2;
			}  
		else 
			$e = 3; 
	}
	tryCatchTest {
		try {
			riskyBusiness();
		} catch(error) {
			ooops();
		} finally {
			cleanup();
		}

		try {
			riskyBusiness();
		} catch(error) {
			ooops();
		}

		try {
			riskyBusiness();
		} finally {
			cleanUp();
		}
	}
	withTest {
		with(anObject) { x = 10; y = 30; }
	}

}