
unit actionSamples {
	// equivalent to a input part
	a {
		input { a/b/1.0;}
	}

	// equivalent to a input part
	a {
		input { a/b/1.0;}
		return input;
	}
	// equivalent to an artifacts part
	b {
		output { root [bin/apa.exe, bin/bepa.exe];}
		return output;
	}
	// return only a part of the input
	c {
		input { a/b/1.0; partsToReturn = {a/b/2.0; a/c/3.0;};}
		return partsToReturn;
	}
	// return a new path input set based on combination of verbatim result
	// with processing of another part.
	//
	d {
		input { useAsIs = a/b/1.0; partsToProcess = {a/b/2.0; a/c/3.0;};}
		return useAsIs + MyProcessor.doSomething(partsToProcess);
	}
	
	// Filtering the input
	e {
		input{ a/b/1.0;}
		return Paths.exclude(input,~/org\.myorg\..*/g);
	}
	// Filtering the input's definition
	e {
		input{ 
			when(thePopeHasAFunnyHat) a/b/1.0;
			when(dollySleepsOnHerTummy) {
				a/c/2; a/c3;
				a/d/2; a/d3;
				};
			}
		return Paths.exclude(input,~/org\.myorg\..*/g);
	}
	// Filtering the input's definition
	e {
		output{ 
			when(thePopeHasAFunnyHat) a;
			when(thePopeHasAFunnyHat) b;
			
			when(dollySleepsOnHerTummy) {
				a;
				b;
				}
			}
		return Paths.exclude(input,~/org\.myorg\..*/g);
	}
	// Call external builder
	f {
		input{ a/b/1.0;}
		output { bin [ a, b, c ]; }
		
		return CompileActor(input, output);
	}
	// Call external builder
	g {
		input{ a/b/1.0;}
		output { bin [ a, b, c ]; }
		var strategy = "normal";
		switch(input[$optimized.files]) // get annotation property
			{
			case "O5": break;
			case "O4": {strategy = "-O4"; break;}
			default: strategy = "-O2";
			}
			
		return CompileActor(input, output, strategy);
	}
	// Call external builder
	f {
		advice { a:*[apa==true]:c = 10; }
		input{ a/b/1.0;}
		output { bin [ a, b, c ]; }
		
		return CompileActor(input, output);
	}

}