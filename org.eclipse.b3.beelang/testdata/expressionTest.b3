
unit expressionTest {

	properties arithmetic {
		// INT
		$a = 3 + 2;
		$a = 3 - 2;
		$a = 3 * 2;
		$a = 3 / 2;
		
		$expr = 1 + 2 + 3 + 3 + 4 + 5;
		
		// HEX
		$x = 0x34 + 0x0aA;
		$x = 0x34 - 0x0aA;
		$x = 0x34 * 0x0aA;
		$x = 0x34 / 0x0aA;

		// $a = 0x; // uncomment to test syntax error
		
		// REAL
		$r = 1.0;
		$r = .0;
		$r = 1.;
		
		$d = 2.0e+10 + 1e+10;
		$d = 2.0e+10 - 1E+10;
		$d = 2.0e+10 * 1e-10;
		$d = 2.0e+10 / 1E-10;

		// STRING
		$a = "sing" + "sing";
		$a = "bora" - "bora";
		$a = "tora" * "tora";
		$a = "beri" / "beri";
		
		// UNARY -
		$a = -10;
		$a = -$b;
		
		// ( ) 
		$a = ($a);
		$a = -($a);
		$a = -(10);
		$a = (1+2);
		$a = (1+2)*10;
		$a = 10*(1+2);
		}
	properties assignment {
		$a = 1;
		$a += 1;
		$a -= 1;
		$a *= 1;
		$a /= 1;
		$a %= 1;
		
		// bitwise
		$a ^= 1;
		$a &= 1;
		$a |= 1;
		$a >>= 1;
		$a <<= 1;
		$a >>>= 1;
		
		$b = ++$a;
		$b = $a++;
		
		// chained assignment - right associative
		$chained1 = ($a = ($b = ($c = "properties set as equals")));
		$chained2 = a = b = c = "properties set as equals";
		$chained = ($b += 2);
		$chained = ($c = $d);// = 5);
	}
	properties boolean {
		$a = true;
		$a = false;
		$a = true && false;
		$a = true || false;
		$a = true && false || true || false;
		$a = !true;
		$a = !$b;
		$a = !($b || $c);
		$a = "~/pattern/g";
		}
		
	properties relational {
		$a = 1 == 1;
		$a = 1 != 2;
		$a = 1 < 2;
		$a = 2 > 1;
		$a = 1 <= 2;
		$a = 2 >= 1;
		$a = "pattern" ~= ~/pattern/g;

		// identity checks
		$a = $a === true;
		$a = $a !== true;
		
		// type checks
		$a = typeof $a;
		$b = $a instanceof $a;
		
		$a = $a["z"] !== undefined;
		}
	properties setOperations {
		// existence check
		// $a = "z" in $a; // standard JS 1.6 - not supported, use general query instead
		$a = $a select query{name}; // results in an empty set if $a does not have "name" feature
		// best expressed as
		$a = $a exists query{name}; // result is boolean if $a does not have "name" feature
		$a = $a notexists query{name}; // result is boolean if $a has something that is not "name"
		
		$a = $a select query {name} > Set.EMPTY_SET;
		$a = $a select query {name} == Set.EMPTY_SET;
		
		// This even works for regexp		
		$a = $a select query {**:~/^debug.*/g} > Set.EMPTY_SET;  // query for features with name starting with "debug"
		
		// check if a has a property that is called 'creatNNN' [sic] where NNN is a sequence of 
		// digits, and if so, if that property has a property status set to true, if so, return 
		// the set consisting of all ancestors of this node's parent - then invoke a function that prints each.
    	$a = $a select query{ ~/^creat[0-9]+/g[status==true]:..:**} foreach function(x){ print(x); };
		
		$a = $a reject query{clue} foreach function(x) { print(x + "does not have a 'clue'"); };

		// $a is set to the gross IQ of all clueles 
		$a = $a reject query{clue} foreach function(x,y) { return y + x.iq; }; 
		$a = $a reject function(x){ return x.clue != "bertil"; } foreach function(x,y) { return y + x.iq; }; 
	}
	properties bitwise {
		$a = 0xff | 0x1;
		$a = 0xff & 0x1;
		$a = 0xff ^ 0x1;
		
		$a = $a >> 1;
		
		$a += 1;
		$a = $a <<= 1;
		$a <<= 1;
		$a >>= 2;
		$a >>>= 2;
		
	}
	properties conditional {
		$a = true ? 10 : 20;
		$a = true ? false?1:2 : 20;
		
		// ternary conditional is right associative
		$a = a?b:c?d:e?f:g;
		$a = a?b:(c?d:(e?f:g));
		
		}
	properties feature_access {
		$a = a.b;
		$a = ($a).b;
		$a = $a["b"];
	}		
	properties calling {
		$a = GloballyAvailableFunction();
		$a = $propertyReferingToFunction();
		$a = localVariableReferingToFunction();
		$a = obj.method();
		$a = ($obj).method();
		$a = a.b.c();
		$a = (a.b()).c();
		$a = a["expression"];
		$a = a["expression"](a,b,c);
		$a = a["expression"].foo(a,b,c);
		$a = func()();
		$a = (func())();
		}
	properties creating {
		$a = new Foo();
		$a = new Boo(1,2,3);
	}
	properties miscExpressions {
		$a = $a == null;
		$a = $a == undefined;
		$a = $a === undefined;
	}
	properties arrays {
		$a = [1,2,3,4];
		$a = [ 1+2, "hello", [], ["a", "b", "c" ], $a["hello"], 
			function(data) { return data == "error" ? false : true; }];
	}
	properties objects {
		$a = {name: "Fred", occupation: "Build Engineer", livesAt: {long:"1234567", lat:"98765" } };
	}
	
}