/*
* generated by Xtext
*/
package org.eclipse.b3.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.b3.services.BeeLangGrammarAccess;

import com.google.inject.Inject;

public class BeeLangParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private BeeLangGrammarAccess grammarAccess;
		
	public BeeLangGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BeeModel_Group(this, this, 0, inst);
			case 1: return new Import_Group(this, this, 1, inst);
			case 2: return new JavaImporter_NameAssignment(this, this, 2, inst);
			case 3: return new NativeImporter_UriStringAssignment(this, this, 3, inst);
			case 4: return new Unit_Group(this, this, 4, inst);
			case 5: return new ProvidedCapability_Group(this, this, 5, inst);
			case 6: return new RequiredCapability_Group(this, this, 6, inst);
			case 7: return new FilteredCapability_Group(this, this, 7, inst);
			case 8: return new Capability_Group(this, this, 8, inst);
			case 9: return new NamedPropertySet_Group(this, this, 9, inst);
			case 10: return new PropertySet_Group(this, this, 10, inst);
			case 11: return new PropertyOperation_Alternatives(this, this, 11, inst);
			case 12: return new FilteredPropertyOperation_Group(this, this, 12, inst);
			case 13: return new SetPropertyOperation_Group(this, this, 13, inst);
			case 14: return new UnsetPropertyOperation_Group(this, this, 14, inst);
			case 15: return new Synchronization_Group(this, this, 15, inst);
			case 16: return new PathGroup_Group(this, this, 16, inst);
			case 17: return new PathVectorElement_Alternatives(this, this, 17, inst);
			case 18: return new FilteredPathVector_Group(this, this, 18, inst);
			case 19: return new BasePathVector_Group(this, this, 19, inst);
			case 20: return new UnbasedPathVector_Group(this, this, 20, inst);
			case 21: return new CompoundPathVector_Group(this, this, 21, inst);
			case 22: return new Prerequisite_Group(this, this, 22, inst);
			case 23: return new WithClause_Group(this, this, 23, inst);
			case 24: return new PrerequisiteEntry_Alternatives(this, this, 24, inst);
			case 25: return new DirectPartReferemce_Group(this, this, 25, inst);
			case 26: return new CapabilityReferencedPart_Group(this, this, 26, inst);
			case 27: return new CompoundReferences_Group(this, this, 27, inst);
			case 28: return new Builder_Group(this, this, 28, inst);
			case 29: return new Parameter_Group(this, this, 29, inst);
			case 30: return new ParameterList_Alternatives(this, this, 30, inst);
			case 31: return new ParameterDeclarationList_Alternatives(this, this, 31, inst);
			case 32: return new ParameterDeclaration_Group(this, this, 32, inst);
			case 33: return new ParameterDeclarationEllipse_Group(this, this, 33, inst);
			case 34: return new BuilderOutput_Group(this, this, 34, inst);
			case 35: return new BuilderInput_Group(this, this, 35, inst);
			case 36: return new RepositoryConfiguration_Alternatives(this, this, 36, inst);
			case 37: return new RepositoryDeclaration_Group(this, this, 37, inst);
			case 38: return new ResolutionStrategy_Group(this, this, 38, inst);
			case 39: return new ContainerConfiguration_Group(this, this, 39, inst);
			case 40: return new Concern_Group(this, this, 40, inst);
			case 41: return new ConcernBlock_Group(this, this, 41, inst);
			case 42: return new Query_Group(this, this, 42, inst);
			case 43: return new QueryPath_Group(this, this, 43, inst);
			case 44: return new Selector_Group(this, this, 44, inst);
			case 45: return new Filter_Group(this, this, 45, inst);
			case 46: return new PreCondition_Group(this, this, 46, inst);
			case 47: return new PostCondition_Group(this, this, 47, inst);
			case 48: return new AssertionExpression_Group(this, this, 48, inst);
			case 49: return new ExpressionList_Group(this, this, 49, inst);
			case 50: return new Function_Group(this, this, 50, inst);
			case 51: return new Method_Group(this, this, 51, inst);
			case 52: return new FunctionOrMethod_Group(this, this, 52, inst);
			case 53: return new TypeParamDeclaration_Group(this, this, 53, inst);
			case 54: return new Expression_Alternatives(this, this, 54, inst);
			case 55: return new ReturnExpression_Group(this, this, 55, inst);
			case 56: return new AssignmentExpression_Group(this, this, 56, inst);
			case 57: return new VarDeclaration_Group(this, this, 57, inst);
			case 58: return new TypeRef_Alternatives(this, this, 58, inst);
			case 59: return new SimpleTypeRef_Group(this, this, 59, inst);
			case 60: return new ClosureTypeRef_Group(this, this, 60, inst);
			case 61: return new RuleTypeParam_Alternatives(this, this, 61, inst);
			case 62: return new RuleTypeRefParam_TypeRefParserRuleCall(this, this, 62, inst);
			case 63: return new WildcardRefParam_Group(this, this, 63, inst);
			case 64: return new OrExpression_Group(this, this, 64, inst);
			case 65: return new AndExpression_Group(this, this, 65, inst);
			case 66: return new BitwiseExpression_Group(this, this, 66, inst);
			case 67: return new RelationalExpression_Group(this, this, 67, inst);
			case 68: return new ShiftExpression_Group(this, this, 68, inst);
			case 69: return new AdditiveExpression_Group(this, this, 69, inst);
			case 70: return new MultiplicativeExpression_Group(this, this, 70, inst);
			case 71: return new SetExpression_Group(this, this, 71, inst);
			case 72: return new UnaryOrInfixExpression_Alternatives(this, this, 72, inst);
			case 73: return new UnaryExpression_Group(this, this, 73, inst);
			case 74: return new PostopExpression_Group(this, this, 74, inst);
			case 75: return new InfixExpression_Group(this, this, 75, inst);
			case 76: return new CallExpression_Group(this, this, 76, inst);
			case 77: return new PrimaryExpression_Alternatives(this, this, 77, inst);
			case 78: return new WithExpression_Alternatives(this, this, 78, inst);
			case 79: return new WithClauseExpression_Group(this, this, 79, inst);
			case 80: return new WithContextExpression_Group(this, this, 80, inst);
			case 81: return new WildcardExpression_Group(this, this, 81, inst);
			case 82: return new ThrowExpression_Group(this, this, 82, inst);
			case 83: return new TryCatchExpression_Group(this, this, 83, inst);
			case 84: return new CatchBlock_Group(this, this, 84, inst);
			case 85: return new FinallyBlock_Group(this, this, 85, inst);
			case 86: return new SwitchExpression_Group(this, this, 86, inst);
			case 87: return new Case_Group(this, this, 87, inst);
			case 88: return new BlockExpression_Group(this, this, 88, inst);
			case 89: return new IfExpression_Group(this, this, 89, inst);
			case 90: return new IfExpressionTail_Alternatives(this, this, 90, inst);
			case 91: return new ElseIfExpression_Group(this, this, 91, inst);
			case 92: return new ElseExpression_Group(this, this, 92, inst);
			case 93: return new PropertyValue_Group(this, this, 93, inst);
			case 94: return new VariableValue_Group(this, this, 94, inst);
			case 95: return new KeywordVariables_Group(this, this, 95, inst);
			case 96: return new FeatureCall_OperationCallParserRuleCall(this, this, 96, inst);
			case 97: return new OperationCall_Alternatives(this, this, 97, inst);
			case 98: return new ConstructorCallExpression_Group(this, this, 98, inst);
			case 99: return new Context_Group(this, this, 99, inst);
			case 100: return new ContextSelector_Alternatives(this, this, 100, inst);
			case 101: return new TypeRefSelector_TypeAssignment(this, this, 101, inst);
			case 102: return new ExpressionSelector_ExprAssignment(this, this, 102, inst);
			case 103: return new UnitSelector_Group(this, this, 103, inst);
			case 104: return new ContextBlock_Group(this, this, 104, inst);
			case 105: return new ExpressionStatement_Group(this, this, 105, inst);
			case 106: return new PropertiesStatement_Group(this, this, 106, inst);
			case 107: return new Literal_Alternatives(this, this, 107, inst);
			case 108: return new LiteralList_Alternatives(this, this, 108, inst);
			case 109: return new LiteralMap_Alternatives(this, this, 109, inst);
			case 110: return new LiteralFunction_Group(this, this, 110, inst);
			case 111: return new ClosureExpression_Group(this, this, 111, inst);
			case 112: return new Feature_Group(this, this, 112, inst);
			case 113: return new ValueLiteral_Alternatives(this, this, 113, inst);
			case 114: return new BooleanLiteral_Group(this, this, 114, inst);
			case 115: return new IntegerLiteral_Group(this, this, 115, inst);
			case 116: return new NullLiteral_Group(this, this, 116, inst);
			case 117: return new ThisLiteral_Group(this, this, 117, inst);
			case 118: return new SuperLiteral_Group(this, this, 118, inst);
			case 119: return new UnitLiteral_Group(this, this, 119, inst);
			case 120: return new StringLiteral_Group(this, this, 120, inst);
			case 121: return new RealLiteral_Group(this, this, 121, inst);
			case 122: return new RegexpLiteral_Group(this, this, 122, inst);
			case 123: return new QueryLiteral_Group(this, this, 123, inst);
			case 124: return new ParanthesizedExpression_Group(this, this, 124, inst);
			case 125: return new Version_VersionAssignment(this, this, 125, inst);
			case 126: return new VersionRange_RangeAssignment(this, this, 126, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule BeeModel ****************
 *
 * BeeModel hidden ( WS , SL_COMMENT , ML_COMMENT ):
 *   imports+=Import* (functions+=Function|concern+=Concern)* body=Unit?;
 *
 **/

// imports+=Import* (functions+=Function|concern+=Concern)* body=Unit?
protected class BeeModel_Group extends GroupToken {
	
	public BeeModel_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBeeModelAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BeeModel_BodyAssignment_2(parent, this, 0, inst);
			case 1: return new BeeModel_Alternatives_1(parent, this, 1, inst);
			case 2: return new BeeModel_ImportsAssignment_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBeeModelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// imports+=Import*
protected class BeeModel_ImportsAssignment_0 extends AssignmentToken  {
	
	public BeeModel_ImportsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBeeModelAccess().getImportsAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("imports",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("imports");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBeeModelAccess().getImportsImportParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BeeModel_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// (functions+=Function|concern+=Concern)*
protected class BeeModel_Alternatives_1 extends AlternativesToken {

	public BeeModel_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getBeeModelAccess().getAlternatives_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BeeModel_FunctionsAssignment_1_0(parent, this, 0, inst);
			case 1: return new BeeModel_ConcernAssignment_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// functions+=Function
protected class BeeModel_FunctionsAssignment_1_0 extends AssignmentToken  {
	
	public BeeModel_FunctionsAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBeeModelAccess().getFunctionsAssignment_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("functions",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("functions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFunctionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBeeModelAccess().getFunctionsFunctionParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BeeModel_Alternatives_1(parent, next, actIndex, consumed);
			case 1: return new BeeModel_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 2, consumed);
		}	
	}	
}

// concern+=Concern
protected class BeeModel_ConcernAssignment_1_1 extends AssignmentToken  {
	
	public BeeModel_ConcernAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBeeModelAccess().getConcernAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Concern_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("concern",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("concern");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConcernRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBeeModelAccess().getConcernConcernParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BeeModel_Alternatives_1(parent, next, actIndex, consumed);
			case 1: return new BeeModel_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 2, consumed);
		}	
	}	
}


// body=Unit?
protected class BeeModel_BodyAssignment_2 extends AssignmentToken  {
	
	public BeeModel_BodyAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBeeModelAccess().getBodyAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("body",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUnitRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBeeModelAccess().getBodyUnitParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BeeModel_Alternatives_1(parent, next, actIndex, consumed);
			case 1: return new BeeModel_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 2, consumed);
		}	
	}	
}


/************ end Rule BeeModel ****************/


/************ begin Rule Import ****************
 *
 * Import:
 *   reexport?="reexport"? "import" importer=( JavaImporter | NativeImporter ) ("as"
 *   nameSpace=ID)? ";";
 *
 **/

// reexport?="reexport"? "import" importer=( JavaImporter | NativeImporter ) ("as"
// nameSpace=ID)? ";"
protected class Import_Group extends GroupToken {
	
	public Import_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getImportAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_SemicolonKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// reexport?="reexport"?
protected class Import_ReexportAssignment_0 extends AssignmentToken  {
	
	public Import_ReexportAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getImportAccess().getReexportAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("reexport",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("reexport");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getImportAccess().getReexportReexportKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// "import"
protected class Import_ImportKeyword_1 extends KeywordToken  {
	
	public Import_ImportKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getImportAccess().getImportKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_ReexportAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// importer=( JavaImporter | NativeImporter )
protected class Import_ImporterAssignment_2 extends AssignmentToken  {
	
	public Import_ImporterAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getImportAccess().getImporterAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new JavaImporter_NameAssignment(this, this, 0, inst);
			case 1: return new NativeImporter_UriStringAssignment(this, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("importer",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("importer");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getJavaImporterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getImportAccess().getImporterJavaImporterParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNativeImporterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getImportAccess().getImporterNativeImporterParserRuleCall_2_0_1(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Import_ImportKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("as" nameSpace=ID)?
protected class Import_Group_3 extends GroupToken {
	
	public Import_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getImportAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_NameSpaceAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "as"
protected class Import_AsKeyword_3_0 extends KeywordToken  {
	
	public Import_AsKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getImportAccess().getAsKeyword_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_ImporterAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// nameSpace=ID
protected class Import_NameSpaceAssignment_3_1 extends AssignmentToken  {
	
	public Import_NameSpaceAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getImportAccess().getNameSpaceAssignment_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_AsKeyword_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("nameSpace",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("nameSpace");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getImportAccess().getNameSpaceIDTerminalRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}


// ";"
protected class Import_SemicolonKeyword_4 extends KeywordToken  {
	
	public Import_SemicolonKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getImportAccess().getSemicolonKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_Group_3(parent, this, 0, inst);
			case 1: return new Import_ImporterAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Import ****************/


/************ begin Rule JavaImporter ****************
 *
 * JavaImporter:
 *   name=QID;
 *
 **/

// name=QID
protected class JavaImporter_NameAssignment extends AssignmentToken  {
	
	public JavaImporter_NameAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getJavaImporterAccess().getNameAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getJavaImporterRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getJavaImporterAccess().getNameQIDParserRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule JavaImporter ****************/


/************ begin Rule NativeImporter ****************
 *
 * NativeImporter:
 *   uriString=STRING;
 *
 **/

// uriString=STRING
protected class NativeImporter_UriStringAssignment extends AssignmentToken  {
	
	public NativeImporter_UriStringAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNativeImporterAccess().getUriStringAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getNativeImporterRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("uriString",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("uriString");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getNativeImporterAccess().getUriStringSTRINGTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule NativeImporter ****************/


/************ begin Rule Unit ****************
 *
 * Unit returns BuildUnit hidden ( WS , ML_COMMENT , SL_COMMENT ):
 *   documentation=DOCUMENTATION? executionMode=ExecutionMode? "unit" name=UnitName? (
 *   "version" version=Version)? ("implements" implements+=InterfaceName ("," implements+=
 *   InterfaceName)*)? "{" ("default" "properties" defaultProperties=PropertySet)? (
 *   "provides" "{" (providedCapabilities+=ProvidedCapability ";")+ "}"|"provides"
 *   providedCapabilities+=ProvidedCapability ";"|"requires" "{" (requiredCapabilities+=
 *   RequiredCapability ";")+ "}"|"requires" requiredCapabilities+=RequiredCapability ";"
 *   |"env" "requires" "{" (metaRequiredCapabilities+=RequiredCapability ";")+ "}"|"env"
 *   "requires" metaRequiredCapabilities+=RequiredCapability ";"|concerns+=Concern|
 *   "sequential" "{" synchronizations+=Synchronization+ "}"|"sequential"
 *   synchronizations+=Synchronization|builders+=Builder|methods+=Method|
 *   "repositories" "{" repositoryConfigurations+=RepositoryConfiguration* "}"|
 *   "properties" propertySets+=NamedPropertySet|"containers" "{" containers+=
 *   ContainerConfiguration* "}")* "}"; 
 * 		
 *             
 * 	    
 * 	    
 * 	          
 * 		           
 * 	
 * 			 //-- PROPERTIES
 * 			 // goes first, because they may be used in the other clauses.
 * 			 //
 * 			            
 * 		
 * 		 	 //-- PROVIDES
 * 			               
 * 			          
 * 			//-- REQUIRES & META REQUIRES
 * 			               
 * 			          
 * 			                  
 * 			            
 * 			//--CONCERNS
 * 			     
 * 			//--SYNCHRONIZE
 * 			                  
 * 			           
 * 			//--BUILD METHODS & FUNCTIONS
 * 			         			
 * 			        			
 * 			//-- REPOSITORIES
 *
 **/

// documentation=DOCUMENTATION? executionMode=ExecutionMode? "unit" name=UnitName? (
// "version" version=Version)? ("implements" implements+=InterfaceName ("," implements+=
// InterfaceName)*)? "{" ("default" "properties" defaultProperties=PropertySet)? (
// "provides" "{" (providedCapabilities+=ProvidedCapability ";")+ "}"|"provides"
// providedCapabilities+=ProvidedCapability ";"|"requires" "{" (requiredCapabilities+=
// RequiredCapability ";")+ "}"|"requires" requiredCapabilities+=RequiredCapability ";"
// |"env" "requires" "{" (metaRequiredCapabilities+=RequiredCapability ";")+ "}"|"env"
// "requires" metaRequiredCapabilities+=RequiredCapability ";"|concerns+=Concern|
// "sequential" "{" synchronizations+=Synchronization+ "}"|"sequential"
// synchronizations+=Synchronization|builders+=Builder|methods+=Method|
// "repositories" "{" repositoryConfigurations+=RepositoryConfiguration* "}"|
// "properties" propertySets+=NamedPropertySet|"containers" "{" containers+=
// ContainerConfiguration* "}")* "}" 
// 	    
// 	    
// 	          
// 		           
// 	
// 			 //-- PROPERTIES
// 			 // goes first, because they may be used in the other clauses.
// 			 //
// 			            
// 		
// 		 	 //-- PROVIDES
// 			               
// 			          
// 			//-- REQUIRES & META REQUIRES
// 			               
// 			          
// 			                  
// 			            
// 			//--CONCERNS
// 			     
// 			//--SYNCHRONIZE
// 			                  
// 			           
// 			//--BUILD METHODS & FUNCTIONS
// 			         			
// 			        			
// 			//-- REPOSITORIES
protected class Unit_Group extends GroupToken {
	
	public Unit_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RightCurlyBracketKeyword_9(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnitRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// documentation=DOCUMENTATION?
protected class Unit_DocumentationAssignment_0 extends AssignmentToken  {
	
	public Unit_DocumentationAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getDocumentationAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("documentation",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("documentation");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getUnitAccess().getDocumentationDOCUMENTATIONTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// executionMode=ExecutionMode?
protected class Unit_ExecutionModeAssignment_1 extends AssignmentToken  {
	
	public Unit_ExecutionModeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getExecutionModeAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_DocumentationAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("executionMode",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("executionMode");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getUnitAccess().getExecutionModeExecutionModeEnumRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "unit"
protected class Unit_UnitKeyword_2 extends KeywordToken  {
	
	public Unit_UnitKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getUnitKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_ExecutionModeAssignment_1(parent, this, 0, inst);
			case 1: return new Unit_DocumentationAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}	
		
}

// name=UnitName?
protected class Unit_NameAssignment_3 extends AssignmentToken  {
	
	public Unit_NameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getNameAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_UnitKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getUnitAccess().getNameUnitNameParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ("version" version=Version)?
protected class Unit_Group_4 extends GroupToken {
	
	public Unit_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_VersionAssignment_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "version"
protected class Unit_VersionKeyword_4_0 extends KeywordToken  {
	
	public Unit_VersionKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getVersionKeyword_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_NameAssignment_3(parent, this, 0, inst);
			case 1: return new Unit_UnitKeyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// version=Version
protected class Unit_VersionAssignment_4_1 extends AssignmentToken  {
	
	public Unit_VersionAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getVersionAssignment_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Version_VersionAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("version",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("version");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVersionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getVersionVersionParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_VersionKeyword_4_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("implements" implements+=InterfaceName ("," implements+=InterfaceName)*)?
protected class Unit_Group_5 extends GroupToken {
	
	public Unit_Group_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_5_2(parent, this, 0, inst);
			case 1: return new Unit_ImplementsAssignment_5_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "implements"
protected class Unit_ImplementsKeyword_5_0 extends KeywordToken  {
	
	public Unit_ImplementsKeyword_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getImplementsKeyword_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_4(parent, this, 0, inst);
			case 1: return new Unit_NameAssignment_3(parent, this, 1, inst);
			case 2: return new Unit_UnitKeyword_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// implements+=InterfaceName
protected class Unit_ImplementsAssignment_5_1 extends AssignmentToken  {
	
	public Unit_ImplementsAssignment_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getImplementsAssignment_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_ImplementsKeyword_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("implements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("implements");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getUnitAccess().getImplementsInterfaceNameParserRuleCall_5_1_0();
			return obj;
		}
		return null;
	}

}

// ("," implements+=InterfaceName)*
protected class Unit_Group_5_2 extends GroupToken {
	
	public Unit_Group_5_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_5_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_ImplementsAssignment_5_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Unit_CommaKeyword_5_2_0 extends KeywordToken  {
	
	public Unit_CommaKeyword_5_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getCommaKeyword_5_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_5_2(parent, this, 0, inst);
			case 1: return new Unit_ImplementsAssignment_5_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// implements+=InterfaceName
protected class Unit_ImplementsAssignment_5_2_1 extends AssignmentToken  {
	
	public Unit_ImplementsAssignment_5_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getImplementsAssignment_5_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_CommaKeyword_5_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("implements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("implements");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getUnitAccess().getImplementsInterfaceNameParserRuleCall_5_2_1_0();
			return obj;
		}
		return null;
	}

}



// "{"
protected class Unit_LeftCurlyBracketKeyword_6 extends KeywordToken  {
	
	public Unit_LeftCurlyBracketKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_5(parent, this, 0, inst);
			case 1: return new Unit_Group_4(parent, this, 1, inst);
			case 2: return new Unit_NameAssignment_3(parent, this, 2, inst);
			case 3: return new Unit_UnitKeyword_2(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}

// ("default" "properties" defaultProperties=PropertySet)?
protected class Unit_Group_7 extends GroupToken {
	
	public Unit_Group_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_DefaultPropertiesAssignment_7_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "default"
protected class Unit_DefaultKeyword_7_0 extends KeywordToken  {
	
	public Unit_DefaultKeyword_7_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getDefaultKeyword_7_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_LeftCurlyBracketKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "properties"
protected class Unit_PropertiesKeyword_7_1 extends KeywordToken  {
	
	public Unit_PropertiesKeyword_7_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getPropertiesKeyword_7_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_DefaultKeyword_7_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// defaultProperties=PropertySet
protected class Unit_DefaultPropertiesAssignment_7_2 extends AssignmentToken  {
	
	public Unit_DefaultPropertiesAssignment_7_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getDefaultPropertiesAssignment_7_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertySet_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("defaultProperties",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("defaultProperties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertySetRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getDefaultPropertiesPropertySetParserRuleCall_7_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_PropertiesKeyword_7_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("provides" "{" (providedCapabilities+=ProvidedCapability ";")+ "}"|"provides"
// providedCapabilities+=ProvidedCapability ";"|"requires" "{" (requiredCapabilities+=
// RequiredCapability ";")+ "}"|"requires" requiredCapabilities+=RequiredCapability ";"
// |"env" "requires" "{" (metaRequiredCapabilities+=RequiredCapability ";")+ "}"|"env"
// "requires" metaRequiredCapabilities+=RequiredCapability ";"|concerns+=Concern|
// "sequential" "{" synchronizations+=Synchronization+ "}"|"sequential"
// synchronizations+=Synchronization|builders+=Builder|methods+=Method|
// "repositories" "{" repositoryConfigurations+=RepositoryConfiguration* "}"|
// "properties" propertySets+=NamedPropertySet|"containers" "{" containers+=
// ContainerConfiguration* "}")* 
// 		 	 //-- PROVIDES
// 			               
// 			          
// 			//-- REQUIRES & META REQUIRES
// 			               
// 			          
// 			                  
// 			            
// 			//--CONCERNS
// 			     
// 			//--SYNCHRONIZE
// 			                  
// 			           
// 			//--BUILD METHODS & FUNCTIONS
// 			         			
// 			        			
// 			//-- REPOSITORIES
protected class Unit_Alternatives_8 extends AlternativesToken {

	public Unit_Alternatives_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getUnitAccess().getAlternatives_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_8_0(parent, this, 0, inst);
			case 1: return new Unit_Group_8_1(parent, this, 1, inst);
			case 2: return new Unit_Group_8_2(parent, this, 2, inst);
			case 3: return new Unit_Group_8_3(parent, this, 3, inst);
			case 4: return new Unit_Group_8_4(parent, this, 4, inst);
			case 5: return new Unit_Group_8_5(parent, this, 5, inst);
			case 6: return new Unit_ConcernsAssignment_8_6(parent, this, 6, inst);
			case 7: return new Unit_Group_8_7(parent, this, 7, inst);
			case 8: return new Unit_Group_8_8(parent, this, 8, inst);
			case 9: return new Unit_BuildersAssignment_8_9(parent, this, 9, inst);
			case 10: return new Unit_MethodsAssignment_8_10(parent, this, 10, inst);
			case 11: return new Unit_Group_8_11(parent, this, 11, inst);
			case 12: return new Unit_Group_8_12(parent, this, 12, inst);
			case 13: return new Unit_Group_8_13(parent, this, 13, inst);
			default: return null;
		}	
	}	
		
}

// "provides" "{" (providedCapabilities+=ProvidedCapability ";")+ "}"
protected class Unit_Group_8_0 extends GroupToken {
	
	public Unit_Group_8_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_8_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RightCurlyBracketKeyword_8_0_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "provides"
protected class Unit_ProvidesKeyword_8_0_0 extends KeywordToken  {
	
	public Unit_ProvidesKeyword_8_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getProvidesKeyword_8_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_8(parent, this, 0, inst);
			case 1: return new Unit_Group_7(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_6(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Unit_LeftCurlyBracketKeyword_8_0_1 extends KeywordToken  {
	
	public Unit_LeftCurlyBracketKeyword_8_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_8_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_ProvidesKeyword_8_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (providedCapabilities+=ProvidedCapability ";")+
protected class Unit_Group_8_0_2 extends GroupToken {
	
	public Unit_Group_8_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_8_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SemicolonKeyword_8_0_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// providedCapabilities+=ProvidedCapability
protected class Unit_ProvidedCapabilitiesAssignment_8_0_2_0 extends AssignmentToken  {
	
	public Unit_ProvidedCapabilitiesAssignment_8_0_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getProvidedCapabilitiesAssignment_8_0_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("providedCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("providedCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProvidedCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_8_0_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_Group_8_0_2(parent, next, actIndex, consumed);
			case 1: return new Unit_LeftCurlyBracketKeyword_8_0_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Unit_SemicolonKeyword_8_0_2_1 extends KeywordToken  {
	
	public Unit_SemicolonKeyword_8_0_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSemicolonKeyword_8_0_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_ProvidedCapabilitiesAssignment_8_0_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "}"
protected class Unit_RightCurlyBracketKeyword_8_0_3 extends KeywordToken  {
	
	public Unit_RightCurlyBracketKeyword_8_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_8_0_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_8_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "provides" providedCapabilities+=ProvidedCapability ";"
protected class Unit_Group_8_1 extends GroupToken {
	
	public Unit_Group_8_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_8_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SemicolonKeyword_8_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "provides"
protected class Unit_ProvidesKeyword_8_1_0 extends KeywordToken  {
	
	public Unit_ProvidesKeyword_8_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getProvidesKeyword_8_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_8(parent, this, 0, inst);
			case 1: return new Unit_Group_7(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_6(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// providedCapabilities+=ProvidedCapability
protected class Unit_ProvidedCapabilitiesAssignment_8_1_1 extends AssignmentToken  {
	
	public Unit_ProvidedCapabilitiesAssignment_8_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getProvidedCapabilitiesAssignment_8_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("providedCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("providedCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProvidedCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_8_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_ProvidesKeyword_8_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Unit_SemicolonKeyword_8_1_2 extends KeywordToken  {
	
	public Unit_SemicolonKeyword_8_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSemicolonKeyword_8_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_ProvidedCapabilitiesAssignment_8_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "requires" "{" (requiredCapabilities+=RequiredCapability ";")+ "}"
protected class Unit_Group_8_2 extends GroupToken {
	
	public Unit_Group_8_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_8_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RightCurlyBracketKeyword_8_2_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "requires"
protected class Unit_RequiresKeyword_8_2_0 extends KeywordToken  {
	
	public Unit_RequiresKeyword_8_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRequiresKeyword_8_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_8(parent, this, 0, inst);
			case 1: return new Unit_Group_7(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_6(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Unit_LeftCurlyBracketKeyword_8_2_1 extends KeywordToken  {
	
	public Unit_LeftCurlyBracketKeyword_8_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_8_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RequiresKeyword_8_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (requiredCapabilities+=RequiredCapability ";")+
protected class Unit_Group_8_2_2 extends GroupToken {
	
	public Unit_Group_8_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_8_2_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SemicolonKeyword_8_2_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// requiredCapabilities+=RequiredCapability
protected class Unit_RequiredCapabilitiesAssignment_8_2_2_0 extends AssignmentToken  {
	
	public Unit_RequiredCapabilitiesAssignment_8_2_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getRequiredCapabilitiesAssignment_8_2_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("requiredCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("requiredCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRequiredCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getRequiredCapabilitiesRequiredCapabilityParserRuleCall_8_2_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_Group_8_2_2(parent, next, actIndex, consumed);
			case 1: return new Unit_LeftCurlyBracketKeyword_8_2_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Unit_SemicolonKeyword_8_2_2_1 extends KeywordToken  {
	
	public Unit_SemicolonKeyword_8_2_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSemicolonKeyword_8_2_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RequiredCapabilitiesAssignment_8_2_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "}"
protected class Unit_RightCurlyBracketKeyword_8_2_3 extends KeywordToken  {
	
	public Unit_RightCurlyBracketKeyword_8_2_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_8_2_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_8_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "requires" requiredCapabilities+=RequiredCapability ";"
protected class Unit_Group_8_3 extends GroupToken {
	
	public Unit_Group_8_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_8_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SemicolonKeyword_8_3_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "requires"
protected class Unit_RequiresKeyword_8_3_0 extends KeywordToken  {
	
	public Unit_RequiresKeyword_8_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRequiresKeyword_8_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_8(parent, this, 0, inst);
			case 1: return new Unit_Group_7(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_6(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// requiredCapabilities+=RequiredCapability
protected class Unit_RequiredCapabilitiesAssignment_8_3_1 extends AssignmentToken  {
	
	public Unit_RequiredCapabilitiesAssignment_8_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getRequiredCapabilitiesAssignment_8_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("requiredCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("requiredCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRequiredCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getRequiredCapabilitiesRequiredCapabilityParserRuleCall_8_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_RequiresKeyword_8_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Unit_SemicolonKeyword_8_3_2 extends KeywordToken  {
	
	public Unit_SemicolonKeyword_8_3_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSemicolonKeyword_8_3_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RequiredCapabilitiesAssignment_8_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "env" "requires" "{" (metaRequiredCapabilities+=RequiredCapability ";")+ "}"
protected class Unit_Group_8_4 extends GroupToken {
	
	public Unit_Group_8_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_8_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RightCurlyBracketKeyword_8_4_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "env"
protected class Unit_EnvKeyword_8_4_0 extends KeywordToken  {
	
	public Unit_EnvKeyword_8_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getEnvKeyword_8_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_8(parent, this, 0, inst);
			case 1: return new Unit_Group_7(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_6(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "requires"
protected class Unit_RequiresKeyword_8_4_1 extends KeywordToken  {
	
	public Unit_RequiresKeyword_8_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRequiresKeyword_8_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_EnvKeyword_8_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Unit_LeftCurlyBracketKeyword_8_4_2 extends KeywordToken  {
	
	public Unit_LeftCurlyBracketKeyword_8_4_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_8_4_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RequiresKeyword_8_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (metaRequiredCapabilities+=RequiredCapability ";")+
protected class Unit_Group_8_4_3 extends GroupToken {
	
	public Unit_Group_8_4_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_8_4_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SemicolonKeyword_8_4_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// metaRequiredCapabilities+=RequiredCapability
protected class Unit_MetaRequiredCapabilitiesAssignment_8_4_3_0 extends AssignmentToken  {
	
	public Unit_MetaRequiredCapabilitiesAssignment_8_4_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getMetaRequiredCapabilitiesAssignment_8_4_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("metaRequiredCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("metaRequiredCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRequiredCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getMetaRequiredCapabilitiesRequiredCapabilityParserRuleCall_8_4_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_Group_8_4_3(parent, next, actIndex, consumed);
			case 1: return new Unit_LeftCurlyBracketKeyword_8_4_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Unit_SemicolonKeyword_8_4_3_1 extends KeywordToken  {
	
	public Unit_SemicolonKeyword_8_4_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSemicolonKeyword_8_4_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_MetaRequiredCapabilitiesAssignment_8_4_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "}"
protected class Unit_RightCurlyBracketKeyword_8_4_4 extends KeywordToken  {
	
	public Unit_RightCurlyBracketKeyword_8_4_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_8_4_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_8_4_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "env" "requires" metaRequiredCapabilities+=RequiredCapability ";"
protected class Unit_Group_8_5 extends GroupToken {
	
	public Unit_Group_8_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_8_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SemicolonKeyword_8_5_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "env"
protected class Unit_EnvKeyword_8_5_0 extends KeywordToken  {
	
	public Unit_EnvKeyword_8_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getEnvKeyword_8_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_8(parent, this, 0, inst);
			case 1: return new Unit_Group_7(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_6(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "requires"
protected class Unit_RequiresKeyword_8_5_1 extends KeywordToken  {
	
	public Unit_RequiresKeyword_8_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRequiresKeyword_8_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_EnvKeyword_8_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// metaRequiredCapabilities+=RequiredCapability
protected class Unit_MetaRequiredCapabilitiesAssignment_8_5_2 extends AssignmentToken  {
	
	public Unit_MetaRequiredCapabilitiesAssignment_8_5_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getMetaRequiredCapabilitiesAssignment_8_5_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("metaRequiredCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("metaRequiredCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRequiredCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getMetaRequiredCapabilitiesRequiredCapabilityParserRuleCall_8_5_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_RequiresKeyword_8_5_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Unit_SemicolonKeyword_8_5_3 extends KeywordToken  {
	
	public Unit_SemicolonKeyword_8_5_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSemicolonKeyword_8_5_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_MetaRequiredCapabilitiesAssignment_8_5_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// concerns+=Concern
protected class Unit_ConcernsAssignment_8_6 extends AssignmentToken  {
	
	public Unit_ConcernsAssignment_8_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getConcernsAssignment_8_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Concern_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("concerns",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("concerns");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConcernRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getConcernsConcernParserRuleCall_8_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_Alternatives_8(parent, next, actIndex, consumed);
			case 1: return new Unit_Group_7(parent, next, actIndex, consumed);
			case 2: return new Unit_LeftCurlyBracketKeyword_6(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "sequential" "{" synchronizations+=Synchronization+ "}"
protected class Unit_Group_8_7 extends GroupToken {
	
	public Unit_Group_8_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_8_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RightCurlyBracketKeyword_8_7_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "sequential"
protected class Unit_SequentialKeyword_8_7_0 extends KeywordToken  {
	
	public Unit_SequentialKeyword_8_7_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSequentialKeyword_8_7_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_8(parent, this, 0, inst);
			case 1: return new Unit_Group_7(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_6(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Unit_LeftCurlyBracketKeyword_8_7_1 extends KeywordToken  {
	
	public Unit_LeftCurlyBracketKeyword_8_7_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_8_7_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SequentialKeyword_8_7_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// synchronizations+=Synchronization+
protected class Unit_SynchronizationsAssignment_8_7_2 extends AssignmentToken  {
	
	public Unit_SynchronizationsAssignment_8_7_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getSynchronizationsAssignment_8_7_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("synchronizations",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("synchronizations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSynchronizationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getSynchronizationsSynchronizationParserRuleCall_8_7_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_SynchronizationsAssignment_8_7_2(parent, next, actIndex, consumed);
			case 1: return new Unit_LeftCurlyBracketKeyword_8_7_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Unit_RightCurlyBracketKeyword_8_7_3 extends KeywordToken  {
	
	public Unit_RightCurlyBracketKeyword_8_7_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_8_7_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SynchronizationsAssignment_8_7_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "sequential" synchronizations+=Synchronization
protected class Unit_Group_8_8 extends GroupToken {
	
	public Unit_Group_8_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_8_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SynchronizationsAssignment_8_8_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "sequential"
protected class Unit_SequentialKeyword_8_8_0 extends KeywordToken  {
	
	public Unit_SequentialKeyword_8_8_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSequentialKeyword_8_8_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_8(parent, this, 0, inst);
			case 1: return new Unit_Group_7(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_6(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// synchronizations+=Synchronization
protected class Unit_SynchronizationsAssignment_8_8_1 extends AssignmentToken  {
	
	public Unit_SynchronizationsAssignment_8_8_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getSynchronizationsAssignment_8_8_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("synchronizations",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("synchronizations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSynchronizationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getSynchronizationsSynchronizationParserRuleCall_8_8_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_SequentialKeyword_8_8_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// builders+=Builder
protected class Unit_BuildersAssignment_8_9 extends AssignmentToken  {
	
	public Unit_BuildersAssignment_8_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getBuildersAssignment_8_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("builders",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("builders");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBuilderRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getBuildersBuilderParserRuleCall_8_9_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_Alternatives_8(parent, next, actIndex, consumed);
			case 1: return new Unit_Group_7(parent, next, actIndex, consumed);
			case 2: return new Unit_LeftCurlyBracketKeyword_6(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// methods+=Method
protected class Unit_MethodsAssignment_8_10 extends AssignmentToken  {
	
	public Unit_MethodsAssignment_8_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getMethodsAssignment_8_10();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Method_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("methods",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("methods");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMethodRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getMethodsMethodParserRuleCall_8_10_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_Alternatives_8(parent, next, actIndex, consumed);
			case 1: return new Unit_Group_7(parent, next, actIndex, consumed);
			case 2: return new Unit_LeftCurlyBracketKeyword_6(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "repositories" "{" repositoryConfigurations+=RepositoryConfiguration* "}"
protected class Unit_Group_8_11 extends GroupToken {
	
	public Unit_Group_8_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_8_11();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RightCurlyBracketKeyword_8_11_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "repositories"
protected class Unit_RepositoriesKeyword_8_11_0 extends KeywordToken  {
	
	public Unit_RepositoriesKeyword_8_11_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRepositoriesKeyword_8_11_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_8(parent, this, 0, inst);
			case 1: return new Unit_Group_7(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_6(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Unit_LeftCurlyBracketKeyword_8_11_1 extends KeywordToken  {
	
	public Unit_LeftCurlyBracketKeyword_8_11_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_8_11_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RepositoriesKeyword_8_11_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// repositoryConfigurations+=RepositoryConfiguration*
protected class Unit_RepositoryConfigurationsAssignment_8_11_2 extends AssignmentToken  {
	
	public Unit_RepositoryConfigurationsAssignment_8_11_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getRepositoryConfigurationsAssignment_8_11_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryConfiguration_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("repositoryConfigurations",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("repositoryConfigurations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRepositoryConfigurationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getRepositoryConfigurationsRepositoryConfigurationParserRuleCall_8_11_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_RepositoryConfigurationsAssignment_8_11_2(parent, next, actIndex, consumed);
			case 1: return new Unit_LeftCurlyBracketKeyword_8_11_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Unit_RightCurlyBracketKeyword_8_11_3 extends KeywordToken  {
	
	public Unit_RightCurlyBracketKeyword_8_11_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_8_11_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RepositoryConfigurationsAssignment_8_11_2(parent, this, 0, inst);
			case 1: return new Unit_LeftCurlyBracketKeyword_8_11_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// "properties" propertySets+=NamedPropertySet
protected class Unit_Group_8_12 extends GroupToken {
	
	public Unit_Group_8_12(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_8_12();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_PropertySetsAssignment_8_12_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "properties"
protected class Unit_PropertiesKeyword_8_12_0 extends KeywordToken  {
	
	public Unit_PropertiesKeyword_8_12_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getPropertiesKeyword_8_12_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_8(parent, this, 0, inst);
			case 1: return new Unit_Group_7(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_6(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// propertySets+=NamedPropertySet
protected class Unit_PropertySetsAssignment_8_12_1 extends AssignmentToken  {
	
	public Unit_PropertySetsAssignment_8_12_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getPropertySetsAssignment_8_12_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NamedPropertySet_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("propertySets",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("propertySets");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNamedPropertySetRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getPropertySetsNamedPropertySetParserRuleCall_8_12_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_PropertiesKeyword_8_12_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "containers" "{" containers+=ContainerConfiguration* "}"
protected class Unit_Group_8_13 extends GroupToken {
	
	public Unit_Group_8_13(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_8_13();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RightCurlyBracketKeyword_8_13_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "containers"
protected class Unit_ContainersKeyword_8_13_0 extends KeywordToken  {
	
	public Unit_ContainersKeyword_8_13_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getContainersKeyword_8_13_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_8(parent, this, 0, inst);
			case 1: return new Unit_Group_7(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_6(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Unit_LeftCurlyBracketKeyword_8_13_1 extends KeywordToken  {
	
	public Unit_LeftCurlyBracketKeyword_8_13_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_8_13_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_ContainersKeyword_8_13_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// containers+=ContainerConfiguration*
protected class Unit_ContainersAssignment_8_13_2 extends AssignmentToken  {
	
	public Unit_ContainersAssignment_8_13_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getContainersAssignment_8_13_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContainerConfiguration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("containers",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("containers");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getContainerConfigurationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getContainersContainerConfigurationParserRuleCall_8_13_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_ContainersAssignment_8_13_2(parent, next, actIndex, consumed);
			case 1: return new Unit_LeftCurlyBracketKeyword_8_13_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Unit_RightCurlyBracketKeyword_8_13_3 extends KeywordToken  {
	
	public Unit_RightCurlyBracketKeyword_8_13_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_8_13_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_ContainersAssignment_8_13_2(parent, this, 0, inst);
			case 1: return new Unit_LeftCurlyBracketKeyword_8_13_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



// "}"
protected class Unit_RightCurlyBracketKeyword_9 extends KeywordToken  {
	
	public Unit_RightCurlyBracketKeyword_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_8(parent, this, 0, inst);
			case 1: return new Unit_Group_7(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_6(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Unit ****************/


/************ begin Rule ProvidedCapability ****************
 *
 * ProvidedCapability:
 *   capability=FilteredCapability ("/" version=Version)?;
 *
 **/

// capability=FilteredCapability ("/" version=Version)?
protected class ProvidedCapability_Group extends GroupToken {
	
	public ProvidedCapability_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group_1(parent, this, 0, inst);
			case 1: return new ProvidedCapability_CapabilityAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getProvidedCapabilityRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// capability=FilteredCapability
protected class ProvidedCapability_CapabilityAssignment_0 extends AssignmentToken  {
	
	public ProvidedCapability_CapabilityAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getCapabilityAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FilteredCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("capability",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("capability");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFilteredCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getProvidedCapabilityAccess().getCapabilityFilteredCapabilityParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// ("/" version=Version)?
protected class ProvidedCapability_Group_1 extends GroupToken {
	
	public ProvidedCapability_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_VersionAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "/"
protected class ProvidedCapability_SolidusKeyword_1_0 extends KeywordToken  {
	
	public ProvidedCapability_SolidusKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getSolidusKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_CapabilityAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// version=Version
protected class ProvidedCapability_VersionAssignment_1_1 extends AssignmentToken  {
	
	public ProvidedCapability_VersionAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getVersionAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Version_VersionAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("version",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("version");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVersionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getProvidedCapabilityAccess().getVersionVersionParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProvidedCapability_SolidusKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ProvidedCapability ****************/


/************ begin Rule RequiredCapability ****************
 *
 * RequiredCapability:
 *   capability=FilteredCapability ("/" range=VersionRange)?;
 *
 **/

// capability=FilteredCapability ("/" range=VersionRange)?
protected class RequiredCapability_Group extends GroupToken {
	
	public RequiredCapability_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_Group_1(parent, this, 0, inst);
			case 1: return new RequiredCapability_CapabilityAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRequiredCapabilityRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// capability=FilteredCapability
protected class RequiredCapability_CapabilityAssignment_0 extends AssignmentToken  {
	
	public RequiredCapability_CapabilityAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getCapabilityAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FilteredCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("capability",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("capability");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFilteredCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRequiredCapabilityAccess().getCapabilityFilteredCapabilityParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// ("/" range=VersionRange)?
protected class RequiredCapability_Group_1 extends GroupToken {
	
	public RequiredCapability_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_RangeAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "/"
protected class RequiredCapability_SolidusKeyword_1_0 extends KeywordToken  {
	
	public RequiredCapability_SolidusKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getSolidusKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_CapabilityAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// range=VersionRange
protected class RequiredCapability_RangeAssignment_1_1 extends AssignmentToken  {
	
	public RequiredCapability_RangeAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getRangeAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VersionRange_RangeAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("range",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("range");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVersionRangeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRequiredCapabilityAccess().getRangeVersionRangeParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RequiredCapability_SolidusKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule RequiredCapability ****************/


/************ begin Rule FilteredCapability ****************
 *
 * FilteredCapability:
 *   ("when" filter=Filter)? capability=Capability;
 *
 **/

// ("when" filter=Filter)? capability=Capability
protected class FilteredCapability_Group extends GroupToken {
	
	public FilteredCapability_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFilteredCapabilityAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FilteredCapability_CapabilityAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFilteredCapabilityRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ("when" filter=Filter)?
protected class FilteredCapability_Group_0 extends GroupToken {
	
	public FilteredCapability_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFilteredCapabilityAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FilteredCapability_FilterAssignment_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "when"
protected class FilteredCapability_WhenKeyword_0_0 extends KeywordToken  {
	
	public FilteredCapability_WhenKeyword_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFilteredCapabilityAccess().getWhenKeyword_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// filter=Filter
protected class FilteredCapability_FilterAssignment_0_1 extends AssignmentToken  {
	
	public FilteredCapability_FilterAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFilteredCapabilityAccess().getFilterAssignment_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Filter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("filter",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("filter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFilterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFilteredCapabilityAccess().getFilterFilterParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FilteredCapability_WhenKeyword_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// capability=Capability
protected class FilteredCapability_CapabilityAssignment_1 extends AssignmentToken  {
	
	public FilteredCapability_CapabilityAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFilteredCapabilityAccess().getCapabilityAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Capability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("capability",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("capability");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFilteredCapabilityAccess().getCapabilityCapabilityParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FilteredCapability_Group_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}


/************ end Rule FilteredCapability ****************/


/************ begin Rule Capability ****************
 *
 * Capability:
 *   interface=InterfaceName "/" name=UnitName; 
 *           
 * 
 * // An optionally named sequence of property statements
 *
 **/

// interface=InterfaceName "/" name=UnitName
protected class Capability_Group extends GroupToken {
	
	public Capability_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCapabilityAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Capability_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCapabilityRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// interface=InterfaceName
protected class Capability_InterfaceAssignment_0 extends AssignmentToken  {
	
	public Capability_InterfaceAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCapabilityAccess().getInterfaceAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("interface",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("interface");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getCapabilityAccess().getInterfaceInterfaceNameParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "/"
protected class Capability_SolidusKeyword_1 extends KeywordToken  {
	
	public Capability_SolidusKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCapabilityAccess().getSolidusKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Capability_InterfaceAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=UnitName
protected class Capability_NameAssignment_2 extends AssignmentToken  {
	
	public Capability_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCapabilityAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Capability_SolidusKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getCapabilityAccess().getNameUnitNameParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Capability ****************/


/************ begin Rule NamedPropertySet ****************
 *
 * NamedPropertySet:
 *   name=ID body=PropertySet; 
 * 
 * // An optionally named sequence of property statements
 *     
 * 	             
 * 	
 * 
 * // Sequence of possibly filtered property statements
 *
 **/

// name=ID body=PropertySet
protected class NamedPropertySet_Group extends GroupToken {
	
	public NamedPropertySet_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getNamedPropertySetAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NamedPropertySet_BodyAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getNamedPropertySetRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=ID
protected class NamedPropertySet_NameAssignment_0 extends AssignmentToken  {
	
	public NamedPropertySet_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNamedPropertySetAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getNamedPropertySetAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// body=PropertySet
protected class NamedPropertySet_BodyAssignment_1 extends AssignmentToken  {
	
	public NamedPropertySet_BodyAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNamedPropertySetAccess().getBodyAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertySet_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("body",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertySetRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getNamedPropertySetAccess().getBodyPropertySetParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NamedPropertySet_NameAssignment_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule NamedPropertySet ****************/


/************ begin Rule PropertySet ****************
 *
 * PropertySet:
 *   ("extends" extends=[NamedPropertySet|QIDREF])? "{" operations+=PropertyOperation*
 *   "}"; 
 * 
 * // Sequence of possibly filtered property statements	
 *     
 * 	                   
 * 	
 * 
 * // For model generation, to get supertype correct
 *
 **/

// ("extends" extends=[NamedPropertySet|QIDREF])? "{" operations+=PropertyOperation*
// "}"
protected class PropertySet_Group extends GroupToken {
	
	public PropertySet_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPropertySetAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertySet_RightCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPropertySetRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ("extends" extends=[NamedPropertySet|QIDREF])?
protected class PropertySet_Group_0 extends GroupToken {
	
	public PropertySet_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPropertySetAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertySet_ExtendsAssignment_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "extends"
protected class PropertySet_ExtendsKeyword_0_0 extends KeywordToken  {
	
	public PropertySet_ExtendsKeyword_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPropertySetAccess().getExtendsKeyword_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// extends=[NamedPropertySet|QIDREF]
protected class PropertySet_ExtendsAssignment_0_1 extends AssignmentToken  {
	
	public PropertySet_ExtendsAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertySetAccess().getExtendsAssignment_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertySet_ExtendsKeyword_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("extends",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("extends");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertySetAccess().getExtendsNamedPropertySetCrossReference_0_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getPropertySetAccess().getExtendsNamedPropertySetCrossReference_0_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// "{"
protected class PropertySet_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public PropertySet_LeftCurlyBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPropertySetAccess().getLeftCurlyBracketKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertySet_Group_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// operations+=PropertyOperation*
protected class PropertySet_OperationsAssignment_2 extends AssignmentToken  {
	
	public PropertySet_OperationsAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertySetAccess().getOperationsAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyOperation_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("operations",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("operations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyOperationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPropertySetAccess().getOperationsPropertyOperationParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PropertySet_OperationsAssignment_2(parent, next, actIndex, consumed);
			case 1: return new PropertySet_LeftCurlyBracketKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class PropertySet_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public PropertySet_RightCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPropertySetAccess().getRightCurlyBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertySet_OperationsAssignment_2(parent, this, 0, inst);
			case 1: return new PropertySet_LeftCurlyBracketKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule PropertySet ****************/


/************ begin Rule PropertyOperation ****************
 *
 * PropertyOperation:
 *   FilteredPropertyOperation|SetPropertyOperation|UnsetPropertyOperation|
 *   PropertySet; 
 * 
 * // For model generation, to get supertype correct
 *
 **/

// FilteredPropertyOperation|SetPropertyOperation|UnsetPropertyOperation|
// PropertySet 
// 
// // For model generation, to get supertype correct
protected class PropertyOperation_Alternatives extends AlternativesToken {

	public PropertyOperation_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getPropertyOperationAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyOperation_FilteredPropertyOperationParserRuleCall_0(parent, this, 0, inst);
			case 1: return new PropertyOperation_SetPropertyOperationParserRuleCall_1(parent, this, 1, inst);
			case 2: return new PropertyOperation_UnsetPropertyOperationParserRuleCall_2(parent, this, 2, inst);
			case 3: return new PropertyOperation_PropertySetParserRuleCall_3(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPropertyOperationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// FilteredPropertyOperation
protected class PropertyOperation_FilteredPropertyOperationParserRuleCall_0 extends RuleCallToken {
	
	public PropertyOperation_FilteredPropertyOperationParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPropertyOperationAccess().getFilteredPropertyOperationParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FilteredPropertyOperation_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(FilteredPropertyOperation_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getFilteredPropertyOperationRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// SetPropertyOperation
protected class PropertyOperation_SetPropertyOperationParserRuleCall_1 extends RuleCallToken {
	
	public PropertyOperation_SetPropertyOperationParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPropertyOperationAccess().getSetPropertyOperationParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SetPropertyOperation_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(SetPropertyOperation_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSetPropertyOperationRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// UnsetPropertyOperation
protected class PropertyOperation_UnsetPropertyOperationParserRuleCall_2 extends RuleCallToken {
	
	public PropertyOperation_UnsetPropertyOperationParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPropertyOperationAccess().getUnsetPropertyOperationParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnsetPropertyOperation_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UnsetPropertyOperation_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUnsetPropertyOperationRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// PropertySet
protected class PropertyOperation_PropertySetParserRuleCall_3 extends RuleCallToken {
	
	public PropertyOperation_PropertySetParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPropertyOperationAccess().getPropertySetParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertySet_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(PropertySet_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPropertySetRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule PropertyOperation ****************/


/************ begin Rule FilteredPropertyOperation ****************
 *
 * FilteredPropertyOperation:
 *   "when" filter=Filter body=( SetPropertyOperation | UnsetPropertyOperation | PropertySet
 *   );
 *
 **/

// "when" filter=Filter body=( SetPropertyOperation | UnsetPropertyOperation | PropertySet
// )
protected class FilteredPropertyOperation_Group extends GroupToken {
	
	public FilteredPropertyOperation_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFilteredPropertyOperationAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FilteredPropertyOperation_BodyAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFilteredPropertyOperationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "when"
protected class FilteredPropertyOperation_WhenKeyword_0 extends KeywordToken  {
	
	public FilteredPropertyOperation_WhenKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFilteredPropertyOperationAccess().getWhenKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// filter=Filter
protected class FilteredPropertyOperation_FilterAssignment_1 extends AssignmentToken  {
	
	public FilteredPropertyOperation_FilterAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFilteredPropertyOperationAccess().getFilterAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Filter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("filter",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("filter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFilterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFilteredPropertyOperationAccess().getFilterFilterParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FilteredPropertyOperation_WhenKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// body=( SetPropertyOperation | UnsetPropertyOperation | PropertySet )
protected class FilteredPropertyOperation_BodyAssignment_2 extends AssignmentToken  {
	
	public FilteredPropertyOperation_BodyAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFilteredPropertyOperationAccess().getBodyAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SetPropertyOperation_Group(this, this, 0, inst);
			case 1: return new UnsetPropertyOperation_Group(this, this, 1, inst);
			case 2: return new PropertySet_Group(this, this, 2, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("body",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSetPropertyOperationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFilteredPropertyOperationAccess().getBodySetPropertyOperationParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUnsetPropertyOperationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFilteredPropertyOperationAccess().getBodyUnsetPropertyOperationParserRuleCall_2_0_1(); 
				consumed = obj;
				return param;
			}
		}
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertySetRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFilteredPropertyOperationAccess().getBodyPropertySetParserRuleCall_2_0_2(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FilteredPropertyOperation_FilterAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule FilteredPropertyOperation ****************/


/************ begin Rule SetPropertyOperation ****************
 *
 * SetPropertyOperation:
 *   final?="final"? key=PropertyName op=AssignmentOperator value=Expression ";";
 *
 **/

// final?="final"? key=PropertyName op=AssignmentOperator value=Expression ";"
protected class SetPropertyOperation_Group extends GroupToken {
	
	public SetPropertyOperation_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSetPropertyOperationAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SetPropertyOperation_SemicolonKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSetPropertyOperationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// final?="final"?
protected class SetPropertyOperation_FinalAssignment_0 extends AssignmentToken  {
	
	public SetPropertyOperation_FinalAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSetPropertyOperationAccess().getFinalAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("final",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("final");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getSetPropertyOperationAccess().getFinalFinalKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// key=PropertyName
protected class SetPropertyOperation_KeyAssignment_1 extends AssignmentToken  {
	
	public SetPropertyOperation_KeyAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSetPropertyOperationAccess().getKeyAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SetPropertyOperation_FinalAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("key",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("key");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getSetPropertyOperationAccess().getKeyPropertyNameParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// op=AssignmentOperator
protected class SetPropertyOperation_OpAssignment_2 extends AssignmentToken  {
	
	public SetPropertyOperation_OpAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSetPropertyOperationAccess().getOpAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SetPropertyOperation_KeyAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("op",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("op");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getSetPropertyOperationAccess().getOpAssignmentOperatorEnumRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// value=Expression
protected class SetPropertyOperation_ValueAssignment_3 extends AssignmentToken  {
	
	public SetPropertyOperation_ValueAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSetPropertyOperationAccess().getValueAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSetPropertyOperationAccess().getValueExpressionParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SetPropertyOperation_OpAssignment_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class SetPropertyOperation_SemicolonKeyword_4 extends KeywordToken  {
	
	public SetPropertyOperation_SemicolonKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSetPropertyOperationAccess().getSemicolonKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SetPropertyOperation_ValueAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule SetPropertyOperation ****************/


/************ begin Rule UnsetPropertyOperation ****************
 *
 * UnsetPropertyOperation:
 *   "unset" key=PropertyName ";";
 *
 **/

// "unset" key=PropertyName ";"
protected class UnsetPropertyOperation_Group extends GroupToken {
	
	public UnsetPropertyOperation_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnsetPropertyOperationAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnsetPropertyOperation_SemicolonKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnsetPropertyOperationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "unset"
protected class UnsetPropertyOperation_UnsetKeyword_0 extends KeywordToken  {
	
	public UnsetPropertyOperation_UnsetKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnsetPropertyOperationAccess().getUnsetKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// key=PropertyName
protected class UnsetPropertyOperation_KeyAssignment_1 extends AssignmentToken  {
	
	public UnsetPropertyOperation_KeyAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnsetPropertyOperationAccess().getKeyAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnsetPropertyOperation_UnsetKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("key",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("key");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getUnsetPropertyOperationAccess().getKeyPropertyNameParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class UnsetPropertyOperation_SemicolonKeyword_2 extends KeywordToken  {
	
	public UnsetPropertyOperation_SemicolonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnsetPropertyOperationAccess().getSemicolonKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnsetPropertyOperation_KeyAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule UnsetPropertyOperation ****************/


/************ begin Rule Synchronization ****************
 *
 * Synchronization:
 *   partrefs+=SynchronizedPart ("," partrefs+=SynchronizedPart)+ ";"; 
 * 
 *  
 * 	                // at least 2
 *
 **/

// partrefs+=SynchronizedPart ("," partrefs+=SynchronizedPart)+ ";"                 // at least 2
protected class Synchronization_Group extends GroupToken {
	
	public Synchronization_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSynchronizationAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_SemicolonKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSynchronizationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// partrefs+=SynchronizedPart
protected class Synchronization_PartrefsAssignment_0 extends AssignmentToken  {
	
	public Synchronization_PartrefsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSynchronizationAccess().getPartrefsAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("partrefs",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("partrefs");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getSynchronizationAccess().getPartrefsSynchronizedPartParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ("," partrefs+=SynchronizedPart)+
protected class Synchronization_Group_1 extends GroupToken {
	
	public Synchronization_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSynchronizationAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_PartrefsAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Synchronization_CommaKeyword_1_0 extends KeywordToken  {
	
	public Synchronization_CommaKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSynchronizationAccess().getCommaKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_Group_1(parent, this, 0, inst);
			case 1: return new Synchronization_PartrefsAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// partrefs+=SynchronizedPart
protected class Synchronization_PartrefsAssignment_1_1 extends AssignmentToken  {
	
	public Synchronization_PartrefsAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSynchronizationAccess().getPartrefsAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_CommaKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("partrefs",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("partrefs");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getSynchronizationAccess().getPartrefsSynchronizedPartParserRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}


// ";"     // at least 2
protected class Synchronization_SemicolonKeyword_2 extends KeywordToken  {
	
	public Synchronization_SemicolonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSynchronizationAccess().getSemicolonKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_Group_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Synchronization ****************/



/************ begin Rule PathGroup ****************
 *
 * PathGroup:
 *   paths+=PathVectorElement+ ("annotations" annotations=PropertySet)?;
 *
 **/

// paths+=PathVectorElement+ ("annotations" annotations=PropertySet)?
protected class PathGroup_Group extends GroupToken {
	
	public PathGroup_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_Group_1(parent, this, 0, inst);
			case 1: return new PathGroup_PathsAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPathGroupRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// paths+=PathVectorElement+
protected class PathGroup_PathsAssignment_0 extends AssignmentToken  {
	
	public PathGroup_PathsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getPathsAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathVectorElement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("paths",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("paths");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPathVectorElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPathGroupAccess().getPathsPathVectorElementParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PathGroup_PathsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// ("annotations" annotations=PropertySet)?
protected class PathGroup_Group_1 extends GroupToken {
	
	public PathGroup_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_AnnotationsAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "annotations"
protected class PathGroup_AnnotationsKeyword_1_0 extends KeywordToken  {
	
	public PathGroup_AnnotationsKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getAnnotationsKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_PathsAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// annotations=PropertySet
protected class PathGroup_AnnotationsAssignment_1_1 extends AssignmentToken  {
	
	public PathGroup_AnnotationsAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getAnnotationsAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertySet_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("annotations",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("annotations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertySetRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPathGroupAccess().getAnnotationsPropertySetParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PathGroup_AnnotationsKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule PathGroup ****************/


/************ begin Rule PathVectorElement ****************
 *
 * PathVectorElement:
 *   FilteredPathVector|BasePathVector|UnbasedPathVector;
 *
 **/

// FilteredPathVector|BasePathVector|UnbasedPathVector
protected class PathVectorElement_Alternatives extends AlternativesToken {

	public PathVectorElement_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getPathVectorElementAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathVectorElement_FilteredPathVectorParserRuleCall_0(parent, this, 0, inst);
			case 1: return new PathVectorElement_BasePathVectorParserRuleCall_1(parent, this, 1, inst);
			case 2: return new PathVectorElement_UnbasedPathVectorParserRuleCall_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPathVectorElementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// FilteredPathVector
protected class PathVectorElement_FilteredPathVectorParserRuleCall_0 extends RuleCallToken {
	
	public PathVectorElement_FilteredPathVectorParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPathVectorElementAccess().getFilteredPathVectorParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FilteredPathVector_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(FilteredPathVector_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getFilteredPathVectorRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// BasePathVector
protected class PathVectorElement_BasePathVectorParserRuleCall_1 extends RuleCallToken {
	
	public PathVectorElement_BasePathVectorParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPathVectorElementAccess().getBasePathVectorParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasePathVector_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(BasePathVector_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBasePathVectorRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// UnbasedPathVector
protected class PathVectorElement_UnbasedPathVectorParserRuleCall_2 extends RuleCallToken {
	
	public PathVectorElement_UnbasedPathVectorParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPathVectorElementAccess().getUnbasedPathVectorParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnbasedPathVector_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UnbasedPathVector_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUnbasedPathVectorRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule PathVectorElement ****************/


/************ begin Rule FilteredPathVector ****************
 *
 * FilteredPathVector:
 *   "when" filter=Filter body=( BasePathVector | UnbasedPathVector | CompoundPathVector );
 *
 **/

// "when" filter=Filter body=( BasePathVector | UnbasedPathVector | CompoundPathVector )
protected class FilteredPathVector_Group extends GroupToken {
	
	public FilteredPathVector_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFilteredPathVectorAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FilteredPathVector_BodyAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFilteredPathVectorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "when"
protected class FilteredPathVector_WhenKeyword_0 extends KeywordToken  {
	
	public FilteredPathVector_WhenKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFilteredPathVectorAccess().getWhenKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// filter=Filter
protected class FilteredPathVector_FilterAssignment_1 extends AssignmentToken  {
	
	public FilteredPathVector_FilterAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFilteredPathVectorAccess().getFilterAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Filter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("filter",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("filter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFilterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFilteredPathVectorAccess().getFilterFilterParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FilteredPathVector_WhenKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// body=( BasePathVector | UnbasedPathVector | CompoundPathVector )
protected class FilteredPathVector_BodyAssignment_2 extends AssignmentToken  {
	
	public FilteredPathVector_BodyAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFilteredPathVectorAccess().getBodyAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasePathVector_Group(this, this, 0, inst);
			case 1: return new UnbasedPathVector_Group(this, this, 1, inst);
			case 2: return new CompoundPathVector_Group(this, this, 2, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("body",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBasePathVectorRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFilteredPathVectorAccess().getBodyBasePathVectorParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUnbasedPathVectorRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFilteredPathVectorAccess().getBodyUnbasedPathVectorParserRuleCall_2_0_1(); 
				consumed = obj;
				return param;
			}
		}
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompoundPathVectorRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFilteredPathVectorAccess().getBodyCompoundPathVectorParserRuleCall_2_0_2(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FilteredPathVector_FilterAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule FilteredPathVector ****************/


/************ begin Rule BasePathVector ****************
 *
 * BasePathVector returns PathVector:
 *   basePath=Path "[" (paths+=Path ("," paths+=Path)*)? "]" ";";
 *
 **/

// basePath=Path "[" (paths+=Path ("," paths+=Path)*)? "]" ";"
protected class BasePathVector_Group extends GroupToken {
	
	public BasePathVector_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBasePathVectorAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasePathVector_SemicolonKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBasePathVectorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// basePath=Path
protected class BasePathVector_BasePathAssignment_0 extends AssignmentToken  {
	
	public BasePathVector_BasePathAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBasePathVectorAccess().getBasePathAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("basePath",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("basePath");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getBasePathVectorAccess().getBasePathPathParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "["
protected class BasePathVector_LeftSquareBracketKeyword_1 extends KeywordToken  {
	
	public BasePathVector_LeftSquareBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBasePathVectorAccess().getLeftSquareBracketKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasePathVector_BasePathAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (paths+=Path ("," paths+=Path)*)?
protected class BasePathVector_Group_2 extends GroupToken {
	
	public BasePathVector_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBasePathVectorAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasePathVector_Group_2_1(parent, this, 0, inst);
			case 1: return new BasePathVector_PathsAssignment_2_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// paths+=Path
protected class BasePathVector_PathsAssignment_2_0 extends AssignmentToken  {
	
	public BasePathVector_PathsAssignment_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBasePathVectorAccess().getPathsAssignment_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasePathVector_LeftSquareBracketKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("paths",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("paths");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getBasePathVectorAccess().getPathsPathParserRuleCall_2_0_0();
			return obj;
		}
		return null;
	}

}

// ("," paths+=Path)*
protected class BasePathVector_Group_2_1 extends GroupToken {
	
	public BasePathVector_Group_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBasePathVectorAccess().getGroup_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasePathVector_PathsAssignment_2_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class BasePathVector_CommaKeyword_2_1_0 extends KeywordToken  {
	
	public BasePathVector_CommaKeyword_2_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBasePathVectorAccess().getCommaKeyword_2_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasePathVector_Group_2_1(parent, this, 0, inst);
			case 1: return new BasePathVector_PathsAssignment_2_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// paths+=Path
protected class BasePathVector_PathsAssignment_2_1_1 extends AssignmentToken  {
	
	public BasePathVector_PathsAssignment_2_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBasePathVectorAccess().getPathsAssignment_2_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasePathVector_CommaKeyword_2_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("paths",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("paths");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getBasePathVectorAccess().getPathsPathParserRuleCall_2_1_1_0();
			return obj;
		}
		return null;
	}

}



// "]"
protected class BasePathVector_RightSquareBracketKeyword_3 extends KeywordToken  {
	
	public BasePathVector_RightSquareBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBasePathVectorAccess().getRightSquareBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasePathVector_Group_2(parent, this, 0, inst);
			case 1: return new BasePathVector_LeftSquareBracketKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ";"
protected class BasePathVector_SemicolonKeyword_4 extends KeywordToken  {
	
	public BasePathVector_SemicolonKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBasePathVectorAccess().getSemicolonKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasePathVector_RightSquareBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule BasePathVector ****************/


/************ begin Rule UnbasedPathVector ****************
 *
 * UnbasedPathVector returns PathVector:
 *   paths+=Path ("," paths+=Path)* ";";
 *
 **/

// paths+=Path ("," paths+=Path)* ";"
protected class UnbasedPathVector_Group extends GroupToken {
	
	public UnbasedPathVector_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnbasedPathVectorAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnbasedPathVector_SemicolonKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnbasedPathVectorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// paths+=Path
protected class UnbasedPathVector_PathsAssignment_0 extends AssignmentToken  {
	
	public UnbasedPathVector_PathsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnbasedPathVectorAccess().getPathsAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("paths",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("paths");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getUnbasedPathVectorAccess().getPathsPathParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ("," paths+=Path)*
protected class UnbasedPathVector_Group_1 extends GroupToken {
	
	public UnbasedPathVector_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnbasedPathVectorAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnbasedPathVector_PathsAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class UnbasedPathVector_CommaKeyword_1_0 extends KeywordToken  {
	
	public UnbasedPathVector_CommaKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnbasedPathVectorAccess().getCommaKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnbasedPathVector_Group_1(parent, this, 0, inst);
			case 1: return new UnbasedPathVector_PathsAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// paths+=Path
protected class UnbasedPathVector_PathsAssignment_1_1 extends AssignmentToken  {
	
	public UnbasedPathVector_PathsAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnbasedPathVectorAccess().getPathsAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnbasedPathVector_CommaKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("paths",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("paths");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getUnbasedPathVectorAccess().getPathsPathParserRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}


// ";"
protected class UnbasedPathVector_SemicolonKeyword_2 extends KeywordToken  {
	
	public UnbasedPathVector_SemicolonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnbasedPathVectorAccess().getSemicolonKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnbasedPathVector_Group_1(parent, this, 0, inst);
			case 1: return new UnbasedPathVector_PathsAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule UnbasedPathVector ****************/


/************ begin Rule CompoundPathVector ****************
 *
 * CompoundPathVector:
 *   "{" body+=PathVectorElement* "}"; 
 * 	
 *             
 * 
 * // A path can be written without quotes if it consists of safe chars
 *
 **/

// "{" body+=PathVectorElement* "}"
protected class CompoundPathVector_Group extends GroupToken {
	
	public CompoundPathVector_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCompoundPathVectorAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundPathVector_RightCurlyBracketKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCompoundPathVectorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "{"
protected class CompoundPathVector_LeftCurlyBracketKeyword_0 extends KeywordToken  {
	
	public CompoundPathVector_LeftCurlyBracketKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundPathVectorAccess().getLeftCurlyBracketKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// body+=PathVectorElement*
protected class CompoundPathVector_BodyAssignment_1 extends AssignmentToken  {
	
	public CompoundPathVector_BodyAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundPathVectorAccess().getBodyAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathVectorElement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("body",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPathVectorElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompoundPathVectorAccess().getBodyPathVectorElementParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompoundPathVector_BodyAssignment_1(parent, next, actIndex, consumed);
			case 1: return new CompoundPathVector_LeftCurlyBracketKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class CompoundPathVector_RightCurlyBracketKeyword_2 extends KeywordToken  {
	
	public CompoundPathVector_RightCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundPathVectorAccess().getRightCurlyBracketKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundPathVector_BodyAssignment_1(parent, this, 0, inst);
			case 1: return new CompoundPathVector_LeftCurlyBracketKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule CompoundPathVector ****************/



/************ begin Rule Prerequisite ****************
 *
 * Prerequisite:
 *   ("when" filter=Filter)? withClause=WithClause? partReference=PrerequisiteEntry ("as"
 *   alias=ID)? ";"; 
 * 
 *    
 * 		    
 * 		    
 * 		 
 * 		    
 * 	
 * 
 * // Validation checks that there is at least one of references, properties or concern.
 *
 **/

// ("when" filter=Filter)? withClause=WithClause? partReference=PrerequisiteEntry ("as"
// alias=ID)? ";"
protected class Prerequisite_Group extends GroupToken {
	
	public Prerequisite_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_SemicolonKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPrerequisiteRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ("when" filter=Filter)?
protected class Prerequisite_Group_0 extends GroupToken {
	
	public Prerequisite_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_FilterAssignment_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "when"
protected class Prerequisite_WhenKeyword_0_0 extends KeywordToken  {
	
	public Prerequisite_WhenKeyword_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getWhenKeyword_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// filter=Filter
protected class Prerequisite_FilterAssignment_0_1 extends AssignmentToken  {
	
	public Prerequisite_FilterAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getFilterAssignment_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Filter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("filter",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("filter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFilterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPrerequisiteAccess().getFilterFilterParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Prerequisite_WhenKeyword_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// withClause=WithClause?
protected class Prerequisite_WithClauseAssignment_1 extends AssignmentToken  {
	
	public Prerequisite_WithClauseAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getWithClauseAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithClause_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("withClause",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("withClause");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getWithClauseRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPrerequisiteAccess().getWithClauseWithClauseParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Prerequisite_Group_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// partReference=PrerequisiteEntry
protected class Prerequisite_PartReferenceAssignment_2 extends AssignmentToken  {
	
	public Prerequisite_PartReferenceAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getPartReferenceAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrerequisiteEntry_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("partReference",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("partReference");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrerequisiteEntryRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPrerequisiteAccess().getPartReferencePrerequisiteEntryParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Prerequisite_WithClauseAssignment_1(parent, next, actIndex, consumed);
			case 1: return new Prerequisite_Group_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 2, consumed);
		}	
	}	
}

// ("as" alias=ID)?
protected class Prerequisite_Group_3 extends GroupToken {
	
	public Prerequisite_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_AliasAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "as"
protected class Prerequisite_AsKeyword_3_0 extends KeywordToken  {
	
	public Prerequisite_AsKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getAsKeyword_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_PartReferenceAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// alias=ID
protected class Prerequisite_AliasAssignment_3_1 extends AssignmentToken  {
	
	public Prerequisite_AliasAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getAliasAssignment_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_AsKeyword_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("alias",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("alias");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPrerequisiteAccess().getAliasIDTerminalRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}


// ";"
protected class Prerequisite_SemicolonKeyword_4 extends KeywordToken  {
	
	public Prerequisite_SemicolonKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getSemicolonKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_Group_3(parent, this, 0, inst);
			case 1: return new Prerequisite_PartReferenceAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Prerequisite ****************/


/************ begin Rule WithClause ****************
 *
 * WithClause:
 *   {WithClause} "with" ("(" references+=Expression ("," references+=Expression)* ")")? (
 *   "properties" properties+=PropertySet|"concern" concern+=ConcernBlock)*; 
 * 
 * // Validation checks that there is at least one of references, properties or concern.
 *
 **/

// {WithClause} "with" ("(" references+=Expression ("," references+=Expression)* ")")? (
// "properties" properties+=PropertySet|"concern" concern+=ConcernBlock)*
protected class WithClause_Group extends GroupToken {
	
	public WithClause_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getWithClauseAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithClause_Alternatives_3(parent, this, 0, inst);
			case 1: return new WithClause_Group_2(parent, this, 1, inst);
			case 2: return new WithClause_WithKeyword_1(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getWithClauseRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {WithClause}
protected class WithClause_WithClauseAction_0 extends ActionToken  {

	public WithClause_WithClauseAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getWithClauseAccess().getWithClauseAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getWithClauseAccess().getWithClauseAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "with"
protected class WithClause_WithKeyword_1 extends KeywordToken  {
	
	public WithClause_WithKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWithClauseAccess().getWithKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithClause_WithClauseAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("(" references+=Expression ("," references+=Expression)* ")")?
protected class WithClause_Group_2 extends GroupToken {
	
	public WithClause_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getWithClauseAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithClause_RightParenthesisKeyword_2_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class WithClause_LeftParenthesisKeyword_2_0 extends KeywordToken  {
	
	public WithClause_LeftParenthesisKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWithClauseAccess().getLeftParenthesisKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithClause_WithKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// references+=Expression
protected class WithClause_ReferencesAssignment_2_1 extends AssignmentToken  {
	
	public WithClause_ReferencesAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getWithClauseAccess().getReferencesAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("references",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("references");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWithClauseAccess().getReferencesExpressionParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WithClause_LeftParenthesisKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," references+=Expression)*
protected class WithClause_Group_2_2 extends GroupToken {
	
	public WithClause_Group_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getWithClauseAccess().getGroup_2_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithClause_ReferencesAssignment_2_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class WithClause_CommaKeyword_2_2_0 extends KeywordToken  {
	
	public WithClause_CommaKeyword_2_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWithClauseAccess().getCommaKeyword_2_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithClause_Group_2_2(parent, this, 0, inst);
			case 1: return new WithClause_ReferencesAssignment_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// references+=Expression
protected class WithClause_ReferencesAssignment_2_2_1 extends AssignmentToken  {
	
	public WithClause_ReferencesAssignment_2_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getWithClauseAccess().getReferencesAssignment_2_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("references",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("references");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWithClauseAccess().getReferencesExpressionParserRuleCall_2_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WithClause_CommaKeyword_2_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ")"
protected class WithClause_RightParenthesisKeyword_2_3 extends KeywordToken  {
	
	public WithClause_RightParenthesisKeyword_2_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWithClauseAccess().getRightParenthesisKeyword_2_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithClause_Group_2_2(parent, this, 0, inst);
			case 1: return new WithClause_ReferencesAssignment_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// ("properties" properties+=PropertySet|"concern" concern+=ConcernBlock)*
protected class WithClause_Alternatives_3 extends AlternativesToken {

	public WithClause_Alternatives_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getWithClauseAccess().getAlternatives_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithClause_Group_3_0(parent, this, 0, inst);
			case 1: return new WithClause_Group_3_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "properties" properties+=PropertySet
protected class WithClause_Group_3_0 extends GroupToken {
	
	public WithClause_Group_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getWithClauseAccess().getGroup_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithClause_PropertiesAssignment_3_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "properties"
protected class WithClause_PropertiesKeyword_3_0_0 extends KeywordToken  {
	
	public WithClause_PropertiesKeyword_3_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWithClauseAccess().getPropertiesKeyword_3_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithClause_Alternatives_3(parent, this, 0, inst);
			case 1: return new WithClause_Group_2(parent, this, 1, inst);
			case 2: return new WithClause_WithKeyword_1(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// properties+=PropertySet
protected class WithClause_PropertiesAssignment_3_0_1 extends AssignmentToken  {
	
	public WithClause_PropertiesAssignment_3_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getWithClauseAccess().getPropertiesAssignment_3_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertySet_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("properties",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("properties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertySetRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWithClauseAccess().getPropertiesPropertySetParserRuleCall_3_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WithClause_PropertiesKeyword_3_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "concern" concern+=ConcernBlock
protected class WithClause_Group_3_1 extends GroupToken {
	
	public WithClause_Group_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getWithClauseAccess().getGroup_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithClause_ConcernAssignment_3_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "concern"
protected class WithClause_ConcernKeyword_3_1_0 extends KeywordToken  {
	
	public WithClause_ConcernKeyword_3_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWithClauseAccess().getConcernKeyword_3_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithClause_Alternatives_3(parent, this, 0, inst);
			case 1: return new WithClause_Group_2(parent, this, 1, inst);
			case 2: return new WithClause_WithKeyword_1(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// concern+=ConcernBlock
protected class WithClause_ConcernAssignment_3_1_1 extends AssignmentToken  {
	
	public WithClause_ConcernAssignment_3_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getWithClauseAccess().getConcernAssignment_3_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConcernBlock_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("concern",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("concern");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConcernBlockRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWithClauseAccess().getConcernConcernBlockParserRuleCall_3_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WithClause_ConcernKeyword_3_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule WithClause ****************/


/************ begin Rule PrerequisiteEntry ****************
 *
 * PrerequisiteEntry:
 *   DirectPartReferemce|CapabilityReferencedPart|CompoundReferences;
 *
 **/

// DirectPartReferemce|CapabilityReferencedPart|CompoundReferences
protected class PrerequisiteEntry_Alternatives extends AlternativesToken {

	public PrerequisiteEntry_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getPrerequisiteEntryAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrerequisiteEntry_DirectPartReferemceParserRuleCall_0(parent, this, 0, inst);
			case 1: return new PrerequisiteEntry_CapabilityReferencedPartParserRuleCall_1(parent, this, 1, inst);
			case 2: return new PrerequisiteEntry_CompoundReferencesParserRuleCall_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPrerequisiteEntryRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// DirectPartReferemce
protected class PrerequisiteEntry_DirectPartReferemceParserRuleCall_0 extends RuleCallToken {
	
	public PrerequisiteEntry_DirectPartReferemceParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrerequisiteEntryAccess().getDirectPartReferemceParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DirectPartReferemce_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DirectPartReferemce_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDirectPartReferemceRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// CapabilityReferencedPart
protected class PrerequisiteEntry_CapabilityReferencedPartParserRuleCall_1 extends RuleCallToken {
	
	public PrerequisiteEntry_CapabilityReferencedPartParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrerequisiteEntryAccess().getCapabilityReferencedPartParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CapabilityReferencedPart_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCapabilityReferencedPartRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// CompoundReferences
protected class PrerequisiteEntry_CompoundReferencesParserRuleCall_2 extends RuleCallToken {
	
	public PrerequisiteEntry_CompoundReferencesParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrerequisiteEntryAccess().getCompoundReferencesParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundReferences_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CompoundReferences_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCompoundReferencesRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule PrerequisiteEntry ****************/


/************ begin Rule DirectPartReferemce ****************
 *
 * DirectPartReferemce:
 *   (unit=QID|unit="unit")? "#" builder=PartName parameters=ParameterList?;
 *
 **/

// (unit=QID|unit="unit")? "#" builder=PartName parameters=ParameterList?
protected class DirectPartReferemce_Group extends GroupToken {
	
	public DirectPartReferemce_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDirectPartReferemceAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DirectPartReferemce_ParametersAssignment_3(parent, this, 0, inst);
			case 1: return new DirectPartReferemce_BuilderAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDirectPartReferemceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// (unit=QID|unit="unit")?
protected class DirectPartReferemce_Alternatives_0 extends AlternativesToken {

	public DirectPartReferemce_Alternatives_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getDirectPartReferemceAccess().getAlternatives_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DirectPartReferemce_UnitAssignment_0_0(parent, this, 0, inst);
			case 1: return new DirectPartReferemce_UnitAssignment_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// unit=QID
protected class DirectPartReferemce_UnitAssignment_0_0 extends AssignmentToken  {
	
	public DirectPartReferemce_UnitAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDirectPartReferemceAccess().getUnitAssignment_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("unit",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("unit");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getDirectPartReferemceAccess().getUnitQIDParserRuleCall_0_0_0();
			return obj;
		}
		return null;
	}

}

// unit="unit"
protected class DirectPartReferemce_UnitAssignment_0_1 extends AssignmentToken  {
	
	public DirectPartReferemce_UnitAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDirectPartReferemceAccess().getUnitAssignment_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("unit",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("unit");
		if("unit".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getDirectPartReferemceAccess().getUnitUnitKeyword_0_1_0();
			return obj;
		}
		return null;
	}

}


// "#"
protected class DirectPartReferemce_NumberSignKeyword_1 extends KeywordToken  {
	
	public DirectPartReferemce_NumberSignKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDirectPartReferemceAccess().getNumberSignKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DirectPartReferemce_Alternatives_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// builder=PartName
protected class DirectPartReferemce_BuilderAssignment_2 extends AssignmentToken  {
	
	public DirectPartReferemce_BuilderAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDirectPartReferemceAccess().getBuilderAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DirectPartReferemce_NumberSignKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("builder",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("builder");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getDirectPartReferemceAccess().getBuilderPartNameParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// parameters=ParameterList?
protected class DirectPartReferemce_ParametersAssignment_3 extends AssignmentToken  {
	
	public DirectPartReferemce_ParametersAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDirectPartReferemceAccess().getParametersAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterList_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameters",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDirectPartReferemceAccess().getParametersParameterListParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DirectPartReferemce_BuilderAssignment_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule DirectPartReferemce ****************/


/************ begin Rule CapabilityReferencedPart ****************
 *
 * CapabilityReferencedPart:
 *   capability=Capability ("/" range=VersionRange)? ("#" partName=PartName)? parameters=
 *   ParameterList?;
 *
 **/

// capability=Capability ("/" range=VersionRange)? ("#" partName=PartName)? parameters=
// ParameterList?
protected class CapabilityReferencedPart_Group extends GroupToken {
	
	public CapabilityReferencedPart_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_ParametersAssignment_3(parent, this, 0, inst);
			case 1: return new CapabilityReferencedPart_Group_2(parent, this, 1, inst);
			case 2: return new CapabilityReferencedPart_Group_1(parent, this, 2, inst);
			case 3: return new CapabilityReferencedPart_CapabilityAssignment_0(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCapabilityReferencedPartRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// capability=Capability
protected class CapabilityReferencedPart_CapabilityAssignment_0 extends AssignmentToken  {
	
	public CapabilityReferencedPart_CapabilityAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getCapabilityAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Capability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("capability",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("capability");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCapabilityReferencedPartAccess().getCapabilityCapabilityParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// ("/" range=VersionRange)?
protected class CapabilityReferencedPart_Group_1 extends GroupToken {
	
	public CapabilityReferencedPart_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_RangeAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "/"
protected class CapabilityReferencedPart_SolidusKeyword_1_0 extends KeywordToken  {
	
	public CapabilityReferencedPart_SolidusKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getSolidusKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_CapabilityAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// range=VersionRange
protected class CapabilityReferencedPart_RangeAssignment_1_1 extends AssignmentToken  {
	
	public CapabilityReferencedPart_RangeAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getRangeAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VersionRange_RangeAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("range",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("range");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVersionRangeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCapabilityReferencedPartAccess().getRangeVersionRangeParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CapabilityReferencedPart_SolidusKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("#" partName=PartName)?
protected class CapabilityReferencedPart_Group_2 extends GroupToken {
	
	public CapabilityReferencedPart_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_PartNameAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "#"
protected class CapabilityReferencedPart_NumberSignKeyword_2_0 extends KeywordToken  {
	
	public CapabilityReferencedPart_NumberSignKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getNumberSignKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_Group_1(parent, this, 0, inst);
			case 1: return new CapabilityReferencedPart_CapabilityAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// partName=PartName
protected class CapabilityReferencedPart_PartNameAssignment_2_1 extends AssignmentToken  {
	
	public CapabilityReferencedPart_PartNameAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getPartNameAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_NumberSignKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("partName",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("partName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getCapabilityReferencedPartAccess().getPartNamePartNameParserRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}


// parameters=ParameterList?
protected class CapabilityReferencedPart_ParametersAssignment_3 extends AssignmentToken  {
	
	public CapabilityReferencedPart_ParametersAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getParametersAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterList_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameters",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCapabilityReferencedPartAccess().getParametersParameterListParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CapabilityReferencedPart_Group_2(parent, next, actIndex, consumed);
			case 1: return new CapabilityReferencedPart_Group_1(parent, next, actIndex, consumed);
			case 2: return new CapabilityReferencedPart_CapabilityAssignment_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule CapabilityReferencedPart ****************/


/************ begin Rule CompoundReferences ****************
 *
 * CompoundReferences:
 *   "{" prerequisites+=Prerequisite* "}";
 *
 **/

// "{" prerequisites+=Prerequisite* "}"
protected class CompoundReferences_Group extends GroupToken {
	
	public CompoundReferences_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCompoundReferencesAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundReferences_RightCurlyBracketKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCompoundReferencesRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "{"
protected class CompoundReferences_LeftCurlyBracketKeyword_0 extends KeywordToken  {
	
	public CompoundReferences_LeftCurlyBracketKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundReferencesAccess().getLeftCurlyBracketKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// prerequisites+=Prerequisite*
protected class CompoundReferences_PrerequisitesAssignment_1 extends AssignmentToken  {
	
	public CompoundReferences_PrerequisitesAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundReferencesAccess().getPrerequisitesAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("prerequisites",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("prerequisites");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrerequisiteRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompoundReferencesAccess().getPrerequisitesPrerequisiteParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompoundReferences_PrerequisitesAssignment_1(parent, next, actIndex, consumed);
			case 1: return new CompoundReferences_LeftCurlyBracketKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class CompoundReferences_RightCurlyBracketKeyword_2 extends KeywordToken  {
	
	public CompoundReferences_RightCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundReferencesAccess().getRightCurlyBracketKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundReferences_PrerequisitesAssignment_1(parent, this, 0, inst);
			case 1: return new CompoundReferences_LeftCurlyBracketKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule CompoundReferences ****************/


/************ begin Rule Builder ****************
 *
 * Builder:
 *   {Builder} documentation=DOCUMENTATION? visibility=Visibility? executionMode=
 *   ExecutionMode? final?="final"? cached?="cached"? "builder" name=PartName ("(" params=
 *   ParameterDeclarationList ")")? ("provides" providedCapabilities+=ProvidedCapability
 *   ("," providedCapabilities+=ProvidedCapability)*)? preCondition=PreCondition?
 *   postCondition=PostCondition? "{" ("default" "properties" properties=PropertySet)?
 *   input=BuilderInput? output=BuilderOutput? expressionList=ExpressionList? "}";
 *
 **/

// {Builder} documentation=DOCUMENTATION? visibility=Visibility? executionMode=
// ExecutionMode? final?="final"? cached?="cached"? "builder" name=PartName ("(" params=
// ParameterDeclarationList ")")? ("provides" providedCapabilities+=ProvidedCapability
// ("," providedCapabilities+=ProvidedCapability)*)? preCondition=PreCondition?
// postCondition=PostCondition? "{" ("default" "properties" properties=PropertySet)?
// input=BuilderInput? output=BuilderOutput? expressionList=ExpressionList? "}"
protected class Builder_Group extends GroupToken {
	
	public Builder_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBuilderAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_RightCurlyBracketKeyword_17(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBuilderRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {Builder}
protected class Builder_BuilderAction_0 extends ActionToken  {

	public Builder_BuilderAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getBuilderAccess().getBuilderAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getBuilderAccess().getBuilderAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// documentation=DOCUMENTATION?
protected class Builder_DocumentationAssignment_1 extends AssignmentToken  {
	
	public Builder_DocumentationAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderAccess().getDocumentationAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_BuilderAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("documentation",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("documentation");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getBuilderAccess().getDocumentationDOCUMENTATIONTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// visibility=Visibility?
protected class Builder_VisibilityAssignment_2 extends AssignmentToken  {
	
	public Builder_VisibilityAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderAccess().getVisibilityAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_DocumentationAssignment_1(parent, this, 0, inst);
			case 1: return new Builder_BuilderAction_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("visibility",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("visibility");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getBuilderAccess().getVisibilityVisibilityEnumRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// executionMode=ExecutionMode?
protected class Builder_ExecutionModeAssignment_3 extends AssignmentToken  {
	
	public Builder_ExecutionModeAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderAccess().getExecutionModeAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_VisibilityAssignment_2(parent, this, 0, inst);
			case 1: return new Builder_DocumentationAssignment_1(parent, this, 1, inst);
			case 2: return new Builder_BuilderAction_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("executionMode",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("executionMode");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getBuilderAccess().getExecutionModeExecutionModeEnumRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// final?="final"?
protected class Builder_FinalAssignment_4 extends AssignmentToken  {
	
	public Builder_FinalAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderAccess().getFinalAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_ExecutionModeAssignment_3(parent, this, 0, inst);
			case 1: return new Builder_VisibilityAssignment_2(parent, this, 1, inst);
			case 2: return new Builder_DocumentationAssignment_1(parent, this, 2, inst);
			case 3: return new Builder_BuilderAction_0(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("final",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("final");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getBuilderAccess().getFinalFinalKeyword_4_0();
			return obj;
		}
		return null;
	}

}

// cached?="cached"?
protected class Builder_CachedAssignment_5 extends AssignmentToken  {
	
	public Builder_CachedAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderAccess().getCachedAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_FinalAssignment_4(parent, this, 0, inst);
			case 1: return new Builder_ExecutionModeAssignment_3(parent, this, 1, inst);
			case 2: return new Builder_VisibilityAssignment_2(parent, this, 2, inst);
			case 3: return new Builder_DocumentationAssignment_1(parent, this, 3, inst);
			case 4: return new Builder_BuilderAction_0(parent, this, 4, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("cached",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("cached");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getBuilderAccess().getCachedCachedKeyword_5_0();
			return obj;
		}
		return null;
	}

}

// "builder"
protected class Builder_BuilderKeyword_6 extends KeywordToken  {
	
	public Builder_BuilderKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBuilderAccess().getBuilderKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_CachedAssignment_5(parent, this, 0, inst);
			case 1: return new Builder_FinalAssignment_4(parent, this, 1, inst);
			case 2: return new Builder_ExecutionModeAssignment_3(parent, this, 2, inst);
			case 3: return new Builder_VisibilityAssignment_2(parent, this, 3, inst);
			case 4: return new Builder_DocumentationAssignment_1(parent, this, 4, inst);
			case 5: return new Builder_BuilderAction_0(parent, this, 5, inst);
			default: return null;
		}	
	}	
		
}

// name=PartName
protected class Builder_NameAssignment_7 extends AssignmentToken  {
	
	public Builder_NameAssignment_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderAccess().getNameAssignment_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_BuilderKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getBuilderAccess().getNamePartNameParserRuleCall_7_0();
			return obj;
		}
		return null;
	}

}

// ("(" params=ParameterDeclarationList ")")?
protected class Builder_Group_8 extends GroupToken {
	
	public Builder_Group_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBuilderAccess().getGroup_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_RightParenthesisKeyword_8_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class Builder_LeftParenthesisKeyword_8_0 extends KeywordToken  {
	
	public Builder_LeftParenthesisKeyword_8_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBuilderAccess().getLeftParenthesisKeyword_8_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_NameAssignment_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// params=ParameterDeclarationList
protected class Builder_ParamsAssignment_8_1 extends AssignmentToken  {
	
	public Builder_ParamsAssignment_8_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderAccess().getParamsAssignment_8_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclarationList_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterDeclarationListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuilderAccess().getParamsParameterDeclarationListParserRuleCall_8_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Builder_LeftParenthesisKeyword_8_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class Builder_RightParenthesisKeyword_8_2 extends KeywordToken  {
	
	public Builder_RightParenthesisKeyword_8_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBuilderAccess().getRightParenthesisKeyword_8_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_ParamsAssignment_8_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ("provides" providedCapabilities+=ProvidedCapability ("," providedCapabilities+=
// ProvidedCapability)*)?
protected class Builder_Group_9 extends GroupToken {
	
	public Builder_Group_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBuilderAccess().getGroup_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_Group_9_2(parent, this, 0, inst);
			case 1: return new Builder_ProvidedCapabilitiesAssignment_9_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "provides"
protected class Builder_ProvidesKeyword_9_0 extends KeywordToken  {
	
	public Builder_ProvidesKeyword_9_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBuilderAccess().getProvidesKeyword_9_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_Group_8(parent, this, 0, inst);
			case 1: return new Builder_NameAssignment_7(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// providedCapabilities+=ProvidedCapability
protected class Builder_ProvidedCapabilitiesAssignment_9_1 extends AssignmentToken  {
	
	public Builder_ProvidedCapabilitiesAssignment_9_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderAccess().getProvidedCapabilitiesAssignment_9_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("providedCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("providedCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProvidedCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuilderAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_9_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Builder_ProvidesKeyword_9_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," providedCapabilities+=ProvidedCapability)*
protected class Builder_Group_9_2 extends GroupToken {
	
	public Builder_Group_9_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBuilderAccess().getGroup_9_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_ProvidedCapabilitiesAssignment_9_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Builder_CommaKeyword_9_2_0 extends KeywordToken  {
	
	public Builder_CommaKeyword_9_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBuilderAccess().getCommaKeyword_9_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_Group_9_2(parent, this, 0, inst);
			case 1: return new Builder_ProvidedCapabilitiesAssignment_9_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// providedCapabilities+=ProvidedCapability
protected class Builder_ProvidedCapabilitiesAssignment_9_2_1 extends AssignmentToken  {
	
	public Builder_ProvidedCapabilitiesAssignment_9_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderAccess().getProvidedCapabilitiesAssignment_9_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("providedCapabilities",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("providedCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProvidedCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuilderAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_9_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Builder_CommaKeyword_9_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// preCondition=PreCondition?
protected class Builder_PreConditionAssignment_10 extends AssignmentToken  {
	
	public Builder_PreConditionAssignment_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderAccess().getPreConditionAssignment_10();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PreCondition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("preCondition",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("preCondition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPreConditionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuilderAccess().getPreConditionPreConditionParserRuleCall_10_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Builder_Group_9(parent, next, actIndex, consumed);
			case 1: return new Builder_Group_8(parent, next, actIndex, consumed);
			case 2: return new Builder_NameAssignment_7(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// postCondition=PostCondition?
protected class Builder_PostConditionAssignment_11 extends AssignmentToken  {
	
	public Builder_PostConditionAssignment_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderAccess().getPostConditionAssignment_11();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostCondition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("postCondition",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("postCondition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPostConditionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuilderAccess().getPostConditionPostConditionParserRuleCall_11_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Builder_PreConditionAssignment_10(parent, next, actIndex, consumed);
			case 1: return new Builder_Group_9(parent, next, actIndex, consumed);
			case 2: return new Builder_Group_8(parent, next, actIndex, consumed);
			case 3: return new Builder_NameAssignment_7(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class Builder_LeftCurlyBracketKeyword_12 extends KeywordToken  {
	
	public Builder_LeftCurlyBracketKeyword_12(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBuilderAccess().getLeftCurlyBracketKeyword_12();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_PostConditionAssignment_11(parent, this, 0, inst);
			case 1: return new Builder_PreConditionAssignment_10(parent, this, 1, inst);
			case 2: return new Builder_Group_9(parent, this, 2, inst);
			case 3: return new Builder_Group_8(parent, this, 3, inst);
			case 4: return new Builder_NameAssignment_7(parent, this, 4, inst);
			default: return null;
		}	
	}	
		
}

// ("default" "properties" properties=PropertySet)?
protected class Builder_Group_13 extends GroupToken {
	
	public Builder_Group_13(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBuilderAccess().getGroup_13();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_PropertiesAssignment_13_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "default"
protected class Builder_DefaultKeyword_13_0 extends KeywordToken  {
	
	public Builder_DefaultKeyword_13_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBuilderAccess().getDefaultKeyword_13_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_LeftCurlyBracketKeyword_12(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "properties"
protected class Builder_PropertiesKeyword_13_1 extends KeywordToken  {
	
	public Builder_PropertiesKeyword_13_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBuilderAccess().getPropertiesKeyword_13_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_DefaultKeyword_13_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// properties=PropertySet
protected class Builder_PropertiesAssignment_13_2 extends AssignmentToken  {
	
	public Builder_PropertiesAssignment_13_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderAccess().getPropertiesAssignment_13_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertySet_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("properties",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("properties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertySetRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuilderAccess().getPropertiesPropertySetParserRuleCall_13_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Builder_PropertiesKeyword_13_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// input=BuilderInput?
protected class Builder_InputAssignment_14 extends AssignmentToken  {
	
	public Builder_InputAssignment_14(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderAccess().getInputAssignment_14();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BuilderInput_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("input",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("input");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBuilderInputRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuilderAccess().getInputBuilderInputParserRuleCall_14_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Builder_Group_13(parent, next, actIndex, consumed);
			case 1: return new Builder_LeftCurlyBracketKeyword_12(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// output=BuilderOutput?
protected class Builder_OutputAssignment_15 extends AssignmentToken  {
	
	public Builder_OutputAssignment_15(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderAccess().getOutputAssignment_15();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BuilderOutput_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("output",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("output");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBuilderOutputRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuilderAccess().getOutputBuilderOutputParserRuleCall_15_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Builder_InputAssignment_14(parent, next, actIndex, consumed);
			case 1: return new Builder_Group_13(parent, next, actIndex, consumed);
			case 2: return new Builder_LeftCurlyBracketKeyword_12(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// expressionList=ExpressionList?
protected class Builder_ExpressionListAssignment_16 extends AssignmentToken  {
	
	public Builder_ExpressionListAssignment_16(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderAccess().getExpressionListAssignment_16();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExpressionList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expressionList",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expressionList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuilderAccess().getExpressionListExpressionListParserRuleCall_16_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Builder_OutputAssignment_15(parent, next, actIndex, consumed);
			case 1: return new Builder_InputAssignment_14(parent, next, actIndex, consumed);
			case 2: return new Builder_Group_13(parent, next, actIndex, consumed);
			case 3: return new Builder_LeftCurlyBracketKeyword_12(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Builder_RightCurlyBracketKeyword_17 extends KeywordToken  {
	
	public Builder_RightCurlyBracketKeyword_17(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBuilderAccess().getRightCurlyBracketKeyword_17();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_ExpressionListAssignment_16(parent, this, 0, inst);
			case 1: return new Builder_OutputAssignment_15(parent, this, 1, inst);
			case 2: return new Builder_InputAssignment_14(parent, this, 2, inst);
			case 3: return new Builder_Group_13(parent, this, 3, inst);
			case 4: return new Builder_LeftCurlyBracketKeyword_12(parent, this, 4, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Builder ****************/


/************ begin Rule Parameter ****************
 *
 * Parameter:
 *   (name=ID ":")? val=Expression;
 *
 **/

// (name=ID ":")? val=Expression
protected class Parameter_Group extends GroupToken {
	
	public Parameter_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getParameterAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parameter_ValAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getParameterRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// (name=ID ":")?
protected class Parameter_Group_0 extends GroupToken {
	
	public Parameter_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getParameterAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parameter_ColonKeyword_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=ID
protected class Parameter_NameAssignment_0_0 extends AssignmentToken  {
	
	public Parameter_NameAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterAccess().getNameAssignment_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0_0();
			return obj;
		}
		return null;
	}

}

// ":"
protected class Parameter_ColonKeyword_0_1 extends KeywordToken  {
	
	public Parameter_ColonKeyword_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getParameterAccess().getColonKeyword_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parameter_NameAssignment_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// val=Expression
protected class Parameter_ValAssignment_1 extends AssignmentToken  {
	
	public Parameter_ValAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterAccess().getValAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getParameterAccess().getValExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Parameter_Group_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}


/************ end Rule Parameter ****************/


/************ begin Rule ParameterList ****************
 *
 * ParameterList:
 *   (params+=Parameter ("," params+=Parameter)*|params+=ClosureExpression)?;
 *
 **/

// (params+=Parameter ("," params+=Parameter)*|params+=ClosureExpression)?
protected class ParameterList_Alternatives extends AlternativesToken {

	public ParameterList_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getParameterListAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterList_Group_0(parent, this, 0, inst);
			case 1: return new ParameterList_ParamsAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getParameterListRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// params+=Parameter ("," params+=Parameter)*
protected class ParameterList_Group_0 extends GroupToken {
	
	public ParameterList_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getParameterListAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterList_Group_0_1(parent, this, 0, inst);
			case 1: return new ParameterList_ParamsAssignment_0_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// params+=Parameter
protected class ParameterList_ParamsAssignment_0_0 extends AssignmentToken  {
	
	public ParameterList_ParamsAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterListAccess().getParamsAssignment_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parameter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getParameterListAccess().getParamsParameterParserRuleCall_0_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// ("," params+=Parameter)*
protected class ParameterList_Group_0_1 extends GroupToken {
	
	public ParameterList_Group_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getParameterListAccess().getGroup_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterList_ParamsAssignment_0_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class ParameterList_CommaKeyword_0_1_0 extends KeywordToken  {
	
	public ParameterList_CommaKeyword_0_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getParameterListAccess().getCommaKeyword_0_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterList_Group_0_1(parent, this, 0, inst);
			case 1: return new ParameterList_ParamsAssignment_0_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// params+=Parameter
protected class ParameterList_ParamsAssignment_0_1_1 extends AssignmentToken  {
	
	public ParameterList_ParamsAssignment_0_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterListAccess().getParamsAssignment_0_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parameter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getParameterListAccess().getParamsParameterParserRuleCall_0_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ParameterList_CommaKeyword_0_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// params+=ClosureExpression
protected class ParameterList_ParamsAssignment_1 extends AssignmentToken  {
	
	public ParameterList_ParamsAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterListAccess().getParamsAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getClosureExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getParameterListAccess().getParamsClosureExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule ParameterList ****************/


/************ begin Rule ParameterDeclarationList ****************
 *
 * ParameterDeclarationList:
 *   params+=ParameterDeclaration ("," params+=ParameterDeclaration)* ("," params+=
 *   ParameterDeclarationEllipse)?|params+=ParameterDeclarationEllipse;
 *
 **/

// params+=ParameterDeclaration ("," params+=ParameterDeclaration)* ("," params+=
// ParameterDeclarationEllipse)?|params+=ParameterDeclarationEllipse
protected class ParameterDeclarationList_Alternatives extends AlternativesToken {

	public ParameterDeclarationList_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getParameterDeclarationListAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclarationList_Group_0(parent, this, 0, inst);
			case 1: return new ParameterDeclarationList_ParamsAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getParameterDeclarationListRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// params+=ParameterDeclaration ("," params+=ParameterDeclaration)* ("," params+=
// ParameterDeclarationEllipse)?
protected class ParameterDeclarationList_Group_0 extends GroupToken {
	
	public ParameterDeclarationList_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getParameterDeclarationListAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclarationList_Group_0_2(parent, this, 0, inst);
			case 1: return new ParameterDeclarationList_Group_0_1(parent, this, 1, inst);
			case 2: return new ParameterDeclarationList_ParamsAssignment_0_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// params+=ParameterDeclaration
protected class ParameterDeclarationList_ParamsAssignment_0_0 extends AssignmentToken  {
	
	public ParameterDeclarationList_ParamsAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterDeclarationListAccess().getParamsAssignment_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getParameterDeclarationListAccess().getParamsParameterDeclarationParserRuleCall_0_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// ("," params+=ParameterDeclaration)*
protected class ParameterDeclarationList_Group_0_1 extends GroupToken {
	
	public ParameterDeclarationList_Group_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getParameterDeclarationListAccess().getGroup_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclarationList_ParamsAssignment_0_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class ParameterDeclarationList_CommaKeyword_0_1_0 extends KeywordToken  {
	
	public ParameterDeclarationList_CommaKeyword_0_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getParameterDeclarationListAccess().getCommaKeyword_0_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclarationList_Group_0_1(parent, this, 0, inst);
			case 1: return new ParameterDeclarationList_ParamsAssignment_0_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// params+=ParameterDeclaration
protected class ParameterDeclarationList_ParamsAssignment_0_1_1 extends AssignmentToken  {
	
	public ParameterDeclarationList_ParamsAssignment_0_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterDeclarationListAccess().getParamsAssignment_0_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getParameterDeclarationListAccess().getParamsParameterDeclarationParserRuleCall_0_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ParameterDeclarationList_CommaKeyword_0_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("," params+=ParameterDeclarationEllipse)?
protected class ParameterDeclarationList_Group_0_2 extends GroupToken {
	
	public ParameterDeclarationList_Group_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getParameterDeclarationListAccess().getGroup_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclarationList_ParamsAssignment_0_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class ParameterDeclarationList_CommaKeyword_0_2_0 extends KeywordToken  {
	
	public ParameterDeclarationList_CommaKeyword_0_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getParameterDeclarationListAccess().getCommaKeyword_0_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclarationList_Group_0_1(parent, this, 0, inst);
			case 1: return new ParameterDeclarationList_ParamsAssignment_0_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// params+=ParameterDeclarationEllipse
protected class ParameterDeclarationList_ParamsAssignment_0_2_1 extends AssignmentToken  {
	
	public ParameterDeclarationList_ParamsAssignment_0_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterDeclarationListAccess().getParamsAssignment_0_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclarationEllipse_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterDeclarationEllipseRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getParameterDeclarationListAccess().getParamsParameterDeclarationEllipseParserRuleCall_0_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ParameterDeclarationList_CommaKeyword_0_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// params+=ParameterDeclarationEllipse
protected class ParameterDeclarationList_ParamsAssignment_1 extends AssignmentToken  {
	
	public ParameterDeclarationList_ParamsAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterDeclarationListAccess().getParamsAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclarationEllipse_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterDeclarationEllipseRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getParameterDeclarationListAccess().getParamsParameterDeclarationEllipseParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule ParameterDeclarationList ****************/


/************ begin Rule ParameterDeclaration ****************
 *
 * ParameterDeclaration:
 *   type=TypeRef? name=ID;
 *
 **/

// type=TypeRef? name=ID
protected class ParameterDeclaration_Group extends GroupToken {
	
	public ParameterDeclaration_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getParameterDeclarationAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclaration_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getParameterDeclarationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// type=TypeRef?
protected class ParameterDeclaration_TypeAssignment_0 extends AssignmentToken  {
	
	public ParameterDeclaration_TypeAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterDeclarationAccess().getTypeAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getParameterDeclarationAccess().getTypeTypeRefParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// name=ID
protected class ParameterDeclaration_NameAssignment_1 extends AssignmentToken  {
	
	public ParameterDeclaration_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterDeclarationAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclaration_TypeAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getParameterDeclarationAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ParameterDeclaration ****************/


/************ begin Rule ParameterDeclarationEllipse ****************
 *
 * ParameterDeclarationEllipse returns ParameterDeclaration:
 *   {VarargParameterDeclaration} "..." type=TypeRef? name=ID;
 *
 **/

// {VarargParameterDeclaration} "..." type=TypeRef? name=ID
protected class ParameterDeclarationEllipse_Group extends GroupToken {
	
	public ParameterDeclarationEllipse_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getParameterDeclarationEllipseAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclarationEllipse_NameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getParameterDeclarationEllipseRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {VarargParameterDeclaration}
protected class ParameterDeclarationEllipse_VarargParameterDeclarationAction_0 extends ActionToken  {

	public ParameterDeclarationEllipse_VarargParameterDeclarationAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getParameterDeclarationEllipseAccess().getVarargParameterDeclarationAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getParameterDeclarationEllipseAccess().getVarargParameterDeclarationAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "..."
protected class ParameterDeclarationEllipse_FullStopFullStopFullStopKeyword_1 extends KeywordToken  {
	
	public ParameterDeclarationEllipse_FullStopFullStopFullStopKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getParameterDeclarationEllipseAccess().getFullStopFullStopFullStopKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclarationEllipse_VarargParameterDeclarationAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=TypeRef?
protected class ParameterDeclarationEllipse_TypeAssignment_2 extends AssignmentToken  {
	
	public ParameterDeclarationEllipse_TypeAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterDeclarationEllipseAccess().getTypeAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getParameterDeclarationEllipseAccess().getTypeTypeRefParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ParameterDeclarationEllipse_FullStopFullStopFullStopKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// name=ID
protected class ParameterDeclarationEllipse_NameAssignment_3 extends AssignmentToken  {
	
	public ParameterDeclarationEllipse_NameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterDeclarationEllipseAccess().getNameAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclarationEllipse_TypeAssignment_2(parent, this, 0, inst);
			case 1: return new ParameterDeclarationEllipse_FullStopFullStopFullStopKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getParameterDeclarationEllipseAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ParameterDeclarationEllipse ****************/




/************ begin Rule BuilderOutput ****************
 *
 * BuilderOutput:
 *   OutputKeyword "{" body=PathGroup "}";
 *
 **/

// OutputKeyword "{" body=PathGroup "}"
protected class BuilderOutput_Group extends GroupToken {
	
	public BuilderOutput_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBuilderOutputAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BuilderOutput_RightCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBuilderOutputRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// OutputKeyword
protected class BuilderOutput_OutputKeywordParserRuleCall_0 extends UnassignedTextToken {

	public BuilderOutput_OutputKeywordParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getBuilderOutputAccess().getOutputKeywordParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "{"
protected class BuilderOutput_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public BuilderOutput_LeftCurlyBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBuilderOutputAccess().getLeftCurlyBracketKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BuilderOutput_OutputKeywordParserRuleCall_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// body=PathGroup
protected class BuilderOutput_BodyAssignment_2 extends AssignmentToken  {
	
	public BuilderOutput_BodyAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderOutputAccess().getBodyAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("body",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPathGroupRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuilderOutputAccess().getBodyPathGroupParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BuilderOutput_LeftCurlyBracketKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class BuilderOutput_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public BuilderOutput_RightCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBuilderOutputAccess().getRightCurlyBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BuilderOutput_BodyAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule BuilderOutput ****************/


/************ begin Rule BuilderInput ****************
 *
 * BuilderInput:
 *   InputKeyword preCondition=PreCondition? postCondition=PostCondition? "{"
 *   prerequisites+=Prerequisite+ "}";
 *
 **/

// InputKeyword preCondition=PreCondition? postCondition=PostCondition? "{"
// prerequisites+=Prerequisite+ "}"
protected class BuilderInput_Group extends GroupToken {
	
	public BuilderInput_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBuilderInputAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BuilderInput_RightCurlyBracketKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBuilderInputRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// InputKeyword
protected class BuilderInput_InputKeywordParserRuleCall_0 extends UnassignedTextToken {

	public BuilderInput_InputKeywordParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getBuilderInputAccess().getInputKeywordParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// preCondition=PreCondition?
protected class BuilderInput_PreConditionAssignment_1 extends AssignmentToken  {
	
	public BuilderInput_PreConditionAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderInputAccess().getPreConditionAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PreCondition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("preCondition",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("preCondition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPreConditionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuilderInputAccess().getPreConditionPreConditionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BuilderInput_InputKeywordParserRuleCall_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// postCondition=PostCondition?
protected class BuilderInput_PostConditionAssignment_2 extends AssignmentToken  {
	
	public BuilderInput_PostConditionAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderInputAccess().getPostConditionAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostCondition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("postCondition",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("postCondition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPostConditionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuilderInputAccess().getPostConditionPostConditionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BuilderInput_PreConditionAssignment_1(parent, next, actIndex, consumed);
			case 1: return new BuilderInput_InputKeywordParserRuleCall_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class BuilderInput_LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public BuilderInput_LeftCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBuilderInputAccess().getLeftCurlyBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BuilderInput_PostConditionAssignment_2(parent, this, 0, inst);
			case 1: return new BuilderInput_PreConditionAssignment_1(parent, this, 1, inst);
			case 2: return new BuilderInput_InputKeywordParserRuleCall_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// prerequisites+=Prerequisite+
protected class BuilderInput_PrerequisitesAssignment_4 extends AssignmentToken  {
	
	public BuilderInput_PrerequisitesAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderInputAccess().getPrerequisitesAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("prerequisites",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("prerequisites");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrerequisiteRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuilderInputAccess().getPrerequisitesPrerequisiteParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BuilderInput_PrerequisitesAssignment_4(parent, next, actIndex, consumed);
			case 1: return new BuilderInput_LeftCurlyBracketKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class BuilderInput_RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public BuilderInput_RightCurlyBracketKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBuilderInputAccess().getRightCurlyBracketKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BuilderInput_PrerequisitesAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule BuilderInput ****************/


/************ begin Rule RepositoryConfiguration ****************
 *
 * RepositoryConfiguration:
 *   RepositoryDeclaration|ResolutionStrategy;
 *
 **/

// RepositoryDeclaration|ResolutionStrategy
protected class RepositoryConfiguration_Alternatives extends AlternativesToken {

	public RepositoryConfiguration_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getRepositoryConfigurationAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryConfiguration_RepositoryDeclarationParserRuleCall_0(parent, this, 0, inst);
			case 1: return new RepositoryConfiguration_ResolutionStrategyParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRepositoryConfigurationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// RepositoryDeclaration
protected class RepositoryConfiguration_RepositoryDeclarationParserRuleCall_0 extends RuleCallToken {
	
	public RepositoryConfiguration_RepositoryDeclarationParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRepositoryConfigurationAccess().getRepositoryDeclarationParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RepositoryDeclaration_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRepositoryDeclarationRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ResolutionStrategy
protected class RepositoryConfiguration_ResolutionStrategyParserRuleCall_1 extends RuleCallToken {
	
	public RepositoryConfiguration_ResolutionStrategyParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRepositoryConfigurationAccess().getResolutionStrategyParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ResolutionStrategy_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ResolutionStrategy_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getResolutionStrategyRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule RepositoryConfiguration ****************/


/************ begin Rule RepositoryDeclaration ****************
 *
 * RepositoryDeclaration:
 *   documentation=DOCUMENTATION? (location=URI|"repository" type=TypeRef) context=
 *   ContextBlock?;
 *
 **/

// documentation=DOCUMENTATION? (location=URI|"repository" type=TypeRef) context=
// ContextBlock?
protected class RepositoryDeclaration_Group extends GroupToken {
	
	public RepositoryDeclaration_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRepositoryDeclarationAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryDeclaration_ContextAssignment_2(parent, this, 0, inst);
			case 1: return new RepositoryDeclaration_Alternatives_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRepositoryDeclarationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// documentation=DOCUMENTATION?
protected class RepositoryDeclaration_DocumentationAssignment_0 extends AssignmentToken  {
	
	public RepositoryDeclaration_DocumentationAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRepositoryDeclarationAccess().getDocumentationAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("documentation",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("documentation");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getRepositoryDeclarationAccess().getDocumentationDOCUMENTATIONTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// location=URI|"repository" type=TypeRef
protected class RepositoryDeclaration_Alternatives_1 extends AlternativesToken {

	public RepositoryDeclaration_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getRepositoryDeclarationAccess().getAlternatives_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryDeclaration_LocationAssignment_1_0(parent, this, 0, inst);
			case 1: return new RepositoryDeclaration_Group_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// location=URI
protected class RepositoryDeclaration_LocationAssignment_1_0 extends AssignmentToken  {
	
	public RepositoryDeclaration_LocationAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRepositoryDeclarationAccess().getLocationAssignment_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryDeclaration_DocumentationAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("location",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("location");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getRepositoryDeclarationAccess().getLocationURIParserRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// "repository" type=TypeRef
protected class RepositoryDeclaration_Group_1_1 extends GroupToken {
	
	public RepositoryDeclaration_Group_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRepositoryDeclarationAccess().getGroup_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryDeclaration_TypeAssignment_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "repository"
protected class RepositoryDeclaration_RepositoryKeyword_1_1_0 extends KeywordToken  {
	
	public RepositoryDeclaration_RepositoryKeyword_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRepositoryDeclarationAccess().getRepositoryKeyword_1_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryDeclaration_DocumentationAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// type=TypeRef
protected class RepositoryDeclaration_TypeAssignment_1_1_1 extends AssignmentToken  {
	
	public RepositoryDeclaration_TypeAssignment_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRepositoryDeclarationAccess().getTypeAssignment_1_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRepositoryDeclarationAccess().getTypeTypeRefParserRuleCall_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RepositoryDeclaration_RepositoryKeyword_1_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// context=ContextBlock?
protected class RepositoryDeclaration_ContextAssignment_2 extends AssignmentToken  {
	
	public RepositoryDeclaration_ContextAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRepositoryDeclarationAccess().getContextAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContextBlock_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("context",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("context");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getContextBlockRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRepositoryDeclarationAccess().getContextContextBlockParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RepositoryDeclaration_Alternatives_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule RepositoryDeclaration ****************/


/************ begin Rule ResolutionStrategy ****************
 *
 * ResolutionStrategy:
 *   strategy=( "select-first" | "select-best" ) "{" repositoryConfig+=
 *   RepositoryConfiguration* "}";
 *
 **/

// strategy=( "select-first" | "select-best" ) "{" repositoryConfig+=
// RepositoryConfiguration* "}"
protected class ResolutionStrategy_Group extends GroupToken {
	
	public ResolutionStrategy_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getResolutionStrategyAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ResolutionStrategy_RightCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getResolutionStrategyRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// strategy=( "select-first" | "select-best" )
protected class ResolutionStrategy_StrategyAssignment_0 extends AssignmentToken  {
	
	public ResolutionStrategy_StrategyAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getResolutionStrategyAccess().getStrategyAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("strategy",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("strategy");
		if("select-first".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getResolutionStrategyAccess().getStrategySelectFirstKeyword_0_0_0();
			return obj;
		}
		if("select-best".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getResolutionStrategyAccess().getStrategySelectBestKeyword_0_0_1();
			return obj;
		}
		return null;
	}

}

// "{"
protected class ResolutionStrategy_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public ResolutionStrategy_LeftCurlyBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getResolutionStrategyAccess().getLeftCurlyBracketKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ResolutionStrategy_StrategyAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// repositoryConfig+=RepositoryConfiguration*
protected class ResolutionStrategy_RepositoryConfigAssignment_2 extends AssignmentToken  {
	
	public ResolutionStrategy_RepositoryConfigAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getResolutionStrategyAccess().getRepositoryConfigAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryConfiguration_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("repositoryConfig",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("repositoryConfig");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRepositoryConfigurationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getResolutionStrategyAccess().getRepositoryConfigRepositoryConfigurationParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ResolutionStrategy_RepositoryConfigAssignment_2(parent, next, actIndex, consumed);
			case 1: return new ResolutionStrategy_LeftCurlyBracketKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class ResolutionStrategy_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public ResolutionStrategy_RightCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getResolutionStrategyAccess().getRightCurlyBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ResolutionStrategy_RepositoryConfigAssignment_2(parent, this, 0, inst);
			case 1: return new ResolutionStrategy_LeftCurlyBracketKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ResolutionStrategy ****************/


/************ begin Rule ContainerConfiguration ****************
 *
 * ContainerConfiguration:
 *   documentation=DOCUMENTATION? "container" name=ID "agent" type=TypeRef contextBlock=
 *   ContextBlock?;
 *
 **/

// documentation=DOCUMENTATION? "container" name=ID "agent" type=TypeRef contextBlock=
// ContextBlock?
protected class ContainerConfiguration_Group extends GroupToken {
	
	public ContainerConfiguration_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getContainerConfigurationAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContainerConfiguration_ContextBlockAssignment_5(parent, this, 0, inst);
			case 1: return new ContainerConfiguration_TypeAssignment_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getContainerConfigurationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// documentation=DOCUMENTATION?
protected class ContainerConfiguration_DocumentationAssignment_0 extends AssignmentToken  {
	
	public ContainerConfiguration_DocumentationAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getContainerConfigurationAccess().getDocumentationAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("documentation",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("documentation");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getContainerConfigurationAccess().getDocumentationDOCUMENTATIONTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "container"
protected class ContainerConfiguration_ContainerKeyword_1 extends KeywordToken  {
	
	public ContainerConfiguration_ContainerKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContainerConfigurationAccess().getContainerKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContainerConfiguration_DocumentationAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class ContainerConfiguration_NameAssignment_2 extends AssignmentToken  {
	
	public ContainerConfiguration_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getContainerConfigurationAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContainerConfiguration_ContainerKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getContainerConfigurationAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "agent"
protected class ContainerConfiguration_AgentKeyword_3 extends KeywordToken  {
	
	public ContainerConfiguration_AgentKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContainerConfigurationAccess().getAgentKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContainerConfiguration_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=TypeRef
protected class ContainerConfiguration_TypeAssignment_4 extends AssignmentToken  {
	
	public ContainerConfiguration_TypeAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getContainerConfigurationAccess().getTypeAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getContainerConfigurationAccess().getTypeTypeRefParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ContainerConfiguration_AgentKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// contextBlock=ContextBlock?
protected class ContainerConfiguration_ContextBlockAssignment_5 extends AssignmentToken  {
	
	public ContainerConfiguration_ContextBlockAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getContainerConfigurationAccess().getContextBlockAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContextBlock_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contextBlock",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contextBlock");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getContextBlockRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getContainerConfigurationAccess().getContextBlockContextBlockParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ContainerConfiguration_TypeAssignment_4(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ContainerConfiguration ****************/



/************ begin Rule Concern ****************
 *
 * Concern:
 *   documentation=DOCUMENTATION? "concern" name=ID concern=ConcernBlock;
 *
 **/

// documentation=DOCUMENTATION? "concern" name=ID concern=ConcernBlock
protected class Concern_Group extends GroupToken {
	
	public Concern_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getConcernAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Concern_ConcernAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getConcernRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// documentation=DOCUMENTATION?
protected class Concern_DocumentationAssignment_0 extends AssignmentToken  {
	
	public Concern_DocumentationAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConcernAccess().getDocumentationAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("documentation",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("documentation");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getConcernAccess().getDocumentationDOCUMENTATIONTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "concern"
protected class Concern_ConcernKeyword_1 extends KeywordToken  {
	
	public Concern_ConcernKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConcernAccess().getConcernKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Concern_DocumentationAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class Concern_NameAssignment_2 extends AssignmentToken  {
	
	public Concern_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConcernAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Concern_ConcernKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getConcernAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// concern=ConcernBlock
protected class Concern_ConcernAssignment_3 extends AssignmentToken  {
	
	public Concern_ConcernAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConcernAccess().getConcernAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConcernBlock_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("concern",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("concern");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConcernBlockRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getConcernAccess().getConcernConcernBlockParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Concern_NameAssignment_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Concern ****************/


/************ begin Rule ConcernBlock ****************
 *
 * ConcernBlock:
 *   ("extends" superConcerns+=ID ("," superConcerns+=ID)*)? "{" (contexts+=Context|
 *   functions+=Function)* "}";
 *
 **/

// ("extends" superConcerns+=ID ("," superConcerns+=ID)*)? "{" (contexts+=Context|
// functions+=Function)* "}"
protected class ConcernBlock_Group extends GroupToken {
	
	public ConcernBlock_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getConcernBlockAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConcernBlock_RightCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getConcernBlockRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ("extends" superConcerns+=ID ("," superConcerns+=ID)*)?
protected class ConcernBlock_Group_0 extends GroupToken {
	
	public ConcernBlock_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getConcernBlockAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConcernBlock_Group_0_2(parent, this, 0, inst);
			case 1: return new ConcernBlock_SuperConcernsAssignment_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "extends"
protected class ConcernBlock_ExtendsKeyword_0_0 extends KeywordToken  {
	
	public ConcernBlock_ExtendsKeyword_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConcernBlockAccess().getExtendsKeyword_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// superConcerns+=ID
protected class ConcernBlock_SuperConcernsAssignment_0_1 extends AssignmentToken  {
	
	public ConcernBlock_SuperConcernsAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConcernBlockAccess().getSuperConcernsAssignment_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConcernBlock_ExtendsKeyword_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("superConcerns",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("superConcerns");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getConcernBlockAccess().getSuperConcernsIDTerminalRuleCall_0_1_0();
			return obj;
		}
		return null;
	}

}

// ("," superConcerns+=ID)*
protected class ConcernBlock_Group_0_2 extends GroupToken {
	
	public ConcernBlock_Group_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getConcernBlockAccess().getGroup_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConcernBlock_SuperConcernsAssignment_0_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class ConcernBlock_CommaKeyword_0_2_0 extends KeywordToken  {
	
	public ConcernBlock_CommaKeyword_0_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConcernBlockAccess().getCommaKeyword_0_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConcernBlock_Group_0_2(parent, this, 0, inst);
			case 1: return new ConcernBlock_SuperConcernsAssignment_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// superConcerns+=ID
protected class ConcernBlock_SuperConcernsAssignment_0_2_1 extends AssignmentToken  {
	
	public ConcernBlock_SuperConcernsAssignment_0_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConcernBlockAccess().getSuperConcernsAssignment_0_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConcernBlock_CommaKeyword_0_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("superConcerns",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("superConcerns");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getConcernBlockAccess().getSuperConcernsIDTerminalRuleCall_0_2_1_0();
			return obj;
		}
		return null;
	}

}



// "{"
protected class ConcernBlock_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public ConcernBlock_LeftCurlyBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConcernBlockAccess().getLeftCurlyBracketKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConcernBlock_Group_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// (contexts+=Context|functions+=Function)*
protected class ConcernBlock_Alternatives_2 extends AlternativesToken {

	public ConcernBlock_Alternatives_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getConcernBlockAccess().getAlternatives_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConcernBlock_ContextsAssignment_2_0(parent, this, 0, inst);
			case 1: return new ConcernBlock_FunctionsAssignment_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// contexts+=Context
protected class ConcernBlock_ContextsAssignment_2_0 extends AssignmentToken  {
	
	public ConcernBlock_ContextsAssignment_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConcernBlockAccess().getContextsAssignment_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Context_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contexts",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contexts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getContextRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getConcernBlockAccess().getContextsContextParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ConcernBlock_Alternatives_2(parent, next, actIndex, consumed);
			case 1: return new ConcernBlock_LeftCurlyBracketKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// functions+=Function
protected class ConcernBlock_FunctionsAssignment_2_1 extends AssignmentToken  {
	
	public ConcernBlock_FunctionsAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConcernBlockAccess().getFunctionsAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("functions",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("functions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFunctionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getConcernBlockAccess().getFunctionsFunctionParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ConcernBlock_Alternatives_2(parent, next, actIndex, consumed);
			case 1: return new ConcernBlock_LeftCurlyBracketKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class ConcernBlock_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public ConcernBlock_RightCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConcernBlockAccess().getRightCurlyBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConcernBlock_Alternatives_2(parent, this, 0, inst);
			case 1: return new ConcernBlock_LeftCurlyBracketKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ConcernBlock ****************/


/************ begin Rule Query ****************
 *
 * Query:
 *   "query" ("{" selector=QueryPath "}");
 *
 **/

// "query" ("{" selector=QueryPath "}")
protected class Query_Group extends GroupToken {
	
	public Query_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getQueryAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_Group_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getQueryRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "query"
protected class Query_QueryKeyword_0 extends KeywordToken  {
	
	public Query_QueryKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getQueryAccess().getQueryKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "{" selector=QueryPath "}"
protected class Query_Group_1 extends GroupToken {
	
	public Query_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getQueryAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_RightCurlyBracketKeyword_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Query_LeftCurlyBracketKeyword_1_0 extends KeywordToken  {
	
	public Query_LeftCurlyBracketKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getQueryAccess().getLeftCurlyBracketKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_QueryKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// selector=QueryPath
protected class Query_SelectorAssignment_1_1 extends AssignmentToken  {
	
	public Query_SelectorAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getQueryAccess().getSelectorAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new QueryPath_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("selector",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("selector");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getQueryPathRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getQueryAccess().getSelectorQueryPathParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Query_LeftCurlyBracketKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Query_RightCurlyBracketKeyword_1_2 extends KeywordToken  {
	
	public Query_RightCurlyBracketKeyword_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getQueryAccess().getRightCurlyBracketKeyword_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_SelectorAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule Query ****************/


/************ begin Rule QueryPath ****************
 *
 * QueryPath:
 *   absolute?=":"? selectors+=Selector (":" selectors+=Selector)*;
 *
 **/

// absolute?=":"? selectors+=Selector (":" selectors+=Selector)*
protected class QueryPath_Group extends GroupToken {
	
	public QueryPath_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getQueryPathAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new QueryPath_Group_2(parent, this, 0, inst);
			case 1: return new QueryPath_SelectorsAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getQueryPathRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// absolute?=":"?
protected class QueryPath_AbsoluteAssignment_0 extends AssignmentToken  {
	
	public QueryPath_AbsoluteAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getQueryPathAccess().getAbsoluteAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("absolute",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("absolute");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getQueryPathAccess().getAbsoluteColonKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// selectors+=Selector
protected class QueryPath_SelectorsAssignment_1 extends AssignmentToken  {
	
	public QueryPath_SelectorsAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getQueryPathAccess().getSelectorsAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Selector_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("selectors",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("selectors");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSelectorRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getQueryPathAccess().getSelectorsSelectorParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new QueryPath_AbsoluteAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// (":" selectors+=Selector)*
protected class QueryPath_Group_2 extends GroupToken {
	
	public QueryPath_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getQueryPathAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new QueryPath_SelectorsAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ":"
protected class QueryPath_ColonKeyword_2_0 extends KeywordToken  {
	
	public QueryPath_ColonKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getQueryPathAccess().getColonKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new QueryPath_Group_2(parent, this, 0, inst);
			case 1: return new QueryPath_SelectorsAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// selectors+=Selector
protected class QueryPath_SelectorsAssignment_2_1 extends AssignmentToken  {
	
	public QueryPath_SelectorsAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getQueryPathAccess().getSelectorsAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Selector_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("selectors",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("selectors");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSelectorRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getQueryPathAccess().getSelectorsSelectorParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new QueryPath_ColonKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule QueryPath ****************/


/************ begin Rule Selector ****************
 *
 * Selector:
 *   (name=QID|op=SelectorOperator|pattern=REGEX) ("[" predicate=Expression "]")?;
 *
 **/

// (name=QID|op=SelectorOperator|pattern=REGEX) ("[" predicate=Expression "]")?
protected class Selector_Group extends GroupToken {
	
	public Selector_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSelectorAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Selector_Group_1(parent, this, 0, inst);
			case 1: return new Selector_Alternatives_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSelectorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=QID|op=SelectorOperator|pattern=REGEX
protected class Selector_Alternatives_0 extends AlternativesToken {

	public Selector_Alternatives_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getSelectorAccess().getAlternatives_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Selector_NameAssignment_0_0(parent, this, 0, inst);
			case 1: return new Selector_OpAssignment_0_1(parent, this, 1, inst);
			case 2: return new Selector_PatternAssignment_0_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// name=QID
protected class Selector_NameAssignment_0_0 extends AssignmentToken  {
	
	public Selector_NameAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectorAccess().getNameAssignment_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getSelectorAccess().getNameQIDParserRuleCall_0_0_0();
			return obj;
		}
		return null;
	}

}

// op=SelectorOperator
protected class Selector_OpAssignment_0_1 extends AssignmentToken  {
	
	public Selector_OpAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectorAccess().getOpAssignment_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("op",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("op");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getSelectorAccess().getOpSelectorOperatorEnumRuleCall_0_1_0();
			return obj;
		}
		return null;
	}

}

// pattern=REGEX
protected class Selector_PatternAssignment_0_2 extends AssignmentToken  {
	
	public Selector_PatternAssignment_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectorAccess().getPatternAssignment_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("pattern",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("pattern");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSelectorAccess().getPatternREGEXTerminalRuleCall_0_2_0();
			return obj;
		}
		return null;
	}

}


// ("[" predicate=Expression "]")?
protected class Selector_Group_1 extends GroupToken {
	
	public Selector_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSelectorAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Selector_RightSquareBracketKeyword_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class Selector_LeftSquareBracketKeyword_1_0 extends KeywordToken  {
	
	public Selector_LeftSquareBracketKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectorAccess().getLeftSquareBracketKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Selector_Alternatives_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// predicate=Expression
protected class Selector_PredicateAssignment_1_1 extends AssignmentToken  {
	
	public Selector_PredicateAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectorAccess().getPredicateAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("predicate",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("predicate");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSelectorAccess().getPredicateExpressionParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Selector_LeftSquareBracketKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class Selector_RightSquareBracketKeyword_1_2 extends KeywordToken  {
	
	public Selector_RightSquareBracketKeyword_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectorAccess().getRightSquareBracketKeyword_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Selector_PredicateAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule Selector ****************/


/************ begin Rule Filter ****************
 *
 * Filter:
 *   "(" predicate=Expression ")";
 *
 **/

// "(" predicate=Expression ")"
protected class Filter_Group extends GroupToken {
	
	public Filter_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFilterAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Filter_RightParenthesisKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFilterRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "("
protected class Filter_LeftParenthesisKeyword_0 extends KeywordToken  {
	
	public Filter_LeftParenthesisKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFilterAccess().getLeftParenthesisKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// predicate=Expression
protected class Filter_PredicateAssignment_1 extends AssignmentToken  {
	
	public Filter_PredicateAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFilterAccess().getPredicateAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("predicate",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("predicate");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFilterAccess().getPredicateExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Filter_LeftParenthesisKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class Filter_RightParenthesisKeyword_2 extends KeywordToken  {
	
	public Filter_RightParenthesisKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFilterAccess().getRightParenthesisKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Filter_PredicateAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Filter ****************/


/************ begin Rule PreCondition ****************
 *
 * PreCondition:
 *   "precondition" "{" asserts+=AssertionExpression+ "}";
 *
 **/

// "precondition" "{" asserts+=AssertionExpression+ "}"
protected class PreCondition_Group extends GroupToken {
	
	public PreCondition_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPreConditionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PreCondition_RightCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPreConditionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "precondition"
protected class PreCondition_PreconditionKeyword_0 extends KeywordToken  {
	
	public PreCondition_PreconditionKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPreConditionAccess().getPreconditionKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "{"
protected class PreCondition_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public PreCondition_LeftCurlyBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPreConditionAccess().getLeftCurlyBracketKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PreCondition_PreconditionKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// asserts+=AssertionExpression+
protected class PreCondition_AssertsAssignment_2 extends AssignmentToken  {
	
	public PreCondition_AssertsAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPreConditionAccess().getAssertsAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssertionExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("asserts",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("asserts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssertionExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPreConditionAccess().getAssertsAssertionExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PreCondition_AssertsAssignment_2(parent, next, actIndex, consumed);
			case 1: return new PreCondition_LeftCurlyBracketKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class PreCondition_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public PreCondition_RightCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPreConditionAccess().getRightCurlyBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PreCondition_AssertsAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule PreCondition ****************/


/************ begin Rule PostCondition ****************
 *
 * PostCondition:
 *   "postcondition" "{" asserts+=AssertionExpression+ "}";
 *
 **/

// "postcondition" "{" asserts+=AssertionExpression+ "}"
protected class PostCondition_Group extends GroupToken {
	
	public PostCondition_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPostConditionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostCondition_RightCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPostConditionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "postcondition"
protected class PostCondition_PostconditionKeyword_0 extends KeywordToken  {
	
	public PostCondition_PostconditionKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPostConditionAccess().getPostconditionKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "{"
protected class PostCondition_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public PostCondition_LeftCurlyBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPostConditionAccess().getLeftCurlyBracketKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostCondition_PostconditionKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// asserts+=AssertionExpression+
protected class PostCondition_AssertsAssignment_2 extends AssignmentToken  {
	
	public PostCondition_AssertsAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPostConditionAccess().getAssertsAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssertionExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("asserts",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("asserts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssertionExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPostConditionAccess().getAssertsAssertionExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PostCondition_AssertsAssignment_2(parent, next, actIndex, consumed);
			case 1: return new PostCondition_LeftCurlyBracketKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class PostCondition_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public PostCondition_RightCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPostConditionAccess().getRightCurlyBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostCondition_AssertsAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule PostCondition ****************/


/************ begin Rule AssertionExpression ****************
 *
 * AssertionExpression:
 *   "assert" expr=Expression "," message=STRING ";";
 *
 **/

// "assert" expr=Expression "," message=STRING ";"
protected class AssertionExpression_Group extends GroupToken {
	
	public AssertionExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAssertionExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssertionExpression_SemicolonKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAssertionExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "assert"
protected class AssertionExpression_AssertKeyword_0 extends KeywordToken  {
	
	public AssertionExpression_AssertKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAssertionExpressionAccess().getAssertKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// expr=Expression
protected class AssertionExpression_ExprAssignment_1 extends AssignmentToken  {
	
	public AssertionExpression_ExprAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssertionExpressionAccess().getExprAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAssertionExpressionAccess().getExprExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AssertionExpression_AssertKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ","
protected class AssertionExpression_CommaKeyword_2 extends KeywordToken  {
	
	public AssertionExpression_CommaKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAssertionExpressionAccess().getCommaKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssertionExpression_ExprAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// message=STRING
protected class AssertionExpression_MessageAssignment_3 extends AssignmentToken  {
	
	public AssertionExpression_MessageAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssertionExpressionAccess().getMessageAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssertionExpression_CommaKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("message",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("message");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAssertionExpressionAccess().getMessageSTRINGTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class AssertionExpression_SemicolonKeyword_4 extends KeywordToken  {
	
	public AssertionExpression_SemicolonKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAssertionExpressionAccess().getSemicolonKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssertionExpression_MessageAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule AssertionExpression ****************/


/************ begin Rule ExpressionList ****************
 *
 * ExpressionList:
 *   (expressions+=Expression ";")+; 
 * 
 *             
 * 
 * // Validation makes sure a Function is stated with "function", and Method with "method"
 *
 **/

// (expressions+=Expression ";")+
protected class ExpressionList_Group extends GroupToken {
	
	public ExpressionList_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getExpressionListAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExpressionList_SemicolonKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getExpressionListRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// expressions+=Expression
protected class ExpressionList_ExpressionsAssignment_0 extends AssignmentToken  {
	
	public ExpressionList_ExpressionsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getExpressionListAccess().getExpressionsAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expressions",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expressions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getExpressionListAccess().getExpressionsExpressionParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExpressionList_Group(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// ";"
protected class ExpressionList_SemicolonKeyword_1 extends KeywordToken  {
	
	public ExpressionList_SemicolonKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getExpressionListAccess().getSemicolonKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExpressionList_ExpressionsAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ExpressionList ****************/


/************ begin Rule Function ****************
 *
 * Function returns Statment:
 *   {Function} func=FunctionOrMethod; 
 * 
 * // Validation makes sure a Function is stated with "function", and Method with "method"
 *
 **/

// {Function} func=FunctionOrMethod
protected class Function_Group extends GroupToken {
	
	public Function_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFunctionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_FuncAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFunctionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {Function}
protected class Function_FunctionAction_0 extends ActionToken  {

	public Function_FunctionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getFunctionAccess().getFunctionAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getFunctionAccess().getFunctionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// func=FunctionOrMethod
protected class Function_FuncAssignment_1 extends AssignmentToken  {
	
	public Function_FuncAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionAccess().getFuncAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionOrMethod_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("func",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("func");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFunctionOrMethodRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFunctionAccess().getFuncFunctionOrMethodParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Function_FunctionAction_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Function ****************/


/************ begin Rule Method ****************
 *
 * Method returns Statement:
 *   {Method} method=FunctionOrMethod; 
 *           
 * 
 * // Difference function/method handled as validation
 *
 **/

// {Method} method=FunctionOrMethod
protected class Method_Group extends GroupToken {
	
	public Method_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMethodAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Method_MethodAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getMethodRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {Method}
protected class Method_MethodAction_0 extends ActionToken  {

	public Method_MethodAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getMethodAccess().getMethodAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getMethodAccess().getMethodAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// method=FunctionOrMethod
protected class Method_MethodAssignment_1 extends AssignmentToken  {
	
	public Method_MethodAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMethodAccess().getMethodAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionOrMethod_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("method",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("method");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFunctionOrMethodRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMethodAccess().getMethodFunctionOrMethodParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Method_MethodAction_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Method ****************/


/************ begin Rule FunctionOrMethod ****************
 *
 * FunctionOrMethod:
 *   documentation=DOCUMENTATION? visibility=Visibility? executionMode=ExecutionMode?
 *   final?="final"? cached?="cached"? form=( "function" | "method" ) type=TypeRef? name=ID (
 *   "<" typeParams+=TypeParamDeclaration ("," typeParams+=TypeParamDeclaration)* ">")? (
 *   "(" (params+=ParameterDeclaration ("," params+=ParameterDeclaration)*)? ")")? (":"
 *   body=Expression ";"|body=BlockExpression); 
 * 
 * // Difference function/method handled as validation
 *
 **/

// documentation=DOCUMENTATION? visibility=Visibility? executionMode=ExecutionMode?
// final?="final"? cached?="cached"? form=( "function" | "method" ) type=TypeRef? name=ID (
// "<" typeParams+=TypeParamDeclaration ("," typeParams+=TypeParamDeclaration)* ">")? (
// "(" (params+=ParameterDeclaration ("," params+=ParameterDeclaration)*)? ")")? (":"
// body=Expression ";"|body=BlockExpression)
protected class FunctionOrMethod_Group extends GroupToken {
	
	public FunctionOrMethod_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFunctionOrMethodAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionOrMethod_Alternatives_10(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFunctionOrMethodRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// documentation=DOCUMENTATION?
protected class FunctionOrMethod_DocumentationAssignment_0 extends AssignmentToken  {
	
	public FunctionOrMethod_DocumentationAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionOrMethodAccess().getDocumentationAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("documentation",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("documentation");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFunctionOrMethodAccess().getDocumentationDOCUMENTATIONTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// visibility=Visibility?
protected class FunctionOrMethod_VisibilityAssignment_1 extends AssignmentToken  {
	
	public FunctionOrMethod_VisibilityAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionOrMethodAccess().getVisibilityAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionOrMethod_DocumentationAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("visibility",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("visibility");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getFunctionOrMethodAccess().getVisibilityVisibilityEnumRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// executionMode=ExecutionMode?
protected class FunctionOrMethod_ExecutionModeAssignment_2 extends AssignmentToken  {
	
	public FunctionOrMethod_ExecutionModeAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionOrMethodAccess().getExecutionModeAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionOrMethod_VisibilityAssignment_1(parent, this, 0, inst);
			case 1: return new FunctionOrMethod_DocumentationAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("executionMode",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("executionMode");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getFunctionOrMethodAccess().getExecutionModeExecutionModeEnumRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// final?="final"?
protected class FunctionOrMethod_FinalAssignment_3 extends AssignmentToken  {
	
	public FunctionOrMethod_FinalAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionOrMethodAccess().getFinalAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionOrMethod_ExecutionModeAssignment_2(parent, this, 0, inst);
			case 1: return new FunctionOrMethod_VisibilityAssignment_1(parent, this, 1, inst);
			case 2: return new FunctionOrMethod_DocumentationAssignment_0(parent, this, 2, inst);
			default: return parent.createParentFollower(this, index, index - 3, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("final",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("final");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getFunctionOrMethodAccess().getFinalFinalKeyword_3_0();
			return obj;
		}
		return null;
	}

}

// cached?="cached"?
protected class FunctionOrMethod_CachedAssignment_4 extends AssignmentToken  {
	
	public FunctionOrMethod_CachedAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionOrMethodAccess().getCachedAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionOrMethod_FinalAssignment_3(parent, this, 0, inst);
			case 1: return new FunctionOrMethod_ExecutionModeAssignment_2(parent, this, 1, inst);
			case 2: return new FunctionOrMethod_VisibilityAssignment_1(parent, this, 2, inst);
			case 3: return new FunctionOrMethod_DocumentationAssignment_0(parent, this, 3, inst);
			default: return parent.createParentFollower(this, index, index - 4, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("cached",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("cached");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getFunctionOrMethodAccess().getCachedCachedKeyword_4_0();
			return obj;
		}
		return null;
	}

}

// form=( "function" | "method" )
protected class FunctionOrMethod_FormAssignment_5 extends AssignmentToken  {
	
	public FunctionOrMethod_FormAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionOrMethodAccess().getFormAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionOrMethod_CachedAssignment_4(parent, this, 0, inst);
			case 1: return new FunctionOrMethod_FinalAssignment_3(parent, this, 1, inst);
			case 2: return new FunctionOrMethod_ExecutionModeAssignment_2(parent, this, 2, inst);
			case 3: return new FunctionOrMethod_VisibilityAssignment_1(parent, this, 3, inst);
			case 4: return new FunctionOrMethod_DocumentationAssignment_0(parent, this, 4, inst);
			default: return parent.createParentFollower(this, index, index - 5, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("form",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("form");
		if("function".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getFunctionOrMethodAccess().getFormFunctionKeyword_5_0_0();
			return obj;
		}
		if("method".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getFunctionOrMethodAccess().getFormMethodKeyword_5_0_1();
			return obj;
		}
		return null;
	}

}

// type=TypeRef?
protected class FunctionOrMethod_TypeAssignment_6 extends AssignmentToken  {
	
	public FunctionOrMethod_TypeAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionOrMethodAccess().getTypeAssignment_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFunctionOrMethodAccess().getTypeTypeRefParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FunctionOrMethod_FormAssignment_5(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// name=ID
protected class FunctionOrMethod_NameAssignment_7 extends AssignmentToken  {
	
	public FunctionOrMethod_NameAssignment_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionOrMethodAccess().getNameAssignment_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionOrMethod_TypeAssignment_6(parent, this, 0, inst);
			case 1: return new FunctionOrMethod_FormAssignment_5(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFunctionOrMethodAccess().getNameIDTerminalRuleCall_7_0();
			return obj;
		}
		return null;
	}

}

// ("<" typeParams+=TypeParamDeclaration ("," typeParams+=TypeParamDeclaration)* ">")?
protected class FunctionOrMethod_Group_8 extends GroupToken {
	
	public FunctionOrMethod_Group_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFunctionOrMethodAccess().getGroup_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionOrMethod_GreaterThanSignKeyword_8_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "<"
protected class FunctionOrMethod_LessThanSignKeyword_8_0 extends KeywordToken  {
	
	public FunctionOrMethod_LessThanSignKeyword_8_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionOrMethodAccess().getLessThanSignKeyword_8_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionOrMethod_NameAssignment_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// typeParams+=TypeParamDeclaration
protected class FunctionOrMethod_TypeParamsAssignment_8_1 extends AssignmentToken  {
	
	public FunctionOrMethod_TypeParamsAssignment_8_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionOrMethodAccess().getTypeParamsAssignment_8_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeParamDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("typeParams",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("typeParams");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeParamDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFunctionOrMethodAccess().getTypeParamsTypeParamDeclarationParserRuleCall_8_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FunctionOrMethod_LessThanSignKeyword_8_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," typeParams+=TypeParamDeclaration)*
protected class FunctionOrMethod_Group_8_2 extends GroupToken {
	
	public FunctionOrMethod_Group_8_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFunctionOrMethodAccess().getGroup_8_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionOrMethod_TypeParamsAssignment_8_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class FunctionOrMethod_CommaKeyword_8_2_0 extends KeywordToken  {
	
	public FunctionOrMethod_CommaKeyword_8_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionOrMethodAccess().getCommaKeyword_8_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionOrMethod_Group_8_2(parent, this, 0, inst);
			case 1: return new FunctionOrMethod_TypeParamsAssignment_8_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// typeParams+=TypeParamDeclaration
protected class FunctionOrMethod_TypeParamsAssignment_8_2_1 extends AssignmentToken  {
	
	public FunctionOrMethod_TypeParamsAssignment_8_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionOrMethodAccess().getTypeParamsAssignment_8_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeParamDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("typeParams",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("typeParams");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeParamDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFunctionOrMethodAccess().getTypeParamsTypeParamDeclarationParserRuleCall_8_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FunctionOrMethod_CommaKeyword_8_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ">"
protected class FunctionOrMethod_GreaterThanSignKeyword_8_3 extends KeywordToken  {
	
	public FunctionOrMethod_GreaterThanSignKeyword_8_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionOrMethodAccess().getGreaterThanSignKeyword_8_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionOrMethod_Group_8_2(parent, this, 0, inst);
			case 1: return new FunctionOrMethod_TypeParamsAssignment_8_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// ("(" (params+=ParameterDeclaration ("," params+=ParameterDeclaration)*)? ")")?
protected class FunctionOrMethod_Group_9 extends GroupToken {
	
	public FunctionOrMethod_Group_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFunctionOrMethodAccess().getGroup_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionOrMethod_RightParenthesisKeyword_9_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class FunctionOrMethod_LeftParenthesisKeyword_9_0 extends KeywordToken  {
	
	public FunctionOrMethod_LeftParenthesisKeyword_9_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionOrMethodAccess().getLeftParenthesisKeyword_9_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionOrMethod_Group_8(parent, this, 0, inst);
			case 1: return new FunctionOrMethod_NameAssignment_7(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// (params+=ParameterDeclaration ("," params+=ParameterDeclaration)*)?
protected class FunctionOrMethod_Group_9_1 extends GroupToken {
	
	public FunctionOrMethod_Group_9_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFunctionOrMethodAccess().getGroup_9_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionOrMethod_Group_9_1_1(parent, this, 0, inst);
			case 1: return new FunctionOrMethod_ParamsAssignment_9_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// params+=ParameterDeclaration
protected class FunctionOrMethod_ParamsAssignment_9_1_0 extends AssignmentToken  {
	
	public FunctionOrMethod_ParamsAssignment_9_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionOrMethodAccess().getParamsAssignment_9_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFunctionOrMethodAccess().getParamsParameterDeclarationParserRuleCall_9_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FunctionOrMethod_LeftParenthesisKeyword_9_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," params+=ParameterDeclaration)*
protected class FunctionOrMethod_Group_9_1_1 extends GroupToken {
	
	public FunctionOrMethod_Group_9_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFunctionOrMethodAccess().getGroup_9_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionOrMethod_ParamsAssignment_9_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class FunctionOrMethod_CommaKeyword_9_1_1_0 extends KeywordToken  {
	
	public FunctionOrMethod_CommaKeyword_9_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionOrMethodAccess().getCommaKeyword_9_1_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionOrMethod_Group_9_1_1(parent, this, 0, inst);
			case 1: return new FunctionOrMethod_ParamsAssignment_9_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// params+=ParameterDeclaration
protected class FunctionOrMethod_ParamsAssignment_9_1_1_1 extends AssignmentToken  {
	
	public FunctionOrMethod_ParamsAssignment_9_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionOrMethodAccess().getParamsAssignment_9_1_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFunctionOrMethodAccess().getParamsParameterDeclarationParserRuleCall_9_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FunctionOrMethod_CommaKeyword_9_1_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class FunctionOrMethod_RightParenthesisKeyword_9_2 extends KeywordToken  {
	
	public FunctionOrMethod_RightParenthesisKeyword_9_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionOrMethodAccess().getRightParenthesisKeyword_9_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionOrMethod_Group_9_1(parent, this, 0, inst);
			case 1: return new FunctionOrMethod_LeftParenthesisKeyword_9_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// ":" body=Expression ";"|body=BlockExpression
protected class FunctionOrMethod_Alternatives_10 extends AlternativesToken {

	public FunctionOrMethod_Alternatives_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getFunctionOrMethodAccess().getAlternatives_10();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionOrMethod_Group_10_0(parent, this, 0, inst);
			case 1: return new FunctionOrMethod_BodyAssignment_10_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ":" body=Expression ";"
protected class FunctionOrMethod_Group_10_0 extends GroupToken {
	
	public FunctionOrMethod_Group_10_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFunctionOrMethodAccess().getGroup_10_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionOrMethod_SemicolonKeyword_10_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ":"
protected class FunctionOrMethod_ColonKeyword_10_0_0 extends KeywordToken  {
	
	public FunctionOrMethod_ColonKeyword_10_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionOrMethodAccess().getColonKeyword_10_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionOrMethod_Group_9(parent, this, 0, inst);
			case 1: return new FunctionOrMethod_Group_8(parent, this, 1, inst);
			case 2: return new FunctionOrMethod_NameAssignment_7(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// body=Expression
protected class FunctionOrMethod_BodyAssignment_10_0_1 extends AssignmentToken  {
	
	public FunctionOrMethod_BodyAssignment_10_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionOrMethodAccess().getBodyAssignment_10_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("body",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFunctionOrMethodAccess().getBodyExpressionParserRuleCall_10_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FunctionOrMethod_ColonKeyword_10_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class FunctionOrMethod_SemicolonKeyword_10_0_2 extends KeywordToken  {
	
	public FunctionOrMethod_SemicolonKeyword_10_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionOrMethodAccess().getSemicolonKeyword_10_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionOrMethod_BodyAssignment_10_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// body=BlockExpression
protected class FunctionOrMethod_BodyAssignment_10_1 extends AssignmentToken  {
	
	public FunctionOrMethod_BodyAssignment_10_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionOrMethodAccess().getBodyAssignment_10_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BlockExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("body",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBlockExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFunctionOrMethodAccess().getBodyBlockExpressionParserRuleCall_10_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FunctionOrMethod_Group_9(parent, next, actIndex, consumed);
			case 1: return new FunctionOrMethod_Group_8(parent, next, actIndex, consumed);
			case 2: return new FunctionOrMethod_NameAssignment_7(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule FunctionOrMethod ****************/


/************ begin Rule TypeParamDeclaration ****************
 *
 * TypeParamDeclaration:
 *   ID ("extends" type+=TypeRef ("&" type+=TypeRef)*|"super" superType=TypeRef)?; 
 * 	
 *  
 * 	                    
 * 	
 * 		
 * / * EXPRESSIONS * /
 *
 **/

// ID ("extends" type+=TypeRef ("&" type+=TypeRef)*|"super" superType=TypeRef)?
protected class TypeParamDeclaration_Group extends GroupToken {
	
	public TypeParamDeclaration_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTypeParamDeclarationAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeParamDeclaration_Alternatives_1(parent, this, 0, inst);
			case 1: return new TypeParamDeclaration_IDTerminalRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTypeParamDeclarationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ID
protected class TypeParamDeclaration_IDTerminalRuleCall_0 extends UnassignedTextToken {

	public TypeParamDeclaration_IDTerminalRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeParamDeclarationAccess().getIDTerminalRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// ("extends" type+=TypeRef ("&" type+=TypeRef)*|"super" superType=TypeRef)?
protected class TypeParamDeclaration_Alternatives_1 extends AlternativesToken {

	public TypeParamDeclaration_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getTypeParamDeclarationAccess().getAlternatives_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeParamDeclaration_Group_1_0(parent, this, 0, inst);
			case 1: return new TypeParamDeclaration_Group_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "extends" type+=TypeRef ("&" type+=TypeRef)*
protected class TypeParamDeclaration_Group_1_0 extends GroupToken {
	
	public TypeParamDeclaration_Group_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTypeParamDeclarationAccess().getGroup_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeParamDeclaration_Group_1_0_2(parent, this, 0, inst);
			case 1: return new TypeParamDeclaration_TypeAssignment_1_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "extends"
protected class TypeParamDeclaration_ExtendsKeyword_1_0_0 extends KeywordToken  {
	
	public TypeParamDeclaration_ExtendsKeyword_1_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTypeParamDeclarationAccess().getExtendsKeyword_1_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeParamDeclaration_IDTerminalRuleCall_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type+=TypeRef
protected class TypeParamDeclaration_TypeAssignment_1_0_1 extends AssignmentToken  {
	
	public TypeParamDeclaration_TypeAssignment_1_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTypeParamDeclarationAccess().getTypeAssignment_1_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTypeParamDeclarationAccess().getTypeTypeRefParserRuleCall_1_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TypeParamDeclaration_ExtendsKeyword_1_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("&" type+=TypeRef)*
protected class TypeParamDeclaration_Group_1_0_2 extends GroupToken {
	
	public TypeParamDeclaration_Group_1_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTypeParamDeclarationAccess().getGroup_1_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeParamDeclaration_TypeAssignment_1_0_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "&"
protected class TypeParamDeclaration_AmpersandKeyword_1_0_2_0 extends KeywordToken  {
	
	public TypeParamDeclaration_AmpersandKeyword_1_0_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTypeParamDeclarationAccess().getAmpersandKeyword_1_0_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeParamDeclaration_Group_1_0_2(parent, this, 0, inst);
			case 1: return new TypeParamDeclaration_TypeAssignment_1_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// type+=TypeRef
protected class TypeParamDeclaration_TypeAssignment_1_0_2_1 extends AssignmentToken  {
	
	public TypeParamDeclaration_TypeAssignment_1_0_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTypeParamDeclarationAccess().getTypeAssignment_1_0_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTypeParamDeclarationAccess().getTypeTypeRefParserRuleCall_1_0_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TypeParamDeclaration_AmpersandKeyword_1_0_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// "super" superType=TypeRef
protected class TypeParamDeclaration_Group_1_1 extends GroupToken {
	
	public TypeParamDeclaration_Group_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTypeParamDeclarationAccess().getGroup_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeParamDeclaration_SuperTypeAssignment_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "super"
protected class TypeParamDeclaration_SuperKeyword_1_1_0 extends KeywordToken  {
	
	public TypeParamDeclaration_SuperKeyword_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTypeParamDeclarationAccess().getSuperKeyword_1_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeParamDeclaration_IDTerminalRuleCall_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// superType=TypeRef
protected class TypeParamDeclaration_SuperTypeAssignment_1_1_1 extends AssignmentToken  {
	
	public TypeParamDeclaration_SuperTypeAssignment_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTypeParamDeclarationAccess().getSuperTypeAssignment_1_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("superType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("superType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTypeParamDeclarationAccess().getSuperTypeTypeRefParserRuleCall_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TypeParamDeclaration_SuperKeyword_1_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule TypeParamDeclaration ****************/


/************ begin Rule Expression ****************
 *
 * Expression:
 *   AssignmentExpression|ReturnExpression;
 *
 **/

// AssignmentExpression|ReturnExpression
protected class Expression_Alternatives extends AlternativesToken {

	public Expression_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getExpressionAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Expression_ReturnExpressionParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// AssignmentExpression
protected class Expression_AssignmentExpressionParserRuleCall_0 extends RuleCallToken {
	
	public Expression_AssignmentExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignmentExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AssignmentExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAssignmentExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ReturnExpression
protected class Expression_ReturnExpressionParserRuleCall_1 extends RuleCallToken {
	
	public Expression_ReturnExpressionParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionAccess().getReturnExpressionParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ReturnExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ReturnExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getReturnExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Expression ****************/


/************ begin Rule ReturnExpression ****************
 *
 * ReturnExpression returns Expression:
 *   {ReturnExpression} "return" expr=AssignmentExpression;
 *
 **/

// {ReturnExpression} "return" expr=AssignmentExpression
protected class ReturnExpression_Group extends GroupToken {
	
	public ReturnExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getReturnExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ReturnExpression_ExprAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getReturnExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {ReturnExpression}
protected class ReturnExpression_ReturnExpressionAction_0 extends ActionToken  {

	public ReturnExpression_ReturnExpressionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getReturnExpressionAccess().getReturnExpressionAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getReturnExpressionAccess().getReturnExpressionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "return"
protected class ReturnExpression_ReturnKeyword_1 extends KeywordToken  {
	
	public ReturnExpression_ReturnKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getReturnExpressionAccess().getReturnKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ReturnExpression_ReturnExpressionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// expr=AssignmentExpression
protected class ReturnExpression_ExprAssignment_2 extends AssignmentToken  {
	
	public ReturnExpression_ExprAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getReturnExpressionAccess().getExprAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignmentExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssignmentExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getReturnExpressionAccess().getExprAssignmentExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ReturnExpression_ReturnKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ReturnExpression ****************/


/************ begin Rule AssignmentExpression ****************
 *
 * AssignmentExpression returns Expression:
 *   (OrExpression|VarDeclaration) ({AssignmentOperation.left=current} op=
 *   AssignmentOperator right=AssignmentExpression)?;
 *
 **/

// (OrExpression|VarDeclaration) ({AssignmentOperation.left=current} op=
// AssignmentOperator right=AssignmentExpression)?
protected class AssignmentExpression_Group extends GroupToken {
	
	public AssignmentExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAssignmentExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignmentExpression_Group_1(parent, this, 0, inst);
			case 1: return new AssignmentExpression_Alternatives_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAssignmentExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// OrExpression|VarDeclaration
protected class AssignmentExpression_Alternatives_0 extends AlternativesToken {

	public AssignmentExpression_Alternatives_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getAssignmentExpressionAccess().getAlternatives_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignmentExpression_OrExpressionParserRuleCall_0_0(parent, this, 0, inst);
			case 1: return new AssignmentExpression_VarDeclarationParserRuleCall_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// OrExpression
protected class AssignmentExpression_OrExpressionParserRuleCall_0_0 extends RuleCallToken {
	
	public AssignmentExpression_OrExpressionParserRuleCall_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAssignmentExpressionAccess().getOrExpressionParserRuleCall_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(OrExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getOrExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// VarDeclaration
protected class AssignmentExpression_VarDeclarationParserRuleCall_0_1 extends RuleCallToken {
	
	public AssignmentExpression_VarDeclarationParserRuleCall_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAssignmentExpressionAccess().getVarDeclarationParserRuleCall_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(VarDeclaration_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getVarDeclarationRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


// ({AssignmentOperation.left=current} op=AssignmentOperator right=
// AssignmentExpression)?
protected class AssignmentExpression_Group_1 extends GroupToken {
	
	public AssignmentExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAssignmentExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignmentExpression_RightAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {AssignmentOperation.left=current}
protected class AssignmentExpression_AssignmentOperationLeftAction_1_0 extends ActionToken  {

	public AssignmentExpression_AssignmentOperationLeftAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getAssignmentExpressionAccess().getAssignmentOperationLeftAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignmentExpression_Alternatives_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getAssignmentExpressionAccess().getAssignmentOperationLeftAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("left", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("left")) return null;
		return getDescr((EObject) val);
	}
}

// op=AssignmentOperator
protected class AssignmentExpression_OpAssignment_1_1 extends AssignmentToken  {
	
	public AssignmentExpression_OpAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssignmentExpressionAccess().getOpAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignmentExpression_AssignmentOperationLeftAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("op",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("op");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getAssignmentExpressionAccess().getOpAssignmentOperatorEnumRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// right=AssignmentExpression
protected class AssignmentExpression_RightAssignment_1_2 extends AssignmentToken  {
	
	public AssignmentExpression_RightAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssignmentExpressionAccess().getRightAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignmentExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("right",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssignmentExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAssignmentExpressionAccess().getRightAssignmentExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AssignmentExpression_OpAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AssignmentExpression ****************/


/************ begin Rule VarDeclaration ****************
 *
 * VarDeclaration returns Expression:
 *   {VarDeclaration} ("var"|type=TypeRef) name=ID;
 *
 **/

// {VarDeclaration} ("var"|type=TypeRef) name=ID
protected class VarDeclaration_Group extends GroupToken {
	
	public VarDeclaration_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getVarDeclarationAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarDeclaration_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getVarDeclarationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {VarDeclaration}
protected class VarDeclaration_VarDeclarationAction_0 extends ActionToken  {

	public VarDeclaration_VarDeclarationAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getVarDeclarationAccess().getVarDeclarationAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getVarDeclarationAccess().getVarDeclarationAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "var"|type=TypeRef
protected class VarDeclaration_Alternatives_1 extends AlternativesToken {

	public VarDeclaration_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getVarDeclarationAccess().getAlternatives_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarDeclaration_VarKeyword_1_0(parent, this, 0, inst);
			case 1: return new VarDeclaration_TypeAssignment_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "var"
protected class VarDeclaration_VarKeyword_1_0 extends KeywordToken  {
	
	public VarDeclaration_VarKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getVarDeclarationAccess().getVarKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarDeclaration_VarDeclarationAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=TypeRef
protected class VarDeclaration_TypeAssignment_1_1 extends AssignmentToken  {
	
	public VarDeclaration_TypeAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVarDeclarationAccess().getTypeAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getVarDeclarationAccess().getTypeTypeRefParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new VarDeclaration_VarDeclarationAction_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// name=ID
protected class VarDeclaration_NameAssignment_2 extends AssignmentToken  {
	
	public VarDeclaration_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVarDeclarationAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarDeclaration_Alternatives_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getVarDeclarationAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule VarDeclaration ****************/


/************ begin Rule TypeRef ****************
 *
 * TypeRef:
 *   SimpleTypeRef|ClosureTypeRef;
 *
 **/

// SimpleTypeRef|ClosureTypeRef
protected class TypeRef_Alternatives extends AlternativesToken {

	public TypeRef_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getTypeRefAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_SimpleTypeRefParserRuleCall_0(parent, this, 0, inst);
			case 1: return new TypeRef_ClosureTypeRefParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// SimpleTypeRef
protected class TypeRef_SimpleTypeRefParserRuleCall_0 extends RuleCallToken {
	
	public TypeRef_SimpleTypeRefParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeRefAccess().getSimpleTypeRefParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleTypeRef_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(SimpleTypeRef_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSimpleTypeRefRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ClosureTypeRef
protected class TypeRef_ClosureTypeRefParserRuleCall_1 extends RuleCallToken {
	
	public TypeRef_ClosureTypeRefParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeRefAccess().getClosureTypeRefParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureTypeRef_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ClosureTypeRef_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getClosureTypeRefRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule TypeRef ****************/


/************ begin Rule SimpleTypeRef ****************
 *
 * SimpleTypeRef:
 *   typeName+=ID ("::" typeName+=ID)* ("<" ruleTypeParameter+=RuleTypeParam (","
 *   ruleTypeParameter+=RuleTypeParam)* ">")?; 
 *  
 * 	                   
 * 	
 * // ClosureTypeRef declares parameters and return type
 *
 **/

// typeName+=ID ("::" typeName+=ID)* ("<" ruleTypeParameter+=RuleTypeParam (","
// ruleTypeParameter+=RuleTypeParam)* ">")?
protected class SimpleTypeRef_Group extends GroupToken {
	
	public SimpleTypeRef_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSimpleTypeRefAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleTypeRef_Group_2(parent, this, 0, inst);
			case 1: return new SimpleTypeRef_Group_1(parent, this, 1, inst);
			case 2: return new SimpleTypeRef_TypeNameAssignment_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSimpleTypeRefRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// typeName+=ID
protected class SimpleTypeRef_TypeNameAssignment_0 extends AssignmentToken  {
	
	public SimpleTypeRef_TypeNameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleTypeRefAccess().getTypeNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("typeName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("typeName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSimpleTypeRefAccess().getTypeNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ("::" typeName+=ID)*
protected class SimpleTypeRef_Group_1 extends GroupToken {
	
	public SimpleTypeRef_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSimpleTypeRefAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleTypeRef_TypeNameAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "::"
protected class SimpleTypeRef_ColonColonKeyword_1_0 extends KeywordToken  {
	
	public SimpleTypeRef_ColonColonKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleTypeRefAccess().getColonColonKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleTypeRef_Group_1(parent, this, 0, inst);
			case 1: return new SimpleTypeRef_TypeNameAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// typeName+=ID
protected class SimpleTypeRef_TypeNameAssignment_1_1 extends AssignmentToken  {
	
	public SimpleTypeRef_TypeNameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleTypeRefAccess().getTypeNameAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleTypeRef_ColonColonKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("typeName",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("typeName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSimpleTypeRefAccess().getTypeNameIDTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}


// ("<" ruleTypeParameter+=RuleTypeParam ("," ruleTypeParameter+=RuleTypeParam)* ">")?
protected class SimpleTypeRef_Group_2 extends GroupToken {
	
	public SimpleTypeRef_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSimpleTypeRefAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleTypeRef_GreaterThanSignKeyword_2_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "<"
protected class SimpleTypeRef_LessThanSignKeyword_2_0 extends KeywordToken  {
	
	public SimpleTypeRef_LessThanSignKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleTypeRefAccess().getLessThanSignKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleTypeRef_Group_1(parent, this, 0, inst);
			case 1: return new SimpleTypeRef_TypeNameAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ruleTypeParameter+=RuleTypeParam
protected class SimpleTypeRef_RuleTypeParameterAssignment_2_1 extends AssignmentToken  {
	
	public SimpleTypeRef_RuleTypeParameterAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleTypeRefAccess().getRuleTypeParameterAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleTypeParam_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("ruleTypeParameter",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("ruleTypeParameter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRuleTypeParamRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSimpleTypeRefAccess().getRuleTypeParameterRuleTypeParamParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SimpleTypeRef_LessThanSignKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," ruleTypeParameter+=RuleTypeParam)*
protected class SimpleTypeRef_Group_2_2 extends GroupToken {
	
	public SimpleTypeRef_Group_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSimpleTypeRefAccess().getGroup_2_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleTypeRef_RuleTypeParameterAssignment_2_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class SimpleTypeRef_CommaKeyword_2_2_0 extends KeywordToken  {
	
	public SimpleTypeRef_CommaKeyword_2_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleTypeRefAccess().getCommaKeyword_2_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleTypeRef_Group_2_2(parent, this, 0, inst);
			case 1: return new SimpleTypeRef_RuleTypeParameterAssignment_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ruleTypeParameter+=RuleTypeParam
protected class SimpleTypeRef_RuleTypeParameterAssignment_2_2_1 extends AssignmentToken  {
	
	public SimpleTypeRef_RuleTypeParameterAssignment_2_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleTypeRefAccess().getRuleTypeParameterAssignment_2_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleTypeParam_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("ruleTypeParameter",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("ruleTypeParameter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRuleTypeParamRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSimpleTypeRefAccess().getRuleTypeParameterRuleTypeParamParserRuleCall_2_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SimpleTypeRef_CommaKeyword_2_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ">"
protected class SimpleTypeRef_GreaterThanSignKeyword_2_3 extends KeywordToken  {
	
	public SimpleTypeRef_GreaterThanSignKeyword_2_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleTypeRefAccess().getGreaterThanSignKeyword_2_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleTypeRef_Group_2_2(parent, this, 0, inst);
			case 1: return new SimpleTypeRef_RuleTypeParameterAssignment_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule SimpleTypeRef ****************/


/************ begin Rule ClosureTypeRef ****************
 *
 * ClosureTypeRef:
 *   ("(" parameterTypes+=TypeRef ("," parameterTypes+=TypeRef)* ")")? "=>" returnType=
 *   TypeRef; 
 * // ClosureTypeRef declares parameters and return type
 *
 **/

// ("(" parameterTypes+=TypeRef ("," parameterTypes+=TypeRef)* ")")? "=>" returnType=
// TypeRef
protected class ClosureTypeRef_Group extends GroupToken {
	
	public ClosureTypeRef_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getClosureTypeRefAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureTypeRef_ReturnTypeAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getClosureTypeRefRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ("(" parameterTypes+=TypeRef ("," parameterTypes+=TypeRef)* ")")?
protected class ClosureTypeRef_Group_0 extends GroupToken {
	
	public ClosureTypeRef_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getClosureTypeRefAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureTypeRef_RightParenthesisKeyword_0_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class ClosureTypeRef_LeftParenthesisKeyword_0_0 extends KeywordToken  {
	
	public ClosureTypeRef_LeftParenthesisKeyword_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureTypeRefAccess().getLeftParenthesisKeyword_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// parameterTypes+=TypeRef
protected class ClosureTypeRef_ParameterTypesAssignment_0_1 extends AssignmentToken  {
	
	public ClosureTypeRef_ParameterTypesAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClosureTypeRefAccess().getParameterTypesAssignment_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameterTypes",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameterTypes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClosureTypeRefAccess().getParameterTypesTypeRefParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ClosureTypeRef_LeftParenthesisKeyword_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," parameterTypes+=TypeRef)*
protected class ClosureTypeRef_Group_0_2 extends GroupToken {
	
	public ClosureTypeRef_Group_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getClosureTypeRefAccess().getGroup_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureTypeRef_ParameterTypesAssignment_0_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class ClosureTypeRef_CommaKeyword_0_2_0 extends KeywordToken  {
	
	public ClosureTypeRef_CommaKeyword_0_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureTypeRefAccess().getCommaKeyword_0_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureTypeRef_Group_0_2(parent, this, 0, inst);
			case 1: return new ClosureTypeRef_ParameterTypesAssignment_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// parameterTypes+=TypeRef
protected class ClosureTypeRef_ParameterTypesAssignment_0_2_1 extends AssignmentToken  {
	
	public ClosureTypeRef_ParameterTypesAssignment_0_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClosureTypeRefAccess().getParameterTypesAssignment_0_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameterTypes",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameterTypes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClosureTypeRefAccess().getParameterTypesTypeRefParserRuleCall_0_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ClosureTypeRef_CommaKeyword_0_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ")"
protected class ClosureTypeRef_RightParenthesisKeyword_0_3 extends KeywordToken  {
	
	public ClosureTypeRef_RightParenthesisKeyword_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureTypeRefAccess().getRightParenthesisKeyword_0_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureTypeRef_Group_0_2(parent, this, 0, inst);
			case 1: return new ClosureTypeRef_ParameterTypesAssignment_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// "=>"
protected class ClosureTypeRef_EqualsSignGreaterThanSignKeyword_1 extends KeywordToken  {
	
	public ClosureTypeRef_EqualsSignGreaterThanSignKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureTypeRefAccess().getEqualsSignGreaterThanSignKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureTypeRef_Group_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// returnType=TypeRef
protected class ClosureTypeRef_ReturnTypeAssignment_2 extends AssignmentToken  {
	
	public ClosureTypeRef_ReturnTypeAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClosureTypeRefAccess().getReturnTypeAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("returnType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("returnType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClosureTypeRefAccess().getReturnTypeTypeRefParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ClosureTypeRef_EqualsSignGreaterThanSignKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ClosureTypeRef ****************/


/************ begin Rule RuleTypeParam ****************
 *
 * RuleTypeParam:
 *   RuleTypeRefParam|WildcardRefParam;
 *
 **/

// RuleTypeRefParam|WildcardRefParam
protected class RuleTypeParam_Alternatives extends AlternativesToken {

	public RuleTypeParam_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getRuleTypeParamAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleTypeParam_RuleTypeRefParamParserRuleCall_0(parent, this, 0, inst);
			case 1: return new RuleTypeParam_WildcardRefParamParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRuleTypeParamRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// RuleTypeRefParam
protected class RuleTypeParam_RuleTypeRefParamParserRuleCall_0 extends RuleCallToken {
	
	public RuleTypeParam_RuleTypeRefParamParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRuleTypeParamAccess().getRuleTypeRefParamParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleTypeRefParam_TypeRefParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleTypeRefParam_TypeRefParserRuleCall.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleTypeRefParamRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// WildcardRefParam
protected class RuleTypeParam_WildcardRefParamParserRuleCall_1 extends RuleCallToken {
	
	public RuleTypeParam_WildcardRefParamParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRuleTypeParamAccess().getWildcardRefParamParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WildcardRefParam_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(WildcardRefParam_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getWildcardRefParamRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule RuleTypeParam ****************/


/************ begin Rule RuleTypeRefParam ****************
 *
 * RuleTypeRefParam:
 *   TypeRef;
 *
 **/

// TypeRef
protected class RuleTypeRefParam_TypeRefParserRuleCall extends RuleCallToken {
	
	public RuleTypeRefParam_TypeRefParserRuleCall(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRuleTypeRefParamAccess().getTypeRefParserRuleCall();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRuleTypeRefParamRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(TypeRef_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule RuleTypeRefParam ****************/


/************ begin Rule WildcardRefParam ****************
 *
 * WildcardRefParam:
 *   "?" ("extends" extends+=TypeRef ("," extends+=TypeRef)*|"super" superRef=TypeRef)?;
 *
 **/

// "?" ("extends" extends+=TypeRef ("," extends+=TypeRef)*|"super" superRef=TypeRef)?
protected class WildcardRefParam_Group extends GroupToken {
	
	public WildcardRefParam_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getWildcardRefParamAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WildcardRefParam_Alternatives_1(parent, this, 0, inst);
			case 1: return new WildcardRefParam_QuestionMarkKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getWildcardRefParamRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "?"
protected class WildcardRefParam_QuestionMarkKeyword_0 extends KeywordToken  {
	
	public WildcardRefParam_QuestionMarkKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWildcardRefParamAccess().getQuestionMarkKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// ("extends" extends+=TypeRef ("," extends+=TypeRef)*|"super" superRef=TypeRef)?
protected class WildcardRefParam_Alternatives_1 extends AlternativesToken {

	public WildcardRefParam_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getWildcardRefParamAccess().getAlternatives_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WildcardRefParam_Group_1_0(parent, this, 0, inst);
			case 1: return new WildcardRefParam_Group_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "extends" extends+=TypeRef ("," extends+=TypeRef)*
protected class WildcardRefParam_Group_1_0 extends GroupToken {
	
	public WildcardRefParam_Group_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getWildcardRefParamAccess().getGroup_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WildcardRefParam_Group_1_0_2(parent, this, 0, inst);
			case 1: return new WildcardRefParam_ExtendsAssignment_1_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "extends"
protected class WildcardRefParam_ExtendsKeyword_1_0_0 extends KeywordToken  {
	
	public WildcardRefParam_ExtendsKeyword_1_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWildcardRefParamAccess().getExtendsKeyword_1_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WildcardRefParam_QuestionMarkKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// extends+=TypeRef
protected class WildcardRefParam_ExtendsAssignment_1_0_1 extends AssignmentToken  {
	
	public WildcardRefParam_ExtendsAssignment_1_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getWildcardRefParamAccess().getExtendsAssignment_1_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("extends",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("extends");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWildcardRefParamAccess().getExtendsTypeRefParserRuleCall_1_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WildcardRefParam_ExtendsKeyword_1_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," extends+=TypeRef)*
protected class WildcardRefParam_Group_1_0_2 extends GroupToken {
	
	public WildcardRefParam_Group_1_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getWildcardRefParamAccess().getGroup_1_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WildcardRefParam_ExtendsAssignment_1_0_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class WildcardRefParam_CommaKeyword_1_0_2_0 extends KeywordToken  {
	
	public WildcardRefParam_CommaKeyword_1_0_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWildcardRefParamAccess().getCommaKeyword_1_0_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WildcardRefParam_Group_1_0_2(parent, this, 0, inst);
			case 1: return new WildcardRefParam_ExtendsAssignment_1_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// extends+=TypeRef
protected class WildcardRefParam_ExtendsAssignment_1_0_2_1 extends AssignmentToken  {
	
	public WildcardRefParam_ExtendsAssignment_1_0_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getWildcardRefParamAccess().getExtendsAssignment_1_0_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("extends",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("extends");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWildcardRefParamAccess().getExtendsTypeRefParserRuleCall_1_0_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WildcardRefParam_CommaKeyword_1_0_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// "super" superRef=TypeRef
protected class WildcardRefParam_Group_1_1 extends GroupToken {
	
	public WildcardRefParam_Group_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getWildcardRefParamAccess().getGroup_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WildcardRefParam_SuperRefAssignment_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "super"
protected class WildcardRefParam_SuperKeyword_1_1_0 extends KeywordToken  {
	
	public WildcardRefParam_SuperKeyword_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWildcardRefParamAccess().getSuperKeyword_1_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WildcardRefParam_QuestionMarkKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// superRef=TypeRef
protected class WildcardRefParam_SuperRefAssignment_1_1_1 extends AssignmentToken  {
	
	public WildcardRefParam_SuperRefAssignment_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getWildcardRefParamAccess().getSuperRefAssignment_1_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("superRef",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("superRef");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWildcardRefParamAccess().getSuperRefTypeRefParserRuleCall_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WildcardRefParam_SuperKeyword_1_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule WildcardRefParam ****************/


/************ begin Rule OrExpression ****************
 *
 * OrExpression returns Expression:
 *   AndExpression ({BooleanOperation.left=current} operator="||" right=AndExpression)*;
 *
 **/

// AndExpression ({BooleanOperation.left=current} operator="||" right=AndExpression)*
protected class OrExpression_Group extends GroupToken {
	
	public OrExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrExpression_Group_1(parent, this, 0, inst);
			case 1: return new OrExpression_AndExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getOrExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// AndExpression
protected class OrExpression_AndExpressionParserRuleCall_0 extends RuleCallToken {
	
	public OrExpression_AndExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AndExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAndExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({BooleanOperation.left=current} operator="||" right=AndExpression)*
protected class OrExpression_Group_1 extends GroupToken {
	
	public OrExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrExpression_RightAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {BooleanOperation.left=current}
protected class OrExpression_BooleanOperationLeftAction_1_0 extends ActionToken  {

	public OrExpression_BooleanOperationLeftAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getBooleanOperationLeftAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrExpression_Group_1(parent, this, 0, inst);
			case 1: return new OrExpression_AndExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getOrExpressionAccess().getBooleanOperationLeftAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("left", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("left")) return null;
		return getDescr((EObject) val);
	}
}

// operator="||"
protected class OrExpression_OperatorAssignment_1_1 extends AssignmentToken  {
	
	public OrExpression_OperatorAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrExpression_BooleanOperationLeftAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("operator",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("operator");
		if("||".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getOrExpressionAccess().getOperatorVerticalLineVerticalLineKeyword_1_1_0();
			return obj;
		}
		return null;
	}

}

// right=AndExpression
protected class OrExpression_RightAssignment_1_2 extends AssignmentToken  {
	
	public OrExpression_RightAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getRightAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("right",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAndExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OrExpression_OperatorAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule OrExpression ****************/


/************ begin Rule AndExpression ****************
 *
 * AndExpression returns Expression:
 *   BitwiseExpression ({BooleanOperation.left=current} operator="&&" right=
 *   BitwiseExpression)*;
 *
 **/

// BitwiseExpression ({BooleanOperation.left=current} operator="&&" right=
// BitwiseExpression)*
protected class AndExpression_Group extends GroupToken {
	
	public AndExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_Group_1(parent, this, 0, inst);
			case 1: return new AndExpression_BitwiseExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAndExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// BitwiseExpression
protected class AndExpression_BitwiseExpressionParserRuleCall_0 extends RuleCallToken {
	
	public AndExpression_BitwiseExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getBitwiseExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BitwiseExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(BitwiseExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBitwiseExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({BooleanOperation.left=current} operator="&&" right=BitwiseExpression)*
protected class AndExpression_Group_1 extends GroupToken {
	
	public AndExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_RightAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {BooleanOperation.left=current}
protected class AndExpression_BooleanOperationLeftAction_1_0 extends ActionToken  {

	public AndExpression_BooleanOperationLeftAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getBooleanOperationLeftAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_Group_1(parent, this, 0, inst);
			case 1: return new AndExpression_BitwiseExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getAndExpressionAccess().getBooleanOperationLeftAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("left", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("left")) return null;
		return getDescr((EObject) val);
	}
}

// operator="&&"
protected class AndExpression_OperatorAssignment_1_1 extends AssignmentToken  {
	
	public AndExpression_OperatorAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_BooleanOperationLeftAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("operator",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("operator");
		if("&&".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAndExpressionAccess().getOperatorAmpersandAmpersandKeyword_1_1_0();
			return obj;
		}
		return null;
	}

}

// right=BitwiseExpression
protected class AndExpression_RightAssignment_1_2 extends AssignmentToken  {
	
	public AndExpression_RightAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getRightAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BitwiseExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("right",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBitwiseExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAndExpressionAccess().getRightBitwiseExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AndExpression_OperatorAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AndExpression ****************/


/************ begin Rule BitwiseExpression ****************
 *
 * BitwiseExpression returns Expression:
 *   RelationalExpression ({OperationCall.params+=current} name=( "&" | "^" | "|" ) params+=
 *   RelationalExpression)*;
 *
 **/

// RelationalExpression ({OperationCall.params+=current} name=( "&" | "^" | "|" ) params+=
// RelationalExpression)*
protected class BitwiseExpression_Group extends GroupToken {
	
	public BitwiseExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBitwiseExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BitwiseExpression_Group_1(parent, this, 0, inst);
			case 1: return new BitwiseExpression_RelationalExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBitwiseExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// RelationalExpression
protected class BitwiseExpression_RelationalExpressionParserRuleCall_0 extends RuleCallToken {
	
	public BitwiseExpression_RelationalExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getBitwiseExpressionAccess().getRelationalExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationalExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RelationalExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRelationalExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({OperationCall.params+=current} name=( "&" | "^" | "|" ) params+=RelationalExpression)*
protected class BitwiseExpression_Group_1 extends GroupToken {
	
	public BitwiseExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBitwiseExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BitwiseExpression_ParamsAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {OperationCall.params+=current}
protected class BitwiseExpression_OperationCallParamsAction_1_0 extends ActionToken  {

	public BitwiseExpression_OperationCallParamsAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getBitwiseExpressionAccess().getOperationCallParamsAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BitwiseExpression_Group_1(parent, this, 0, inst);
			case 1: return new BitwiseExpression_RelationalExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getBitwiseExpressionAccess().getOperationCallParamsAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("params", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("params")) return null;
		return getDescr((EObject) val);
	}
}

// name=( "&" | "^" | "|" )
protected class BitwiseExpression_NameAssignment_1_1 extends AssignmentToken  {
	
	public BitwiseExpression_NameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBitwiseExpressionAccess().getNameAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BitwiseExpression_OperationCallParamsAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if("&".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getBitwiseExpressionAccess().getNameAmpersandKeyword_1_1_0_0();
			return obj;
		}
		if("^".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getBitwiseExpressionAccess().getNameCircumflexAccentKeyword_1_1_0_1();
			return obj;
		}
		if("|".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getBitwiseExpressionAccess().getNameVerticalLineKeyword_1_1_0_2();
			return obj;
		}
		return null;
	}

}

// params+=RelationalExpression
protected class BitwiseExpression_ParamsAssignment_1_2 extends AssignmentToken  {
	
	public BitwiseExpression_ParamsAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBitwiseExpressionAccess().getParamsAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationalExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRelationalExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBitwiseExpressionAccess().getParamsRelationalExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BitwiseExpression_NameAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule BitwiseExpression ****************/


/************ begin Rule RelationalExpression ****************
 *
 * RelationalExpression returns Expression:
 *   ShiftExpression ({RelationalOperation.left=current} operator=RelationalOperator
 *   right=ShiftExpression)*;
 *
 **/

// ShiftExpression ({RelationalOperation.left=current} operator=RelationalOperator
// right=ShiftExpression)*
protected class RelationalExpression_Group extends GroupToken {
	
	public RelationalExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationalExpression_Group_1(parent, this, 0, inst);
			case 1: return new RelationalExpression_ShiftExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRelationalExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ShiftExpression
protected class RelationalExpression_ShiftExpressionParserRuleCall_0 extends RuleCallToken {
	
	public RelationalExpression_ShiftExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ShiftExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ShiftExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getShiftExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({RelationalOperation.left=current} operator=RelationalOperator right=
// ShiftExpression)*
protected class RelationalExpression_Group_1 extends GroupToken {
	
	public RelationalExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationalExpression_RightAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {RelationalOperation.left=current}
protected class RelationalExpression_RelationalOperationLeftAction_1_0 extends ActionToken  {

	public RelationalExpression_RelationalOperationLeftAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getRelationalOperationLeftAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationalExpression_Group_1(parent, this, 0, inst);
			case 1: return new RelationalExpression_ShiftExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getRelationalExpressionAccess().getRelationalOperationLeftAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("left", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("left")) return null;
		return getDescr((EObject) val);
	}
}

// operator=RelationalOperator
protected class RelationalExpression_OperatorAssignment_1_1 extends AssignmentToken  {
	
	public RelationalExpression_OperatorAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationalExpression_RelationalOperationLeftAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("operator",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("operator");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getRelationalExpressionAccess().getOperatorRelationalOperatorEnumRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// right=ShiftExpression
protected class RelationalExpression_RightAssignment_1_2 extends AssignmentToken  {
	
	public RelationalExpression_RightAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getRightAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ShiftExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("right",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getShiftExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRelationalExpressionAccess().getRightShiftExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RelationalExpression_OperatorAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule RelationalExpression ****************/


/************ begin Rule ShiftExpression ****************
 *
 * ShiftExpression returns Expression:
 *   AdditiveExpression ({OperationCall.params+=current} name=( "<<" | ">>" | ">>>" ) params+=
 *   AdditiveExpression)*;
 *
 **/

// AdditiveExpression ({OperationCall.params+=current} name=( "<<" | ">>" | ">>>" ) params+=
// AdditiveExpression)*
protected class ShiftExpression_Group extends GroupToken {
	
	public ShiftExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getShiftExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ShiftExpression_Group_1(parent, this, 0, inst);
			case 1: return new ShiftExpression_AdditiveExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getShiftExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// AdditiveExpression
protected class ShiftExpression_AdditiveExpressionParserRuleCall_0 extends RuleCallToken {
	
	public ShiftExpression_AdditiveExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdditiveExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AdditiveExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAdditiveExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({OperationCall.params+=current} name=( "<<" | ">>" | ">>>" ) params+=AdditiveExpression
// )*
protected class ShiftExpression_Group_1 extends GroupToken {
	
	public ShiftExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getShiftExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ShiftExpression_ParamsAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {OperationCall.params+=current}
protected class ShiftExpression_OperationCallParamsAction_1_0 extends ActionToken  {

	public ShiftExpression_OperationCallParamsAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getShiftExpressionAccess().getOperationCallParamsAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ShiftExpression_Group_1(parent, this, 0, inst);
			case 1: return new ShiftExpression_AdditiveExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getShiftExpressionAccess().getOperationCallParamsAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("params", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("params")) return null;
		return getDescr((EObject) val);
	}
}

// name=( "<<" | ">>" | ">>>" )
protected class ShiftExpression_NameAssignment_1_1 extends AssignmentToken  {
	
	public ShiftExpression_NameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getShiftExpressionAccess().getNameAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ShiftExpression_OperationCallParamsAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if("<<".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getShiftExpressionAccess().getNameLessThanSignLessThanSignKeyword_1_1_0_0();
			return obj;
		}
		if(">>".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getShiftExpressionAccess().getNameGreaterThanSignGreaterThanSignKeyword_1_1_0_1();
			return obj;
		}
		if(">>>".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getShiftExpressionAccess().getNameGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_1_0_2();
			return obj;
		}
		return null;
	}

}

// params+=AdditiveExpression
protected class ShiftExpression_ParamsAssignment_1_2 extends AssignmentToken  {
	
	public ShiftExpression_ParamsAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getShiftExpressionAccess().getParamsAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdditiveExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAdditiveExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getShiftExpressionAccess().getParamsAdditiveExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ShiftExpression_NameAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ShiftExpression ****************/


/************ begin Rule AdditiveExpression ****************
 *
 * AdditiveExpression returns Expression:
 *   MultiplicativeExpression ({OperationCall.params+=current} name=( "+" | "-" ) params+=
 *   MultiplicativeExpression)*;
 *
 **/

// MultiplicativeExpression ({OperationCall.params+=current} name=( "+" | "-" ) params+=
// MultiplicativeExpression)*
protected class AdditiveExpression_Group extends GroupToken {
	
	public AdditiveExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdditiveExpression_Group_1(parent, this, 0, inst);
			case 1: return new AdditiveExpression_MultiplicativeExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAdditiveExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// MultiplicativeExpression
protected class AdditiveExpression_MultiplicativeExpressionParserRuleCall_0 extends RuleCallToken {
	
	public AdditiveExpression_MultiplicativeExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(MultiplicativeExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({OperationCall.params+=current} name=( "+" | "-" ) params+=MultiplicativeExpression)*
protected class AdditiveExpression_Group_1 extends GroupToken {
	
	public AdditiveExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdditiveExpression_ParamsAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {OperationCall.params+=current}
protected class AdditiveExpression_OperationCallParamsAction_1_0 extends ActionToken  {

	public AdditiveExpression_OperationCallParamsAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getOperationCallParamsAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdditiveExpression_Group_1(parent, this, 0, inst);
			case 1: return new AdditiveExpression_MultiplicativeExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getAdditiveExpressionAccess().getOperationCallParamsAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("params", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("params")) return null;
		return getDescr((EObject) val);
	}
}

// name=( "+" | "-" )
protected class AdditiveExpression_NameAssignment_1_1 extends AssignmentToken  {
	
	public AdditiveExpression_NameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getNameAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdditiveExpression_OperationCallParamsAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if("+".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAdditiveExpressionAccess().getNamePlusSignKeyword_1_1_0_0();
			return obj;
		}
		if("-".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAdditiveExpressionAccess().getNameHyphenMinusKeyword_1_1_0_1();
			return obj;
		}
		return null;
	}

}

// params+=MultiplicativeExpression
protected class AdditiveExpression_ParamsAssignment_1_2 extends AssignmentToken  {
	
	public AdditiveExpression_ParamsAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getParamsAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAdditiveExpressionAccess().getParamsMultiplicativeExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AdditiveExpression_NameAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AdditiveExpression ****************/


/************ begin Rule MultiplicativeExpression ****************
 *
 * MultiplicativeExpression returns Expression:
 *   SetExpression ({OperationCall.params+=current} name=( "*" | "/" | "%" ) params+=
 *   SetExpression)*;
 *
 **/

// SetExpression ({OperationCall.params+=current} name=( "*" | "/" | "%" ) params+=
// SetExpression)*
protected class MultiplicativeExpression_Group extends GroupToken {
	
	public MultiplicativeExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_Group_1(parent, this, 0, inst);
			case 1: return new MultiplicativeExpression_SetExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// SetExpression
protected class MultiplicativeExpression_SetExpressionParserRuleCall_0 extends RuleCallToken {
	
	public MultiplicativeExpression_SetExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getSetExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SetExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(SetExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSetExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({OperationCall.params+=current} name=( "*" | "/" | "%" ) params+=SetExpression)*
protected class MultiplicativeExpression_Group_1 extends GroupToken {
	
	public MultiplicativeExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_ParamsAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {OperationCall.params+=current}
protected class MultiplicativeExpression_OperationCallParamsAction_1_0 extends ActionToken  {

	public MultiplicativeExpression_OperationCallParamsAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getOperationCallParamsAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_Group_1(parent, this, 0, inst);
			case 1: return new MultiplicativeExpression_SetExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getMultiplicativeExpressionAccess().getOperationCallParamsAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("params", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("params")) return null;
		return getDescr((EObject) val);
	}
}

// name=( "*" | "/" | "%" )
protected class MultiplicativeExpression_NameAssignment_1_1 extends AssignmentToken  {
	
	public MultiplicativeExpression_NameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getNameAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_OperationCallParamsAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if("*".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getMultiplicativeExpressionAccess().getNameAsteriskKeyword_1_1_0_0();
			return obj;
		}
		if("/".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getMultiplicativeExpressionAccess().getNameSolidusKeyword_1_1_0_1();
			return obj;
		}
		if("%".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getMultiplicativeExpressionAccess().getNamePercentSignKeyword_1_1_0_2();
			return obj;
		}
		return null;
	}

}

// params+=SetExpression
protected class MultiplicativeExpression_ParamsAssignment_1_2 extends AssignmentToken  {
	
	public MultiplicativeExpression_ParamsAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getParamsAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SetExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSetExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMultiplicativeExpressionAccess().getParamsSetExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MultiplicativeExpression_NameAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule MultiplicativeExpression ****************/


/************ begin Rule SetExpression ****************
 *
 * SetExpression returns Expression:
 *   UnaryOrInfixExpression ({SetOperationCall.params+=current} op=SetOperator params+=
 *   UnaryOrInfixExpression)*;
 *
 **/

// UnaryOrInfixExpression ({SetOperationCall.params+=current} op=SetOperator params+=
// UnaryOrInfixExpression)*
protected class SetExpression_Group extends GroupToken {
	
	public SetExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSetExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SetExpression_Group_1(parent, this, 0, inst);
			case 1: return new SetExpression_UnaryOrInfixExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSetExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// UnaryOrInfixExpression
protected class SetExpression_UnaryOrInfixExpressionParserRuleCall_0 extends RuleCallToken {
	
	public SetExpression_UnaryOrInfixExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getSetExpressionAccess().getUnaryOrInfixExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryOrInfixExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UnaryOrInfixExpression_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUnaryOrInfixExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({SetOperationCall.params+=current} op=SetOperator params+=UnaryOrInfixExpression)
// *
protected class SetExpression_Group_1 extends GroupToken {
	
	public SetExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSetExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SetExpression_ParamsAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {SetOperationCall.params+=current}
protected class SetExpression_SetOperationCallParamsAction_1_0 extends ActionToken  {

	public SetExpression_SetOperationCallParamsAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getSetExpressionAccess().getSetOperationCallParamsAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SetExpression_Group_1(parent, this, 0, inst);
			case 1: return new SetExpression_UnaryOrInfixExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getSetExpressionAccess().getSetOperationCallParamsAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("params", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("params")) return null;
		return getDescr((EObject) val);
	}
}

// op=SetOperator
protected class SetExpression_OpAssignment_1_1 extends AssignmentToken  {
	
	public SetExpression_OpAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSetExpressionAccess().getOpAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SetExpression_SetOperationCallParamsAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("op",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("op");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getSetExpressionAccess().getOpSetOperatorEnumRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// params+=UnaryOrInfixExpression
protected class SetExpression_ParamsAssignment_1_2 extends AssignmentToken  {
	
	public SetExpression_ParamsAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSetExpressionAccess().getParamsAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryOrInfixExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUnaryOrInfixExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSetExpressionAccess().getParamsUnaryOrInfixExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SetExpression_OpAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule SetExpression ****************/


/************ begin Rule UnaryOrInfixExpression ****************
 *
 * UnaryOrInfixExpression returns Expression:
 *   UnaryExpression|PostopExpression;
 *
 **/

// UnaryExpression|PostopExpression
protected class UnaryOrInfixExpression_Alternatives extends AlternativesToken {

	public UnaryOrInfixExpression_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getUnaryOrInfixExpressionAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryOrInfixExpression_UnaryExpressionParserRuleCall_0(parent, this, 0, inst);
			case 1: return new UnaryOrInfixExpression_PostopExpressionParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnaryOrInfixExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// UnaryExpression
protected class UnaryOrInfixExpression_UnaryExpressionParserRuleCall_0 extends RuleCallToken {
	
	public UnaryOrInfixExpression_UnaryExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getUnaryOrInfixExpressionAccess().getUnaryExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UnaryExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUnaryExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// PostopExpression
protected class UnaryOrInfixExpression_PostopExpressionParserRuleCall_1 extends RuleCallToken {
	
	public UnaryOrInfixExpression_PostopExpressionParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getUnaryOrInfixExpressionAccess().getPostopExpressionParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostopExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(PostopExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPostopExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule UnaryOrInfixExpression ****************/


/************ begin Rule UnaryExpression ****************
 *
 * UnaryExpression:
 *   {UnaryOperation} name=( "!" | "-" | "++" | "--" | "~" ) params+=PostopExpression;
 *
 **/

// {UnaryOperation} name=( "!" | "-" | "++" | "--" | "~" ) params+=PostopExpression
protected class UnaryExpression_Group extends GroupToken {
	
	public UnaryExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnaryExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryExpression_ParamsAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnaryExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {UnaryOperation}
protected class UnaryExpression_UnaryOperationAction_0 extends ActionToken  {

	public UnaryExpression_UnaryOperationAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getUnaryExpressionAccess().getUnaryOperationAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getUnaryExpressionAccess().getUnaryOperationAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// name=( "!" | "-" | "++" | "--" | "~" )
protected class UnaryExpression_NameAssignment_1 extends AssignmentToken  {
	
	public UnaryExpression_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnaryExpressionAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryExpression_UnaryOperationAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if("!".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getUnaryExpressionAccess().getNameExclamationMarkKeyword_1_0_0();
			return obj;
		}
		if("-".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getUnaryExpressionAccess().getNameHyphenMinusKeyword_1_0_1();
			return obj;
		}
		if("++".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getUnaryExpressionAccess().getNamePlusSignPlusSignKeyword_1_0_2();
			return obj;
		}
		if("--".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getUnaryExpressionAccess().getNameHyphenMinusHyphenMinusKeyword_1_0_3();
			return obj;
		}
		if("~".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getUnaryExpressionAccess().getNameTildeKeyword_1_0_4();
			return obj;
		}
		return null;
	}

}

// params+=PostopExpression
protected class UnaryExpression_ParamsAssignment_2 extends AssignmentToken  {
	
	public UnaryExpression_ParamsAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnaryExpressionAccess().getParamsAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostopExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPostopExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnaryExpressionAccess().getParamsPostopExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new UnaryExpression_NameAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule UnaryExpression ****************/


/************ begin Rule PostopExpression ****************
 *
 * PostopExpression returns Expression:
 *   InfixExpression ({OperationCall.postTarget=current} name=( "--" | "++" ))?;
 *
 **/

// InfixExpression ({OperationCall.postTarget=current} name=( "--" | "++" ))?
protected class PostopExpression_Group extends GroupToken {
	
	public PostopExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPostopExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostopExpression_Group_1(parent, this, 0, inst);
			case 1: return new PostopExpression_InfixExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPostopExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// InfixExpression
protected class PostopExpression_InfixExpressionParserRuleCall_0 extends RuleCallToken {
	
	public PostopExpression_InfixExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPostopExpressionAccess().getInfixExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(InfixExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getInfixExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({OperationCall.postTarget=current} name=( "--" | "++" ))?
protected class PostopExpression_Group_1 extends GroupToken {
	
	public PostopExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPostopExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostopExpression_NameAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {OperationCall.postTarget=current}
protected class PostopExpression_OperationCallPostTargetAction_1_0 extends ActionToken  {

	public PostopExpression_OperationCallPostTargetAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getPostopExpressionAccess().getOperationCallPostTargetAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostopExpression_InfixExpressionParserRuleCall_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getPostopExpressionAccess().getOperationCallPostTargetAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("postTarget", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("postTarget")) return null;
		return getDescr((EObject) val);
	}
}

// name=( "--" | "++" )
protected class PostopExpression_NameAssignment_1_1 extends AssignmentToken  {
	
	public PostopExpression_NameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPostopExpressionAccess().getNameAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostopExpression_OperationCallPostTargetAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if("--".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getPostopExpressionAccess().getNameHyphenMinusHyphenMinusKeyword_1_1_0_0();
			return obj;
		}
		if("++".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getPostopExpressionAccess().getNamePlusSignPlusSignKeyword_1_1_0_1();
			return obj;
		}
		return null;
	}

}



/************ end Rule PostopExpression ****************/


/************ begin Rule InfixExpression ****************
 *
 * InfixExpression returns Expression:
 *   CallExpression ({OperationCall.target=current} "." name=ID "(" parameters=
 *   ParameterList ")"|{AtCall.target=current} "[" index=Expression "]" ("(" parameters=
 *   ParameterList ")")?|{FeatureCall.target=current} "." type=ID)*;
 *
 **/

// CallExpression ({OperationCall.target=current} "." name=ID "(" parameters=
// ParameterList ")"|{AtCall.target=current} "[" index=Expression "]" ("(" parameters=
// ParameterList ")")?|{FeatureCall.target=current} "." type=ID)*
protected class InfixExpression_Group extends GroupToken {
	
	public InfixExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Alternatives_1(parent, this, 0, inst);
			case 1: return new InfixExpression_CallExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getInfixExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// CallExpression
protected class InfixExpression_CallExpressionParserRuleCall_0 extends RuleCallToken {
	
	public InfixExpression_CallExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getCallExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CallExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CallExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCallExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({OperationCall.target=current} "." name=ID "(" parameters=ParameterList ")"|{AtCall.
// target=current} "[" index=Expression "]" ("(" parameters=ParameterList ")")?|{
// FeatureCall.target=current} "." type=ID)*
protected class InfixExpression_Alternatives_1 extends AlternativesToken {

	public InfixExpression_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getAlternatives_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Group_1_0(parent, this, 0, inst);
			case 1: return new InfixExpression_Group_1_1(parent, this, 1, inst);
			case 2: return new InfixExpression_Group_1_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// {OperationCall.target=current} "." name=ID "(" parameters=ParameterList ")"
protected class InfixExpression_Group_1_0 extends GroupToken {
	
	public InfixExpression_Group_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getGroup_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_RightParenthesisKeyword_1_0_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {OperationCall.target=current}
protected class InfixExpression_OperationCallTargetAction_1_0_0 extends ActionToken  {

	public InfixExpression_OperationCallTargetAction_1_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getOperationCallTargetAction_1_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Alternatives_1(parent, this, 0, inst);
			case 1: return new InfixExpression_CallExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getInfixExpressionAccess().getOperationCallTargetAction_1_0_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("target", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("target")) return null;
		return getDescr((EObject) val);
	}
}

// "."
protected class InfixExpression_FullStopKeyword_1_0_1 extends KeywordToken  {
	
	public InfixExpression_FullStopKeyword_1_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getFullStopKeyword_1_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_OperationCallTargetAction_1_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=ID
protected class InfixExpression_NameAssignment_1_0_2 extends AssignmentToken  {
	
	public InfixExpression_NameAssignment_1_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getNameAssignment_1_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_FullStopKeyword_1_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getInfixExpressionAccess().getNameIDTerminalRuleCall_1_0_2_0();
			return obj;
		}
		return null;
	}

}

// "("
protected class InfixExpression_LeftParenthesisKeyword_1_0_3 extends KeywordToken  {
	
	public InfixExpression_LeftParenthesisKeyword_1_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getLeftParenthesisKeyword_1_0_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_NameAssignment_1_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// parameters=ParameterList
protected class InfixExpression_ParametersAssignment_1_0_4 extends AssignmentToken  {
	
	public InfixExpression_ParametersAssignment_1_0_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getParametersAssignment_1_0_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterList_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameters",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getInfixExpressionAccess().getParametersParameterListParserRuleCall_1_0_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InfixExpression_LeftParenthesisKeyword_1_0_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class InfixExpression_RightParenthesisKeyword_1_0_5 extends KeywordToken  {
	
	public InfixExpression_RightParenthesisKeyword_1_0_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getRightParenthesisKeyword_1_0_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_ParametersAssignment_1_0_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// {AtCall.target=current} "[" index=Expression "]" ("(" parameters=ParameterList ")")?
protected class InfixExpression_Group_1_1 extends GroupToken {
	
	public InfixExpression_Group_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getGroup_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Group_1_1_4(parent, this, 0, inst);
			case 1: return new InfixExpression_RightSquareBracketKeyword_1_1_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// {AtCall.target=current}
protected class InfixExpression_AtCallTargetAction_1_1_0 extends ActionToken  {

	public InfixExpression_AtCallTargetAction_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getAtCallTargetAction_1_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Alternatives_1(parent, this, 0, inst);
			case 1: return new InfixExpression_CallExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getInfixExpressionAccess().getAtCallTargetAction_1_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("target", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("target")) return null;
		return getDescr((EObject) val);
	}
}

// "["
protected class InfixExpression_LeftSquareBracketKeyword_1_1_1 extends KeywordToken  {
	
	public InfixExpression_LeftSquareBracketKeyword_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getLeftSquareBracketKeyword_1_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_AtCallTargetAction_1_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// index=Expression
protected class InfixExpression_IndexAssignment_1_1_2 extends AssignmentToken  {
	
	public InfixExpression_IndexAssignment_1_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getIndexAssignment_1_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("index",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("index");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getInfixExpressionAccess().getIndexExpressionParserRuleCall_1_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InfixExpression_LeftSquareBracketKeyword_1_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class InfixExpression_RightSquareBracketKeyword_1_1_3 extends KeywordToken  {
	
	public InfixExpression_RightSquareBracketKeyword_1_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getRightSquareBracketKeyword_1_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_IndexAssignment_1_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("(" parameters=ParameterList ")")?
protected class InfixExpression_Group_1_1_4 extends GroupToken {
	
	public InfixExpression_Group_1_1_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getGroup_1_1_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_RightParenthesisKeyword_1_1_4_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class InfixExpression_LeftParenthesisKeyword_1_1_4_0 extends KeywordToken  {
	
	public InfixExpression_LeftParenthesisKeyword_1_1_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getLeftParenthesisKeyword_1_1_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_RightSquareBracketKeyword_1_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// parameters=ParameterList
protected class InfixExpression_ParametersAssignment_1_1_4_1 extends AssignmentToken  {
	
	public InfixExpression_ParametersAssignment_1_1_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getParametersAssignment_1_1_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterList_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameters",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getInfixExpressionAccess().getParametersParameterListParserRuleCall_1_1_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InfixExpression_LeftParenthesisKeyword_1_1_4_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class InfixExpression_RightParenthesisKeyword_1_1_4_2 extends KeywordToken  {
	
	public InfixExpression_RightParenthesisKeyword_1_1_4_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getRightParenthesisKeyword_1_1_4_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_ParametersAssignment_1_1_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



// {FeatureCall.target=current} "." type=ID
protected class InfixExpression_Group_1_2 extends GroupToken {
	
	public InfixExpression_Group_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getGroup_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_TypeAssignment_1_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {FeatureCall.target=current}
protected class InfixExpression_FeatureCallTargetAction_1_2_0 extends ActionToken  {

	public InfixExpression_FeatureCallTargetAction_1_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getFeatureCallTargetAction_1_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Alternatives_1(parent, this, 0, inst);
			case 1: return new InfixExpression_CallExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getInfixExpressionAccess().getFeatureCallTargetAction_1_2_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("target", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("target")) return null;
		return getDescr((EObject) val);
	}
}

// "."
protected class InfixExpression_FullStopKeyword_1_2_1 extends KeywordToken  {
	
	public InfixExpression_FullStopKeyword_1_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getFullStopKeyword_1_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_FeatureCallTargetAction_1_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=ID
protected class InfixExpression_TypeAssignment_1_2_2 extends AssignmentToken  {
	
	public InfixExpression_TypeAssignment_1_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getTypeAssignment_1_2_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_FullStopKeyword_1_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getInfixExpressionAccess().getTypeIDTerminalRuleCall_1_2_2_0();
			return obj;
		}
		return null;
	}

}




/************ end Rule InfixExpression ****************/


/************ begin Rule CallExpression ****************
 *
 * CallExpression returns Expression:
 *   PrimaryExpression ({OperationCall.target=current} "(" parameters=ParameterList ")")*
 * ;
 *
 **/

// PrimaryExpression ({OperationCall.target=current} "(" parameters=ParameterList ")")*
protected class CallExpression_Group extends GroupToken {
	
	public CallExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCallExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CallExpression_Group_1(parent, this, 0, inst);
			case 1: return new CallExpression_PrimaryExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCallExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// PrimaryExpression
protected class CallExpression_PrimaryExpressionParserRuleCall_0 extends RuleCallToken {
	
	public CallExpression_PrimaryExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getCallExpressionAccess().getPrimaryExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimaryExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(PrimaryExpression_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPrimaryExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({OperationCall.target=current} "(" parameters=ParameterList ")")*
protected class CallExpression_Group_1 extends GroupToken {
	
	public CallExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCallExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CallExpression_RightParenthesisKeyword_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {OperationCall.target=current}
protected class CallExpression_OperationCallTargetAction_1_0 extends ActionToken  {

	public CallExpression_OperationCallTargetAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getCallExpressionAccess().getOperationCallTargetAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CallExpression_Group_1(parent, this, 0, inst);
			case 1: return new CallExpression_PrimaryExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getCallExpressionAccess().getOperationCallTargetAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("target", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("target")) return null;
		return getDescr((EObject) val);
	}
}

// "("
protected class CallExpression_LeftParenthesisKeyword_1_1 extends KeywordToken  {
	
	public CallExpression_LeftParenthesisKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCallExpressionAccess().getLeftParenthesisKeyword_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CallExpression_OperationCallTargetAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// parameters=ParameterList
protected class CallExpression_ParametersAssignment_1_2 extends AssignmentToken  {
	
	public CallExpression_ParametersAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCallExpressionAccess().getParametersAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterList_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameters",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCallExpressionAccess().getParametersParameterListParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CallExpression_LeftParenthesisKeyword_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class CallExpression_RightParenthesisKeyword_1_3 extends KeywordToken  {
	
	public CallExpression_RightParenthesisKeyword_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCallExpressionAccess().getRightParenthesisKeyword_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CallExpression_ParametersAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule CallExpression ****************/


/************ begin Rule PrimaryExpression ****************
 *
 * PrimaryExpression returns Expression:
 *   Literal|FeatureCall|ConstructorCallExpression|VariableValue|PropertyValue|
 *   KeywordVariables|ParanthesizedExpression|IfExpression|BlockExpression|
 *   SwitchExpression|ThrowExpression|TryCatchExpression|WildcardExpression|
 *   WithExpression;
 *
 **/

// Literal|FeatureCall|ConstructorCallExpression|VariableValue|PropertyValue|
// KeywordVariables|ParanthesizedExpression|IfExpression|BlockExpression|
// SwitchExpression|ThrowExpression|TryCatchExpression|WildcardExpression|
// WithExpression
protected class PrimaryExpression_Alternatives extends AlternativesToken {

	public PrimaryExpression_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimaryExpression_LiteralParserRuleCall_0(parent, this, 0, inst);
			case 1: return new PrimaryExpression_FeatureCallParserRuleCall_1(parent, this, 1, inst);
			case 2: return new PrimaryExpression_ConstructorCallExpressionParserRuleCall_2(parent, this, 2, inst);
			case 3: return new PrimaryExpression_VariableValueParserRuleCall_3(parent, this, 3, inst);
			case 4: return new PrimaryExpression_PropertyValueParserRuleCall_4(parent, this, 4, inst);
			case 5: return new PrimaryExpression_KeywordVariablesParserRuleCall_5(parent, this, 5, inst);
			case 6: return new PrimaryExpression_ParanthesizedExpressionParserRuleCall_6(parent, this, 6, inst);
			case 7: return new PrimaryExpression_IfExpressionParserRuleCall_7(parent, this, 7, inst);
			case 8: return new PrimaryExpression_BlockExpressionParserRuleCall_8(parent, this, 8, inst);
			case 9: return new PrimaryExpression_SwitchExpressionParserRuleCall_9(parent, this, 9, inst);
			case 10: return new PrimaryExpression_ThrowExpressionParserRuleCall_10(parent, this, 10, inst);
			case 11: return new PrimaryExpression_TryCatchExpressionParserRuleCall_11(parent, this, 11, inst);
			case 12: return new PrimaryExpression_WildcardExpressionParserRuleCall_12(parent, this, 12, inst);
			case 13: return new PrimaryExpression_WithExpressionParserRuleCall_13(parent, this, 13, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPrimaryExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Literal
protected class PrimaryExpression_LiteralParserRuleCall_0 extends RuleCallToken {
	
	public PrimaryExpression_LiteralParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Literal_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Literal_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// FeatureCall
protected class PrimaryExpression_FeatureCallParserRuleCall_1 extends RuleCallToken {
	
	public PrimaryExpression_FeatureCallParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getFeatureCallParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureCall_OperationCallParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(FeatureCall_OperationCallParserRuleCall.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getFeatureCallRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ConstructorCallExpression
protected class PrimaryExpression_ConstructorCallExpressionParserRuleCall_2 extends RuleCallToken {
	
	public PrimaryExpression_ConstructorCallExpressionParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getConstructorCallExpressionParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstructorCallExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ConstructorCallExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getConstructorCallExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// VariableValue
protected class PrimaryExpression_VariableValueParserRuleCall_3 extends RuleCallToken {
	
	public PrimaryExpression_VariableValueParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getVariableValueParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableValue_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(VariableValue_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getVariableValueRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// PropertyValue
protected class PrimaryExpression_PropertyValueParserRuleCall_4 extends RuleCallToken {
	
	public PrimaryExpression_PropertyValueParserRuleCall_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getPropertyValueParserRuleCall_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyValue_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(PropertyValue_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPropertyValueRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// KeywordVariables
protected class PrimaryExpression_KeywordVariablesParserRuleCall_5 extends RuleCallToken {
	
	public PrimaryExpression_KeywordVariablesParserRuleCall_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getKeywordVariablesParserRuleCall_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new KeywordVariables_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(KeywordVariables_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getKeywordVariablesRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ParanthesizedExpression
protected class PrimaryExpression_ParanthesizedExpressionParserRuleCall_6 extends RuleCallToken {
	
	public PrimaryExpression_ParanthesizedExpressionParserRuleCall_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getParanthesizedExpressionParserRuleCall_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParanthesizedExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ParanthesizedExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getParanthesizedExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// IfExpression
protected class PrimaryExpression_IfExpressionParserRuleCall_7 extends RuleCallToken {
	
	public PrimaryExpression_IfExpressionParserRuleCall_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getIfExpressionParserRuleCall_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(IfExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getIfExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// BlockExpression
protected class PrimaryExpression_BlockExpressionParserRuleCall_8 extends RuleCallToken {
	
	public PrimaryExpression_BlockExpressionParserRuleCall_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getBlockExpressionParserRuleCall_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BlockExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(BlockExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBlockExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// SwitchExpression
protected class PrimaryExpression_SwitchExpressionParserRuleCall_9 extends RuleCallToken {
	
	public PrimaryExpression_SwitchExpressionParserRuleCall_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getSwitchExpressionParserRuleCall_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SwitchExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(SwitchExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSwitchExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ThrowExpression
protected class PrimaryExpression_ThrowExpressionParserRuleCall_10 extends RuleCallToken {
	
	public PrimaryExpression_ThrowExpressionParserRuleCall_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getThrowExpressionParserRuleCall_10();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThrowExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ThrowExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getThrowExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// TryCatchExpression
protected class PrimaryExpression_TryCatchExpressionParserRuleCall_11 extends RuleCallToken {
	
	public PrimaryExpression_TryCatchExpressionParserRuleCall_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getTryCatchExpressionParserRuleCall_11();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TryCatchExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(TryCatchExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getTryCatchExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// WildcardExpression
protected class PrimaryExpression_WildcardExpressionParserRuleCall_12 extends RuleCallToken {
	
	public PrimaryExpression_WildcardExpressionParserRuleCall_12(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getWildcardExpressionParserRuleCall_12();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WildcardExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(WildcardExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getWildcardExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// WithExpression
protected class PrimaryExpression_WithExpressionParserRuleCall_13 extends RuleCallToken {
	
	public PrimaryExpression_WithExpressionParserRuleCall_13(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getWithExpressionParserRuleCall_13();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(WithExpression_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getWithExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule PrimaryExpression ****************/


/************ begin Rule WithExpression ****************
 *
 * WithExpression returns Expression:
 *   WithClauseExpression|WithContextExpression;
 *
 **/

// WithClauseExpression|WithContextExpression
protected class WithExpression_Alternatives extends AlternativesToken {

	public WithExpression_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getWithExpressionAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithExpression_WithClauseExpressionParserRuleCall_0(parent, this, 0, inst);
			case 1: return new WithExpression_WithContextExpressionParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getWithExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// WithClauseExpression
protected class WithExpression_WithClauseExpressionParserRuleCall_0 extends RuleCallToken {
	
	public WithExpression_WithClauseExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getWithExpressionAccess().getWithClauseExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithClauseExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(WithClauseExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getWithClauseExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// WithContextExpression
protected class WithExpression_WithContextExpressionParserRuleCall_1 extends RuleCallToken {
	
	public WithExpression_WithContextExpressionParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getWithExpressionAccess().getWithContextExpressionParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithContextExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(WithContextExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getWithContextExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule WithExpression ****************/


/************ begin Rule WithClauseExpression ****************
 *
 * WithClauseExpression returns Expression:
 *   {WithClauseExpression} withclause=WithClause expr=BlockExpression;
 *
 **/

// {WithClauseExpression} withclause=WithClause expr=BlockExpression
protected class WithClauseExpression_Group extends GroupToken {
	
	public WithClauseExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getWithClauseExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithClauseExpression_ExprAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getWithClauseExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {WithClauseExpression}
protected class WithClauseExpression_WithClauseExpressionAction_0 extends ActionToken  {

	public WithClauseExpression_WithClauseExpressionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getWithClauseExpressionAccess().getWithClauseExpressionAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getWithClauseExpressionAccess().getWithClauseExpressionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// withclause=WithClause
protected class WithClauseExpression_WithclauseAssignment_1 extends AssignmentToken  {
	
	public WithClauseExpression_WithclauseAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getWithClauseExpressionAccess().getWithclauseAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithClause_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("withclause",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("withclause");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getWithClauseRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWithClauseExpressionAccess().getWithclauseWithClauseParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WithClauseExpression_WithClauseExpressionAction_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// expr=BlockExpression
protected class WithClauseExpression_ExprAssignment_2 extends AssignmentToken  {
	
	public WithClauseExpression_ExprAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getWithClauseExpressionAccess().getExprAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BlockExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBlockExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWithClauseExpressionAccess().getExprBlockExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WithClauseExpression_WithclauseAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule WithClauseExpression ****************/


/************ begin Rule WithContextExpression ****************
 *
 * WithContextExpression returns Expresion:
 *   {WithContextExpression} "with" "context" context=Expression expr=BlockExpression;
 *
 **/

// {WithContextExpression} "with" "context" context=Expression expr=BlockExpression
protected class WithContextExpression_Group extends GroupToken {
	
	public WithContextExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getWithContextExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithContextExpression_ExprAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getWithContextExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {WithContextExpression}
protected class WithContextExpression_WithContextExpressionAction_0 extends ActionToken  {

	public WithContextExpression_WithContextExpressionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getWithContextExpressionAccess().getWithContextExpressionAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getWithContextExpressionAccess().getWithContextExpressionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "with"
protected class WithContextExpression_WithKeyword_1 extends KeywordToken  {
	
	public WithContextExpression_WithKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWithContextExpressionAccess().getWithKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithContextExpression_WithContextExpressionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "context"
protected class WithContextExpression_ContextKeyword_2 extends KeywordToken  {
	
	public WithContextExpression_ContextKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWithContextExpressionAccess().getContextKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithContextExpression_WithKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// context=Expression
protected class WithContextExpression_ContextAssignment_3 extends AssignmentToken  {
	
	public WithContextExpression_ContextAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getWithContextExpressionAccess().getContextAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("context",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("context");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWithContextExpressionAccess().getContextExpressionParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WithContextExpression_ContextKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// expr=BlockExpression
protected class WithContextExpression_ExprAssignment_4 extends AssignmentToken  {
	
	public WithContextExpression_ExprAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getWithContextExpressionAccess().getExprAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BlockExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBlockExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWithContextExpressionAccess().getExprBlockExpressionParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WithContextExpression_ContextAssignment_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule WithContextExpression ****************/


/************ begin Rule WildcardExpression ****************
 *
 * WildcardExpression returns Expression:
 *   {WildcardExpression} "_";
 *
 **/

// {WildcardExpression} "_"
protected class WildcardExpression_Group extends GroupToken {
	
	public WildcardExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getWildcardExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WildcardExpression__Keyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getWildcardExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {WildcardExpression}
protected class WildcardExpression_WildcardExpressionAction_0 extends ActionToken  {

	public WildcardExpression_WildcardExpressionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getWildcardExpressionAccess().getWildcardExpressionAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getWildcardExpressionAccess().getWildcardExpressionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "_"
protected class WildcardExpression__Keyword_1 extends KeywordToken  {
	
	public WildcardExpression__Keyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWildcardExpressionAccess().get_Keyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WildcardExpression_WildcardExpressionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule WildcardExpression ****************/


/************ begin Rule ThrowExpression ****************
 *
 * ThrowExpression returns Expression:
 *   {ThrowExpression} "throw" expr=Expression ";";
 *
 **/

// {ThrowExpression} "throw" expr=Expression ";"
protected class ThrowExpression_Group extends GroupToken {
	
	public ThrowExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getThrowExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThrowExpression_SemicolonKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getThrowExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {ThrowExpression}
protected class ThrowExpression_ThrowExpressionAction_0 extends ActionToken  {

	public ThrowExpression_ThrowExpressionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getThrowExpressionAccess().getThrowExpressionAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getThrowExpressionAccess().getThrowExpressionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "throw"
protected class ThrowExpression_ThrowKeyword_1 extends KeywordToken  {
	
	public ThrowExpression_ThrowKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getThrowExpressionAccess().getThrowKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThrowExpression_ThrowExpressionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// expr=Expression
protected class ThrowExpression_ExprAssignment_2 extends AssignmentToken  {
	
	public ThrowExpression_ExprAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getThrowExpressionAccess().getExprAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getThrowExpressionAccess().getExprExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ThrowExpression_ThrowKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class ThrowExpression_SemicolonKeyword_3 extends KeywordToken  {
	
	public ThrowExpression_SemicolonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getThrowExpressionAccess().getSemicolonKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThrowExpression_ExprAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ThrowExpression ****************/


/************ begin Rule TryCatchExpression ****************
 *
 * TryCatchExpression:
 *   "try" tryBlock=Expression catch+=CatchBlock* finally=FinallyBlock? "endtry";
 *
 **/

// "try" tryBlock=Expression catch+=CatchBlock* finally=FinallyBlock? "endtry"
protected class TryCatchExpression_Group extends GroupToken {
	
	public TryCatchExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTryCatchExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TryCatchExpression_EndtryKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTryCatchExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "try"
protected class TryCatchExpression_TryKeyword_0 extends KeywordToken  {
	
	public TryCatchExpression_TryKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTryCatchExpressionAccess().getTryKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// tryBlock=Expression
protected class TryCatchExpression_TryBlockAssignment_1 extends AssignmentToken  {
	
	public TryCatchExpression_TryBlockAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTryCatchExpressionAccess().getTryBlockAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("tryBlock",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("tryBlock");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTryCatchExpressionAccess().getTryBlockExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TryCatchExpression_TryKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// catch+=CatchBlock*
protected class TryCatchExpression_CatchAssignment_2 extends AssignmentToken  {
	
	public TryCatchExpression_CatchAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTryCatchExpressionAccess().getCatchAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CatchBlock_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("catch",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("catch");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCatchBlockRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTryCatchExpressionAccess().getCatchCatchBlockParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TryCatchExpression_CatchAssignment_2(parent, next, actIndex, consumed);
			case 1: return new TryCatchExpression_TryBlockAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// finally=FinallyBlock?
protected class TryCatchExpression_FinallyAssignment_3 extends AssignmentToken  {
	
	public TryCatchExpression_FinallyAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTryCatchExpressionAccess().getFinallyAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FinallyBlock_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("finally",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("finally");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFinallyBlockRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTryCatchExpressionAccess().getFinallyFinallyBlockParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TryCatchExpression_CatchAssignment_2(parent, next, actIndex, consumed);
			case 1: return new TryCatchExpression_TryBlockAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "endtry"
protected class TryCatchExpression_EndtryKeyword_4 extends KeywordToken  {
	
	public TryCatchExpression_EndtryKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTryCatchExpressionAccess().getEndtryKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TryCatchExpression_FinallyAssignment_3(parent, this, 0, inst);
			case 1: return new TryCatchExpression_CatchAssignment_2(parent, this, 1, inst);
			case 2: return new TryCatchExpression_TryBlockAssignment_1(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule TryCatchExpression ****************/


/************ begin Rule CatchBlock ****************
 *
 * CatchBlock:
 *   "catch" type=TypeRef var=ID ":" expr=Expression;
 *
 **/

// "catch" type=TypeRef var=ID ":" expr=Expression
protected class CatchBlock_Group extends GroupToken {
	
	public CatchBlock_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCatchBlockAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CatchBlock_ExprAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCatchBlockRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "catch"
protected class CatchBlock_CatchKeyword_0 extends KeywordToken  {
	
	public CatchBlock_CatchKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCatchBlockAccess().getCatchKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// type=TypeRef
protected class CatchBlock_TypeAssignment_1 extends AssignmentToken  {
	
	public CatchBlock_TypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCatchBlockAccess().getTypeAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCatchBlockAccess().getTypeTypeRefParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CatchBlock_CatchKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// var=ID
protected class CatchBlock_VarAssignment_2 extends AssignmentToken  {
	
	public CatchBlock_VarAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCatchBlockAccess().getVarAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CatchBlock_TypeAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("var",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("var");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCatchBlockAccess().getVarIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ":"
protected class CatchBlock_ColonKeyword_3 extends KeywordToken  {
	
	public CatchBlock_ColonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCatchBlockAccess().getColonKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CatchBlock_VarAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// expr=Expression
protected class CatchBlock_ExprAssignment_4 extends AssignmentToken  {
	
	public CatchBlock_ExprAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCatchBlockAccess().getExprAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCatchBlockAccess().getExprExpressionParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CatchBlock_ColonKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule CatchBlock ****************/


/************ begin Rule FinallyBlock ****************
 *
 * FinallyBlock:
 *   "finally" expr=Expression;
 *
 **/

// "finally" expr=Expression
protected class FinallyBlock_Group extends GroupToken {
	
	public FinallyBlock_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFinallyBlockAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FinallyBlock_ExprAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFinallyBlockRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "finally"
protected class FinallyBlock_FinallyKeyword_0 extends KeywordToken  {
	
	public FinallyBlock_FinallyKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFinallyBlockAccess().getFinallyKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// expr=Expression
protected class FinallyBlock_ExprAssignment_1 extends AssignmentToken  {
	
	public FinallyBlock_ExprAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFinallyBlockAccess().getExprAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFinallyBlockAccess().getExprExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FinallyBlock_FinallyKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule FinallyBlock ****************/


/************ begin Rule SwitchExpression ****************
 *
 * SwitchExpression:
 *   "switch" switchExpr=Expression? case+=Case+ "endswitch";
 *
 **/

// "switch" switchExpr=Expression? case+=Case+ "endswitch"
protected class SwitchExpression_Group extends GroupToken {
	
	public SwitchExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSwitchExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SwitchExpression_EndswitchKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSwitchExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "switch"
protected class SwitchExpression_SwitchKeyword_0 extends KeywordToken  {
	
	public SwitchExpression_SwitchKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSwitchExpressionAccess().getSwitchKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// switchExpr=Expression?
protected class SwitchExpression_SwitchExprAssignment_1 extends AssignmentToken  {
	
	public SwitchExpression_SwitchExprAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSwitchExpressionAccess().getSwitchExprAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("switchExpr",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("switchExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSwitchExpressionAccess().getSwitchExprExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SwitchExpression_SwitchKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// case+=Case+
protected class SwitchExpression_CaseAssignment_2 extends AssignmentToken  {
	
	public SwitchExpression_CaseAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSwitchExpressionAccess().getCaseAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Case_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("case",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("case");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCaseRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSwitchExpressionAccess().getCaseCaseParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SwitchExpression_CaseAssignment_2(parent, next, actIndex, consumed);
			case 1: return new SwitchExpression_SwitchExprAssignment_1(parent, next, actIndex, consumed);
			case 2: return new SwitchExpression_SwitchKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "endswitch"
protected class SwitchExpression_EndswitchKeyword_3 extends KeywordToken  {
	
	public SwitchExpression_EndswitchKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSwitchExpressionAccess().getEndswitchKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SwitchExpression_CaseAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule SwitchExpression ****************/


/************ begin Rule Case ****************
 *
 * Case:
 *   "case" condition=Expression ":" expr=Expression;
 *
 **/

// "case" condition=Expression ":" expr=Expression
protected class Case_Group extends GroupToken {
	
	public Case_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCaseAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Case_ExprAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCaseRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "case"
protected class Case_CaseKeyword_0 extends KeywordToken  {
	
	public Case_CaseKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCaseAccess().getCaseKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// condition=Expression
protected class Case_ConditionAssignment_1 extends AssignmentToken  {
	
	public Case_ConditionAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCaseAccess().getConditionAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("condition",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("condition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCaseAccess().getConditionExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Case_CaseKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ":"
protected class Case_ColonKeyword_2 extends KeywordToken  {
	
	public Case_ColonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCaseAccess().getColonKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Case_ConditionAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// expr=Expression
protected class Case_ExprAssignment_3 extends AssignmentToken  {
	
	public Case_ExprAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCaseAccess().getExprAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCaseAccess().getExprExpressionParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Case_ColonKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Case ****************/


/************ begin Rule BlockExpression ****************
 *
 * BlockExpression returns Expression:
 *   {BlockExpression} "{" (expr+=Expression ";")* "}";
 *
 **/

// {BlockExpression} "{" (expr+=Expression ";")* "}"
protected class BlockExpression_Group extends GroupToken {
	
	public BlockExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBlockExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BlockExpression_RightCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBlockExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {BlockExpression}
protected class BlockExpression_BlockExpressionAction_0 extends ActionToken  {

	public BlockExpression_BlockExpressionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getBlockExpressionAccess().getBlockExpressionAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getBlockExpressionAccess().getBlockExpressionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "{"
protected class BlockExpression_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public BlockExpression_LeftCurlyBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBlockExpressionAccess().getLeftCurlyBracketKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BlockExpression_BlockExpressionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (expr+=Expression ";")*
protected class BlockExpression_Group_2 extends GroupToken {
	
	public BlockExpression_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBlockExpressionAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BlockExpression_SemicolonKeyword_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// expr+=Expression
protected class BlockExpression_ExprAssignment_2_0 extends AssignmentToken  {
	
	public BlockExpression_ExprAssignment_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBlockExpressionAccess().getExprAssignment_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBlockExpressionAccess().getExprExpressionParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BlockExpression_Group_2(parent, next, actIndex, consumed);
			case 1: return new BlockExpression_LeftCurlyBracketKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class BlockExpression_SemicolonKeyword_2_1 extends KeywordToken  {
	
	public BlockExpression_SemicolonKeyword_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBlockExpressionAccess().getSemicolonKeyword_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BlockExpression_ExprAssignment_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "}"
protected class BlockExpression_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public BlockExpression_RightCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBlockExpressionAccess().getRightCurlyBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BlockExpression_Group_2(parent, this, 0, inst);
			case 1: return new BlockExpression_LeftCurlyBracketKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule BlockExpression ****************/


/************ begin Rule IfExpression ****************
 *
 * IfExpression returns Expression:
 *   {IfExpression} "if" cond=Expression "then" value=Expression tail+=ElseIfExpression*
 *   tail+=ElseExpression? "endif"; 
 * 
 *     
 * 	            
 * 	    
 * 	    
 * 	
 * 	
 * 
 * // for typing
 *
 **/

// {IfExpression} "if" cond=Expression "then" value=Expression tail+=ElseIfExpression*
// tail+=ElseExpression? "endif"
protected class IfExpression_Group extends GroupToken {
	
	public IfExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfExpression_EndifKeyword_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getIfExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {IfExpression}
protected class IfExpression_IfExpressionAction_0 extends ActionToken  {

	public IfExpression_IfExpressionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getIfExpressionAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getIfExpressionAccess().getIfExpressionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "if"
protected class IfExpression_IfKeyword_1 extends KeywordToken  {
	
	public IfExpression_IfKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getIfKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfExpression_IfExpressionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// cond=Expression
protected class IfExpression_CondAssignment_2 extends AssignmentToken  {
	
	public IfExpression_CondAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getCondAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("cond",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("cond");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getIfExpressionAccess().getCondExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfExpression_IfKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "then"
protected class IfExpression_ThenKeyword_3 extends KeywordToken  {
	
	public IfExpression_ThenKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getThenKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfExpression_CondAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// value=Expression
protected class IfExpression_ValueAssignment_4 extends AssignmentToken  {
	
	public IfExpression_ValueAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getValueAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getIfExpressionAccess().getValueExpressionParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfExpression_ThenKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// tail+=ElseIfExpression*
protected class IfExpression_TailAssignment_5 extends AssignmentToken  {
	
	public IfExpression_TailAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getTailAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElseIfExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("tail",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("tail");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElseIfExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getIfExpressionAccess().getTailElseIfExpressionParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfExpression_TailAssignment_5(parent, next, actIndex, consumed);
			case 1: return new IfExpression_ValueAssignment_4(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// tail+=ElseExpression?
protected class IfExpression_TailAssignment_6 extends AssignmentToken  {
	
	public IfExpression_TailAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getTailAssignment_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElseExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("tail",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("tail");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElseExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getIfExpressionAccess().getTailElseExpressionParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfExpression_TailAssignment_5(parent, next, actIndex, consumed);
			case 1: return new IfExpression_ValueAssignment_4(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "endif"
protected class IfExpression_EndifKeyword_7 extends KeywordToken  {
	
	public IfExpression_EndifKeyword_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getEndifKeyword_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfExpression_TailAssignment_6(parent, this, 0, inst);
			case 1: return new IfExpression_TailAssignment_5(parent, this, 1, inst);
			case 2: return new IfExpression_ValueAssignment_4(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule IfExpression ****************/


/************ begin Rule IfExpressionTail ****************
 *
 * IfExpressionTail:
 *   ElseIfExpression|ElseExpression; 
 * 
 * // for typing
 *
 **/

// ElseIfExpression|ElseExpression 
// 
// // for typing
protected class IfExpressionTail_Alternatives extends AlternativesToken {

	public IfExpressionTail_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getIfExpressionTailAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfExpressionTail_ElseIfExpressionParserRuleCall_0(parent, this, 0, inst);
			case 1: return new IfExpressionTail_ElseExpressionParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getIfExpressionTailRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ElseIfExpression
protected class IfExpressionTail_ElseIfExpressionParserRuleCall_0 extends RuleCallToken {
	
	public IfExpressionTail_ElseIfExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getIfExpressionTailAccess().getElseIfExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElseIfExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ElseIfExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getElseIfExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ElseExpression
protected class IfExpressionTail_ElseExpressionParserRuleCall_1 extends RuleCallToken {
	
	public IfExpressionTail_ElseExpressionParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getIfExpressionTailAccess().getElseExpressionParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElseExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ElseExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getElseExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule IfExpressionTail ****************/


/************ begin Rule ElseIfExpression ****************
 *
 * ElseIfExpression returns Expression:
 *   {ElseIfExpression} "elseif" condition=Expression "then" value=Expression;
 *
 **/

// {ElseIfExpression} "elseif" condition=Expression "then" value=Expression
protected class ElseIfExpression_Group extends GroupToken {
	
	public ElseIfExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getElseIfExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElseIfExpression_ValueAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getElseIfExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {ElseIfExpression}
protected class ElseIfExpression_ElseIfExpressionAction_0 extends ActionToken  {

	public ElseIfExpression_ElseIfExpressionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getElseIfExpressionAccess().getElseIfExpressionAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getElseIfExpressionAccess().getElseIfExpressionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "elseif"
protected class ElseIfExpression_ElseifKeyword_1 extends KeywordToken  {
	
	public ElseIfExpression_ElseifKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getElseIfExpressionAccess().getElseifKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElseIfExpression_ElseIfExpressionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// condition=Expression
protected class ElseIfExpression_ConditionAssignment_2 extends AssignmentToken  {
	
	public ElseIfExpression_ConditionAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getElseIfExpressionAccess().getConditionAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("condition",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("condition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getElseIfExpressionAccess().getConditionExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ElseIfExpression_ElseifKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "then"
protected class ElseIfExpression_ThenKeyword_3 extends KeywordToken  {
	
	public ElseIfExpression_ThenKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getElseIfExpressionAccess().getThenKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElseIfExpression_ConditionAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// value=Expression
protected class ElseIfExpression_ValueAssignment_4 extends AssignmentToken  {
	
	public ElseIfExpression_ValueAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getElseIfExpressionAccess().getValueAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getElseIfExpressionAccess().getValueExpressionParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ElseIfExpression_ThenKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ElseIfExpression ****************/


/************ begin Rule ElseExpression ****************
 *
 * ElseExpression returns Expression:
 *   {ElseExpression} "else" value=Expression;
 *
 **/

// {ElseExpression} "else" value=Expression
protected class ElseExpression_Group extends GroupToken {
	
	public ElseExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getElseExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElseExpression_ValueAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getElseExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {ElseExpression}
protected class ElseExpression_ElseExpressionAction_0 extends ActionToken  {

	public ElseExpression_ElseExpressionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getElseExpressionAccess().getElseExpressionAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getElseExpressionAccess().getElseExpressionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "else"
protected class ElseExpression_ElseKeyword_1 extends KeywordToken  {
	
	public ElseExpression_ElseKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getElseExpressionAccess().getElseKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElseExpression_ElseExpressionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// value=Expression
protected class ElseExpression_ValueAssignment_2 extends AssignmentToken  {
	
	public ElseExpression_ValueAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getElseExpressionAccess().getValueAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getElseExpressionAccess().getValueExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ElseExpression_ElseKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ElseExpression ****************/


/************ begin Rule PropertyValue ****************
 *
 * PropertyValue returns Expression:
 *   {PropertyValue} name=PID;
 *
 **/

// {PropertyValue} name=PID
protected class PropertyValue_Group extends GroupToken {
	
	public PropertyValue_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPropertyValueAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyValue_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPropertyValueRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {PropertyValue}
protected class PropertyValue_PropertyValueAction_0 extends ActionToken  {

	public PropertyValue_PropertyValueAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getPropertyValueAccess().getPropertyValueAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getPropertyValueAccess().getPropertyValueAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// name=PID
protected class PropertyValue_NameAssignment_1 extends AssignmentToken  {
	
	public PropertyValue_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyValueAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyValue_PropertyValueAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPropertyValueAccess().getNamePIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule PropertyValue ****************/


/************ begin Rule VariableValue ****************
 *
 * VariableValue returns Expression:
 *   {VariableValue} name=ID;
 *
 **/

// {VariableValue} name=ID
protected class VariableValue_Group extends GroupToken {
	
	public VariableValue_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getVariableValueAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableValue_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getVariableValueRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {VariableValue}
protected class VariableValue_VariableValueAction_0 extends ActionToken  {

	public VariableValue_VariableValueAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getVariableValueAccess().getVariableValueAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getVariableValueAccess().getVariableValueAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// name=ID
protected class VariableValue_NameAssignment_1 extends AssignmentToken  {
	
	public VariableValue_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableValueAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableValue_VariableValueAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getVariableValueAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule VariableValue ****************/


/************ begin Rule KeywordVariables ****************
 *
 * KeywordVariables returns Expression:
 *   {KeywordVariable} name=( InputKeyword | OutputKeyword | "properties" | "unit" );
 *
 **/

// {KeywordVariable} name=( InputKeyword | OutputKeyword | "properties" | "unit" )
protected class KeywordVariables_Group extends GroupToken {
	
	public KeywordVariables_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getKeywordVariablesAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new KeywordVariables_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getKeywordVariablesRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {KeywordVariable}
protected class KeywordVariables_KeywordVariableAction_0 extends ActionToken  {

	public KeywordVariables_KeywordVariableAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getKeywordVariablesAccess().getKeywordVariableAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getKeywordVariablesAccess().getKeywordVariableAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// name=( InputKeyword | OutputKeyword | "properties" | "unit" )
protected class KeywordVariables_NameAssignment_1 extends AssignmentToken  {
	
	public KeywordVariables_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getKeywordVariablesAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new KeywordVariables_KeywordVariableAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if("properties".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getKeywordVariablesAccess().getNamePropertiesKeyword_1_0_2();
			return obj;
		}
		if("unit".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getKeywordVariablesAccess().getNameUnitKeyword_1_0_3();
			return obj;
		}
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getKeywordVariablesAccess().getNameInputKeywordParserRuleCall_1_0_0();
			return obj;
		}
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getKeywordVariablesAccess().getNameOutputKeywordParserRuleCall_1_0_1();
			return obj;
		}
		return null;
	}

}


/************ end Rule KeywordVariables ****************/


/************ begin Rule FeatureCall ****************
 *
 * FeatureCall:
 *   OperationCall;
 *
 **/

// OperationCall
protected class FeatureCall_OperationCallParserRuleCall extends RuleCallToken {
	
	public FeatureCall_OperationCallParserRuleCall(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getFeatureCallAccess().getOperationCallParserRuleCall();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OperationCall_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFeatureCallRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(OperationCall_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getOperationCallRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule FeatureCall ****************/


/************ begin Rule OperationCall ****************
 *
 * OperationCall:
 *   name=( ID | PID ) "(" parameters=ParameterList? ")"|target=SuperLiteral "." name=ID "("
 *   parameters=ParameterList? ")";
 *
 **/

// name=( ID | PID ) "(" parameters=ParameterList? ")"|target=SuperLiteral "." name=ID "("
// parameters=ParameterList? ")"
protected class OperationCall_Alternatives extends AlternativesToken {

	public OperationCall_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getOperationCallAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OperationCall_Group_0(parent, this, 0, inst);
			case 1: return new OperationCall_Group_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getOperationCallRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=( ID | PID ) "(" parameters=ParameterList? ")"
protected class OperationCall_Group_0 extends GroupToken {
	
	public OperationCall_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getOperationCallAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OperationCall_RightParenthesisKeyword_0_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=( ID | PID )
protected class OperationCall_NameAssignment_0_0 extends AssignmentToken  {
	
	public OperationCall_NameAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOperationCallAccess().getNameAssignment_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getOperationCallAccess().getNameIDTerminalRuleCall_0_0_0_0();
			return obj;
		}
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getOperationCallAccess().getNamePIDTerminalRuleCall_0_0_0_1();
			return obj;
		}
		return null;
	}

}

// "("
protected class OperationCall_LeftParenthesisKeyword_0_1 extends KeywordToken  {
	
	public OperationCall_LeftParenthesisKeyword_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getOperationCallAccess().getLeftParenthesisKeyword_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OperationCall_NameAssignment_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// parameters=ParameterList?
protected class OperationCall_ParametersAssignment_0_2 extends AssignmentToken  {
	
	public OperationCall_ParametersAssignment_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOperationCallAccess().getParametersAssignment_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterList_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameters",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getOperationCallAccess().getParametersParameterListParserRuleCall_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OperationCall_LeftParenthesisKeyword_0_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class OperationCall_RightParenthesisKeyword_0_3 extends KeywordToken  {
	
	public OperationCall_RightParenthesisKeyword_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getOperationCallAccess().getRightParenthesisKeyword_0_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OperationCall_ParametersAssignment_0_2(parent, this, 0, inst);
			case 1: return new OperationCall_LeftParenthesisKeyword_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// target=SuperLiteral "." name=ID "(" parameters=ParameterList? ")"
protected class OperationCall_Group_1 extends GroupToken {
	
	public OperationCall_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getOperationCallAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OperationCall_RightParenthesisKeyword_1_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// target=SuperLiteral
protected class OperationCall_TargetAssignment_1_0 extends AssignmentToken  {
	
	public OperationCall_TargetAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOperationCallAccess().getTargetAssignment_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SuperLiteral_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("target",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("target");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSuperLiteralRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getOperationCallAccess().getTargetSuperLiteralParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// "."
protected class OperationCall_FullStopKeyword_1_1 extends KeywordToken  {
	
	public OperationCall_FullStopKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getOperationCallAccess().getFullStopKeyword_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OperationCall_TargetAssignment_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=ID
protected class OperationCall_NameAssignment_1_2 extends AssignmentToken  {
	
	public OperationCall_NameAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOperationCallAccess().getNameAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OperationCall_FullStopKeyword_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getOperationCallAccess().getNameIDTerminalRuleCall_1_2_0();
			return obj;
		}
		return null;
	}

}

// "("
protected class OperationCall_LeftParenthesisKeyword_1_3 extends KeywordToken  {
	
	public OperationCall_LeftParenthesisKeyword_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getOperationCallAccess().getLeftParenthesisKeyword_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OperationCall_NameAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// parameters=ParameterList?
protected class OperationCall_ParametersAssignment_1_4 extends AssignmentToken  {
	
	public OperationCall_ParametersAssignment_1_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOperationCallAccess().getParametersAssignment_1_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterList_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameters",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getOperationCallAccess().getParametersParameterListParserRuleCall_1_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OperationCall_LeftParenthesisKeyword_1_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class OperationCall_RightParenthesisKeyword_1_5 extends KeywordToken  {
	
	public OperationCall_RightParenthesisKeyword_1_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getOperationCallAccess().getRightParenthesisKeyword_1_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OperationCall_ParametersAssignment_1_4(parent, this, 0, inst);
			case 1: return new OperationCall_LeftParenthesisKeyword_1_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule OperationCall ****************/


/************ begin Rule ConstructorCallExpression ****************
 *
 * ConstructorCallExpression returns Expression:
 *   {CreatorCall} name="new" target=TypeRef ("(" parameters=ParameterList? ")")? ("as"
 *   alias=ID)? contextBlock=ContextBlock?;
 *
 **/

// {CreatorCall} name="new" target=TypeRef ("(" parameters=ParameterList? ")")? ("as"
// alias=ID)? contextBlock=ContextBlock?
protected class ConstructorCallExpression_Group extends GroupToken {
	
	public ConstructorCallExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstructorCallExpression_ContextBlockAssignment_5(parent, this, 0, inst);
			case 1: return new ConstructorCallExpression_Group_4(parent, this, 1, inst);
			case 2: return new ConstructorCallExpression_Group_3(parent, this, 2, inst);
			case 3: return new ConstructorCallExpression_TargetAssignment_2(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getConstructorCallExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {CreatorCall}
protected class ConstructorCallExpression_CreatorCallAction_0 extends ActionToken  {

	public ConstructorCallExpression_CreatorCallAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getCreatorCallAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getConstructorCallExpressionAccess().getCreatorCallAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// name="new"
protected class ConstructorCallExpression_NameAssignment_1 extends AssignmentToken  {
	
	public ConstructorCallExpression_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstructorCallExpression_CreatorCallAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if("new".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getConstructorCallExpressionAccess().getNameNewKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// target=TypeRef
protected class ConstructorCallExpression_TargetAssignment_2 extends AssignmentToken  {
	
	public ConstructorCallExpression_TargetAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getTargetAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("target",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("target");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getConstructorCallExpressionAccess().getTargetTypeRefParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ConstructorCallExpression_NameAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("(" parameters=ParameterList? ")")?
protected class ConstructorCallExpression_Group_3 extends GroupToken {
	
	public ConstructorCallExpression_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstructorCallExpression_RightParenthesisKeyword_3_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class ConstructorCallExpression_LeftParenthesisKeyword_3_0 extends KeywordToken  {
	
	public ConstructorCallExpression_LeftParenthesisKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getLeftParenthesisKeyword_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstructorCallExpression_TargetAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// parameters=ParameterList?
protected class ConstructorCallExpression_ParametersAssignment_3_1 extends AssignmentToken  {
	
	public ConstructorCallExpression_ParametersAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getParametersAssignment_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterList_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameters",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getConstructorCallExpressionAccess().getParametersParameterListParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ConstructorCallExpression_LeftParenthesisKeyword_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class ConstructorCallExpression_RightParenthesisKeyword_3_2 extends KeywordToken  {
	
	public ConstructorCallExpression_RightParenthesisKeyword_3_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getRightParenthesisKeyword_3_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstructorCallExpression_ParametersAssignment_3_1(parent, this, 0, inst);
			case 1: return new ConstructorCallExpression_LeftParenthesisKeyword_3_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// ("as" alias=ID)?
protected class ConstructorCallExpression_Group_4 extends GroupToken {
	
	public ConstructorCallExpression_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getGroup_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstructorCallExpression_AliasAssignment_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "as"
protected class ConstructorCallExpression_AsKeyword_4_0 extends KeywordToken  {
	
	public ConstructorCallExpression_AsKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getAsKeyword_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstructorCallExpression_Group_3(parent, this, 0, inst);
			case 1: return new ConstructorCallExpression_TargetAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// alias=ID
protected class ConstructorCallExpression_AliasAssignment_4_1 extends AssignmentToken  {
	
	public ConstructorCallExpression_AliasAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getAliasAssignment_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstructorCallExpression_AsKeyword_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("alias",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("alias");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getConstructorCallExpressionAccess().getAliasIDTerminalRuleCall_4_1_0();
			return obj;
		}
		return null;
	}

}


// contextBlock=ContextBlock?
protected class ConstructorCallExpression_ContextBlockAssignment_5 extends AssignmentToken  {
	
	public ConstructorCallExpression_ContextBlockAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getContextBlockAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContextBlock_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contextBlock",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contextBlock");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getContextBlockRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getConstructorCallExpressionAccess().getContextBlockContextBlockParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ConstructorCallExpression_Group_4(parent, next, actIndex, consumed);
			case 1: return new ConstructorCallExpression_Group_3(parent, next, actIndex, consumed);
			case 2: return new ConstructorCallExpression_TargetAssignment_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ConstructorCallExpression ****************/


/************ begin Rule Context ****************
 *
 * Context:
 *   "context" selector=ContextSelector block=ContextBlock;
 *
 **/

// "context" selector=ContextSelector block=ContextBlock
protected class Context_Group extends GroupToken {
	
	public Context_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getContextAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Context_BlockAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getContextRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "context"
protected class Context_ContextKeyword_0 extends KeywordToken  {
	
	public Context_ContextKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContextAccess().getContextKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// selector=ContextSelector
protected class Context_SelectorAssignment_1 extends AssignmentToken  {
	
	public Context_SelectorAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getContextAccess().getSelectorAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContextSelector_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("selector",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("selector");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getContextSelectorRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getContextAccess().getSelectorContextSelectorParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Context_ContextKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// block=ContextBlock
protected class Context_BlockAssignment_2 extends AssignmentToken  {
	
	public Context_BlockAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getContextAccess().getBlockAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContextBlock_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("block",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("block");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getContextBlockRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getContextAccess().getBlockContextBlockParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Context_SelectorAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Context ****************/


/************ begin Rule ContextSelector ****************
 *
 * ContextSelector:
 *   TypeRefSelector|ExpressionSelector|UnitSelector;
 *
 **/

// TypeRefSelector|ExpressionSelector|UnitSelector
protected class ContextSelector_Alternatives extends AlternativesToken {

	public ContextSelector_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getContextSelectorAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContextSelector_TypeRefSelectorParserRuleCall_0(parent, this, 0, inst);
			case 1: return new ContextSelector_ExpressionSelectorParserRuleCall_1(parent, this, 1, inst);
			case 2: return new ContextSelector_UnitSelectorParserRuleCall_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getContextSelectorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// TypeRefSelector
protected class ContextSelector_TypeRefSelectorParserRuleCall_0 extends RuleCallToken {
	
	public ContextSelector_TypeRefSelectorParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getContextSelectorAccess().getTypeRefSelectorParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRefSelector_TypeAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(TypeRefSelector_TypeAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getTypeRefSelectorRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ExpressionSelector
protected class ContextSelector_ExpressionSelectorParserRuleCall_1 extends RuleCallToken {
	
	public ContextSelector_ExpressionSelectorParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getContextSelectorAccess().getExpressionSelectorParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExpressionSelector_ExprAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ExpressionSelector_ExprAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getExpressionSelectorRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// UnitSelector
protected class ContextSelector_UnitSelectorParserRuleCall_2 extends RuleCallToken {
	
	public ContextSelector_UnitSelectorParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getContextSelectorAccess().getUnitSelectorParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnitSelector_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UnitSelector_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUnitSelectorRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ContextSelector ****************/


/************ begin Rule TypeRefSelector ****************
 *
 * TypeRefSelector returns ContextSelector:
 *   type=TypeRef;
 *
 **/

// type=TypeRef
protected class TypeRefSelector_TypeAssignment extends AssignmentToken  {
	
	public TypeRefSelector_TypeAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTypeRefSelectorAccess().getTypeAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTypeRefSelectorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTypeRefSelectorAccess().getTypeTypeRefParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule TypeRefSelector ****************/


/************ begin Rule ExpressionSelector ****************
 *
 * ExpressionSelector:
 *   expr=Expression;
 *
 **/

// expr=Expression
protected class ExpressionSelector_ExprAssignment extends AssignmentToken  {
	
	public ExpressionSelector_ExprAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getExpressionSelectorAccess().getExprAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getExpressionSelectorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getExpressionSelectorAccess().getExprExpressionParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule ExpressionSelector ****************/


/************ begin Rule UnitSelector ****************
 *
 * UnitSelector:
 *   "unit" interface=QID ("/" (name=UnitName|namePattern=REGEX) ("/" versionRange=
 *   VersionRange)?)?;
 *
 **/

// "unit" interface=QID ("/" (name=UnitName|namePattern=REGEX) ("/" versionRange=
// VersionRange)?)?
protected class UnitSelector_Group extends GroupToken {
	
	public UnitSelector_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitSelectorAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnitSelector_Group_2(parent, this, 0, inst);
			case 1: return new UnitSelector_InterfaceAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnitSelectorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "unit"
protected class UnitSelector_UnitKeyword_0 extends KeywordToken  {
	
	public UnitSelector_UnitKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitSelectorAccess().getUnitKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// interface=QID
protected class UnitSelector_InterfaceAssignment_1 extends AssignmentToken  {
	
	public UnitSelector_InterfaceAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitSelectorAccess().getInterfaceAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnitSelector_UnitKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("interface",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("interface");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getUnitSelectorAccess().getInterfaceQIDParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("/" (name=UnitName|namePattern=REGEX) ("/" versionRange=VersionRange)?)?
protected class UnitSelector_Group_2 extends GroupToken {
	
	public UnitSelector_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitSelectorAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnitSelector_Group_2_2(parent, this, 0, inst);
			case 1: return new UnitSelector_Alternatives_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "/"
protected class UnitSelector_SolidusKeyword_2_0 extends KeywordToken  {
	
	public UnitSelector_SolidusKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitSelectorAccess().getSolidusKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnitSelector_InterfaceAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=UnitName|namePattern=REGEX
protected class UnitSelector_Alternatives_2_1 extends AlternativesToken {

	public UnitSelector_Alternatives_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getUnitSelectorAccess().getAlternatives_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnitSelector_NameAssignment_2_1_0(parent, this, 0, inst);
			case 1: return new UnitSelector_NamePatternAssignment_2_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// name=UnitName
protected class UnitSelector_NameAssignment_2_1_0 extends AssignmentToken  {
	
	public UnitSelector_NameAssignment_2_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitSelectorAccess().getNameAssignment_2_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnitSelector_SolidusKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getUnitSelectorAccess().getNameUnitNameParserRuleCall_2_1_0_0();
			return obj;
		}
		return null;
	}

}

// namePattern=REGEX
protected class UnitSelector_NamePatternAssignment_2_1_1 extends AssignmentToken  {
	
	public UnitSelector_NamePatternAssignment_2_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitSelectorAccess().getNamePatternAssignment_2_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnitSelector_SolidusKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("namePattern",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("namePattern");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getUnitSelectorAccess().getNamePatternREGEXTerminalRuleCall_2_1_1_0();
			return obj;
		}
		return null;
	}

}


// ("/" versionRange=VersionRange)?
protected class UnitSelector_Group_2_2 extends GroupToken {
	
	public UnitSelector_Group_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitSelectorAccess().getGroup_2_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnitSelector_VersionRangeAssignment_2_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "/"
protected class UnitSelector_SolidusKeyword_2_2_0 extends KeywordToken  {
	
	public UnitSelector_SolidusKeyword_2_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitSelectorAccess().getSolidusKeyword_2_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnitSelector_Alternatives_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// versionRange=VersionRange
protected class UnitSelector_VersionRangeAssignment_2_2_1 extends AssignmentToken  {
	
	public UnitSelector_VersionRangeAssignment_2_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitSelectorAccess().getVersionRangeAssignment_2_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VersionRange_RangeAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("versionRange",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("versionRange");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVersionRangeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitSelectorAccess().getVersionRangeVersionRangeParserRuleCall_2_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new UnitSelector_SolidusKeyword_2_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule UnitSelector ****************/


/************ begin Rule ContextBlock ****************
 *
 * ContextBlock:
 *   "{" (statements+=Method|statements+=Builder|statements+=ExpressionStatement|
 *   statements+=PropertiesStatement)* "}";
 *
 **/

// "{" (statements+=Method|statements+=Builder|statements+=ExpressionStatement|
// statements+=PropertiesStatement)* "}"
protected class ContextBlock_Group extends GroupToken {
	
	public ContextBlock_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getContextBlockAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContextBlock_RightCurlyBracketKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getContextBlockRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "{"
protected class ContextBlock_LeftCurlyBracketKeyword_0 extends KeywordToken  {
	
	public ContextBlock_LeftCurlyBracketKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContextBlockAccess().getLeftCurlyBracketKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// (statements+=Method|statements+=Builder|statements+=ExpressionStatement|
// statements+=PropertiesStatement)*
protected class ContextBlock_Alternatives_1 extends AlternativesToken {

	public ContextBlock_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getContextBlockAccess().getAlternatives_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContextBlock_StatementsAssignment_1_0(parent, this, 0, inst);
			case 1: return new ContextBlock_StatementsAssignment_1_1(parent, this, 1, inst);
			case 2: return new ContextBlock_StatementsAssignment_1_2(parent, this, 2, inst);
			case 3: return new ContextBlock_StatementsAssignment_1_3(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}

// statements+=Method
protected class ContextBlock_StatementsAssignment_1_0 extends AssignmentToken  {
	
	public ContextBlock_StatementsAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getContextBlockAccess().getStatementsAssignment_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Method_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMethodRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getContextBlockAccess().getStatementsMethodParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ContextBlock_Alternatives_1(parent, next, actIndex, consumed);
			case 1: return new ContextBlock_LeftCurlyBracketKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// statements+=Builder
protected class ContextBlock_StatementsAssignment_1_1 extends AssignmentToken  {
	
	public ContextBlock_StatementsAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getContextBlockAccess().getStatementsAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBuilderRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getContextBlockAccess().getStatementsBuilderParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ContextBlock_Alternatives_1(parent, next, actIndex, consumed);
			case 1: return new ContextBlock_LeftCurlyBracketKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// statements+=ExpressionStatement
protected class ContextBlock_StatementsAssignment_1_2 extends AssignmentToken  {
	
	public ContextBlock_StatementsAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getContextBlockAccess().getStatementsAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExpressionStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getContextBlockAccess().getStatementsExpressionStatementParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ContextBlock_Alternatives_1(parent, next, actIndex, consumed);
			case 1: return new ContextBlock_LeftCurlyBracketKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// statements+=PropertiesStatement
protected class ContextBlock_StatementsAssignment_1_3 extends AssignmentToken  {
	
	public ContextBlock_StatementsAssignment_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getContextBlockAccess().getStatementsAssignment_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertiesStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("statements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertiesStatementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getContextBlockAccess().getStatementsPropertiesStatementParserRuleCall_1_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ContextBlock_Alternatives_1(parent, next, actIndex, consumed);
			case 1: return new ContextBlock_LeftCurlyBracketKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class ContextBlock_RightCurlyBracketKeyword_2 extends KeywordToken  {
	
	public ContextBlock_RightCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContextBlockAccess().getRightCurlyBracketKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContextBlock_Alternatives_1(parent, this, 0, inst);
			case 1: return new ContextBlock_LeftCurlyBracketKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ContextBlock ****************/


/************ begin Rule ExpressionStatement ****************
 *
 * ExpressionStatement returns Statement:
 *   {ExpressionStatement} val=Expression ";";
 *
 **/

// {ExpressionStatement} val=Expression ";"
protected class ExpressionStatement_Group extends GroupToken {
	
	public ExpressionStatement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getExpressionStatementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExpressionStatement_SemicolonKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getExpressionStatementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {ExpressionStatement}
protected class ExpressionStatement_ExpressionStatementAction_0 extends ActionToken  {

	public ExpressionStatement_ExpressionStatementAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getExpressionStatementAccess().getExpressionStatementAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getExpressionStatementAccess().getExpressionStatementAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// val=Expression
protected class ExpressionStatement_ValAssignment_1 extends AssignmentToken  {
	
	public ExpressionStatement_ValAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getExpressionStatementAccess().getValAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getExpressionStatementAccess().getValExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExpressionStatement_ExpressionStatementAction_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class ExpressionStatement_SemicolonKeyword_2 extends KeywordToken  {
	
	public ExpressionStatement_SemicolonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExpressionStatement_ValAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ExpressionStatement ****************/


/************ begin Rule PropertiesStatement ****************
 *
 * PropertiesStatement returns Statment:
 *   {PropertiesStatement} "properties" properties=NamedPropertySet;
 *
 **/

// {PropertiesStatement} "properties" properties=NamedPropertySet
protected class PropertiesStatement_Group extends GroupToken {
	
	public PropertiesStatement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPropertiesStatementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertiesStatement_PropertiesAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPropertiesStatementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {PropertiesStatement}
protected class PropertiesStatement_PropertiesStatementAction_0 extends ActionToken  {

	public PropertiesStatement_PropertiesStatementAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getPropertiesStatementAccess().getPropertiesStatementAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getPropertiesStatementAccess().getPropertiesStatementAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "properties"
protected class PropertiesStatement_PropertiesKeyword_1 extends KeywordToken  {
	
	public PropertiesStatement_PropertiesKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPropertiesStatementAccess().getPropertiesKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertiesStatement_PropertiesStatementAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// properties=NamedPropertySet
protected class PropertiesStatement_PropertiesAssignment_2 extends AssignmentToken  {
	
	public PropertiesStatement_PropertiesAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertiesStatementAccess().getPropertiesAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NamedPropertySet_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("properties",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("properties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNamedPropertySetRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPropertiesStatementAccess().getPropertiesNamedPropertySetParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PropertiesStatement_PropertiesKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule PropertiesStatement ****************/


/************ begin Rule Literal ****************
 *
 * Literal returns Expression:
 *   ValueLiteral|RegexpLiteral|LiteralList|LiteralMap|LiteralFunction;
 *
 **/

// ValueLiteral|RegexpLiteral|LiteralList|LiteralMap|LiteralFunction
protected class Literal_Alternatives extends AlternativesToken {

	public Literal_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getLiteralAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Literal_ValueLiteralParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Literal_RegexpLiteralParserRuleCall_1(parent, this, 1, inst);
			case 2: return new Literal_LiteralListParserRuleCall_2(parent, this, 2, inst);
			case 3: return new Literal_LiteralMapParserRuleCall_3(parent, this, 3, inst);
			case 4: return new Literal_LiteralFunctionParserRuleCall_4(parent, this, 4, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ValueLiteral
protected class Literal_ValueLiteralParserRuleCall_0 extends RuleCallToken {
	
	public Literal_ValueLiteralParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralAccess().getValueLiteralParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ValueLiteral_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ValueLiteral_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getValueLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// RegexpLiteral
protected class Literal_RegexpLiteralParserRuleCall_1 extends RuleCallToken {
	
	public Literal_RegexpLiteralParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralAccess().getRegexpLiteralParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RegexpLiteral_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RegexpLiteral_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRegexpLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// LiteralList
protected class Literal_LiteralListParserRuleCall_2 extends RuleCallToken {
	
	public Literal_LiteralListParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralAccess().getLiteralListParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralList_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(LiteralList_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLiteralListRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// LiteralMap
protected class Literal_LiteralMapParserRuleCall_3 extends RuleCallToken {
	
	public Literal_LiteralMapParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralAccess().getLiteralMapParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralMap_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(LiteralMap_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLiteralMapRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// LiteralFunction
protected class Literal_LiteralFunctionParserRuleCall_4 extends RuleCallToken {
	
	public Literal_LiteralFunctionParserRuleCall_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralAccess().getLiteralFunctionParserRuleCall_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralFunction_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(LiteralFunction_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLiteralFunctionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Literal ****************/


/************ begin Rule LiteralList ****************
 *
 * LiteralList returns Expression:
 *   {LiteralList} "[" element+=Expression ("," element+=Expression)* "]" ("<" type=TypeRef
 *   ">")?|{LiteralList} "[" "]" "<" type=TypeRef ">";
 *
 **/

// {LiteralList} "[" element+=Expression ("," element+=Expression)* "]" ("<" type=TypeRef
// ">")?|{LiteralList} "[" "]" "<" type=TypeRef ">"
protected class LiteralList_Alternatives extends AlternativesToken {

	public LiteralList_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralList_Group_0(parent, this, 0, inst);
			case 1: return new LiteralList_Group_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLiteralListRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {LiteralList} "[" element+=Expression ("," element+=Expression)* "]" ("<" type=TypeRef
// ">")?
protected class LiteralList_Group_0 extends GroupToken {
	
	public LiteralList_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralList_Group_0_5(parent, this, 0, inst);
			case 1: return new LiteralList_RightSquareBracketKeyword_0_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// {LiteralList}
protected class LiteralList_LiteralListAction_0_0 extends ActionToken  {

	public LiteralList_LiteralListAction_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getLiteralListAction_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getLiteralListAccess().getLiteralListAction_0_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "["
protected class LiteralList_LeftSquareBracketKeyword_0_1 extends KeywordToken  {
	
	public LiteralList_LeftSquareBracketKeyword_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getLeftSquareBracketKeyword_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralList_LiteralListAction_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// element+=Expression
protected class LiteralList_ElementAssignment_0_2 extends AssignmentToken  {
	
	public LiteralList_ElementAssignment_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getElementAssignment_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("element",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("element");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLiteralListAccess().getElementExpressionParserRuleCall_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralList_LeftSquareBracketKeyword_0_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," element+=Expression)*
protected class LiteralList_Group_0_3 extends GroupToken {
	
	public LiteralList_Group_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getGroup_0_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralList_ElementAssignment_0_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class LiteralList_CommaKeyword_0_3_0 extends KeywordToken  {
	
	public LiteralList_CommaKeyword_0_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getCommaKeyword_0_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralList_Group_0_3(parent, this, 0, inst);
			case 1: return new LiteralList_ElementAssignment_0_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// element+=Expression
protected class LiteralList_ElementAssignment_0_3_1 extends AssignmentToken  {
	
	public LiteralList_ElementAssignment_0_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getElementAssignment_0_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("element",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("element");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLiteralListAccess().getElementExpressionParserRuleCall_0_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralList_CommaKeyword_0_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "]"
protected class LiteralList_RightSquareBracketKeyword_0_4 extends KeywordToken  {
	
	public LiteralList_RightSquareBracketKeyword_0_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getRightSquareBracketKeyword_0_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralList_Group_0_3(parent, this, 0, inst);
			case 1: return new LiteralList_ElementAssignment_0_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ("<" type=TypeRef ">")?
protected class LiteralList_Group_0_5 extends GroupToken {
	
	public LiteralList_Group_0_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getGroup_0_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralList_GreaterThanSignKeyword_0_5_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "<"
protected class LiteralList_LessThanSignKeyword_0_5_0 extends KeywordToken  {
	
	public LiteralList_LessThanSignKeyword_0_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getLessThanSignKeyword_0_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralList_RightSquareBracketKeyword_0_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=TypeRef
protected class LiteralList_TypeAssignment_0_5_1 extends AssignmentToken  {
	
	public LiteralList_TypeAssignment_0_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getTypeAssignment_0_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLiteralListAccess().getTypeTypeRefParserRuleCall_0_5_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralList_LessThanSignKeyword_0_5_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ">"
protected class LiteralList_GreaterThanSignKeyword_0_5_2 extends KeywordToken  {
	
	public LiteralList_GreaterThanSignKeyword_0_5_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getGreaterThanSignKeyword_0_5_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralList_TypeAssignment_0_5_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



// {LiteralList} "[" "]" "<" type=TypeRef ">"
protected class LiteralList_Group_1 extends GroupToken {
	
	public LiteralList_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralList_GreaterThanSignKeyword_1_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {LiteralList}
protected class LiteralList_LiteralListAction_1_0 extends ActionToken  {

	public LiteralList_LiteralListAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getLiteralListAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getLiteralListAccess().getLiteralListAction_1_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "["
protected class LiteralList_LeftSquareBracketKeyword_1_1 extends KeywordToken  {
	
	public LiteralList_LeftSquareBracketKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getLeftSquareBracketKeyword_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralList_LiteralListAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "]"
protected class LiteralList_RightSquareBracketKeyword_1_2 extends KeywordToken  {
	
	public LiteralList_RightSquareBracketKeyword_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getRightSquareBracketKeyword_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralList_LeftSquareBracketKeyword_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "<"
protected class LiteralList_LessThanSignKeyword_1_3 extends KeywordToken  {
	
	public LiteralList_LessThanSignKeyword_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getLessThanSignKeyword_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralList_RightSquareBracketKeyword_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=TypeRef
protected class LiteralList_TypeAssignment_1_4 extends AssignmentToken  {
	
	public LiteralList_TypeAssignment_1_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getTypeAssignment_1_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLiteralListAccess().getTypeTypeRefParserRuleCall_1_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralList_LessThanSignKeyword_1_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ">"
protected class LiteralList_GreaterThanSignKeyword_1_5 extends KeywordToken  {
	
	public LiteralList_GreaterThanSignKeyword_1_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getGreaterThanSignKeyword_1_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralList_TypeAssignment_1_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule LiteralList ****************/


/************ begin Rule LiteralMap ****************
 *
 * LiteralMap returns Expression:
 *   {LiteralMap} "[" features+=Feature ("," features+=Feature)* "]" ("<" keyType=TypeRef ","
 *   valType=TypeRef ">")?|{LiteralMap} "[" "]" "<" keyType=TypeRef "," valType=TypeRef ">";
 *
 **/

// {LiteralMap} "[" features+=Feature ("," features+=Feature)* "]" ("<" keyType=TypeRef ","
// valType=TypeRef ">")?|{LiteralMap} "[" "]" "<" keyType=TypeRef "," valType=TypeRef ">"
protected class LiteralMap_Alternatives extends AlternativesToken {

	public LiteralMap_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralMap_Group_0(parent, this, 0, inst);
			case 1: return new LiteralMap_Group_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLiteralMapRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {LiteralMap} "[" features+=Feature ("," features+=Feature)* "]" ("<" keyType=TypeRef ","
// valType=TypeRef ">")?
protected class LiteralMap_Group_0 extends GroupToken {
	
	public LiteralMap_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralMap_Group_0_5(parent, this, 0, inst);
			case 1: return new LiteralMap_RightSquareBracketKeyword_0_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// {LiteralMap}
protected class LiteralMap_LiteralMapAction_0_0 extends ActionToken  {

	public LiteralMap_LiteralMapAction_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getLiteralMapAction_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getLiteralMapAccess().getLiteralMapAction_0_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "["
protected class LiteralMap_LeftSquareBracketKeyword_0_1 extends KeywordToken  {
	
	public LiteralMap_LeftSquareBracketKeyword_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getLeftSquareBracketKeyword_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralMap_LiteralMapAction_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// features+=Feature
protected class LiteralMap_FeaturesAssignment_0_2 extends AssignmentToken  {
	
	public LiteralMap_FeaturesAssignment_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getFeaturesAssignment_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Feature_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("features",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("features");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFeatureRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLiteralMapAccess().getFeaturesFeatureParserRuleCall_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralMap_LeftSquareBracketKeyword_0_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," features+=Feature)*
protected class LiteralMap_Group_0_3 extends GroupToken {
	
	public LiteralMap_Group_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getGroup_0_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralMap_FeaturesAssignment_0_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class LiteralMap_CommaKeyword_0_3_0 extends KeywordToken  {
	
	public LiteralMap_CommaKeyword_0_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getCommaKeyword_0_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralMap_Group_0_3(parent, this, 0, inst);
			case 1: return new LiteralMap_FeaturesAssignment_0_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// features+=Feature
protected class LiteralMap_FeaturesAssignment_0_3_1 extends AssignmentToken  {
	
	public LiteralMap_FeaturesAssignment_0_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getFeaturesAssignment_0_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Feature_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("features",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("features");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFeatureRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLiteralMapAccess().getFeaturesFeatureParserRuleCall_0_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralMap_CommaKeyword_0_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "]"
protected class LiteralMap_RightSquareBracketKeyword_0_4 extends KeywordToken  {
	
	public LiteralMap_RightSquareBracketKeyword_0_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getRightSquareBracketKeyword_0_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralMap_Group_0_3(parent, this, 0, inst);
			case 1: return new LiteralMap_FeaturesAssignment_0_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ("<" keyType=TypeRef "," valType=TypeRef ">")?
protected class LiteralMap_Group_0_5 extends GroupToken {
	
	public LiteralMap_Group_0_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getGroup_0_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralMap_GreaterThanSignKeyword_0_5_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "<"
protected class LiteralMap_LessThanSignKeyword_0_5_0 extends KeywordToken  {
	
	public LiteralMap_LessThanSignKeyword_0_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getLessThanSignKeyword_0_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralMap_RightSquareBracketKeyword_0_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// keyType=TypeRef
protected class LiteralMap_KeyTypeAssignment_0_5_1 extends AssignmentToken  {
	
	public LiteralMap_KeyTypeAssignment_0_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getKeyTypeAssignment_0_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("keyType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("keyType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLiteralMapAccess().getKeyTypeTypeRefParserRuleCall_0_5_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralMap_LessThanSignKeyword_0_5_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ","
protected class LiteralMap_CommaKeyword_0_5_2 extends KeywordToken  {
	
	public LiteralMap_CommaKeyword_0_5_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getCommaKeyword_0_5_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralMap_KeyTypeAssignment_0_5_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// valType=TypeRef
protected class LiteralMap_ValTypeAssignment_0_5_3 extends AssignmentToken  {
	
	public LiteralMap_ValTypeAssignment_0_5_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getValTypeAssignment_0_5_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("valType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("valType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLiteralMapAccess().getValTypeTypeRefParserRuleCall_0_5_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralMap_CommaKeyword_0_5_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ">"
protected class LiteralMap_GreaterThanSignKeyword_0_5_4 extends KeywordToken  {
	
	public LiteralMap_GreaterThanSignKeyword_0_5_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getGreaterThanSignKeyword_0_5_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralMap_ValTypeAssignment_0_5_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



// {LiteralMap} "[" "]" "<" keyType=TypeRef "," valType=TypeRef ">"
protected class LiteralMap_Group_1 extends GroupToken {
	
	public LiteralMap_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralMap_GreaterThanSignKeyword_1_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {LiteralMap}
protected class LiteralMap_LiteralMapAction_1_0 extends ActionToken  {

	public LiteralMap_LiteralMapAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getLiteralMapAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getLiteralMapAccess().getLiteralMapAction_1_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "["
protected class LiteralMap_LeftSquareBracketKeyword_1_1 extends KeywordToken  {
	
	public LiteralMap_LeftSquareBracketKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getLeftSquareBracketKeyword_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralMap_LiteralMapAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "]"
protected class LiteralMap_RightSquareBracketKeyword_1_2 extends KeywordToken  {
	
	public LiteralMap_RightSquareBracketKeyword_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getRightSquareBracketKeyword_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralMap_LeftSquareBracketKeyword_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "<"
protected class LiteralMap_LessThanSignKeyword_1_3 extends KeywordToken  {
	
	public LiteralMap_LessThanSignKeyword_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getLessThanSignKeyword_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralMap_RightSquareBracketKeyword_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// keyType=TypeRef
protected class LiteralMap_KeyTypeAssignment_1_4 extends AssignmentToken  {
	
	public LiteralMap_KeyTypeAssignment_1_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getKeyTypeAssignment_1_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("keyType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("keyType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLiteralMapAccess().getKeyTypeTypeRefParserRuleCall_1_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralMap_LessThanSignKeyword_1_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ","
protected class LiteralMap_CommaKeyword_1_5 extends KeywordToken  {
	
	public LiteralMap_CommaKeyword_1_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getCommaKeyword_1_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralMap_KeyTypeAssignment_1_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// valType=TypeRef
protected class LiteralMap_ValTypeAssignment_1_6 extends AssignmentToken  {
	
	public LiteralMap_ValTypeAssignment_1_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getValTypeAssignment_1_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("valType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("valType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLiteralMapAccess().getValTypeTypeRefParserRuleCall_1_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralMap_CommaKeyword_1_5(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ">"
protected class LiteralMap_GreaterThanSignKeyword_1_7 extends KeywordToken  {
	
	public LiteralMap_GreaterThanSignKeyword_1_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getGreaterThanSignKeyword_1_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralMap_ValTypeAssignment_1_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule LiteralMap ****************/


/************ begin Rule LiteralFunction ****************
 *
 * LiteralFunction returns Expression:
 *   {LiteralFunction} "{" closure=ClosureExpression "}";
 *
 **/

// {LiteralFunction} "{" closure=ClosureExpression "}"
protected class LiteralFunction_Group extends GroupToken {
	
	public LiteralFunction_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLiteralFunctionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralFunction_RightCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLiteralFunctionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {LiteralFunction}
protected class LiteralFunction_LiteralFunctionAction_0 extends ActionToken  {

	public LiteralFunction_LiteralFunctionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getLiteralFunctionAccess().getLiteralFunctionAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getLiteralFunctionAccess().getLiteralFunctionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "{"
protected class LiteralFunction_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public LiteralFunction_LeftCurlyBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralFunctionAccess().getLeftCurlyBracketKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralFunction_LiteralFunctionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// closure=ClosureExpression
protected class LiteralFunction_ClosureAssignment_2 extends AssignmentToken  {
	
	public LiteralFunction_ClosureAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralFunctionAccess().getClosureAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("closure",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("closure");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getClosureExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLiteralFunctionAccess().getClosureClosureExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralFunction_LeftCurlyBracketKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class LiteralFunction_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public LiteralFunction_RightCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralFunctionAccess().getRightCurlyBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralFunction_ClosureAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule LiteralFunction ****************/


/************ begin Rule ClosureExpression ****************
 *
 * ClosureExpression:
 *   (parameters+=ParameterDeclaration ("," parameters+=ParameterDeclaration)*)? "|" expr
 *   =Expression;
 *
 **/

// (parameters+=ParameterDeclaration ("," parameters+=ParameterDeclaration)*)? "|" expr
// =Expression
protected class ClosureExpression_Group extends GroupToken {
	
	public ClosureExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getClosureExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureExpression_ExprAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getClosureExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// (parameters+=ParameterDeclaration ("," parameters+=ParameterDeclaration)*)?
protected class ClosureExpression_Group_0 extends GroupToken {
	
	public ClosureExpression_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getClosureExpressionAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureExpression_Group_0_1(parent, this, 0, inst);
			case 1: return new ClosureExpression_ParametersAssignment_0_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// parameters+=ParameterDeclaration
protected class ClosureExpression_ParametersAssignment_0_0 extends AssignmentToken  {
	
	public ClosureExpression_ParametersAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClosureExpressionAccess().getParametersAssignment_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameters",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClosureExpressionAccess().getParametersParameterDeclarationParserRuleCall_0_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// ("," parameters+=ParameterDeclaration)*
protected class ClosureExpression_Group_0_1 extends GroupToken {
	
	public ClosureExpression_Group_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getClosureExpressionAccess().getGroup_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureExpression_ParametersAssignment_0_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class ClosureExpression_CommaKeyword_0_1_0 extends KeywordToken  {
	
	public ClosureExpression_CommaKeyword_0_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureExpressionAccess().getCommaKeyword_0_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureExpression_Group_0_1(parent, this, 0, inst);
			case 1: return new ClosureExpression_ParametersAssignment_0_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// parameters+=ParameterDeclaration
protected class ClosureExpression_ParametersAssignment_0_1_1 extends AssignmentToken  {
	
	public ClosureExpression_ParametersAssignment_0_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClosureExpressionAccess().getParametersAssignment_0_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameters",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClosureExpressionAccess().getParametersParameterDeclarationParserRuleCall_0_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ClosureExpression_CommaKeyword_0_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// "|"
protected class ClosureExpression_VerticalLineKeyword_1 extends KeywordToken  {
	
	public ClosureExpression_VerticalLineKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureExpressionAccess().getVerticalLineKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureExpression_Group_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// expr=Expression
protected class ClosureExpression_ExprAssignment_2 extends AssignmentToken  {
	
	public ClosureExpression_ExprAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClosureExpressionAccess().getExprAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClosureExpressionAccess().getExprExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ClosureExpression_VerticalLineKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ClosureExpression ****************/


/************ begin Rule Feature ****************
 *
 * Feature:
 *   {Feature} name=( ID | PID | STRING ) ":" value=Expression;
 *
 **/

// {Feature} name=( ID | PID | STRING ) ":" value=Expression
protected class Feature_Group extends GroupToken {
	
	public Feature_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFeatureAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Feature_ValueAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFeatureRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {Feature}
protected class Feature_FeatureAction_0 extends ActionToken  {

	public Feature_FeatureAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getFeatureAccess().getFeatureAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getFeatureAccess().getFeatureAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// name=( ID | PID | STRING )
protected class Feature_NameAssignment_1 extends AssignmentToken  {
	
	public Feature_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Feature_FeatureAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFeatureAccess().getNameIDTerminalRuleCall_1_0_0();
			return obj;
		}
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFeatureAccess().getNamePIDTerminalRuleCall_1_0_1();
			return obj;
		}
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFeatureAccess().getNameSTRINGTerminalRuleCall_1_0_2();
			return obj;
		}
		return null;
	}

}

// ":"
protected class Feature_ColonKeyword_2 extends KeywordToken  {
	
	public Feature_ColonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureAccess().getColonKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Feature_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// value=Expression
protected class Feature_ValueAssignment_3 extends AssignmentToken  {
	
	public Feature_ValueAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureAccess().getValueAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFeatureAccess().getValueExpressionParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Feature_ColonKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Feature ****************/


/************ begin Rule ValueLiteral ****************
 *
 * ValueLiteral returns Expression:
 *   BooleanLiteral|IntegerLiteral|NullLiteral|StringLiteral|RealLiteral|QueryLiteral
 *   |ThisLiteral|UnitLiteral; 
 * 
 *     
 * 	   
 * 	   
 * 	   
 * 	  
 * 	  
 * 	  
 * 	  
 * //	| SuperLiteral
 *
 **/

// BooleanLiteral|IntegerLiteral|NullLiteral|StringLiteral|RealLiteral|QueryLiteral
// |ThisLiteral|UnitLiteral 
// 
//     
// 	   
// 	   
// 	   
// 	  
// 	  
// 	  
// 	  
// //	| SuperLiteral
protected class ValueLiteral_Alternatives extends AlternativesToken {

	public ValueLiteral_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getValueLiteralAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ValueLiteral_BooleanLiteralParserRuleCall_0(parent, this, 0, inst);
			case 1: return new ValueLiteral_IntegerLiteralParserRuleCall_1(parent, this, 1, inst);
			case 2: return new ValueLiteral_NullLiteralParserRuleCall_2(parent, this, 2, inst);
			case 3: return new ValueLiteral_StringLiteralParserRuleCall_3(parent, this, 3, inst);
			case 4: return new ValueLiteral_RealLiteralParserRuleCall_4(parent, this, 4, inst);
			case 5: return new ValueLiteral_QueryLiteralParserRuleCall_5(parent, this, 5, inst);
			case 6: return new ValueLiteral_ThisLiteralParserRuleCall_6(parent, this, 6, inst);
			case 7: return new ValueLiteral_UnitLiteralParserRuleCall_7(parent, this, 7, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getValueLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// BooleanLiteral
protected class ValueLiteral_BooleanLiteralParserRuleCall_0 extends RuleCallToken {
	
	public ValueLiteral_BooleanLiteralParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getValueLiteralAccess().getBooleanLiteralParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BooleanLiteral_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(BooleanLiteral_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBooleanLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// IntegerLiteral
protected class ValueLiteral_IntegerLiteralParserRuleCall_1 extends RuleCallToken {
	
	public ValueLiteral_IntegerLiteralParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getValueLiteralAccess().getIntegerLiteralParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntegerLiteral_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(IntegerLiteral_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getIntegerLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// NullLiteral
protected class ValueLiteral_NullLiteralParserRuleCall_2 extends RuleCallToken {
	
	public ValueLiteral_NullLiteralParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getValueLiteralAccess().getNullLiteralParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NullLiteral_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(NullLiteral_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getNullLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// StringLiteral
protected class ValueLiteral_StringLiteralParserRuleCall_3 extends RuleCallToken {
	
	public ValueLiteral_StringLiteralParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getValueLiteralAccess().getStringLiteralParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringLiteral_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(StringLiteral_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getStringLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// RealLiteral
protected class ValueLiteral_RealLiteralParserRuleCall_4 extends RuleCallToken {
	
	public ValueLiteral_RealLiteralParserRuleCall_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getValueLiteralAccess().getRealLiteralParserRuleCall_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RealLiteral_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RealLiteral_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRealLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// QueryLiteral
protected class ValueLiteral_QueryLiteralParserRuleCall_5 extends RuleCallToken {
	
	public ValueLiteral_QueryLiteralParserRuleCall_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getValueLiteralAccess().getQueryLiteralParserRuleCall_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new QueryLiteral_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(QueryLiteral_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getQueryLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ThisLiteral   
// //	| SuperLiteral
protected class ValueLiteral_ThisLiteralParserRuleCall_6 extends RuleCallToken {
	
	public ValueLiteral_ThisLiteralParserRuleCall_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getValueLiteralAccess().getThisLiteralParserRuleCall_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThisLiteral_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ThisLiteral_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getThisLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// UnitLiteral
protected class ValueLiteral_UnitLiteralParserRuleCall_7 extends RuleCallToken {
	
	public ValueLiteral_UnitLiteralParserRuleCall_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getValueLiteralAccess().getUnitLiteralParserRuleCall_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnitLiteral_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UnitLiteral_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUnitLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ValueLiteral ****************/


/************ begin Rule BooleanLiteral ****************
 *
 * BooleanLiteral returns Expression:
 *   {BooleanLiteral} val=( "true" | "false" );
 *
 **/

// {BooleanLiteral} val=( "true" | "false" )
protected class BooleanLiteral_Group extends GroupToken {
	
	public BooleanLiteral_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBooleanLiteralAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BooleanLiteral_ValAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBooleanLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {BooleanLiteral}
protected class BooleanLiteral_BooleanLiteralAction_0 extends ActionToken  {

	public BooleanLiteral_BooleanLiteralAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// val=( "true" | "false" )
protected class BooleanLiteral_ValAssignment_1 extends AssignmentToken  {
	
	public BooleanLiteral_ValAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBooleanLiteralAccess().getValAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BooleanLiteral_BooleanLiteralAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val");
		if("true".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getBooleanLiteralAccess().getValTrueKeyword_1_0_0();
			return obj;
		}
		if("false".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getBooleanLiteralAccess().getValFalseKeyword_1_0_1();
			return obj;
		}
		return null;
	}

}


/************ end Rule BooleanLiteral ****************/


/************ begin Rule IntegerLiteral ****************
 *
 * IntegerLiteral returns Expression:
 *   {IntegerLiteral} val=IntValue;
 *
 **/

// {IntegerLiteral} val=IntValue
protected class IntegerLiteral_Group extends GroupToken {
	
	public IntegerLiteral_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getIntegerLiteralAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntegerLiteral_ValAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getIntegerLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {IntegerLiteral}
protected class IntegerLiteral_IntegerLiteralAction_0 extends ActionToken  {

	public IntegerLiteral_IntegerLiteralAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getIntegerLiteralAccess().getIntegerLiteralAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getIntegerLiteralAccess().getIntegerLiteralAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// val=IntValue
protected class IntegerLiteral_ValAssignment_1 extends AssignmentToken  {
	
	public IntegerLiteral_ValAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getIntegerLiteralAccess().getValAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntegerLiteral_IntegerLiteralAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getIntegerLiteralAccess().getValIntValueParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule IntegerLiteral ****************/


/************ begin Rule NullLiteral ****************
 *
 * NullLiteral returns Expression:
 *   {NullLiteral} val="null";
 *
 **/

// {NullLiteral} val="null"
protected class NullLiteral_Group extends GroupToken {
	
	public NullLiteral_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getNullLiteralAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NullLiteral_ValAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getNullLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {NullLiteral}
protected class NullLiteral_NullLiteralAction_0 extends ActionToken  {

	public NullLiteral_NullLiteralAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getNullLiteralAccess().getNullLiteralAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getNullLiteralAccess().getNullLiteralAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// val="null"
protected class NullLiteral_ValAssignment_1 extends AssignmentToken  {
	
	public NullLiteral_ValAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNullLiteralAccess().getValAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NullLiteral_NullLiteralAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val");
		if("null".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getNullLiteralAccess().getValNullKeyword_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule NullLiteral ****************/


/************ begin Rule ThisLiteral ****************
 *
 * ThisLiteral returns Expression:
 *   {ThisLiteral} val="this";
 *
 **/

// {ThisLiteral} val="this"
protected class ThisLiteral_Group extends GroupToken {
	
	public ThisLiteral_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getThisLiteralAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThisLiteral_ValAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getThisLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {ThisLiteral}
protected class ThisLiteral_ThisLiteralAction_0 extends ActionToken  {

	public ThisLiteral_ThisLiteralAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getThisLiteralAccess().getThisLiteralAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getThisLiteralAccess().getThisLiteralAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// val="this"
protected class ThisLiteral_ValAssignment_1 extends AssignmentToken  {
	
	public ThisLiteral_ValAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getThisLiteralAccess().getValAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThisLiteral_ThisLiteralAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val");
		if("this".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getThisLiteralAccess().getValThisKeyword_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ThisLiteral ****************/


/************ begin Rule SuperLiteral ****************
 *
 * SuperLiteral returns Expression:
 *   {SuperLiteral} val="super";
 *
 **/

// {SuperLiteral} val="super"
protected class SuperLiteral_Group extends GroupToken {
	
	public SuperLiteral_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSuperLiteralAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SuperLiteral_ValAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSuperLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {SuperLiteral}
protected class SuperLiteral_SuperLiteralAction_0 extends ActionToken  {

	public SuperLiteral_SuperLiteralAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getSuperLiteralAccess().getSuperLiteralAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getSuperLiteralAccess().getSuperLiteralAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// val="super"
protected class SuperLiteral_ValAssignment_1 extends AssignmentToken  {
	
	public SuperLiteral_ValAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSuperLiteralAccess().getValAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SuperLiteral_SuperLiteralAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val");
		if("super".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getSuperLiteralAccess().getValSuperKeyword_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule SuperLiteral ****************/


/************ begin Rule UnitLiteral ****************
 *
 * UnitLiteral returns Expression:
 *   {UnitLiteral} val="unit";
 *
 **/

// {UnitLiteral} val="unit"
protected class UnitLiteral_Group extends GroupToken {
	
	public UnitLiteral_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnitLiteralAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnitLiteral_ValAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnitLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {UnitLiteral}
protected class UnitLiteral_UnitLiteralAction_0 extends ActionToken  {

	public UnitLiteral_UnitLiteralAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getUnitLiteralAccess().getUnitLiteralAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getUnitLiteralAccess().getUnitLiteralAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// val="unit"
protected class UnitLiteral_ValAssignment_1 extends AssignmentToken  {
	
	public UnitLiteral_ValAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitLiteralAccess().getValAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnitLiteral_UnitLiteralAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val");
		if("unit".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getUnitLiteralAccess().getValUnitKeyword_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule UnitLiteral ****************/


/************ begin Rule StringLiteral ****************
 *
 * StringLiteral returns Expression:
 *   {StringLiteral} val=STRING;
 *
 **/

// {StringLiteral} val=STRING
protected class StringLiteral_Group extends GroupToken {
	
	public StringLiteral_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStringLiteralAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringLiteral_ValAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getStringLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {StringLiteral}
protected class StringLiteral_StringLiteralAction_0 extends ActionToken  {

	public StringLiteral_StringLiteralAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getStringLiteralAccess().getStringLiteralAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getStringLiteralAccess().getStringLiteralAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// val=STRING
protected class StringLiteral_ValAssignment_1 extends AssignmentToken  {
	
	public StringLiteral_ValAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStringLiteralAccess().getValAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringLiteral_StringLiteralAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getStringLiteralAccess().getValSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule StringLiteral ****************/


/************ begin Rule RealLiteral ****************
 *
 * RealLiteral returns Expression:
 *   {RealLiteral} val=RealValue;
 *
 **/

// {RealLiteral} val=RealValue
protected class RealLiteral_Group extends GroupToken {
	
	public RealLiteral_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRealLiteralAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RealLiteral_ValAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRealLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {RealLiteral}
protected class RealLiteral_RealLiteralAction_0 extends ActionToken  {

	public RealLiteral_RealLiteralAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getRealLiteralAccess().getRealLiteralAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getRealLiteralAccess().getRealLiteralAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// val=RealValue
protected class RealLiteral_ValAssignment_1 extends AssignmentToken  {
	
	public RealLiteral_ValAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRealLiteralAccess().getValAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RealLiteral_RealLiteralAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getRealLiteralAccess().getValRealValueParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule RealLiteral ****************/




/************ begin Rule RegexpLiteral ****************
 *
 * RegexpLiteral returns Expression:
 *   {RegexpLiteral} val=REGEX;
 *
 **/

// {RegexpLiteral} val=REGEX
protected class RegexpLiteral_Group extends GroupToken {
	
	public RegexpLiteral_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRegexpLiteralAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RegexpLiteral_ValAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRegexpLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {RegexpLiteral}
protected class RegexpLiteral_RegexpLiteralAction_0 extends ActionToken  {

	public RegexpLiteral_RegexpLiteralAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getRegexpLiteralAccess().getRegexpLiteralAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getRegexpLiteralAccess().getRegexpLiteralAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// val=REGEX
protected class RegexpLiteral_ValAssignment_1 extends AssignmentToken  {
	
	public RegexpLiteral_ValAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRegexpLiteralAccess().getValAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RegexpLiteral_RegexpLiteralAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getRegexpLiteralAccess().getValREGEXTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule RegexpLiteral ****************/


/************ begin Rule QueryLiteral ****************
 *
 * QueryLiteral returns Expression:
 *   {QueryLiteral} val=Query;
 *
 **/

// {QueryLiteral} val=Query
protected class QueryLiteral_Group extends GroupToken {
	
	public QueryLiteral_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getQueryLiteralAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new QueryLiteral_ValAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getQueryLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {QueryLiteral}
protected class QueryLiteral_QueryLiteralAction_0 extends ActionToken  {

	public QueryLiteral_QueryLiteralAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getQueryLiteralAccess().getQueryLiteralAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getQueryLiteralAccess().getQueryLiteralAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// val=Query
protected class QueryLiteral_ValAssignment_1 extends AssignmentToken  {
	
	public QueryLiteral_ValAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getQueryLiteralAccess().getValAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getQueryRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getQueryLiteralAccess().getValQueryParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new QueryLiteral_QueryLiteralAction_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule QueryLiteral ****************/


/************ begin Rule ParanthesizedExpression ****************
 *
 * ParanthesizedExpression returns Expression:
 *   "(" Expression ")";
 *
 **/

// "(" Expression ")"
protected class ParanthesizedExpression_Group extends GroupToken {
	
	public ParanthesizedExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getParanthesizedExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParanthesizedExpression_RightParenthesisKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getParanthesizedExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "("
protected class ParanthesizedExpression_LeftParenthesisKeyword_0 extends KeywordToken  {
	
	public ParanthesizedExpression_LeftParenthesisKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getParanthesizedExpressionAccess().getLeftParenthesisKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// Expression
protected class ParanthesizedExpression_ExpressionParserRuleCall_1 extends RuleCallToken {
	
	public ParanthesizedExpression_ExpressionParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getParanthesizedExpressionAccess().getExpressionParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Expression_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParanthesizedExpression_LeftParenthesisKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// ")"
protected class ParanthesizedExpression_RightParenthesisKeyword_2 extends KeywordToken  {
	
	public ParanthesizedExpression_RightParenthesisKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getParanthesizedExpressionAccess().getRightParenthesisKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParanthesizedExpression_ExpressionParserRuleCall_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ParanthesizedExpression ****************/


/************ begin Rule Version ****************
 *
 * Version:
 *   version=VersionLiteral;
 *
 **/

// version=VersionLiteral
protected class Version_VersionAssignment extends AssignmentToken  {
	
	public Version_VersionAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVersionAccess().getVersionAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getVersionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("version",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("version");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getVersionAccess().getVersionVersionLiteralParserRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule Version ****************/



/************ begin Rule VersionRange ****************
 *
 * VersionRange:
 *   range=VersionRangeLiteral; 
 * 
 * / *
 * ** VersionRange TODO: Uses two instances of Version. This works because use of [ ]  ( ) in Version must be 
 * ** escaped with " ". Omni
 * ** version uses version strings with \[ when a range is presented/parsed in string format.
 * * /
 * //VersionRange returns VersionRange
 * //	: minLimit=('[' | '(') min=Version (',' max=Version)? maxLimit=(']'|')')
 * //	| min=Version
 * //	;
 *
 **/

// range=VersionRangeLiteral
protected class VersionRange_RangeAssignment extends AssignmentToken  {
	
	public VersionRange_RangeAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVersionRangeAccess().getRangeAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getVersionRangeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("range",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("range");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getVersionRangeAccess().getRangeVersionRangeLiteralParserRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule VersionRange ****************/














}
