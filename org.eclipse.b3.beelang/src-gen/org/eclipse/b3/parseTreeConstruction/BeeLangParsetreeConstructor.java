/*
* generated by Xtext
*/
package org.eclipse.b3.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.b3.services.BeeLangGrammarAccess;

import com.google.inject.Inject;

public class BeeLangParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private BeeLangGrammarAccess grammarAccess;
	
	@Override	
	public BeeLangGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	@Override
	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BeeModel_Group(this, this, 0, inst);
			case 1: return new Import_Group(this, this, 1, inst);
			case 2: return new Unit_Group(this, this, 2, inst);
			case 3: return new ProvidedCapability_Group(this, this, 3, inst);
			case 4: return new RequiredCapability_Group(this, this, 4, inst);
			case 5: return new FilteredCapability_Group(this, this, 5, inst);
			case 6: return new Capability_Group(this, this, 6, inst);
			case 7: return new NamedPropertySet_Group(this, this, 7, inst);
			case 8: return new PropertySet_Group(this, this, 8, inst);
			case 9: return new PropertyOperation_Alternatives(this, this, 9, inst);
			case 10: return new ConditionalPropertyOperation_Group(this, this, 10, inst);
			case 11: return new PropertyDefinitionOperation_Group(this, this, 11, inst);
			case 12: return new PropertyValDeclaration_Group(this, this, 12, inst);
			case 13: return new PropertyVarDeclaration_Group(this, this, 13, inst);
			case 14: return new PropertySetOperation_Group(this, this, 14, inst);
			case 15: return new SetPropertyOperation_Group(this, this, 15, inst);
			case 16: return new UnsetPropertyOperation_Group(this, this, 16, inst);
			case 17: return new Synchronization_Group(this, this, 17, inst);
			case 18: return new PathGroup_Group(this, this, 18, inst);
			case 19: return new PathVectorElement_Alternatives(this, this, 19, inst);
			case 20: return new FilteredPathVector_Group(this, this, 20, inst);
			case 21: return new BasePathVector_Group(this, this, 21, inst);
			case 22: return new UnbasedPathVector_Group(this, this, 22, inst);
			case 23: return new CompoundPathVector_Group(this, this, 23, inst);
			case 24: return new Prerequisite_Group(this, this, 24, inst);
			case 25: return new WithClause_Group(this, this, 25, inst);
			case 26: return new PrerequisiteEntry_Alternatives(this, this, 26, inst);
			case 27: return new DirectPartReferemce_Group(this, this, 27, inst);
			case 28: return new CapabilityReferencedPart_Group(this, this, 28, inst);
			case 29: return new CompoundReferences_Group(this, this, 29, inst);
			case 30: return new Builder_Group(this, this, 30, inst);
			case 31: return new ParameterList_Group(this, this, 31, inst);
			case 32: return new FirstParameter_Alternatives(this, this, 32, inst);
			case 33: return new Parameter_Group(this, this, 33, inst);
			case 34: return new ClosureParameter_Group(this, this, 34, inst);
			case 35: return new ParameterDeclarationList_Alternatives(this, this, 35, inst);
			case 36: return new ParameterDeclaration_Group(this, this, 36, inst);
			case 37: return new ParameterDeclarationEllipse_Group(this, this, 37, inst);
			case 38: return new BuilderOutput_Group(this, this, 38, inst);
			case 39: return new BuilderInput_Group(this, this, 39, inst);
			case 40: return new RepositoryConfiguration_Alternatives(this, this, 40, inst);
			case 41: return new RepositoryDeclaration_Group(this, this, 41, inst);
			case 42: return new ResolutionStrategy_Group(this, this, 42, inst);
			case 43: return new ContainerConfiguration_Group(this, this, 43, inst);
			case 44: return new Concern_Group(this, this, 44, inst);
			case 45: return new ConcernBlock_Group(this, this, 45, inst);
			case 46: return new Filter_Group(this, this, 46, inst);
			case 47: return new PreCondition_Group(this, this, 47, inst);
			case 48: return new PostCondition_Group(this, this, 48, inst);
			case 49: return new AssertionExpression_Group(this, this, 49, inst);
			case 50: return new ExpressionList_Group(this, this, 50, inst);
			case 51: return new Function_Group(this, this, 51, inst);
			case 52: return new TopLevelExpression_Alternatives(this, this, 52, inst);
			case 53: return new Expression_AssignmentExpressionParserRuleCall(this, this, 53, inst);
			case 54: return new AssignmentExpression_Group(this, this, 54, inst);
			case 55: return new VarDeclaration_Group(this, this, 55, inst);
			case 56: return new ValDeclaration_Group(this, this, 56, inst);
			case 57: return new TypeRef_Alternatives(this, this, 57, inst);
			case 58: return new SimpleTypeRef_Group(this, this, 58, inst);
			case 59: return new ClosureTypeRef_Group(this, this, 59, inst);
			case 60: return new TypeParam_Alternatives(this, this, 60, inst);
			case 61: return new TypeRefParam_TypeRefParserRuleCall(this, this, 61, inst);
			case 62: return new WildcardRefParam_Group(this, this, 62, inst);
			case 63: return new CachedExpression_Alternatives(this, this, 63, inst);
			case 64: return new OrExpression_Group(this, this, 64, inst);
			case 65: return new AndExpression_Group(this, this, 65, inst);
			case 66: return new RelationalExpression_Group(this, this, 66, inst);
			case 67: return new InstanceOfExpression_Group(this, this, 67, inst);
			case 68: return new AdditiveExpression_Group(this, this, 68, inst);
			case 69: return new MultiplicativeExpression_Group(this, this, 69, inst);
			case 70: return new SetExpression_Group(this, this, 70, inst);
			case 71: return new UnaryOrInfixExpression_Alternatives(this, this, 71, inst);
			case 72: return new UnaryExpression_Group(this, this, 72, inst);
			case 73: return new PreopExpression_Group(this, this, 73, inst);
			case 74: return new PostopExpression_Group(this, this, 74, inst);
			case 75: return new InfixExpression_Group(this, this, 75, inst);
			case 76: return new CallExpression_Group(this, this, 76, inst);
			case 77: return new PrimaryExpression_Alternatives(this, this, 77, inst);
			case 78: return new WildcardExpression_Group(this, this, 78, inst);
			case 79: return new ThrowExpression_Group(this, this, 79, inst);
			case 80: return new TryCatchExpression_Group(this, this, 80, inst);
			case 81: return new CatchBlock_Group(this, this, 81, inst);
			case 82: return new SwitchExpression_Group(this, this, 82, inst);
			case 83: return new Case_Group(this, this, 83, inst);
			case 84: return new BlockExpression_Group(this, this, 84, inst);
			case 85: return new IfExpression_Group(this, this, 85, inst);
			case 86: return new ElseIfExpression_Group(this, this, 86, inst);
			case 87: return new PropertyValue_Group(this, this, 87, inst);
			case 88: return new VariableValue_Group(this, this, 88, inst);
			case 89: return new KeywordVariables_Group(this, this, 89, inst);
			case 90: return new FeatureCall_OperationCallParserRuleCall(this, this, 90, inst);
			case 91: return new OperationCall_Group(this, this, 91, inst);
			case 92: return new ConstructorCallExpression_Group(this, this, 92, inst);
			case 93: return new Context_Group(this, this, 93, inst);
			case 94: return new ContextSelector_Alternatives(this, this, 94, inst);
			case 95: return new TypeRefSelector_TypeAssignment(this, this, 95, inst);
			case 96: return new ExpressionSelector_ExprAssignment(this, this, 96, inst);
			case 97: return new UnitSelector_Group(this, this, 97, inst);
			case 98: return new ContextBlock_Group(this, this, 98, inst);
			case 99: return new FunctionDefinition_Group(this, this, 99, inst);
			case 100: return new Literal_Alternatives(this, this, 100, inst);
			case 101: return new LiteralList_Alternatives(this, this, 101, inst);
			case 102: return new LiteralMap_Alternatives(this, this, 102, inst);
			case 103: return new LiteralFunction_Group(this, this, 103, inst);
			case 104: return new ClosureExpression_Group(this, this, 104, inst);
			case 105: return new OneOrManyExpressions_Alternatives(this, this, 105, inst);
			case 106: return new BlockExpressionWithoutBrackets_Group(this, this, 106, inst);
			case 107: return new MapEntry_Group(this, this, 107, inst);
			case 108: return new KeyLiteral_Group(this, this, 108, inst);
			case 109: return new LiteralType_Group(this, this, 109, inst);
			case 110: return new ValueLiteral_Alternatives(this, this, 110, inst);
			case 111: return new BooleanLiteral_Group(this, this, 111, inst);
			case 112: return new IntegerLiteral_Group(this, this, 112, inst);
			case 113: return new UnitLiteral_Group(this, this, 113, inst);
			case 114: return new StringLiteral_Group(this, this, 114, inst);
			case 115: return new RealLiteral_Group(this, this, 115, inst);
			case 116: return new RegexpLiteral_Group(this, this, 116, inst);
			case 117: return new NullLiteral_Group(this, this, 117, inst);
			case 118: return new ParanthesizedExpression_Group(this, this, 118, inst);
			case 119: return new Version_VersionAssignment(this, this, 119, inst);
			case 120: return new VersionRange_RangeAssignment(this, this, 120, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule BeeModel ****************
 *
 * BeeModel hidden ( WS , SL_COMMENT , ML_COMMENT ):
 *   imports+=Import* (functions+=Function|concern+=Concern|"properties" propertySets+=
 *   NamedPropertySet)* body=Unit?;
 *
 **/

// imports+=Import* (functions+=Function|concern+=Concern|"properties" propertySets+=
// NamedPropertySet)* body=Unit?
protected class BeeModel_Group extends GroupToken {
	
	public BeeModel_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBeeModelAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BeeModel_BodyAssignment_2(parent, this, 0, inst);
			case 1: return new BeeModel_Alternatives_1(parent, this, 1, inst);
			case 2: return new BeeModel_ImportsAssignment_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBeeModelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// imports+=Import*
protected class BeeModel_ImportsAssignment_0 extends AssignmentToken  {
	
	public BeeModel_ImportsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBeeModelAccess().getImportsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("imports",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("imports");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBeeModelAccess().getImportsImportParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BeeModel_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// (functions+=Function|concern+=Concern|"properties" propertySets+=NamedPropertySet
// )*
protected class BeeModel_Alternatives_1 extends AlternativesToken {

	public BeeModel_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getBeeModelAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BeeModel_FunctionsAssignment_1_0(parent, this, 0, inst);
			case 1: return new BeeModel_ConcernAssignment_1_1(parent, this, 1, inst);
			case 2: return new BeeModel_Group_1_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// functions+=Function
protected class BeeModel_FunctionsAssignment_1_0 extends AssignmentToken  {
	
	public BeeModel_FunctionsAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBeeModelAccess().getFunctionsAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("functions",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("functions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFunctionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBeeModelAccess().getFunctionsFunctionParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BeeModel_Alternatives_1(parent, next, actIndex, consumed);
			case 1: return new BeeModel_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 2, consumed);
		}	
	}	
}

// concern+=Concern
protected class BeeModel_ConcernAssignment_1_1 extends AssignmentToken  {
	
	public BeeModel_ConcernAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBeeModelAccess().getConcernAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Concern_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("concern",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("concern");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConcernRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBeeModelAccess().getConcernConcernParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BeeModel_Alternatives_1(parent, next, actIndex, consumed);
			case 1: return new BeeModel_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 2, consumed);
		}	
	}	
}

// "properties" propertySets+=NamedPropertySet
protected class BeeModel_Group_1_2 extends GroupToken {
	
	public BeeModel_Group_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBeeModelAccess().getGroup_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BeeModel_PropertySetsAssignment_1_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "properties"
protected class BeeModel_PropertiesKeyword_1_2_0 extends KeywordToken  {
	
	public BeeModel_PropertiesKeyword_1_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBeeModelAccess().getPropertiesKeyword_1_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BeeModel_Alternatives_1(parent, this, 0, inst);
			case 1: return new BeeModel_ImportsAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}	
		
}

// propertySets+=NamedPropertySet
protected class BeeModel_PropertySetsAssignment_1_2_1 extends AssignmentToken  {
	
	public BeeModel_PropertySetsAssignment_1_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBeeModelAccess().getPropertySetsAssignment_1_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NamedPropertySet_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("propertySets",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("propertySets");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNamedPropertySetRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBeeModelAccess().getPropertySetsNamedPropertySetParserRuleCall_1_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BeeModel_PropertiesKeyword_1_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// body=Unit?
protected class BeeModel_BodyAssignment_2 extends AssignmentToken  {
	
	public BeeModel_BodyAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBeeModelAccess().getBodyAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("body",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUnitRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBeeModelAccess().getBodyUnitParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BeeModel_Alternatives_1(parent, next, actIndex, consumed);
			case 1: return new BeeModel_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 2, consumed);
		}	
	}	
}


/************ end Rule BeeModel ****************/


/************ begin Rule Import ****************
 *
 * Import returns be::IType:
 *   {be::B3JavaImport} reexport?="reexport"? "import" qualifiedName=QID ("as" name=ID)?
 *   ";"; 
 * 
 *                         
 * 
 * // Wanted later 
 * //Import : (reexport ?='reexport')? 
 * //		'import' importer=(JavaImporter | NativeImporter) ("as" name=ID)? ';' 
 * //	; 
 * 
 * //JavaImporter 	: qualifiedName=QID ;
 * //NativeImporter 	: uriString = STRING ;
 *
 **/

// {be::B3JavaImport} reexport?="reexport"? "import" qualifiedName=QID ("as" name=ID)?
// ";"
protected class Import_Group extends GroupToken {
	
	public Import_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getImportAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_SemicolonKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::B3JavaImport}
protected class Import_B3JavaImportAction_0 extends ActionToken  {

	public Import_B3JavaImportAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getImportAccess().getB3JavaImportAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getImportAccess().getB3JavaImportAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// reexport?="reexport"?
protected class Import_ReexportAssignment_1 extends AssignmentToken  {
	
	public Import_ReexportAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getImportAccess().getReexportAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_B3JavaImportAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("reexport",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("reexport");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getImportAccess().getReexportReexportKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// "import"
protected class Import_ImportKeyword_2 extends KeywordToken  {
	
	public Import_ImportKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getImportAccess().getImportKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_ReexportAssignment_1(parent, this, 0, inst);
			case 1: return new Import_B3JavaImportAction_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// qualifiedName=QID
protected class Import_QualifiedNameAssignment_3 extends AssignmentToken  {
	
	public Import_QualifiedNameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getImportAccess().getQualifiedNameAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_ImportKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("qualifiedName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("qualifiedName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getImportAccess().getQualifiedNameQIDParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ("as" name=ID)?
protected class Import_Group_4 extends GroupToken {
	
	public Import_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getImportAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_NameAssignment_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "as"
protected class Import_AsKeyword_4_0 extends KeywordToken  {
	
	public Import_AsKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getImportAccess().getAsKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_QualifiedNameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=ID
protected class Import_NameAssignment_4_1 extends AssignmentToken  {
	
	public Import_NameAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getImportAccess().getNameAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_AsKeyword_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getImportAccess().getNameIDTerminalRuleCall_4_1_0();
			return obj;
		}
		return null;
	}

}


// ";"
protected class Import_SemicolonKeyword_5 extends KeywordToken  {
	
	public Import_SemicolonKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getImportAccess().getSemicolonKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_Group_4(parent, this, 0, inst);
			case 1: return new Import_QualifiedNameAssignment_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Import ****************/


/************ begin Rule Unit ****************
 *
 * Unit returns BuildUnit hidden ( WS , ML_COMMENT , SL_COMMENT ):
 *   {BuildUnit} documentation=DOCUMENTATION? executionMode=ExecutionMode? "unit" name=
 *   UnitName? ("version" version=Version)? ("implements" implements+=InterfaceName (","
 *   implements+=InterfaceName)*)? "{" ("default" "properties" defaultProperties=
 *   PropertySet)? ("provides" "{" (providedCapabilities+=ProvidedCapability ";")+ "}"|
 *   "provides" providedCapabilities+=ProvidedCapability ";"|"requires" "{" (
 *   requiredCapabilities+=RequiredCapability ";")+ "}"|"requires" requiredCapabilities
 *   +=RequiredCapability ";"|"env" "requires" "{" (metaRequiredCapabilities+=
 *   RequiredCapability ";")+ "}"|"env" "requires" metaRequiredCapabilities+=
 *   RequiredCapability ";"|concerns+=Concern|"sequential" "{" synchronizations+=
 *   Synchronization+ "}"|"sequential" synchronizations+=Synchronization|builders+=
 *   Builder|functions+=Function|"repositories" "{" repositoryConfigurations+=
 *   RepositoryConfiguration* "}"|"properties" propertySets+=NamedPropertySet|
 *   "containers" "{" containers+=ContainerConfiguration* "}")* "}"; 
 * 
 * // Wanted later 
 * //Import : (reexport ?='reexport')? 
 * //		'import' importer=(JavaImporter | NativeImporter) ("as" name=ID)? ';' 
 * //	; 
 * 
 * //JavaImporter 	: qualifiedName=QID ;
 * //NativeImporter 	: uriString = STRING ;
 * 		
 *               
 * 	    
 * 	    
 * 	          
 * 		           
 * 	
 * 			 //-- PROPERTIES
 * 			 // goes first, because they may be used in the other clauses. TODO: can probably be relaxed
 * 			 // since linking will find them anyway.
 * 			 //
 * 			            
 * 		
 * 		 	 //-- PROVIDES
 * 			               
 * 			          
 * 			//-- REQUIRES & META REQUIRES
 * 			               
 * 			          
 * 			                  
 * 			            
 * 			//--CONCERNS
 * 			     
 * 			//--SYNCHRONIZE
 * 			                  
 * 			           
 * 			//--BUILD METHODS & FUNCTIONS
 * 			         			
 * 			        			
 * 			//-- REPOSITORIES
 *
 **/

// {BuildUnit} documentation=DOCUMENTATION? executionMode=ExecutionMode? "unit" name=
// UnitName? ("version" version=Version)? ("implements" implements+=InterfaceName (","
// implements+=InterfaceName)*)? "{" ("default" "properties" defaultProperties=
// PropertySet)? ("provides" "{" (providedCapabilities+=ProvidedCapability ";")+ "}"|
// "provides" providedCapabilities+=ProvidedCapability ";"|"requires" "{" (
// requiredCapabilities+=RequiredCapability ";")+ "}"|"requires" requiredCapabilities
// +=RequiredCapability ";"|"env" "requires" "{" (metaRequiredCapabilities+=
// RequiredCapability ";")+ "}"|"env" "requires" metaRequiredCapabilities+=
// RequiredCapability ";"|concerns+=Concern|"sequential" "{" synchronizations+=
// Synchronization+ "}"|"sequential" synchronizations+=Synchronization|builders+=
// Builder|functions+=Function|"repositories" "{" repositoryConfigurations+=
// RepositoryConfiguration* "}"|"properties" propertySets+=NamedPropertySet|
// "containers" "{" containers+=ContainerConfiguration* "}")* "}"   
// 	    
// 	    
// 	          
// 		           
// 	
// 			 //-- PROPERTIES
// 			 // goes first, because they may be used in the other clauses. TODO: can probably be relaxed
// 			 // since linking will find them anyway.
// 			 //
// 			            
// 		
// 		 	 //-- PROVIDES
// 			               
// 			          
// 			//-- REQUIRES & META REQUIRES
// 			               
// 			          
// 			                  
// 			            
// 			//--CONCERNS
// 			     
// 			//--SYNCHRONIZE
// 			                  
// 			           
// 			//--BUILD METHODS & FUNCTIONS
// 			         			
// 			        			
// 			//-- REPOSITORIES
protected class Unit_Group extends GroupToken {
	
	public Unit_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RightCurlyBracketKeyword_10(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnitRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {BuildUnit}
protected class Unit_BuildUnitAction_0 extends ActionToken  {

	public Unit_BuildUnitAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getUnitAccess().getBuildUnitAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getUnitAccess().getBuildUnitAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// documentation=DOCUMENTATION?
protected class Unit_DocumentationAssignment_1 extends AssignmentToken  {
	
	public Unit_DocumentationAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getDocumentationAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_BuildUnitAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("documentation",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("documentation");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getUnitAccess().getDocumentationDOCUMENTATIONTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// executionMode=ExecutionMode?
protected class Unit_ExecutionModeAssignment_2 extends AssignmentToken  {
	
	public Unit_ExecutionModeAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getExecutionModeAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_DocumentationAssignment_1(parent, this, 0, inst);
			case 1: return new Unit_BuildUnitAction_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("executionMode",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("executionMode");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getUnitAccess().getExecutionModeExecutionModeEnumRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "unit"
protected class Unit_UnitKeyword_3 extends KeywordToken  {
	
	public Unit_UnitKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getUnitKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_ExecutionModeAssignment_2(parent, this, 0, inst);
			case 1: return new Unit_DocumentationAssignment_1(parent, this, 1, inst);
			case 2: return new Unit_BuildUnitAction_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// name=UnitName?
protected class Unit_NameAssignment_4 extends AssignmentToken  {
	
	public Unit_NameAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getNameAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_UnitKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getUnitAccess().getNameUnitNameParserRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// ("version" version=Version)?
protected class Unit_Group_5 extends GroupToken {
	
	public Unit_Group_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_VersionAssignment_5_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "version"
protected class Unit_VersionKeyword_5_0 extends KeywordToken  {
	
	public Unit_VersionKeyword_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getVersionKeyword_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_NameAssignment_4(parent, this, 0, inst);
			case 1: return new Unit_UnitKeyword_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// version=Version
protected class Unit_VersionAssignment_5_1 extends AssignmentToken  {
	
	public Unit_VersionAssignment_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getVersionAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Version_VersionAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("version",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("version");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVersionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getVersionVersionParserRuleCall_5_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_VersionKeyword_5_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("implements" implements+=InterfaceName ("," implements+=InterfaceName)*)?
protected class Unit_Group_6 extends GroupToken {
	
	public Unit_Group_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_6_2(parent, this, 0, inst);
			case 1: return new Unit_ImplementsAssignment_6_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "implements"
protected class Unit_ImplementsKeyword_6_0 extends KeywordToken  {
	
	public Unit_ImplementsKeyword_6_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getImplementsKeyword_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_5(parent, this, 0, inst);
			case 1: return new Unit_NameAssignment_4(parent, this, 1, inst);
			case 2: return new Unit_UnitKeyword_3(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// implements+=InterfaceName
protected class Unit_ImplementsAssignment_6_1 extends AssignmentToken  {
	
	public Unit_ImplementsAssignment_6_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getImplementsAssignment_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_ImplementsKeyword_6_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("implements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("implements");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getUnitAccess().getImplementsInterfaceNameParserRuleCall_6_1_0();
			return obj;
		}
		return null;
	}

}

// ("," implements+=InterfaceName)*
protected class Unit_Group_6_2 extends GroupToken {
	
	public Unit_Group_6_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_6_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_ImplementsAssignment_6_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Unit_CommaKeyword_6_2_0 extends KeywordToken  {
	
	public Unit_CommaKeyword_6_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getCommaKeyword_6_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_6_2(parent, this, 0, inst);
			case 1: return new Unit_ImplementsAssignment_6_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// implements+=InterfaceName
protected class Unit_ImplementsAssignment_6_2_1 extends AssignmentToken  {
	
	public Unit_ImplementsAssignment_6_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getImplementsAssignment_6_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_CommaKeyword_6_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("implements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("implements");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getUnitAccess().getImplementsInterfaceNameParserRuleCall_6_2_1_0();
			return obj;
		}
		return null;
	}

}



// "{"
protected class Unit_LeftCurlyBracketKeyword_7 extends KeywordToken  {
	
	public Unit_LeftCurlyBracketKeyword_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_7();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_6(parent, this, 0, inst);
			case 1: return new Unit_Group_5(parent, this, 1, inst);
			case 2: return new Unit_NameAssignment_4(parent, this, 2, inst);
			case 3: return new Unit_UnitKeyword_3(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}

// ("default" "properties" defaultProperties=PropertySet)?
protected class Unit_Group_8 extends GroupToken {
	
	public Unit_Group_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_8();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_DefaultPropertiesAssignment_8_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "default"
protected class Unit_DefaultKeyword_8_0 extends KeywordToken  {
	
	public Unit_DefaultKeyword_8_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getDefaultKeyword_8_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_LeftCurlyBracketKeyword_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "properties"
protected class Unit_PropertiesKeyword_8_1 extends KeywordToken  {
	
	public Unit_PropertiesKeyword_8_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getPropertiesKeyword_8_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_DefaultKeyword_8_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// defaultProperties=PropertySet
protected class Unit_DefaultPropertiesAssignment_8_2 extends AssignmentToken  {
	
	public Unit_DefaultPropertiesAssignment_8_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getDefaultPropertiesAssignment_8_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertySet_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("defaultProperties",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("defaultProperties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertySetRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getDefaultPropertiesPropertySetParserRuleCall_8_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_PropertiesKeyword_8_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("provides" "{" (providedCapabilities+=ProvidedCapability ";")+ "}"|"provides"
// providedCapabilities+=ProvidedCapability ";"|"requires" "{" (requiredCapabilities+=
// RequiredCapability ";")+ "}"|"requires" requiredCapabilities+=RequiredCapability ";"
// |"env" "requires" "{" (metaRequiredCapabilities+=RequiredCapability ";")+ "}"|"env"
// "requires" metaRequiredCapabilities+=RequiredCapability ";"|concerns+=Concern|
// "sequential" "{" synchronizations+=Synchronization+ "}"|"sequential"
// synchronizations+=Synchronization|builders+=Builder|functions+=Function|
// "repositories" "{" repositoryConfigurations+=RepositoryConfiguration* "}"|
// "properties" propertySets+=NamedPropertySet|"containers" "{" containers+=
// ContainerConfiguration* "}")* 
// 		 	 //-- PROVIDES
// 			               
// 			          
// 			//-- REQUIRES & META REQUIRES
// 			               
// 			          
// 			                  
// 			            
// 			//--CONCERNS
// 			     
// 			//--SYNCHRONIZE
// 			                  
// 			           
// 			//--BUILD METHODS & FUNCTIONS
// 			         			
// 			        			
// 			//-- REPOSITORIES
protected class Unit_Alternatives_9 extends AlternativesToken {

	public Unit_Alternatives_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getUnitAccess().getAlternatives_9();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_9_0(parent, this, 0, inst);
			case 1: return new Unit_Group_9_1(parent, this, 1, inst);
			case 2: return new Unit_Group_9_2(parent, this, 2, inst);
			case 3: return new Unit_Group_9_3(parent, this, 3, inst);
			case 4: return new Unit_Group_9_4(parent, this, 4, inst);
			case 5: return new Unit_Group_9_5(parent, this, 5, inst);
			case 6: return new Unit_ConcernsAssignment_9_6(parent, this, 6, inst);
			case 7: return new Unit_Group_9_7(parent, this, 7, inst);
			case 8: return new Unit_Group_9_8(parent, this, 8, inst);
			case 9: return new Unit_BuildersAssignment_9_9(parent, this, 9, inst);
			case 10: return new Unit_FunctionsAssignment_9_10(parent, this, 10, inst);
			case 11: return new Unit_Group_9_11(parent, this, 11, inst);
			case 12: return new Unit_Group_9_12(parent, this, 12, inst);
			case 13: return new Unit_Group_9_13(parent, this, 13, inst);
			default: return null;
		}	
	}	
		
}

// "provides" "{" (providedCapabilities+=ProvidedCapability ";")+ "}"
protected class Unit_Group_9_0 extends GroupToken {
	
	public Unit_Group_9_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_9_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RightCurlyBracketKeyword_9_0_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "provides"
protected class Unit_ProvidesKeyword_9_0_0 extends KeywordToken  {
	
	public Unit_ProvidesKeyword_9_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getProvidesKeyword_9_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_9(parent, this, 0, inst);
			case 1: return new Unit_Group_8(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_7(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Unit_LeftCurlyBracketKeyword_9_0_1 extends KeywordToken  {
	
	public Unit_LeftCurlyBracketKeyword_9_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_9_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_ProvidesKeyword_9_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (providedCapabilities+=ProvidedCapability ";")+
protected class Unit_Group_9_0_2 extends GroupToken {
	
	public Unit_Group_9_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_9_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SemicolonKeyword_9_0_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// providedCapabilities+=ProvidedCapability
protected class Unit_ProvidedCapabilitiesAssignment_9_0_2_0 extends AssignmentToken  {
	
	public Unit_ProvidedCapabilitiesAssignment_9_0_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getProvidedCapabilitiesAssignment_9_0_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("providedCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("providedCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProvidedCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_9_0_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_Group_9_0_2(parent, next, actIndex, consumed);
			case 1: return new Unit_LeftCurlyBracketKeyword_9_0_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Unit_SemicolonKeyword_9_0_2_1 extends KeywordToken  {
	
	public Unit_SemicolonKeyword_9_0_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSemicolonKeyword_9_0_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_ProvidedCapabilitiesAssignment_9_0_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "}"
protected class Unit_RightCurlyBracketKeyword_9_0_3 extends KeywordToken  {
	
	public Unit_RightCurlyBracketKeyword_9_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_9_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_9_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "provides" providedCapabilities+=ProvidedCapability ";"
protected class Unit_Group_9_1 extends GroupToken {
	
	public Unit_Group_9_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_9_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SemicolonKeyword_9_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "provides"
protected class Unit_ProvidesKeyword_9_1_0 extends KeywordToken  {
	
	public Unit_ProvidesKeyword_9_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getProvidesKeyword_9_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_9(parent, this, 0, inst);
			case 1: return new Unit_Group_8(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_7(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// providedCapabilities+=ProvidedCapability
protected class Unit_ProvidedCapabilitiesAssignment_9_1_1 extends AssignmentToken  {
	
	public Unit_ProvidedCapabilitiesAssignment_9_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getProvidedCapabilitiesAssignment_9_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("providedCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("providedCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProvidedCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_9_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_ProvidesKeyword_9_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Unit_SemicolonKeyword_9_1_2 extends KeywordToken  {
	
	public Unit_SemicolonKeyword_9_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSemicolonKeyword_9_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_ProvidedCapabilitiesAssignment_9_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "requires" "{" (requiredCapabilities+=RequiredCapability ";")+ "}"
protected class Unit_Group_9_2 extends GroupToken {
	
	public Unit_Group_9_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_9_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RightCurlyBracketKeyword_9_2_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "requires"
protected class Unit_RequiresKeyword_9_2_0 extends KeywordToken  {
	
	public Unit_RequiresKeyword_9_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRequiresKeyword_9_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_9(parent, this, 0, inst);
			case 1: return new Unit_Group_8(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_7(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Unit_LeftCurlyBracketKeyword_9_2_1 extends KeywordToken  {
	
	public Unit_LeftCurlyBracketKeyword_9_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_9_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RequiresKeyword_9_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (requiredCapabilities+=RequiredCapability ";")+
protected class Unit_Group_9_2_2 extends GroupToken {
	
	public Unit_Group_9_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_9_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SemicolonKeyword_9_2_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// requiredCapabilities+=RequiredCapability
protected class Unit_RequiredCapabilitiesAssignment_9_2_2_0 extends AssignmentToken  {
	
	public Unit_RequiredCapabilitiesAssignment_9_2_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getRequiredCapabilitiesAssignment_9_2_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("requiredCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("requiredCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRequiredCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getRequiredCapabilitiesRequiredCapabilityParserRuleCall_9_2_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_Group_9_2_2(parent, next, actIndex, consumed);
			case 1: return new Unit_LeftCurlyBracketKeyword_9_2_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Unit_SemicolonKeyword_9_2_2_1 extends KeywordToken  {
	
	public Unit_SemicolonKeyword_9_2_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSemicolonKeyword_9_2_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RequiredCapabilitiesAssignment_9_2_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "}"
protected class Unit_RightCurlyBracketKeyword_9_2_3 extends KeywordToken  {
	
	public Unit_RightCurlyBracketKeyword_9_2_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_9_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_9_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "requires" requiredCapabilities+=RequiredCapability ";"
protected class Unit_Group_9_3 extends GroupToken {
	
	public Unit_Group_9_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_9_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SemicolonKeyword_9_3_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "requires"
protected class Unit_RequiresKeyword_9_3_0 extends KeywordToken  {
	
	public Unit_RequiresKeyword_9_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRequiresKeyword_9_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_9(parent, this, 0, inst);
			case 1: return new Unit_Group_8(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_7(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// requiredCapabilities+=RequiredCapability
protected class Unit_RequiredCapabilitiesAssignment_9_3_1 extends AssignmentToken  {
	
	public Unit_RequiredCapabilitiesAssignment_9_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getRequiredCapabilitiesAssignment_9_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("requiredCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("requiredCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRequiredCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getRequiredCapabilitiesRequiredCapabilityParserRuleCall_9_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_RequiresKeyword_9_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Unit_SemicolonKeyword_9_3_2 extends KeywordToken  {
	
	public Unit_SemicolonKeyword_9_3_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSemicolonKeyword_9_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RequiredCapabilitiesAssignment_9_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "env" "requires" "{" (metaRequiredCapabilities+=RequiredCapability ";")+ "}"
protected class Unit_Group_9_4 extends GroupToken {
	
	public Unit_Group_9_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_9_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RightCurlyBracketKeyword_9_4_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "env"
protected class Unit_EnvKeyword_9_4_0 extends KeywordToken  {
	
	public Unit_EnvKeyword_9_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getEnvKeyword_9_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_9(parent, this, 0, inst);
			case 1: return new Unit_Group_8(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_7(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "requires"
protected class Unit_RequiresKeyword_9_4_1 extends KeywordToken  {
	
	public Unit_RequiresKeyword_9_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRequiresKeyword_9_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_EnvKeyword_9_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Unit_LeftCurlyBracketKeyword_9_4_2 extends KeywordToken  {
	
	public Unit_LeftCurlyBracketKeyword_9_4_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_9_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RequiresKeyword_9_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (metaRequiredCapabilities+=RequiredCapability ";")+
protected class Unit_Group_9_4_3 extends GroupToken {
	
	public Unit_Group_9_4_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_9_4_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SemicolonKeyword_9_4_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// metaRequiredCapabilities+=RequiredCapability
protected class Unit_MetaRequiredCapabilitiesAssignment_9_4_3_0 extends AssignmentToken  {
	
	public Unit_MetaRequiredCapabilitiesAssignment_9_4_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getMetaRequiredCapabilitiesAssignment_9_4_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("metaRequiredCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("metaRequiredCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRequiredCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getMetaRequiredCapabilitiesRequiredCapabilityParserRuleCall_9_4_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_Group_9_4_3(parent, next, actIndex, consumed);
			case 1: return new Unit_LeftCurlyBracketKeyword_9_4_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Unit_SemicolonKeyword_9_4_3_1 extends KeywordToken  {
	
	public Unit_SemicolonKeyword_9_4_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSemicolonKeyword_9_4_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_MetaRequiredCapabilitiesAssignment_9_4_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "}"
protected class Unit_RightCurlyBracketKeyword_9_4_4 extends KeywordToken  {
	
	public Unit_RightCurlyBracketKeyword_9_4_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_9_4_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Group_9_4_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "env" "requires" metaRequiredCapabilities+=RequiredCapability ";"
protected class Unit_Group_9_5 extends GroupToken {
	
	public Unit_Group_9_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_9_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SemicolonKeyword_9_5_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "env"
protected class Unit_EnvKeyword_9_5_0 extends KeywordToken  {
	
	public Unit_EnvKeyword_9_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getEnvKeyword_9_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_9(parent, this, 0, inst);
			case 1: return new Unit_Group_8(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_7(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "requires"
protected class Unit_RequiresKeyword_9_5_1 extends KeywordToken  {
	
	public Unit_RequiresKeyword_9_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRequiresKeyword_9_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_EnvKeyword_9_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// metaRequiredCapabilities+=RequiredCapability
protected class Unit_MetaRequiredCapabilitiesAssignment_9_5_2 extends AssignmentToken  {
	
	public Unit_MetaRequiredCapabilitiesAssignment_9_5_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getMetaRequiredCapabilitiesAssignment_9_5_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("metaRequiredCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("metaRequiredCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRequiredCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getMetaRequiredCapabilitiesRequiredCapabilityParserRuleCall_9_5_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_RequiresKeyword_9_5_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Unit_SemicolonKeyword_9_5_3 extends KeywordToken  {
	
	public Unit_SemicolonKeyword_9_5_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSemicolonKeyword_9_5_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_MetaRequiredCapabilitiesAssignment_9_5_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// concerns+=Concern
protected class Unit_ConcernsAssignment_9_6 extends AssignmentToken  {
	
	public Unit_ConcernsAssignment_9_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getConcernsAssignment_9_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Concern_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("concerns",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("concerns");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConcernRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getConcernsConcernParserRuleCall_9_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_Alternatives_9(parent, next, actIndex, consumed);
			case 1: return new Unit_Group_8(parent, next, actIndex, consumed);
			case 2: return new Unit_LeftCurlyBracketKeyword_7(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "sequential" "{" synchronizations+=Synchronization+ "}"
protected class Unit_Group_9_7 extends GroupToken {
	
	public Unit_Group_9_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_9_7();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RightCurlyBracketKeyword_9_7_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "sequential"
protected class Unit_SequentialKeyword_9_7_0 extends KeywordToken  {
	
	public Unit_SequentialKeyword_9_7_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSequentialKeyword_9_7_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_9(parent, this, 0, inst);
			case 1: return new Unit_Group_8(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_7(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Unit_LeftCurlyBracketKeyword_9_7_1 extends KeywordToken  {
	
	public Unit_LeftCurlyBracketKeyword_9_7_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_9_7_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SequentialKeyword_9_7_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// synchronizations+=Synchronization+
protected class Unit_SynchronizationsAssignment_9_7_2 extends AssignmentToken  {
	
	public Unit_SynchronizationsAssignment_9_7_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getSynchronizationsAssignment_9_7_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("synchronizations",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("synchronizations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSynchronizationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getSynchronizationsSynchronizationParserRuleCall_9_7_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_SynchronizationsAssignment_9_7_2(parent, next, actIndex, consumed);
			case 1: return new Unit_LeftCurlyBracketKeyword_9_7_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Unit_RightCurlyBracketKeyword_9_7_3 extends KeywordToken  {
	
	public Unit_RightCurlyBracketKeyword_9_7_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_9_7_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SynchronizationsAssignment_9_7_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "sequential" synchronizations+=Synchronization
protected class Unit_Group_9_8 extends GroupToken {
	
	public Unit_Group_9_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_9_8();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_SynchronizationsAssignment_9_8_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "sequential"
protected class Unit_SequentialKeyword_9_8_0 extends KeywordToken  {
	
	public Unit_SequentialKeyword_9_8_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getSequentialKeyword_9_8_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_9(parent, this, 0, inst);
			case 1: return new Unit_Group_8(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_7(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// synchronizations+=Synchronization
protected class Unit_SynchronizationsAssignment_9_8_1 extends AssignmentToken  {
	
	public Unit_SynchronizationsAssignment_9_8_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getSynchronizationsAssignment_9_8_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("synchronizations",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("synchronizations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSynchronizationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getSynchronizationsSynchronizationParserRuleCall_9_8_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_SequentialKeyword_9_8_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// builders+=Builder
protected class Unit_BuildersAssignment_9_9 extends AssignmentToken  {
	
	public Unit_BuildersAssignment_9_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getBuildersAssignment_9_9();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("builders",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("builders");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBuilderRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getBuildersBuilderParserRuleCall_9_9_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_Alternatives_9(parent, next, actIndex, consumed);
			case 1: return new Unit_Group_8(parent, next, actIndex, consumed);
			case 2: return new Unit_LeftCurlyBracketKeyword_7(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// functions+=Function
protected class Unit_FunctionsAssignment_9_10 extends AssignmentToken  {
	
	public Unit_FunctionsAssignment_9_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getFunctionsAssignment_9_10();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("functions",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("functions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFunctionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getFunctionsFunctionParserRuleCall_9_10_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_Alternatives_9(parent, next, actIndex, consumed);
			case 1: return new Unit_Group_8(parent, next, actIndex, consumed);
			case 2: return new Unit_LeftCurlyBracketKeyword_7(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "repositories" "{" repositoryConfigurations+=RepositoryConfiguration* "}"
protected class Unit_Group_9_11 extends GroupToken {
	
	public Unit_Group_9_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_9_11();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RightCurlyBracketKeyword_9_11_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "repositories"
protected class Unit_RepositoriesKeyword_9_11_0 extends KeywordToken  {
	
	public Unit_RepositoriesKeyword_9_11_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRepositoriesKeyword_9_11_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_9(parent, this, 0, inst);
			case 1: return new Unit_Group_8(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_7(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Unit_LeftCurlyBracketKeyword_9_11_1 extends KeywordToken  {
	
	public Unit_LeftCurlyBracketKeyword_9_11_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_9_11_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RepositoriesKeyword_9_11_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// repositoryConfigurations+=RepositoryConfiguration*
protected class Unit_RepositoryConfigurationsAssignment_9_11_2 extends AssignmentToken  {
	
	public Unit_RepositoryConfigurationsAssignment_9_11_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getRepositoryConfigurationsAssignment_9_11_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryConfiguration_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("repositoryConfigurations",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("repositoryConfigurations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRepositoryConfigurationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getRepositoryConfigurationsRepositoryConfigurationParserRuleCall_9_11_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_RepositoryConfigurationsAssignment_9_11_2(parent, next, actIndex, consumed);
			case 1: return new Unit_LeftCurlyBracketKeyword_9_11_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Unit_RightCurlyBracketKeyword_9_11_3 extends KeywordToken  {
	
	public Unit_RightCurlyBracketKeyword_9_11_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_9_11_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RepositoryConfigurationsAssignment_9_11_2(parent, this, 0, inst);
			case 1: return new Unit_LeftCurlyBracketKeyword_9_11_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// "properties" propertySets+=NamedPropertySet
protected class Unit_Group_9_12 extends GroupToken {
	
	public Unit_Group_9_12(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_9_12();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_PropertySetsAssignment_9_12_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "properties"
protected class Unit_PropertiesKeyword_9_12_0 extends KeywordToken  {
	
	public Unit_PropertiesKeyword_9_12_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getPropertiesKeyword_9_12_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_9(parent, this, 0, inst);
			case 1: return new Unit_Group_8(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_7(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// propertySets+=NamedPropertySet
protected class Unit_PropertySetsAssignment_9_12_1 extends AssignmentToken  {
	
	public Unit_PropertySetsAssignment_9_12_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getPropertySetsAssignment_9_12_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NamedPropertySet_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("propertySets",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("propertySets");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNamedPropertySetRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getPropertySetsNamedPropertySetParserRuleCall_9_12_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_PropertiesKeyword_9_12_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "containers" "{" containers+=ContainerConfiguration* "}"
protected class Unit_Group_9_13 extends GroupToken {
	
	public Unit_Group_9_13(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnitAccess().getGroup_9_13();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_RightCurlyBracketKeyword_9_13_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "containers"
protected class Unit_ContainersKeyword_9_13_0 extends KeywordToken  {
	
	public Unit_ContainersKeyword_9_13_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getContainersKeyword_9_13_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_9(parent, this, 0, inst);
			case 1: return new Unit_Group_8(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_7(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Unit_LeftCurlyBracketKeyword_9_13_1 extends KeywordToken  {
	
	public Unit_LeftCurlyBracketKeyword_9_13_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_9_13_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_ContainersKeyword_9_13_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// containers+=ContainerConfiguration*
protected class Unit_ContainersAssignment_9_13_2 extends AssignmentToken  {
	
	public Unit_ContainersAssignment_9_13_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitAccess().getContainersAssignment_9_13_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContainerConfiguration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("containers",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("containers");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getContainerConfigurationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitAccess().getContainersContainerConfigurationParserRuleCall_9_13_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unit_ContainersAssignment_9_13_2(parent, next, actIndex, consumed);
			case 1: return new Unit_LeftCurlyBracketKeyword_9_13_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Unit_RightCurlyBracketKeyword_9_13_3 extends KeywordToken  {
	
	public Unit_RightCurlyBracketKeyword_9_13_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_9_13_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_ContainersAssignment_9_13_2(parent, this, 0, inst);
			case 1: return new Unit_LeftCurlyBracketKeyword_9_13_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



// "}"
protected class Unit_RightCurlyBracketKeyword_10 extends KeywordToken  {
	
	public Unit_RightCurlyBracketKeyword_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_10();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Unit_Alternatives_9(parent, this, 0, inst);
			case 1: return new Unit_Group_8(parent, this, 1, inst);
			case 2: return new Unit_LeftCurlyBracketKeyword_7(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Unit ****************/


/************ begin Rule ProvidedCapability ****************
 *
 * ProvidedCapability:
 *   capability=FilteredCapability ("/" version=Version)?;
 *
 **/

// capability=FilteredCapability ("/" version=Version)?
protected class ProvidedCapability_Group extends GroupToken {
	
	public ProvidedCapability_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group_1(parent, this, 0, inst);
			case 1: return new ProvidedCapability_CapabilityAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getProvidedCapabilityRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// capability=FilteredCapability
protected class ProvidedCapability_CapabilityAssignment_0 extends AssignmentToken  {
	
	public ProvidedCapability_CapabilityAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getCapabilityAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FilteredCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("capability",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("capability");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFilteredCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getProvidedCapabilityAccess().getCapabilityFilteredCapabilityParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// ("/" version=Version)?
protected class ProvidedCapability_Group_1 extends GroupToken {
	
	public ProvidedCapability_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_VersionAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "/"
protected class ProvidedCapability_SolidusKeyword_1_0 extends KeywordToken  {
	
	public ProvidedCapability_SolidusKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getSolidusKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_CapabilityAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// version=Version
protected class ProvidedCapability_VersionAssignment_1_1 extends AssignmentToken  {
	
	public ProvidedCapability_VersionAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProvidedCapabilityAccess().getVersionAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Version_VersionAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("version",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("version");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVersionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getProvidedCapabilityAccess().getVersionVersionParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProvidedCapability_SolidusKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ProvidedCapability ****************/


/************ begin Rule RequiredCapability ****************
 *
 * RequiredCapability:
 *   capability=FilteredCapability ("/" range=VersionRange)?;
 *
 **/

// capability=FilteredCapability ("/" range=VersionRange)?
protected class RequiredCapability_Group extends GroupToken {
	
	public RequiredCapability_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_Group_1(parent, this, 0, inst);
			case 1: return new RequiredCapability_CapabilityAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRequiredCapabilityRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// capability=FilteredCapability
protected class RequiredCapability_CapabilityAssignment_0 extends AssignmentToken  {
	
	public RequiredCapability_CapabilityAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getCapabilityAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FilteredCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("capability",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("capability");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFilteredCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRequiredCapabilityAccess().getCapabilityFilteredCapabilityParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// ("/" range=VersionRange)?
protected class RequiredCapability_Group_1 extends GroupToken {
	
	public RequiredCapability_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_RangeAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "/"
protected class RequiredCapability_SolidusKeyword_1_0 extends KeywordToken  {
	
	public RequiredCapability_SolidusKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getSolidusKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RequiredCapability_CapabilityAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// range=VersionRange
protected class RequiredCapability_RangeAssignment_1_1 extends AssignmentToken  {
	
	public RequiredCapability_RangeAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRequiredCapabilityAccess().getRangeAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VersionRange_RangeAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("range",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("range");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVersionRangeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRequiredCapabilityAccess().getRangeVersionRangeParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RequiredCapability_SolidusKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule RequiredCapability ****************/


/************ begin Rule FilteredCapability ****************
 *
 * FilteredCapability:
 *   ("when" filter=Filter)? capability=Capability;
 *
 **/

// ("when" filter=Filter)? capability=Capability
protected class FilteredCapability_Group extends GroupToken {
	
	public FilteredCapability_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFilteredCapabilityAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FilteredCapability_CapabilityAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFilteredCapabilityRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ("when" filter=Filter)?
protected class FilteredCapability_Group_0 extends GroupToken {
	
	public FilteredCapability_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFilteredCapabilityAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FilteredCapability_FilterAssignment_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "when"
protected class FilteredCapability_WhenKeyword_0_0 extends KeywordToken  {
	
	public FilteredCapability_WhenKeyword_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFilteredCapabilityAccess().getWhenKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// filter=Filter
protected class FilteredCapability_FilterAssignment_0_1 extends AssignmentToken  {
	
	public FilteredCapability_FilterAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFilteredCapabilityAccess().getFilterAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Filter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("filter",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("filter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFilterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFilteredCapabilityAccess().getFilterFilterParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FilteredCapability_WhenKeyword_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// capability=Capability
protected class FilteredCapability_CapabilityAssignment_1 extends AssignmentToken  {
	
	public FilteredCapability_CapabilityAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFilteredCapabilityAccess().getCapabilityAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Capability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("capability",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("capability");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFilteredCapabilityAccess().getCapabilityCapabilityParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FilteredCapability_Group_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}


/************ end Rule FilteredCapability ****************/


/************ begin Rule Capability ****************
 *
 * Capability:
 *   interface=InterfaceName "/" name=UnitName; 
 *           
 * 
 * // An optionally named sequence of property statements
 *
 **/

// interface=InterfaceName "/" name=UnitName
protected class Capability_Group extends GroupToken {
	
	public Capability_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCapabilityAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Capability_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCapabilityRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// interface=InterfaceName
protected class Capability_InterfaceAssignment_0 extends AssignmentToken  {
	
	public Capability_InterfaceAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCapabilityAccess().getInterfaceAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("interface",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("interface");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getCapabilityAccess().getInterfaceInterfaceNameParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "/"
protected class Capability_SolidusKeyword_1 extends KeywordToken  {
	
	public Capability_SolidusKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCapabilityAccess().getSolidusKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Capability_InterfaceAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=UnitName
protected class Capability_NameAssignment_2 extends AssignmentToken  {
	
	public Capability_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCapabilityAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Capability_SolidusKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getCapabilityAccess().getNameUnitNameParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Capability ****************/


/************ begin Rule NamedPropertySet ****************
 *
 * NamedPropertySet returns be::BNamedPropertySet:
 *   {be::BNamedPropertySet} name=ID ("extends" extends=[be::BNamedPropertySet|QIDREF])?
 *   "{" operations+=PropertyOperation* "}"; 
 * 
 * // An optionally named sequence of property statements
 *     
 * 	                
 * 	           
 * 	
 * 
 * // Sequence of possibly filtered property statements
 *
 **/

// {be::BNamedPropertySet} name=ID ("extends" extends=[be::BNamedPropertySet|QIDREF])?
// "{" operations+=PropertyOperation* "}"
protected class NamedPropertySet_Group extends GroupToken {
	
	public NamedPropertySet_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNamedPropertySetAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NamedPropertySet_RightCurlyBracketKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getNamedPropertySetRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BNamedPropertySet}
protected class NamedPropertySet_BNamedPropertySetAction_0 extends ActionToken  {

	public NamedPropertySet_BNamedPropertySetAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getNamedPropertySetAccess().getBNamedPropertySetAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getNamedPropertySetAccess().getBNamedPropertySetAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// name=ID
protected class NamedPropertySet_NameAssignment_1 extends AssignmentToken  {
	
	public NamedPropertySet_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNamedPropertySetAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NamedPropertySet_BNamedPropertySetAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getNamedPropertySetAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("extends" extends=[be::BNamedPropertySet|QIDREF])?
protected class NamedPropertySet_Group_2 extends GroupToken {
	
	public NamedPropertySet_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNamedPropertySetAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NamedPropertySet_ExtendsAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "extends"
protected class NamedPropertySet_ExtendsKeyword_2_0 extends KeywordToken  {
	
	public NamedPropertySet_ExtendsKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNamedPropertySetAccess().getExtendsKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NamedPropertySet_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// extends=[be::BNamedPropertySet|QIDREF]
protected class NamedPropertySet_ExtendsAssignment_2_1 extends AssignmentToken  {
	
	public NamedPropertySet_ExtendsAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNamedPropertySetAccess().getExtendsAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NamedPropertySet_ExtendsKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("extends",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("extends");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNamedPropertySetAccess().getExtendsBNamedPropertySetCrossReference_2_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getNamedPropertySetAccess().getExtendsBNamedPropertySetCrossReference_2_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// "{"
protected class NamedPropertySet_LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public NamedPropertySet_LeftCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNamedPropertySetAccess().getLeftCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NamedPropertySet_Group_2(parent, this, 0, inst);
			case 1: return new NamedPropertySet_NameAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// operations+=PropertyOperation*
protected class NamedPropertySet_OperationsAssignment_4 extends AssignmentToken  {
	
	public NamedPropertySet_OperationsAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNamedPropertySetAccess().getOperationsAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyOperation_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("operations",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("operations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyOperationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getNamedPropertySetAccess().getOperationsPropertyOperationParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NamedPropertySet_OperationsAssignment_4(parent, next, actIndex, consumed);
			case 1: return new NamedPropertySet_LeftCurlyBracketKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class NamedPropertySet_RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public NamedPropertySet_RightCurlyBracketKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNamedPropertySetAccess().getRightCurlyBracketKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NamedPropertySet_OperationsAssignment_4(parent, this, 0, inst);
			case 1: return new NamedPropertySet_LeftCurlyBracketKeyword_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule NamedPropertySet ****************/


/************ begin Rule PropertySet ****************
 *
 * PropertySet returns be::BPropertySet:
 *   {be::BPropertySet} ("extends" extends=[be::BNamedPropertySet|QIDREF])? "{"
 *   operations+=PropertyOperation* "}"; 
 * 
 * // Sequence of possibly filtered property statements	
 *     
 * 	            
 * 		           
 * 	
 * 
 * // For model generation, to get supertype correct
 *
 **/

// {be::BPropertySet} ("extends" extends=[be::BNamedPropertySet|QIDREF])? "{"
// operations+=PropertyOperation* "}"
protected class PropertySet_Group extends GroupToken {
	
	public PropertySet_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPropertySetAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertySet_RightCurlyBracketKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPropertySetRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BPropertySet}
protected class PropertySet_BPropertySetAction_0 extends ActionToken  {

	public PropertySet_BPropertySetAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getPropertySetAccess().getBPropertySetAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getPropertySetAccess().getBPropertySetAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// ("extends" extends=[be::BNamedPropertySet|QIDREF])?
protected class PropertySet_Group_1 extends GroupToken {
	
	public PropertySet_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPropertySetAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertySet_ExtendsAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "extends"
protected class PropertySet_ExtendsKeyword_1_0 extends KeywordToken  {
	
	public PropertySet_ExtendsKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPropertySetAccess().getExtendsKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertySet_BPropertySetAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// extends=[be::BNamedPropertySet|QIDREF]
protected class PropertySet_ExtendsAssignment_1_1 extends AssignmentToken  {
	
	public PropertySet_ExtendsAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertySetAccess().getExtendsAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertySet_ExtendsKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("extends",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("extends");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertySetAccess().getExtendsBNamedPropertySetCrossReference_1_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getPropertySetAccess().getExtendsBNamedPropertySetCrossReference_1_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// "{"
protected class PropertySet_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public PropertySet_LeftCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPropertySetAccess().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertySet_Group_1(parent, this, 0, inst);
			case 1: return new PropertySet_BPropertySetAction_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// operations+=PropertyOperation*
protected class PropertySet_OperationsAssignment_3 extends AssignmentToken  {
	
	public PropertySet_OperationsAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertySetAccess().getOperationsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyOperation_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("operations",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("operations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyOperationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPropertySetAccess().getOperationsPropertyOperationParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PropertySet_OperationsAssignment_3(parent, next, actIndex, consumed);
			case 1: return new PropertySet_LeftCurlyBracketKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class PropertySet_RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public PropertySet_RightCurlyBracketKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPropertySetAccess().getRightCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertySet_OperationsAssignment_3(parent, this, 0, inst);
			case 1: return new PropertySet_LeftCurlyBracketKeyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule PropertySet ****************/


/************ begin Rule PropertyOperation ****************
 *
 * PropertyOperation returns be::BPropertyOperation:
 *   ConditionalPropertyOperation|PropertyDefinitionOperation|PropertySetOperation; 
 * 
 * // For model generation, to get supertype correct
 *
 **/

// ConditionalPropertyOperation|PropertyDefinitionOperation|PropertySetOperation 
// 
// // For model generation, to get supertype correct
protected class PropertyOperation_Alternatives extends AlternativesToken {

	public PropertyOperation_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPropertyOperationAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyOperation_ConditionalPropertyOperationParserRuleCall_0(parent, this, 0, inst);
			case 1: return new PropertyOperation_PropertyDefinitionOperationParserRuleCall_1(parent, this, 1, inst);
			case 2: return new PropertyOperation_PropertySetOperationParserRuleCall_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPropertyOperationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ConditionalPropertyOperation
protected class PropertyOperation_ConditionalPropertyOperationParserRuleCall_0 extends RuleCallToken {
	
	public PropertyOperation_ConditionalPropertyOperationParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPropertyOperationAccess().getConditionalPropertyOperationParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConditionalPropertyOperation_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ConditionalPropertyOperation_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getConditionalPropertyOperationRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// PropertyDefinitionOperation
protected class PropertyOperation_PropertyDefinitionOperationParserRuleCall_1 extends RuleCallToken {
	
	public PropertyOperation_PropertyDefinitionOperationParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPropertyOperationAccess().getPropertyDefinitionOperationParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyDefinitionOperation_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(PropertyDefinitionOperation_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPropertyDefinitionOperationRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// PropertySetOperation
protected class PropertyOperation_PropertySetOperationParserRuleCall_2 extends RuleCallToken {
	
	public PropertyOperation_PropertySetOperationParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPropertyOperationAccess().getPropertySetOperationParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertySetOperation_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(PropertySetOperation_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPropertySetOperationRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule PropertyOperation ****************/


/************ begin Rule ConditionalPropertyOperation ****************
 *
 * ConditionalPropertyOperation returns be::BPropertyOperation:
 *   {be::BConditionalPropertyOperation} "when" "(" condExpr=Expression ")" (body=
 *   PropertyDefinitionOperation|body=PropertySetOperation);
 *
 **/

// {be::BConditionalPropertyOperation} "when" "(" condExpr=Expression ")" (body=
// PropertyDefinitionOperation|body=PropertySetOperation)
protected class ConditionalPropertyOperation_Group extends GroupToken {
	
	public ConditionalPropertyOperation_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConditionalPropertyOperationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConditionalPropertyOperation_Alternatives_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getConditionalPropertyOperationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BConditionalPropertyOperation}
protected class ConditionalPropertyOperation_BConditionalPropertyOperationAction_0 extends ActionToken  {

	public ConditionalPropertyOperation_BConditionalPropertyOperationAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getConditionalPropertyOperationAccess().getBConditionalPropertyOperationAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getConditionalPropertyOperationAccess().getBConditionalPropertyOperationAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "when"
protected class ConditionalPropertyOperation_WhenKeyword_1 extends KeywordToken  {
	
	public ConditionalPropertyOperation_WhenKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConditionalPropertyOperationAccess().getWhenKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConditionalPropertyOperation_BConditionalPropertyOperationAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class ConditionalPropertyOperation_LeftParenthesisKeyword_2 extends KeywordToken  {
	
	public ConditionalPropertyOperation_LeftParenthesisKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConditionalPropertyOperationAccess().getLeftParenthesisKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConditionalPropertyOperation_WhenKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// condExpr=Expression
protected class ConditionalPropertyOperation_CondExprAssignment_3 extends AssignmentToken  {
	
	public ConditionalPropertyOperation_CondExprAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConditionalPropertyOperationAccess().getCondExprAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("condExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("condExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getConditionalPropertyOperationAccess().getCondExprExpressionParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ConditionalPropertyOperation_LeftParenthesisKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class ConditionalPropertyOperation_RightParenthesisKeyword_4 extends KeywordToken  {
	
	public ConditionalPropertyOperation_RightParenthesisKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConditionalPropertyOperationAccess().getRightParenthesisKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConditionalPropertyOperation_CondExprAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// body=PropertyDefinitionOperation|body=PropertySetOperation
protected class ConditionalPropertyOperation_Alternatives_5 extends AlternativesToken {

	public ConditionalPropertyOperation_Alternatives_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getConditionalPropertyOperationAccess().getAlternatives_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConditionalPropertyOperation_BodyAssignment_5_0(parent, this, 0, inst);
			case 1: return new ConditionalPropertyOperation_BodyAssignment_5_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// body=PropertyDefinitionOperation
protected class ConditionalPropertyOperation_BodyAssignment_5_0 extends AssignmentToken  {
	
	public ConditionalPropertyOperation_BodyAssignment_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConditionalPropertyOperationAccess().getBodyAssignment_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyDefinitionOperation_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("body",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyDefinitionOperationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getConditionalPropertyOperationAccess().getBodyPropertyDefinitionOperationParserRuleCall_5_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ConditionalPropertyOperation_RightParenthesisKeyword_4(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// body=PropertySetOperation
protected class ConditionalPropertyOperation_BodyAssignment_5_1 extends AssignmentToken  {
	
	public ConditionalPropertyOperation_BodyAssignment_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConditionalPropertyOperationAccess().getBodyAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertySetOperation_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("body",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertySetOperationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getConditionalPropertyOperationAccess().getBodyPropertySetOperationParserRuleCall_5_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ConditionalPropertyOperation_RightParenthesisKeyword_4(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ConditionalPropertyOperation ****************/


/************ begin Rule PropertyDefinitionOperation ****************
 *
 * PropertyDefinitionOperation returns be::BPropertyOperation:
 *   {be::BPropertyDefinitionOperation} (definition=PropertyValDeclaration|definition=
 *   PropertyVarDeclaration); 
 *     
 * 	                
 * 	
 * 		
 * // be::BDefProperty   immutable ?= "val"
 * // property values, must be assigned (but can be assigned null).
 *
 **/

// {be::BPropertyDefinitionOperation} (definition=PropertyValDeclaration|definition=
// PropertyVarDeclaration)
protected class PropertyDefinitionOperation_Group extends GroupToken {
	
	public PropertyDefinitionOperation_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPropertyDefinitionOperationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyDefinitionOperation_Alternatives_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPropertyDefinitionOperationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BPropertyDefinitionOperation}
protected class PropertyDefinitionOperation_BPropertyDefinitionOperationAction_0 extends ActionToken  {

	public PropertyDefinitionOperation_BPropertyDefinitionOperationAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getPropertyDefinitionOperationAccess().getBPropertyDefinitionOperationAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getPropertyDefinitionOperationAccess().getBPropertyDefinitionOperationAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// definition=PropertyValDeclaration|definition=PropertyVarDeclaration
protected class PropertyDefinitionOperation_Alternatives_1 extends AlternativesToken {

	public PropertyDefinitionOperation_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPropertyDefinitionOperationAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyDefinitionOperation_DefinitionAssignment_1_0(parent, this, 0, inst);
			case 1: return new PropertyDefinitionOperation_DefinitionAssignment_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// definition=PropertyValDeclaration
protected class PropertyDefinitionOperation_DefinitionAssignment_1_0 extends AssignmentToken  {
	
	public PropertyDefinitionOperation_DefinitionAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyDefinitionOperationAccess().getDefinitionAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyValDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("definition",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("definition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyValDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPropertyDefinitionOperationAccess().getDefinitionPropertyValDeclarationParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PropertyDefinitionOperation_BPropertyDefinitionOperationAction_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// definition=PropertyVarDeclaration
protected class PropertyDefinitionOperation_DefinitionAssignment_1_1 extends AssignmentToken  {
	
	public PropertyDefinitionOperation_DefinitionAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyDefinitionOperationAccess().getDefinitionAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyVarDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("definition",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("definition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyVarDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPropertyDefinitionOperationAccess().getDefinitionPropertyVarDeclarationParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PropertyDefinitionOperation_BPropertyDefinitionOperationAction_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule PropertyDefinitionOperation ****************/


/************ begin Rule PropertyValDeclaration ****************
 *
 * PropertyValDeclaration returns be::BDefProperty:
 *   {be::BDefProperty} final?="final"? type=TypeRef? name=PID "=" valueExpr=Expression ";"
 * ; 
 * 		
 * // be::BDefProperty   immutable ?= "val"
 * // property values, must be assigned (but can be assigned null).
 *      
 * //	: {be::BDefProperty} ( final ?= "final")? (("property" |  type=TypeRef ) name=PID)
 *
 **/

// {be::BDefProperty} final?="final"? type=TypeRef? name=PID "=" valueExpr=Expression ";"
protected class PropertyValDeclaration_Group extends GroupToken {
	
	public PropertyValDeclaration_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPropertyValDeclarationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyValDeclaration_SemicolonKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPropertyValDeclarationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BDefProperty}
protected class PropertyValDeclaration_BDefPropertyAction_0 extends ActionToken  {

	public PropertyValDeclaration_BDefPropertyAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getPropertyValDeclarationAccess().getBDefPropertyAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getPropertyValDeclarationAccess().getBDefPropertyAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// final?="final"?
protected class PropertyValDeclaration_FinalAssignment_1 extends AssignmentToken  {
	
	public PropertyValDeclaration_FinalAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyValDeclarationAccess().getFinalAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyValDeclaration_BDefPropertyAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("final",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("final");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getPropertyValDeclarationAccess().getFinalFinalKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// type=TypeRef?
protected class PropertyValDeclaration_TypeAssignment_2 extends AssignmentToken  {
	
	public PropertyValDeclaration_TypeAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyValDeclarationAccess().getTypeAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPropertyValDeclarationAccess().getTypeTypeRefParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PropertyValDeclaration_FinalAssignment_1(parent, next, actIndex, consumed);
			case 1: return new PropertyValDeclaration_BDefPropertyAction_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// name=PID
protected class PropertyValDeclaration_NameAssignment_3 extends AssignmentToken  {
	
	public PropertyValDeclaration_NameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyValDeclarationAccess().getNameAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyValDeclaration_TypeAssignment_2(parent, this, 0, inst);
			case 1: return new PropertyValDeclaration_FinalAssignment_1(parent, this, 1, inst);
			case 2: return new PropertyValDeclaration_BDefPropertyAction_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPropertyValDeclarationAccess().getNamePIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// "="
protected class PropertyValDeclaration_EqualsSignKeyword_4 extends KeywordToken  {
	
	public PropertyValDeclaration_EqualsSignKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPropertyValDeclarationAccess().getEqualsSignKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyValDeclaration_NameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// valueExpr=Expression
protected class PropertyValDeclaration_ValueExprAssignment_5 extends AssignmentToken  {
	
	public PropertyValDeclaration_ValueExprAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyValDeclarationAccess().getValueExprAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("valueExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("valueExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPropertyValDeclarationAccess().getValueExprExpressionParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PropertyValDeclaration_EqualsSignKeyword_4(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class PropertyValDeclaration_SemicolonKeyword_6 extends KeywordToken  {
	
	public PropertyValDeclaration_SemicolonKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPropertyValDeclarationAccess().getSemicolonKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyValDeclaration_ValueExprAssignment_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule PropertyValDeclaration ****************/


/************ begin Rule PropertyVarDeclaration ****************
 *
 * PropertyVarDeclaration returns be::BDefProperty:
 *   {be::BDefProperty} final?="final"? mutable?="mutable" type=TypeRef? name=PID ("="
 *   valueExpr=Expression)? ";";
 *
 **/

// {be::BDefProperty} final?="final"? mutable?="mutable" type=TypeRef? name=PID ("="
// valueExpr=Expression)? ";"
protected class PropertyVarDeclaration_Group extends GroupToken {
	
	public PropertyVarDeclaration_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPropertyVarDeclarationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyVarDeclaration_SemicolonKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPropertyVarDeclarationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BDefProperty}
protected class PropertyVarDeclaration_BDefPropertyAction_0 extends ActionToken  {

	public PropertyVarDeclaration_BDefPropertyAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getPropertyVarDeclarationAccess().getBDefPropertyAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getPropertyVarDeclarationAccess().getBDefPropertyAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// final?="final"?
protected class PropertyVarDeclaration_FinalAssignment_1 extends AssignmentToken  {
	
	public PropertyVarDeclaration_FinalAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyVarDeclarationAccess().getFinalAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyVarDeclaration_BDefPropertyAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("final",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("final");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getPropertyVarDeclarationAccess().getFinalFinalKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// mutable?="mutable"
protected class PropertyVarDeclaration_MutableAssignment_2 extends AssignmentToken  {
	
	public PropertyVarDeclaration_MutableAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyVarDeclarationAccess().getMutableAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyVarDeclaration_FinalAssignment_1(parent, this, 0, inst);
			case 1: return new PropertyVarDeclaration_BDefPropertyAction_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("mutable",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("mutable");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getPropertyVarDeclarationAccess().getMutableMutableKeyword_2_0();
			return obj;
		}
		return null;
	}

}

// type=TypeRef?
protected class PropertyVarDeclaration_TypeAssignment_3 extends AssignmentToken  {
	
	public PropertyVarDeclaration_TypeAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyVarDeclarationAccess().getTypeAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPropertyVarDeclarationAccess().getTypeTypeRefParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PropertyVarDeclaration_MutableAssignment_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// name=PID
protected class PropertyVarDeclaration_NameAssignment_4 extends AssignmentToken  {
	
	public PropertyVarDeclaration_NameAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyVarDeclarationAccess().getNameAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyVarDeclaration_TypeAssignment_3(parent, this, 0, inst);
			case 1: return new PropertyVarDeclaration_MutableAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPropertyVarDeclarationAccess().getNamePIDTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// ("=" valueExpr=Expression)?
protected class PropertyVarDeclaration_Group_5 extends GroupToken {
	
	public PropertyVarDeclaration_Group_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPropertyVarDeclarationAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyVarDeclaration_ValueExprAssignment_5_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "="
protected class PropertyVarDeclaration_EqualsSignKeyword_5_0 extends KeywordToken  {
	
	public PropertyVarDeclaration_EqualsSignKeyword_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPropertyVarDeclarationAccess().getEqualsSignKeyword_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyVarDeclaration_NameAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// valueExpr=Expression
protected class PropertyVarDeclaration_ValueExprAssignment_5_1 extends AssignmentToken  {
	
	public PropertyVarDeclaration_ValueExprAssignment_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyVarDeclarationAccess().getValueExprAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("valueExpr",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("valueExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPropertyVarDeclarationAccess().getValueExprExpressionParserRuleCall_5_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PropertyVarDeclaration_EqualsSignKeyword_5_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ";"
protected class PropertyVarDeclaration_SemicolonKeyword_6 extends KeywordToken  {
	
	public PropertyVarDeclaration_SemicolonKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPropertyVarDeclarationAccess().getSemicolonKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyVarDeclaration_Group_5(parent, this, 0, inst);
			case 1: return new PropertyVarDeclaration_NameAssignment_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule PropertyVarDeclaration ****************/


/************ begin Rule PropertySetOperation ****************
 *
 * PropertySetOperation returns be::BPropertyOperation:
 *   {be::BPropertySetOperation} propertySet=PropertySet; 
 *     
 * 	        
 * 	
 * 
 * // OLD
 *
 **/

// {be::BPropertySetOperation} propertySet=PropertySet
protected class PropertySetOperation_Group extends GroupToken {
	
	public PropertySetOperation_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPropertySetOperationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertySetOperation_PropertySetAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPropertySetOperationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BPropertySetOperation}
protected class PropertySetOperation_BPropertySetOperationAction_0 extends ActionToken  {

	public PropertySetOperation_BPropertySetOperationAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getPropertySetOperationAccess().getBPropertySetOperationAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getPropertySetOperationAccess().getBPropertySetOperationAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// propertySet=PropertySet
protected class PropertySetOperation_PropertySetAssignment_1 extends AssignmentToken  {
	
	public PropertySetOperation_PropertySetAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertySetOperationAccess().getPropertySetAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertySet_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("propertySet",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("propertySet");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertySetRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPropertySetOperationAccess().getPropertySetPropertySetParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PropertySetOperation_BPropertySetOperationAction_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule PropertySetOperation ****************/


/************ begin Rule SetPropertyOperation ****************
 *
 * SetPropertyOperation:
 *   final?="final"? key=PropertyName op=AssignmentOperator value=Expression ";"; 
 * 
 * // OLD
 *
 **/

// final?="final"? key=PropertyName op=AssignmentOperator value=Expression ";"
protected class SetPropertyOperation_Group extends GroupToken {
	
	public SetPropertyOperation_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSetPropertyOperationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SetPropertyOperation_SemicolonKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSetPropertyOperationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// final?="final"?
protected class SetPropertyOperation_FinalAssignment_0 extends AssignmentToken  {
	
	public SetPropertyOperation_FinalAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetPropertyOperationAccess().getFinalAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("final",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("final");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getSetPropertyOperationAccess().getFinalFinalKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// key=PropertyName
protected class SetPropertyOperation_KeyAssignment_1 extends AssignmentToken  {
	
	public SetPropertyOperation_KeyAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetPropertyOperationAccess().getKeyAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SetPropertyOperation_FinalAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("key",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("key");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getSetPropertyOperationAccess().getKeyPropertyNameParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// op=AssignmentOperator
protected class SetPropertyOperation_OpAssignment_2 extends AssignmentToken  {
	
	public SetPropertyOperation_OpAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetPropertyOperationAccess().getOpAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SetPropertyOperation_KeyAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("op",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("op");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getSetPropertyOperationAccess().getOpAssignmentOperatorParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// value=Expression
protected class SetPropertyOperation_ValueAssignment_3 extends AssignmentToken  {
	
	public SetPropertyOperation_ValueAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetPropertyOperationAccess().getValueAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSetPropertyOperationAccess().getValueExpressionParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SetPropertyOperation_OpAssignment_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class SetPropertyOperation_SemicolonKeyword_4 extends KeywordToken  {
	
	public SetPropertyOperation_SemicolonKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSetPropertyOperationAccess().getSemicolonKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SetPropertyOperation_ValueAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule SetPropertyOperation ****************/


/************ begin Rule UnsetPropertyOperation ****************
 *
 * UnsetPropertyOperation:
 *   "unset" key=PropertyName ";";
 *
 **/

// "unset" key=PropertyName ";"
protected class UnsetPropertyOperation_Group extends GroupToken {
	
	public UnsetPropertyOperation_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnsetPropertyOperationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnsetPropertyOperation_SemicolonKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnsetPropertyOperationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "unset"
protected class UnsetPropertyOperation_UnsetKeyword_0 extends KeywordToken  {
	
	public UnsetPropertyOperation_UnsetKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnsetPropertyOperationAccess().getUnsetKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// key=PropertyName
protected class UnsetPropertyOperation_KeyAssignment_1 extends AssignmentToken  {
	
	public UnsetPropertyOperation_KeyAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnsetPropertyOperationAccess().getKeyAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnsetPropertyOperation_UnsetKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("key",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("key");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getUnsetPropertyOperationAccess().getKeyPropertyNameParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class UnsetPropertyOperation_SemicolonKeyword_2 extends KeywordToken  {
	
	public UnsetPropertyOperation_SemicolonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnsetPropertyOperationAccess().getSemicolonKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnsetPropertyOperation_KeyAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule UnsetPropertyOperation ****************/


/************ begin Rule Synchronization ****************
 *
 * Synchronization:
 *   partrefs+=SynchronizedPart ("," partrefs+=SynchronizedPart)+ ";"; 
 * 
 *  
 * 	                // TODO: verify at least 2 partrefs
 *
 **/

// partrefs+=SynchronizedPart ("," partrefs+=SynchronizedPart)+ ";"                 // TODO: verify at least 2 partrefs
protected class Synchronization_Group extends GroupToken {
	
	public Synchronization_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSynchronizationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_SemicolonKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSynchronizationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// partrefs+=SynchronizedPart
protected class Synchronization_PartrefsAssignment_0 extends AssignmentToken  {
	
	public Synchronization_PartrefsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSynchronizationAccess().getPartrefsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("partrefs",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("partrefs");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getSynchronizationAccess().getPartrefsSynchronizedPartParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ("," partrefs+=SynchronizedPart)+
protected class Synchronization_Group_1 extends GroupToken {
	
	public Synchronization_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSynchronizationAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_PartrefsAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Synchronization_CommaKeyword_1_0 extends KeywordToken  {
	
	public Synchronization_CommaKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSynchronizationAccess().getCommaKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_Group_1(parent, this, 0, inst);
			case 1: return new Synchronization_PartrefsAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// partrefs+=SynchronizedPart
protected class Synchronization_PartrefsAssignment_1_1 extends AssignmentToken  {
	
	public Synchronization_PartrefsAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSynchronizationAccess().getPartrefsAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_CommaKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("partrefs",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("partrefs");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getSynchronizationAccess().getPartrefsSynchronizedPartParserRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}


// ";"     // TODO: verify at least 2 partrefs
protected class Synchronization_SemicolonKeyword_2 extends KeywordToken  {
	
	public Synchronization_SemicolonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSynchronizationAccess().getSemicolonKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Synchronization_Group_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Synchronization ****************/



/************ begin Rule PathGroup ****************
 *
 * PathGroup:
 *   paths+=PathVectorElement+ ("annotations" annotations=PropertySet)?;
 *
 **/

// paths+=PathVectorElement+ ("annotations" annotations=PropertySet)?
protected class PathGroup_Group extends GroupToken {
	
	public PathGroup_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_Group_1(parent, this, 0, inst);
			case 1: return new PathGroup_PathsAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPathGroupRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// paths+=PathVectorElement+
protected class PathGroup_PathsAssignment_0 extends AssignmentToken  {
	
	public PathGroup_PathsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getPathsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathVectorElement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("paths",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("paths");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPathVectorElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPathGroupAccess().getPathsPathVectorElementParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PathGroup_PathsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// ("annotations" annotations=PropertySet)?
protected class PathGroup_Group_1 extends GroupToken {
	
	public PathGroup_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_AnnotationsAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "annotations"
protected class PathGroup_AnnotationsKeyword_1_0 extends KeywordToken  {
	
	public PathGroup_AnnotationsKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getAnnotationsKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_PathsAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// annotations=PropertySet
protected class PathGroup_AnnotationsAssignment_1_1 extends AssignmentToken  {
	
	public PathGroup_AnnotationsAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPathGroupAccess().getAnnotationsAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertySet_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("annotations",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("annotations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertySetRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPathGroupAccess().getAnnotationsPropertySetParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PathGroup_AnnotationsKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule PathGroup ****************/


/************ begin Rule PathVectorElement ****************
 *
 * PathVectorElement:
 *   FilteredPathVector|BasePathVector|UnbasedPathVector;
 *
 **/

// FilteredPathVector|BasePathVector|UnbasedPathVector
protected class PathVectorElement_Alternatives extends AlternativesToken {

	public PathVectorElement_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPathVectorElementAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathVectorElement_FilteredPathVectorParserRuleCall_0(parent, this, 0, inst);
			case 1: return new PathVectorElement_BasePathVectorParserRuleCall_1(parent, this, 1, inst);
			case 2: return new PathVectorElement_UnbasedPathVectorParserRuleCall_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPathVectorElementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// FilteredPathVector
protected class PathVectorElement_FilteredPathVectorParserRuleCall_0 extends RuleCallToken {
	
	public PathVectorElement_FilteredPathVectorParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPathVectorElementAccess().getFilteredPathVectorParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FilteredPathVector_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(FilteredPathVector_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getFilteredPathVectorRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// BasePathVector
protected class PathVectorElement_BasePathVectorParserRuleCall_1 extends RuleCallToken {
	
	public PathVectorElement_BasePathVectorParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPathVectorElementAccess().getBasePathVectorParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasePathVector_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(BasePathVector_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBasePathVectorRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// UnbasedPathVector
protected class PathVectorElement_UnbasedPathVectorParserRuleCall_2 extends RuleCallToken {
	
	public PathVectorElement_UnbasedPathVectorParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPathVectorElementAccess().getUnbasedPathVectorParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnbasedPathVector_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UnbasedPathVector_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUnbasedPathVectorRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule PathVectorElement ****************/


/************ begin Rule FilteredPathVector ****************
 *
 * FilteredPathVector:
 *   "when" filter=Filter body=( BasePathVector | UnbasedPathVector | CompoundPathVector );
 *
 **/

// "when" filter=Filter body=( BasePathVector | UnbasedPathVector | CompoundPathVector )
protected class FilteredPathVector_Group extends GroupToken {
	
	public FilteredPathVector_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFilteredPathVectorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FilteredPathVector_BodyAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFilteredPathVectorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "when"
protected class FilteredPathVector_WhenKeyword_0 extends KeywordToken  {
	
	public FilteredPathVector_WhenKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFilteredPathVectorAccess().getWhenKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// filter=Filter
protected class FilteredPathVector_FilterAssignment_1 extends AssignmentToken  {
	
	public FilteredPathVector_FilterAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFilteredPathVectorAccess().getFilterAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Filter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("filter",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("filter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFilterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFilteredPathVectorAccess().getFilterFilterParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FilteredPathVector_WhenKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// body=( BasePathVector | UnbasedPathVector | CompoundPathVector )
protected class FilteredPathVector_BodyAssignment_2 extends AssignmentToken  {
	
	public FilteredPathVector_BodyAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFilteredPathVectorAccess().getBodyAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasePathVector_Group(this, this, 0, inst);
			case 1: return new UnbasedPathVector_Group(this, this, 1, inst);
			case 2: return new CompoundPathVector_Group(this, this, 2, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("body",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBasePathVectorRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFilteredPathVectorAccess().getBodyBasePathVectorParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUnbasedPathVectorRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFilteredPathVectorAccess().getBodyUnbasedPathVectorParserRuleCall_2_0_1(); 
				consumed = obj;
				return param;
			}
		}
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompoundPathVectorRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFilteredPathVectorAccess().getBodyCompoundPathVectorParserRuleCall_2_0_2(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FilteredPathVector_FilterAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule FilteredPathVector ****************/


/************ begin Rule BasePathVector ****************
 *
 * BasePathVector returns PathVector:
 *   basePath=Path "[" (paths+=Path ("," paths+=Path)*)? "]" ";";
 *
 **/

// basePath=Path "[" (paths+=Path ("," paths+=Path)*)? "]" ";"
protected class BasePathVector_Group extends GroupToken {
	
	public BasePathVector_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBasePathVectorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasePathVector_SemicolonKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBasePathVectorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// basePath=Path
protected class BasePathVector_BasePathAssignment_0 extends AssignmentToken  {
	
	public BasePathVector_BasePathAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBasePathVectorAccess().getBasePathAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("basePath",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("basePath");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getBasePathVectorAccess().getBasePathPathParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "["
protected class BasePathVector_LeftSquareBracketKeyword_1 extends KeywordToken  {
	
	public BasePathVector_LeftSquareBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBasePathVectorAccess().getLeftSquareBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasePathVector_BasePathAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (paths+=Path ("," paths+=Path)*)?
protected class BasePathVector_Group_2 extends GroupToken {
	
	public BasePathVector_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBasePathVectorAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasePathVector_Group_2_1(parent, this, 0, inst);
			case 1: return new BasePathVector_PathsAssignment_2_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// paths+=Path
protected class BasePathVector_PathsAssignment_2_0 extends AssignmentToken  {
	
	public BasePathVector_PathsAssignment_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBasePathVectorAccess().getPathsAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasePathVector_LeftSquareBracketKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("paths",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("paths");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getBasePathVectorAccess().getPathsPathParserRuleCall_2_0_0();
			return obj;
		}
		return null;
	}

}

// ("," paths+=Path)*
protected class BasePathVector_Group_2_1 extends GroupToken {
	
	public BasePathVector_Group_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBasePathVectorAccess().getGroup_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasePathVector_PathsAssignment_2_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class BasePathVector_CommaKeyword_2_1_0 extends KeywordToken  {
	
	public BasePathVector_CommaKeyword_2_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBasePathVectorAccess().getCommaKeyword_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasePathVector_Group_2_1(parent, this, 0, inst);
			case 1: return new BasePathVector_PathsAssignment_2_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// paths+=Path
protected class BasePathVector_PathsAssignment_2_1_1 extends AssignmentToken  {
	
	public BasePathVector_PathsAssignment_2_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBasePathVectorAccess().getPathsAssignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasePathVector_CommaKeyword_2_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("paths",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("paths");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getBasePathVectorAccess().getPathsPathParserRuleCall_2_1_1_0();
			return obj;
		}
		return null;
	}

}



// "]"
protected class BasePathVector_RightSquareBracketKeyword_3 extends KeywordToken  {
	
	public BasePathVector_RightSquareBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBasePathVectorAccess().getRightSquareBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasePathVector_Group_2(parent, this, 0, inst);
			case 1: return new BasePathVector_LeftSquareBracketKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ";"
protected class BasePathVector_SemicolonKeyword_4 extends KeywordToken  {
	
	public BasePathVector_SemicolonKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBasePathVectorAccess().getSemicolonKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BasePathVector_RightSquareBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule BasePathVector ****************/


/************ begin Rule UnbasedPathVector ****************
 *
 * UnbasedPathVector returns PathVector:
 *   paths+=Path ("," paths+=Path)* ";";
 *
 **/

// paths+=Path ("," paths+=Path)* ";"
protected class UnbasedPathVector_Group extends GroupToken {
	
	public UnbasedPathVector_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnbasedPathVectorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnbasedPathVector_SemicolonKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnbasedPathVectorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// paths+=Path
protected class UnbasedPathVector_PathsAssignment_0 extends AssignmentToken  {
	
	public UnbasedPathVector_PathsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnbasedPathVectorAccess().getPathsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("paths",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("paths");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getUnbasedPathVectorAccess().getPathsPathParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ("," paths+=Path)*
protected class UnbasedPathVector_Group_1 extends GroupToken {
	
	public UnbasedPathVector_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnbasedPathVectorAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnbasedPathVector_PathsAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class UnbasedPathVector_CommaKeyword_1_0 extends KeywordToken  {
	
	public UnbasedPathVector_CommaKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnbasedPathVectorAccess().getCommaKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnbasedPathVector_Group_1(parent, this, 0, inst);
			case 1: return new UnbasedPathVector_PathsAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// paths+=Path
protected class UnbasedPathVector_PathsAssignment_1_1 extends AssignmentToken  {
	
	public UnbasedPathVector_PathsAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnbasedPathVectorAccess().getPathsAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnbasedPathVector_CommaKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("paths",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("paths");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getUnbasedPathVectorAccess().getPathsPathParserRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}


// ";"
protected class UnbasedPathVector_SemicolonKeyword_2 extends KeywordToken  {
	
	public UnbasedPathVector_SemicolonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnbasedPathVectorAccess().getSemicolonKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnbasedPathVector_Group_1(parent, this, 0, inst);
			case 1: return new UnbasedPathVector_PathsAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule UnbasedPathVector ****************/


/************ begin Rule CompoundPathVector ****************
 *
 * CompoundPathVector:
 *   {CompoundPathVector} "{" body+=PathVectorElement* "}"; 
 * 	
 *               
 * 
 * // A path can be written without quotes if it consists of safe chars
 *
 **/

// {CompoundPathVector} "{" body+=PathVectorElement* "}"
protected class CompoundPathVector_Group extends GroupToken {
	
	public CompoundPathVector_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCompoundPathVectorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundPathVector_RightCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCompoundPathVectorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {CompoundPathVector}
protected class CompoundPathVector_CompoundPathVectorAction_0 extends ActionToken  {

	public CompoundPathVector_CompoundPathVectorAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getCompoundPathVectorAccess().getCompoundPathVectorAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getCompoundPathVectorAccess().getCompoundPathVectorAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "{"
protected class CompoundPathVector_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public CompoundPathVector_LeftCurlyBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundPathVectorAccess().getLeftCurlyBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundPathVector_CompoundPathVectorAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// body+=PathVectorElement*
protected class CompoundPathVector_BodyAssignment_2 extends AssignmentToken  {
	
	public CompoundPathVector_BodyAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundPathVectorAccess().getBodyAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathVectorElement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("body",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPathVectorElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompoundPathVectorAccess().getBodyPathVectorElementParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompoundPathVector_BodyAssignment_2(parent, next, actIndex, consumed);
			case 1: return new CompoundPathVector_LeftCurlyBracketKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class CompoundPathVector_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public CompoundPathVector_RightCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundPathVectorAccess().getRightCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundPathVector_BodyAssignment_2(parent, this, 0, inst);
			case 1: return new CompoundPathVector_LeftCurlyBracketKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule CompoundPathVector ****************/



/************ begin Rule Prerequisite ****************
 *
 * Prerequisite:
 *   ("when" filter=Filter)? withClause=WithClause? partReference=PrerequisiteEntry ("as"
 *   alias=ID)? ";"; 
 * 
 *    
 * 		    
 * 		    
 * 		 
 * 		    
 * 	
 * 
 * // Validation checks that there is at least one of references, properties or concern.
 *
 **/

// ("when" filter=Filter)? withClause=WithClause? partReference=PrerequisiteEntry ("as"
// alias=ID)? ";"
protected class Prerequisite_Group extends GroupToken {
	
	public Prerequisite_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_SemicolonKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPrerequisiteRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ("when" filter=Filter)?
protected class Prerequisite_Group_0 extends GroupToken {
	
	public Prerequisite_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_FilterAssignment_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "when"
protected class Prerequisite_WhenKeyword_0_0 extends KeywordToken  {
	
	public Prerequisite_WhenKeyword_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getWhenKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// filter=Filter
protected class Prerequisite_FilterAssignment_0_1 extends AssignmentToken  {
	
	public Prerequisite_FilterAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getFilterAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Filter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("filter",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("filter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFilterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPrerequisiteAccess().getFilterFilterParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Prerequisite_WhenKeyword_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// withClause=WithClause?
protected class Prerequisite_WithClauseAssignment_1 extends AssignmentToken  {
	
	public Prerequisite_WithClauseAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getWithClauseAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithClause_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("withClause",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("withClause");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getWithClauseRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPrerequisiteAccess().getWithClauseWithClauseParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Prerequisite_Group_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// partReference=PrerequisiteEntry
protected class Prerequisite_PartReferenceAssignment_2 extends AssignmentToken  {
	
	public Prerequisite_PartReferenceAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getPartReferenceAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrerequisiteEntry_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("partReference",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("partReference");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrerequisiteEntryRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPrerequisiteAccess().getPartReferencePrerequisiteEntryParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Prerequisite_WithClauseAssignment_1(parent, next, actIndex, consumed);
			case 1: return new Prerequisite_Group_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 2, consumed);
		}	
	}	
}

// ("as" alias=ID)?
protected class Prerequisite_Group_3 extends GroupToken {
	
	public Prerequisite_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_AliasAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "as"
protected class Prerequisite_AsKeyword_3_0 extends KeywordToken  {
	
	public Prerequisite_AsKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getAsKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_PartReferenceAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// alias=ID
protected class Prerequisite_AliasAssignment_3_1 extends AssignmentToken  {
	
	public Prerequisite_AliasAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getAliasAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_AsKeyword_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("alias",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("alias");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPrerequisiteAccess().getAliasIDTerminalRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}


// ";"
protected class Prerequisite_SemicolonKeyword_4 extends KeywordToken  {
	
	public Prerequisite_SemicolonKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrerequisiteAccess().getSemicolonKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_Group_3(parent, this, 0, inst);
			case 1: return new Prerequisite_PartReferenceAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Prerequisite ****************/


/************ begin Rule WithClause ****************
 *
 * WithClause:
 *   {WithClause} "with" ("(" references+=Expression ("," references+=Expression)* ")")? (
 *   "properties" properties+=PropertySet|"concern" concern+=ConcernBlock)*; 
 * 
 * // Validation checks that there is at least one of references, properties or concern.
 *
 **/

// {WithClause} "with" ("(" references+=Expression ("," references+=Expression)* ")")? (
// "properties" properties+=PropertySet|"concern" concern+=ConcernBlock)*
protected class WithClause_Group extends GroupToken {
	
	public WithClause_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWithClauseAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithClause_Alternatives_3(parent, this, 0, inst);
			case 1: return new WithClause_Group_2(parent, this, 1, inst);
			case 2: return new WithClause_WithKeyword_1(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getWithClauseRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {WithClause}
protected class WithClause_WithClauseAction_0 extends ActionToken  {

	public WithClause_WithClauseAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getWithClauseAccess().getWithClauseAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getWithClauseAccess().getWithClauseAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "with"
protected class WithClause_WithKeyword_1 extends KeywordToken  {
	
	public WithClause_WithKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWithClauseAccess().getWithKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithClause_WithClauseAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("(" references+=Expression ("," references+=Expression)* ")")?
protected class WithClause_Group_2 extends GroupToken {
	
	public WithClause_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWithClauseAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithClause_RightParenthesisKeyword_2_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class WithClause_LeftParenthesisKeyword_2_0 extends KeywordToken  {
	
	public WithClause_LeftParenthesisKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWithClauseAccess().getLeftParenthesisKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithClause_WithKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// references+=Expression
protected class WithClause_ReferencesAssignment_2_1 extends AssignmentToken  {
	
	public WithClause_ReferencesAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWithClauseAccess().getReferencesAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("references",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("references");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWithClauseAccess().getReferencesExpressionParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WithClause_LeftParenthesisKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," references+=Expression)*
protected class WithClause_Group_2_2 extends GroupToken {
	
	public WithClause_Group_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWithClauseAccess().getGroup_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithClause_ReferencesAssignment_2_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class WithClause_CommaKeyword_2_2_0 extends KeywordToken  {
	
	public WithClause_CommaKeyword_2_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWithClauseAccess().getCommaKeyword_2_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithClause_Group_2_2(parent, this, 0, inst);
			case 1: return new WithClause_ReferencesAssignment_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// references+=Expression
protected class WithClause_ReferencesAssignment_2_2_1 extends AssignmentToken  {
	
	public WithClause_ReferencesAssignment_2_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWithClauseAccess().getReferencesAssignment_2_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("references",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("references");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWithClauseAccess().getReferencesExpressionParserRuleCall_2_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WithClause_CommaKeyword_2_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ")"
protected class WithClause_RightParenthesisKeyword_2_3 extends KeywordToken  {
	
	public WithClause_RightParenthesisKeyword_2_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWithClauseAccess().getRightParenthesisKeyword_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithClause_Group_2_2(parent, this, 0, inst);
			case 1: return new WithClause_ReferencesAssignment_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// ("properties" properties+=PropertySet|"concern" concern+=ConcernBlock)*
protected class WithClause_Alternatives_3 extends AlternativesToken {

	public WithClause_Alternatives_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getWithClauseAccess().getAlternatives_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithClause_Group_3_0(parent, this, 0, inst);
			case 1: return new WithClause_Group_3_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "properties" properties+=PropertySet
protected class WithClause_Group_3_0 extends GroupToken {
	
	public WithClause_Group_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWithClauseAccess().getGroup_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithClause_PropertiesAssignment_3_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "properties"
protected class WithClause_PropertiesKeyword_3_0_0 extends KeywordToken  {
	
	public WithClause_PropertiesKeyword_3_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWithClauseAccess().getPropertiesKeyword_3_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithClause_Alternatives_3(parent, this, 0, inst);
			case 1: return new WithClause_Group_2(parent, this, 1, inst);
			case 2: return new WithClause_WithKeyword_1(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// properties+=PropertySet
protected class WithClause_PropertiesAssignment_3_0_1 extends AssignmentToken  {
	
	public WithClause_PropertiesAssignment_3_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWithClauseAccess().getPropertiesAssignment_3_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertySet_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("properties",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("properties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertySetRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWithClauseAccess().getPropertiesPropertySetParserRuleCall_3_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WithClause_PropertiesKeyword_3_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "concern" concern+=ConcernBlock
protected class WithClause_Group_3_1 extends GroupToken {
	
	public WithClause_Group_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWithClauseAccess().getGroup_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithClause_ConcernAssignment_3_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "concern"
protected class WithClause_ConcernKeyword_3_1_0 extends KeywordToken  {
	
	public WithClause_ConcernKeyword_3_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWithClauseAccess().getConcernKeyword_3_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithClause_Alternatives_3(parent, this, 0, inst);
			case 1: return new WithClause_Group_2(parent, this, 1, inst);
			case 2: return new WithClause_WithKeyword_1(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// concern+=ConcernBlock
protected class WithClause_ConcernAssignment_3_1_1 extends AssignmentToken  {
	
	public WithClause_ConcernAssignment_3_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWithClauseAccess().getConcernAssignment_3_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConcernBlock_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("concern",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("concern");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConcernBlockRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWithClauseAccess().getConcernConcernBlockParserRuleCall_3_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WithClause_ConcernKeyword_3_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule WithClause ****************/


/************ begin Rule PrerequisiteEntry ****************
 *
 * PrerequisiteEntry:
 *   DirectPartReferemce|CapabilityReferencedPart|CompoundReferences;
 *
 **/

// DirectPartReferemce|CapabilityReferencedPart|CompoundReferences
protected class PrerequisiteEntry_Alternatives extends AlternativesToken {

	public PrerequisiteEntry_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPrerequisiteEntryAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrerequisiteEntry_DirectPartReferemceParserRuleCall_0(parent, this, 0, inst);
			case 1: return new PrerequisiteEntry_CapabilityReferencedPartParserRuleCall_1(parent, this, 1, inst);
			case 2: return new PrerequisiteEntry_CompoundReferencesParserRuleCall_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPrerequisiteEntryRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// DirectPartReferemce
protected class PrerequisiteEntry_DirectPartReferemceParserRuleCall_0 extends RuleCallToken {
	
	public PrerequisiteEntry_DirectPartReferemceParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrerequisiteEntryAccess().getDirectPartReferemceParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DirectPartReferemce_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DirectPartReferemce_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDirectPartReferemceRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// CapabilityReferencedPart
protected class PrerequisiteEntry_CapabilityReferencedPartParserRuleCall_1 extends RuleCallToken {
	
	public PrerequisiteEntry_CapabilityReferencedPartParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrerequisiteEntryAccess().getCapabilityReferencedPartParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CapabilityReferencedPart_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCapabilityReferencedPartRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// CompoundReferences
protected class PrerequisiteEntry_CompoundReferencesParserRuleCall_2 extends RuleCallToken {
	
	public PrerequisiteEntry_CompoundReferencesParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrerequisiteEntryAccess().getCompoundReferencesParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundReferences_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CompoundReferences_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCompoundReferencesRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule PrerequisiteEntry ****************/


/************ begin Rule DirectPartReferemce ****************
 *
 * DirectPartReferemce:
 *   (unit=QID|unit="unit")? "#" builder=PartName parameters=ParameterList?;
 *
 **/

// (unit=QID|unit="unit")? "#" builder=PartName parameters=ParameterList?
protected class DirectPartReferemce_Group extends GroupToken {
	
	public DirectPartReferemce_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDirectPartReferemceAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DirectPartReferemce_ParametersAssignment_3(parent, this, 0, inst);
			case 1: return new DirectPartReferemce_BuilderAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDirectPartReferemceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// (unit=QID|unit="unit")?
protected class DirectPartReferemce_Alternatives_0 extends AlternativesToken {

	public DirectPartReferemce_Alternatives_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getDirectPartReferemceAccess().getAlternatives_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DirectPartReferemce_UnitAssignment_0_0(parent, this, 0, inst);
			case 1: return new DirectPartReferemce_UnitAssignment_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// unit=QID
protected class DirectPartReferemce_UnitAssignment_0_0 extends AssignmentToken  {
	
	public DirectPartReferemce_UnitAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDirectPartReferemceAccess().getUnitAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("unit",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("unit");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getDirectPartReferemceAccess().getUnitQIDParserRuleCall_0_0_0();
			return obj;
		}
		return null;
	}

}

// unit="unit"
protected class DirectPartReferemce_UnitAssignment_0_1 extends AssignmentToken  {
	
	public DirectPartReferemce_UnitAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDirectPartReferemceAccess().getUnitAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("unit",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("unit");
		if("unit".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getDirectPartReferemceAccess().getUnitUnitKeyword_0_1_0();
			return obj;
		}
		return null;
	}

}


// "#"
protected class DirectPartReferemce_NumberSignKeyword_1 extends KeywordToken  {
	
	public DirectPartReferemce_NumberSignKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDirectPartReferemceAccess().getNumberSignKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DirectPartReferemce_Alternatives_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// builder=PartName
protected class DirectPartReferemce_BuilderAssignment_2 extends AssignmentToken  {
	
	public DirectPartReferemce_BuilderAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDirectPartReferemceAccess().getBuilderAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DirectPartReferemce_NumberSignKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("builder",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("builder");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getDirectPartReferemceAccess().getBuilderPartNameParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// parameters=ParameterList?
protected class DirectPartReferemce_ParametersAssignment_3 extends AssignmentToken  {
	
	public DirectPartReferemce_ParametersAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDirectPartReferemceAccess().getParametersAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameters",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDirectPartReferemceAccess().getParametersParameterListParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DirectPartReferemce_BuilderAssignment_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule DirectPartReferemce ****************/


/************ begin Rule CapabilityReferencedPart ****************
 *
 * CapabilityReferencedPart:
 *   capability=Capability ("/" range=VersionRange)? ("#" partName=PartName)? parameters=
 *   ParameterList?;
 *
 **/

// capability=Capability ("/" range=VersionRange)? ("#" partName=PartName)? parameters=
// ParameterList?
protected class CapabilityReferencedPart_Group extends GroupToken {
	
	public CapabilityReferencedPart_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_ParametersAssignment_3(parent, this, 0, inst);
			case 1: return new CapabilityReferencedPart_Group_2(parent, this, 1, inst);
			case 2: return new CapabilityReferencedPart_Group_1(parent, this, 2, inst);
			case 3: return new CapabilityReferencedPart_CapabilityAssignment_0(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCapabilityReferencedPartRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// capability=Capability
protected class CapabilityReferencedPart_CapabilityAssignment_0 extends AssignmentToken  {
	
	public CapabilityReferencedPart_CapabilityAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getCapabilityAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Capability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("capability",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("capability");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCapabilityReferencedPartAccess().getCapabilityCapabilityParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// ("/" range=VersionRange)?
protected class CapabilityReferencedPart_Group_1 extends GroupToken {
	
	public CapabilityReferencedPart_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_RangeAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "/"
protected class CapabilityReferencedPart_SolidusKeyword_1_0 extends KeywordToken  {
	
	public CapabilityReferencedPart_SolidusKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getSolidusKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_CapabilityAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// range=VersionRange
protected class CapabilityReferencedPart_RangeAssignment_1_1 extends AssignmentToken  {
	
	public CapabilityReferencedPart_RangeAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getRangeAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VersionRange_RangeAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("range",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("range");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVersionRangeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCapabilityReferencedPartAccess().getRangeVersionRangeParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CapabilityReferencedPart_SolidusKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("#" partName=PartName)?
protected class CapabilityReferencedPart_Group_2 extends GroupToken {
	
	public CapabilityReferencedPart_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_PartNameAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "#"
protected class CapabilityReferencedPart_NumberSignKeyword_2_0 extends KeywordToken  {
	
	public CapabilityReferencedPart_NumberSignKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getNumberSignKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_Group_1(parent, this, 0, inst);
			case 1: return new CapabilityReferencedPart_CapabilityAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// partName=PartName
protected class CapabilityReferencedPart_PartNameAssignment_2_1 extends AssignmentToken  {
	
	public CapabilityReferencedPart_PartNameAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getPartNameAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CapabilityReferencedPart_NumberSignKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("partName",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("partName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getCapabilityReferencedPartAccess().getPartNamePartNameParserRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}


// parameters=ParameterList?
protected class CapabilityReferencedPart_ParametersAssignment_3 extends AssignmentToken  {
	
	public CapabilityReferencedPart_ParametersAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCapabilityReferencedPartAccess().getParametersAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameters",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCapabilityReferencedPartAccess().getParametersParameterListParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CapabilityReferencedPart_Group_2(parent, next, actIndex, consumed);
			case 1: return new CapabilityReferencedPart_Group_1(parent, next, actIndex, consumed);
			case 2: return new CapabilityReferencedPart_CapabilityAssignment_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule CapabilityReferencedPart ****************/


/************ begin Rule CompoundReferences ****************
 *
 * CompoundReferences:
 *   {CompounddReferences} "{" prerequisites+=Prerequisite* "}";
 *
 **/

// {CompounddReferences} "{" prerequisites+=Prerequisite* "}"
protected class CompoundReferences_Group extends GroupToken {
	
	public CompoundReferences_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCompoundReferencesAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundReferences_RightCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCompoundReferencesRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {CompounddReferences}
protected class CompoundReferences_CompounddReferencesAction_0 extends ActionToken  {

	public CompoundReferences_CompounddReferencesAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getCompoundReferencesAccess().getCompounddReferencesAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getCompoundReferencesAccess().getCompounddReferencesAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "{"
protected class CompoundReferences_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public CompoundReferences_LeftCurlyBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundReferencesAccess().getLeftCurlyBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundReferences_CompounddReferencesAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// prerequisites+=Prerequisite*
protected class CompoundReferences_PrerequisitesAssignment_2 extends AssignmentToken  {
	
	public CompoundReferences_PrerequisitesAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundReferencesAccess().getPrerequisitesAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("prerequisites",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("prerequisites");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrerequisiteRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompoundReferencesAccess().getPrerequisitesPrerequisiteParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompoundReferences_PrerequisitesAssignment_2(parent, next, actIndex, consumed);
			case 1: return new CompoundReferences_LeftCurlyBracketKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class CompoundReferences_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public CompoundReferences_RightCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundReferencesAccess().getRightCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundReferences_PrerequisitesAssignment_2(parent, this, 0, inst);
			case 1: return new CompoundReferences_LeftCurlyBracketKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule CompoundReferences ****************/


/************ begin Rule Builder ****************
 *
 * Builder:
 *   {Builder} documentation=DOCUMENTATION? visibility=Visibility? executionMode=
 *   ExecutionMode? final?="final"? cached?="cached"? "builder" name=PartName ("(" params=
 *   ParameterDeclarationList ")")? ("provides" providedCapabilities+=ProvidedCapability
 *   ("," providedCapabilities+=ProvidedCapability)*)? preCondition=PreCondition?
 *   postCondition=PostCondition? "{" ("default" "properties" properties=PropertySet)?
 *   input=BuilderInput? output=BuilderOutput? expressionList=ExpressionList? "}";
 *
 **/

// {Builder} documentation=DOCUMENTATION? visibility=Visibility? executionMode=
// ExecutionMode? final?="final"? cached?="cached"? "builder" name=PartName ("(" params=
// ParameterDeclarationList ")")? ("provides" providedCapabilities+=ProvidedCapability
// ("," providedCapabilities+=ProvidedCapability)*)? preCondition=PreCondition?
// postCondition=PostCondition? "{" ("default" "properties" properties=PropertySet)?
// input=BuilderInput? output=BuilderOutput? expressionList=ExpressionList? "}"
protected class Builder_Group extends GroupToken {
	
	public Builder_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBuilderAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_RightCurlyBracketKeyword_17(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBuilderRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {Builder}
protected class Builder_BuilderAction_0 extends ActionToken  {

	public Builder_BuilderAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getBuilderAccess().getBuilderAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getBuilderAccess().getBuilderAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// documentation=DOCUMENTATION?
protected class Builder_DocumentationAssignment_1 extends AssignmentToken  {
	
	public Builder_DocumentationAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderAccess().getDocumentationAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_BuilderAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("documentation",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("documentation");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getBuilderAccess().getDocumentationDOCUMENTATIONTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// visibility=Visibility?
protected class Builder_VisibilityAssignment_2 extends AssignmentToken  {
	
	public Builder_VisibilityAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderAccess().getVisibilityAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_DocumentationAssignment_1(parent, this, 0, inst);
			case 1: return new Builder_BuilderAction_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("visibility",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("visibility");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getBuilderAccess().getVisibilityVisibilityEnumRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// executionMode=ExecutionMode?
protected class Builder_ExecutionModeAssignment_3 extends AssignmentToken  {
	
	public Builder_ExecutionModeAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderAccess().getExecutionModeAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_VisibilityAssignment_2(parent, this, 0, inst);
			case 1: return new Builder_DocumentationAssignment_1(parent, this, 1, inst);
			case 2: return new Builder_BuilderAction_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("executionMode",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("executionMode");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getBuilderAccess().getExecutionModeExecutionModeEnumRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// final?="final"?
protected class Builder_FinalAssignment_4 extends AssignmentToken  {
	
	public Builder_FinalAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderAccess().getFinalAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_ExecutionModeAssignment_3(parent, this, 0, inst);
			case 1: return new Builder_VisibilityAssignment_2(parent, this, 1, inst);
			case 2: return new Builder_DocumentationAssignment_1(parent, this, 2, inst);
			case 3: return new Builder_BuilderAction_0(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("final",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("final");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getBuilderAccess().getFinalFinalKeyword_4_0();
			return obj;
		}
		return null;
	}

}

// cached?="cached"?
protected class Builder_CachedAssignment_5 extends AssignmentToken  {
	
	public Builder_CachedAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderAccess().getCachedAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_FinalAssignment_4(parent, this, 0, inst);
			case 1: return new Builder_ExecutionModeAssignment_3(parent, this, 1, inst);
			case 2: return new Builder_VisibilityAssignment_2(parent, this, 2, inst);
			case 3: return new Builder_DocumentationAssignment_1(parent, this, 3, inst);
			case 4: return new Builder_BuilderAction_0(parent, this, 4, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("cached",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("cached");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getBuilderAccess().getCachedCachedKeyword_5_0();
			return obj;
		}
		return null;
	}

}

// "builder"
protected class Builder_BuilderKeyword_6 extends KeywordToken  {
	
	public Builder_BuilderKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBuilderAccess().getBuilderKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_CachedAssignment_5(parent, this, 0, inst);
			case 1: return new Builder_FinalAssignment_4(parent, this, 1, inst);
			case 2: return new Builder_ExecutionModeAssignment_3(parent, this, 2, inst);
			case 3: return new Builder_VisibilityAssignment_2(parent, this, 3, inst);
			case 4: return new Builder_DocumentationAssignment_1(parent, this, 4, inst);
			case 5: return new Builder_BuilderAction_0(parent, this, 5, inst);
			default: return null;
		}	
	}	
		
}

// name=PartName
protected class Builder_NameAssignment_7 extends AssignmentToken  {
	
	public Builder_NameAssignment_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderAccess().getNameAssignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_BuilderKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getBuilderAccess().getNamePartNameParserRuleCall_7_0();
			return obj;
		}
		return null;
	}

}

// ("(" params=ParameterDeclarationList ")")?
protected class Builder_Group_8 extends GroupToken {
	
	public Builder_Group_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBuilderAccess().getGroup_8();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_RightParenthesisKeyword_8_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class Builder_LeftParenthesisKeyword_8_0 extends KeywordToken  {
	
	public Builder_LeftParenthesisKeyword_8_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBuilderAccess().getLeftParenthesisKeyword_8_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_NameAssignment_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// params=ParameterDeclarationList
protected class Builder_ParamsAssignment_8_1 extends AssignmentToken  {
	
	public Builder_ParamsAssignment_8_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderAccess().getParamsAssignment_8_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclarationList_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterDeclarationListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuilderAccess().getParamsParameterDeclarationListParserRuleCall_8_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Builder_LeftParenthesisKeyword_8_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class Builder_RightParenthesisKeyword_8_2 extends KeywordToken  {
	
	public Builder_RightParenthesisKeyword_8_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBuilderAccess().getRightParenthesisKeyword_8_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_ParamsAssignment_8_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ("provides" providedCapabilities+=ProvidedCapability ("," providedCapabilities+=
// ProvidedCapability)*)?
protected class Builder_Group_9 extends GroupToken {
	
	public Builder_Group_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBuilderAccess().getGroup_9();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_Group_9_2(parent, this, 0, inst);
			case 1: return new Builder_ProvidedCapabilitiesAssignment_9_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "provides"
protected class Builder_ProvidesKeyword_9_0 extends KeywordToken  {
	
	public Builder_ProvidesKeyword_9_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBuilderAccess().getProvidesKeyword_9_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_Group_8(parent, this, 0, inst);
			case 1: return new Builder_NameAssignment_7(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// providedCapabilities+=ProvidedCapability
protected class Builder_ProvidedCapabilitiesAssignment_9_1 extends AssignmentToken  {
	
	public Builder_ProvidedCapabilitiesAssignment_9_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderAccess().getProvidedCapabilitiesAssignment_9_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("providedCapabilities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("providedCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProvidedCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuilderAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_9_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Builder_ProvidesKeyword_9_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," providedCapabilities+=ProvidedCapability)*
protected class Builder_Group_9_2 extends GroupToken {
	
	public Builder_Group_9_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBuilderAccess().getGroup_9_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_ProvidedCapabilitiesAssignment_9_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Builder_CommaKeyword_9_2_0 extends KeywordToken  {
	
	public Builder_CommaKeyword_9_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBuilderAccess().getCommaKeyword_9_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_Group_9_2(parent, this, 0, inst);
			case 1: return new Builder_ProvidedCapabilitiesAssignment_9_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// providedCapabilities+=ProvidedCapability
protected class Builder_ProvidedCapabilitiesAssignment_9_2_1 extends AssignmentToken  {
	
	public Builder_ProvidedCapabilitiesAssignment_9_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderAccess().getProvidedCapabilitiesAssignment_9_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProvidedCapability_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("providedCapabilities",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("providedCapabilities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProvidedCapabilityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuilderAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_9_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Builder_CommaKeyword_9_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// preCondition=PreCondition?
protected class Builder_PreConditionAssignment_10 extends AssignmentToken  {
	
	public Builder_PreConditionAssignment_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderAccess().getPreConditionAssignment_10();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PreCondition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("preCondition",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("preCondition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPreConditionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuilderAccess().getPreConditionPreConditionParserRuleCall_10_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Builder_Group_9(parent, next, actIndex, consumed);
			case 1: return new Builder_Group_8(parent, next, actIndex, consumed);
			case 2: return new Builder_NameAssignment_7(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// postCondition=PostCondition?
protected class Builder_PostConditionAssignment_11 extends AssignmentToken  {
	
	public Builder_PostConditionAssignment_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderAccess().getPostConditionAssignment_11();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostCondition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("postCondition",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("postCondition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPostConditionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuilderAccess().getPostConditionPostConditionParserRuleCall_11_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Builder_PreConditionAssignment_10(parent, next, actIndex, consumed);
			case 1: return new Builder_Group_9(parent, next, actIndex, consumed);
			case 2: return new Builder_Group_8(parent, next, actIndex, consumed);
			case 3: return new Builder_NameAssignment_7(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class Builder_LeftCurlyBracketKeyword_12 extends KeywordToken  {
	
	public Builder_LeftCurlyBracketKeyword_12(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBuilderAccess().getLeftCurlyBracketKeyword_12();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_PostConditionAssignment_11(parent, this, 0, inst);
			case 1: return new Builder_PreConditionAssignment_10(parent, this, 1, inst);
			case 2: return new Builder_Group_9(parent, this, 2, inst);
			case 3: return new Builder_Group_8(parent, this, 3, inst);
			case 4: return new Builder_NameAssignment_7(parent, this, 4, inst);
			default: return null;
		}	
	}	
		
}

// ("default" "properties" properties=PropertySet)?
protected class Builder_Group_13 extends GroupToken {
	
	public Builder_Group_13(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBuilderAccess().getGroup_13();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_PropertiesAssignment_13_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "default"
protected class Builder_DefaultKeyword_13_0 extends KeywordToken  {
	
	public Builder_DefaultKeyword_13_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBuilderAccess().getDefaultKeyword_13_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_LeftCurlyBracketKeyword_12(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "properties"
protected class Builder_PropertiesKeyword_13_1 extends KeywordToken  {
	
	public Builder_PropertiesKeyword_13_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBuilderAccess().getPropertiesKeyword_13_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_DefaultKeyword_13_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// properties=PropertySet
protected class Builder_PropertiesAssignment_13_2 extends AssignmentToken  {
	
	public Builder_PropertiesAssignment_13_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderAccess().getPropertiesAssignment_13_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertySet_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("properties",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("properties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertySetRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuilderAccess().getPropertiesPropertySetParserRuleCall_13_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Builder_PropertiesKeyword_13_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// input=BuilderInput?
protected class Builder_InputAssignment_14 extends AssignmentToken  {
	
	public Builder_InputAssignment_14(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderAccess().getInputAssignment_14();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BuilderInput_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("input",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("input");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBuilderInputRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuilderAccess().getInputBuilderInputParserRuleCall_14_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Builder_Group_13(parent, next, actIndex, consumed);
			case 1: return new Builder_LeftCurlyBracketKeyword_12(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// output=BuilderOutput?
protected class Builder_OutputAssignment_15 extends AssignmentToken  {
	
	public Builder_OutputAssignment_15(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderAccess().getOutputAssignment_15();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BuilderOutput_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("output",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("output");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBuilderOutputRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuilderAccess().getOutputBuilderOutputParserRuleCall_15_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Builder_InputAssignment_14(parent, next, actIndex, consumed);
			case 1: return new Builder_Group_13(parent, next, actIndex, consumed);
			case 2: return new Builder_LeftCurlyBracketKeyword_12(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// expressionList=ExpressionList?
protected class Builder_ExpressionListAssignment_16 extends AssignmentToken  {
	
	public Builder_ExpressionListAssignment_16(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderAccess().getExpressionListAssignment_16();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExpressionList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expressionList",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expressionList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuilderAccess().getExpressionListExpressionListParserRuleCall_16_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Builder_OutputAssignment_15(parent, next, actIndex, consumed);
			case 1: return new Builder_InputAssignment_14(parent, next, actIndex, consumed);
			case 2: return new Builder_Group_13(parent, next, actIndex, consumed);
			case 3: return new Builder_LeftCurlyBracketKeyword_12(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Builder_RightCurlyBracketKeyword_17 extends KeywordToken  {
	
	public Builder_RightCurlyBracketKeyword_17(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBuilderAccess().getRightCurlyBracketKeyword_17();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Builder_ExpressionListAssignment_16(parent, this, 0, inst);
			case 1: return new Builder_OutputAssignment_15(parent, this, 1, inst);
			case 2: return new Builder_InputAssignment_14(parent, this, 2, inst);
			case 3: return new Builder_Group_13(parent, this, 3, inst);
			case 4: return new Builder_LeftCurlyBracketKeyword_12(parent, this, 4, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Builder ****************/


/************ begin Rule ParameterList ****************
 *
 * ParameterList returns be::BParameterList:
 *   {be::BParameterList} parameters+=FirstParameter ("," parameters+=FirstParameter)*;
 *
 **/

// {be::BParameterList} parameters+=FirstParameter ("," parameters+=FirstParameter)*
protected class ParameterList_Group extends GroupToken {
	
	public ParameterList_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParameterListAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterList_Group_2(parent, this, 0, inst);
			case 1: return new ParameterList_ParametersAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getParameterListRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BParameterList}
protected class ParameterList_BParameterListAction_0 extends ActionToken  {

	public ParameterList_BParameterListAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getParameterListAccess().getBParameterListAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getParameterListAccess().getBParameterListAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// parameters+=FirstParameter
protected class ParameterList_ParametersAssignment_1 extends AssignmentToken  {
	
	public ParameterList_ParametersAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterListAccess().getParametersAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FirstParameter_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameters",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFirstParameterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getParameterListAccess().getParametersFirstParameterParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ParameterList_BParameterListAction_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," parameters+=FirstParameter)*
protected class ParameterList_Group_2 extends GroupToken {
	
	public ParameterList_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParameterListAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterList_ParametersAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class ParameterList_CommaKeyword_2_0 extends KeywordToken  {
	
	public ParameterList_CommaKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getParameterListAccess().getCommaKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterList_Group_2(parent, this, 0, inst);
			case 1: return new ParameterList_ParametersAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// parameters+=FirstParameter
protected class ParameterList_ParametersAssignment_2_1 extends AssignmentToken  {
	
	public ParameterList_ParametersAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterListAccess().getParametersAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FirstParameter_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameters",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFirstParameterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getParameterListAccess().getParametersFirstParameterParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ParameterList_CommaKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ParameterList ****************/


/************ begin Rule FirstParameter ****************
 *
 * FirstParameter returns be::BParameter:
 *   ClosureParameter|Parameter;
 *
 **/

// ClosureParameter|Parameter
protected class FirstParameter_Alternatives extends AlternativesToken {

	public FirstParameter_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getFirstParameterAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FirstParameter_ClosureParameterParserRuleCall_0(parent, this, 0, inst);
			case 1: return new FirstParameter_ParameterParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFirstParameterRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ClosureParameter
protected class FirstParameter_ClosureParameterParserRuleCall_0 extends RuleCallToken {
	
	public FirstParameter_ClosureParameterParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFirstParameterAccess().getClosureParameterParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureParameter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ClosureParameter_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getClosureParameterRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Parameter
protected class FirstParameter_ParameterParserRuleCall_1 extends RuleCallToken {
	
	public FirstParameter_ParameterParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFirstParameterAccess().getParameterParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parameter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Parameter_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getParameterRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule FirstParameter ****************/


/************ begin Rule Parameter ****************
 *
 * Parameter returns be::BParameter:
 *   {be::BParameter} expr=Expression;
 *
 **/

// {be::BParameter} expr=Expression
protected class Parameter_Group extends GroupToken {
	
	public Parameter_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParameterAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parameter_ExprAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getParameterRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BParameter}
protected class Parameter_BParameterAction_0 extends ActionToken  {

	public Parameter_BParameterAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getParameterAccess().getBParameterAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getParameterAccess().getBParameterAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// expr=Expression
protected class Parameter_ExprAssignment_1 extends AssignmentToken  {
	
	public Parameter_ExprAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterAccess().getExprAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getParameterAccess().getExprExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Parameter_BParameterAction_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Parameter ****************/


/************ begin Rule ClosureParameter ****************
 *
 * ClosureParameter returns be::BParameter:
 *   {be::BParameter} expr=ClosureExpression;
 *
 **/

// {be::BParameter} expr=ClosureExpression
protected class ClosureParameter_Group extends GroupToken {
	
	public ClosureParameter_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getClosureParameterAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureParameter_ExprAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getClosureParameterRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BParameter}
protected class ClosureParameter_BParameterAction_0 extends ActionToken  {

	public ClosureParameter_BParameterAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getClosureParameterAccess().getBParameterAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getClosureParameterAccess().getBParameterAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// expr=ClosureExpression
protected class ClosureParameter_ExprAssignment_1 extends AssignmentToken  {
	
	public ClosureParameter_ExprAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getClosureParameterAccess().getExprAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getClosureExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClosureParameterAccess().getExprClosureExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ClosureParameter_BParameterAction_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ClosureParameter ****************/


/************ begin Rule ParameterDeclarationList ****************
 *
 * ParameterDeclarationList:
 *   params+=ParameterDeclaration ("," params+=ParameterDeclaration)* ("," params+=
 *   ParameterDeclarationEllipse)?|params+=ParameterDeclarationEllipse;
 *
 **/

// params+=ParameterDeclaration ("," params+=ParameterDeclaration)* ("," params+=
// ParameterDeclarationEllipse)?|params+=ParameterDeclarationEllipse
protected class ParameterDeclarationList_Alternatives extends AlternativesToken {

	public ParameterDeclarationList_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getParameterDeclarationListAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclarationList_Group_0(parent, this, 0, inst);
			case 1: return new ParameterDeclarationList_ParamsAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getParameterDeclarationListRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// params+=ParameterDeclaration ("," params+=ParameterDeclaration)* ("," params+=
// ParameterDeclarationEllipse)?
protected class ParameterDeclarationList_Group_0 extends GroupToken {
	
	public ParameterDeclarationList_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParameterDeclarationListAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclarationList_Group_0_2(parent, this, 0, inst);
			case 1: return new ParameterDeclarationList_Group_0_1(parent, this, 1, inst);
			case 2: return new ParameterDeclarationList_ParamsAssignment_0_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// params+=ParameterDeclaration
protected class ParameterDeclarationList_ParamsAssignment_0_0 extends AssignmentToken  {
	
	public ParameterDeclarationList_ParamsAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterDeclarationListAccess().getParamsAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getParameterDeclarationListAccess().getParamsParameterDeclarationParserRuleCall_0_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// ("," params+=ParameterDeclaration)*
protected class ParameterDeclarationList_Group_0_1 extends GroupToken {
	
	public ParameterDeclarationList_Group_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParameterDeclarationListAccess().getGroup_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclarationList_ParamsAssignment_0_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class ParameterDeclarationList_CommaKeyword_0_1_0 extends KeywordToken  {
	
	public ParameterDeclarationList_CommaKeyword_0_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getParameterDeclarationListAccess().getCommaKeyword_0_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclarationList_Group_0_1(parent, this, 0, inst);
			case 1: return new ParameterDeclarationList_ParamsAssignment_0_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// params+=ParameterDeclaration
protected class ParameterDeclarationList_ParamsAssignment_0_1_1 extends AssignmentToken  {
	
	public ParameterDeclarationList_ParamsAssignment_0_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterDeclarationListAccess().getParamsAssignment_0_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getParameterDeclarationListAccess().getParamsParameterDeclarationParserRuleCall_0_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ParameterDeclarationList_CommaKeyword_0_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("," params+=ParameterDeclarationEllipse)?
protected class ParameterDeclarationList_Group_0_2 extends GroupToken {
	
	public ParameterDeclarationList_Group_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParameterDeclarationListAccess().getGroup_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclarationList_ParamsAssignment_0_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class ParameterDeclarationList_CommaKeyword_0_2_0 extends KeywordToken  {
	
	public ParameterDeclarationList_CommaKeyword_0_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getParameterDeclarationListAccess().getCommaKeyword_0_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclarationList_Group_0_1(parent, this, 0, inst);
			case 1: return new ParameterDeclarationList_ParamsAssignment_0_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// params+=ParameterDeclarationEllipse
protected class ParameterDeclarationList_ParamsAssignment_0_2_1 extends AssignmentToken  {
	
	public ParameterDeclarationList_ParamsAssignment_0_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterDeclarationListAccess().getParamsAssignment_0_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclarationEllipse_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterDeclarationEllipseRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getParameterDeclarationListAccess().getParamsParameterDeclarationEllipseParserRuleCall_0_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ParameterDeclarationList_CommaKeyword_0_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// params+=ParameterDeclarationEllipse
protected class ParameterDeclarationList_ParamsAssignment_1 extends AssignmentToken  {
	
	public ParameterDeclarationList_ParamsAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterDeclarationListAccess().getParamsAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclarationEllipse_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("params",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterDeclarationEllipseRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getParameterDeclarationListAccess().getParamsParameterDeclarationEllipseParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule ParameterDeclarationList ****************/


/************ begin Rule ParameterDeclaration ****************
 *
 * ParameterDeclaration returns be::BParameterDeclaration:
 *   {be::BParameterDeclaration} (type=TypeRef? name=ID);
 *
 **/

// {be::BParameterDeclaration} (type=TypeRef? name=ID)
protected class ParameterDeclaration_Group extends GroupToken {
	
	public ParameterDeclaration_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParameterDeclarationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclaration_Group_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getParameterDeclarationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BParameterDeclaration}
protected class ParameterDeclaration_BParameterDeclarationAction_0 extends ActionToken  {

	public ParameterDeclaration_BParameterDeclarationAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getParameterDeclarationAccess().getBParameterDeclarationAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getParameterDeclarationAccess().getBParameterDeclarationAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// type=TypeRef? name=ID
protected class ParameterDeclaration_Group_1 extends GroupToken {
	
	public ParameterDeclaration_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParameterDeclarationAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclaration_NameAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=TypeRef?
protected class ParameterDeclaration_TypeAssignment_1_0 extends AssignmentToken  {
	
	public ParameterDeclaration_TypeAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterDeclarationAccess().getTypeAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getParameterDeclarationAccess().getTypeTypeRefParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ParameterDeclaration_BParameterDeclarationAction_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// name=ID
protected class ParameterDeclaration_NameAssignment_1_1 extends AssignmentToken  {
	
	public ParameterDeclaration_NameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterDeclarationAccess().getNameAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclaration_TypeAssignment_1_0(parent, this, 0, inst);
			case 1: return new ParameterDeclaration_BParameterDeclarationAction_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getParameterDeclarationAccess().getNameIDTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule ParameterDeclaration ****************/


/************ begin Rule ParameterDeclarationEllipse ****************
 *
 * ParameterDeclarationEllipse returns ParameterDeclaration:
 *   {VarargParameterDeclaration} "..." type=TypeRef? name=ID;
 *
 **/

// {VarargParameterDeclaration} "..." type=TypeRef? name=ID
protected class ParameterDeclarationEllipse_Group extends GroupToken {
	
	public ParameterDeclarationEllipse_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParameterDeclarationEllipseAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclarationEllipse_NameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getParameterDeclarationEllipseRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {VarargParameterDeclaration}
protected class ParameterDeclarationEllipse_VarargParameterDeclarationAction_0 extends ActionToken  {

	public ParameterDeclarationEllipse_VarargParameterDeclarationAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getParameterDeclarationEllipseAccess().getVarargParameterDeclarationAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getParameterDeclarationEllipseAccess().getVarargParameterDeclarationAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "..."
protected class ParameterDeclarationEllipse_FullStopFullStopFullStopKeyword_1 extends KeywordToken  {
	
	public ParameterDeclarationEllipse_FullStopFullStopFullStopKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getParameterDeclarationEllipseAccess().getFullStopFullStopFullStopKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclarationEllipse_VarargParameterDeclarationAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=TypeRef?
protected class ParameterDeclarationEllipse_TypeAssignment_2 extends AssignmentToken  {
	
	public ParameterDeclarationEllipse_TypeAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterDeclarationEllipseAccess().getTypeAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getParameterDeclarationEllipseAccess().getTypeTypeRefParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ParameterDeclarationEllipse_FullStopFullStopFullStopKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// name=ID
protected class ParameterDeclarationEllipse_NameAssignment_3 extends AssignmentToken  {
	
	public ParameterDeclarationEllipse_NameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterDeclarationEllipseAccess().getNameAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclarationEllipse_TypeAssignment_2(parent, this, 0, inst);
			case 1: return new ParameterDeclarationEllipse_FullStopFullStopFullStopKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getParameterDeclarationEllipseAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ParameterDeclarationEllipse ****************/




/************ begin Rule BuilderOutput ****************
 *
 * BuilderOutput:
 *   OutputKeyword "{" body=PathGroup "}";
 *
 **/

// OutputKeyword "{" body=PathGroup "}"
protected class BuilderOutput_Group extends GroupToken {
	
	public BuilderOutput_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBuilderOutputAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BuilderOutput_RightCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBuilderOutputRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// OutputKeyword
protected class BuilderOutput_OutputKeywordParserRuleCall_0 extends UnassignedTextToken {

	public BuilderOutput_OutputKeywordParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBuilderOutputAccess().getOutputKeywordParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "{"
protected class BuilderOutput_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public BuilderOutput_LeftCurlyBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBuilderOutputAccess().getLeftCurlyBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BuilderOutput_OutputKeywordParserRuleCall_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// body=PathGroup
protected class BuilderOutput_BodyAssignment_2 extends AssignmentToken  {
	
	public BuilderOutput_BodyAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderOutputAccess().getBodyAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PathGroup_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("body",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPathGroupRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuilderOutputAccess().getBodyPathGroupParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BuilderOutput_LeftCurlyBracketKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class BuilderOutput_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public BuilderOutput_RightCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBuilderOutputAccess().getRightCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BuilderOutput_BodyAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule BuilderOutput ****************/


/************ begin Rule BuilderInput ****************
 *
 * BuilderInput:
 *   InputKeyword preCondition=PreCondition? postCondition=PostCondition? "{"
 *   prerequisites+=Prerequisite+ "}";
 *
 **/

// InputKeyword preCondition=PreCondition? postCondition=PostCondition? "{"
// prerequisites+=Prerequisite+ "}"
protected class BuilderInput_Group extends GroupToken {
	
	public BuilderInput_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBuilderInputAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BuilderInput_RightCurlyBracketKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBuilderInputRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// InputKeyword
protected class BuilderInput_InputKeywordParserRuleCall_0 extends UnassignedTextToken {

	public BuilderInput_InputKeywordParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBuilderInputAccess().getInputKeywordParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// preCondition=PreCondition?
protected class BuilderInput_PreConditionAssignment_1 extends AssignmentToken  {
	
	public BuilderInput_PreConditionAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderInputAccess().getPreConditionAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PreCondition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("preCondition",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("preCondition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPreConditionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuilderInputAccess().getPreConditionPreConditionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BuilderInput_InputKeywordParserRuleCall_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// postCondition=PostCondition?
protected class BuilderInput_PostConditionAssignment_2 extends AssignmentToken  {
	
	public BuilderInput_PostConditionAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderInputAccess().getPostConditionAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostCondition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("postCondition",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("postCondition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPostConditionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuilderInputAccess().getPostConditionPostConditionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BuilderInput_PreConditionAssignment_1(parent, next, actIndex, consumed);
			case 1: return new BuilderInput_InputKeywordParserRuleCall_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class BuilderInput_LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public BuilderInput_LeftCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBuilderInputAccess().getLeftCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BuilderInput_PostConditionAssignment_2(parent, this, 0, inst);
			case 1: return new BuilderInput_PreConditionAssignment_1(parent, this, 1, inst);
			case 2: return new BuilderInput_InputKeywordParserRuleCall_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// prerequisites+=Prerequisite+
protected class BuilderInput_PrerequisitesAssignment_4 extends AssignmentToken  {
	
	public BuilderInput_PrerequisitesAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuilderInputAccess().getPrerequisitesAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Prerequisite_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("prerequisites",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("prerequisites");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrerequisiteRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBuilderInputAccess().getPrerequisitesPrerequisiteParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BuilderInput_PrerequisitesAssignment_4(parent, next, actIndex, consumed);
			case 1: return new BuilderInput_LeftCurlyBracketKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class BuilderInput_RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public BuilderInput_RightCurlyBracketKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBuilderInputAccess().getRightCurlyBracketKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BuilderInput_PrerequisitesAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule BuilderInput ****************/


/************ begin Rule RepositoryConfiguration ****************
 *
 * RepositoryConfiguration:
 *   RepositoryDeclaration|ResolutionStrategy;
 *
 **/

// RepositoryDeclaration|ResolutionStrategy
protected class RepositoryConfiguration_Alternatives extends AlternativesToken {

	public RepositoryConfiguration_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getRepositoryConfigurationAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryConfiguration_RepositoryDeclarationParserRuleCall_0(parent, this, 0, inst);
			case 1: return new RepositoryConfiguration_ResolutionStrategyParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRepositoryConfigurationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// RepositoryDeclaration
protected class RepositoryConfiguration_RepositoryDeclarationParserRuleCall_0 extends RuleCallToken {
	
	public RepositoryConfiguration_RepositoryDeclarationParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRepositoryConfigurationAccess().getRepositoryDeclarationParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RepositoryDeclaration_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRepositoryDeclarationRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ResolutionStrategy
protected class RepositoryConfiguration_ResolutionStrategyParserRuleCall_1 extends RuleCallToken {
	
	public RepositoryConfiguration_ResolutionStrategyParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRepositoryConfigurationAccess().getResolutionStrategyParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ResolutionStrategy_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ResolutionStrategy_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getResolutionStrategyRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule RepositoryConfiguration ****************/


/************ begin Rule RepositoryDeclaration ****************
 *
 * RepositoryDeclaration:
 *   documentation=DOCUMENTATION? (location=URI|"repository" type=TypeRef) context=
 *   ContextBlock?;
 *
 **/

// documentation=DOCUMENTATION? (location=URI|"repository" type=TypeRef) context=
// ContextBlock?
protected class RepositoryDeclaration_Group extends GroupToken {
	
	public RepositoryDeclaration_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRepositoryDeclarationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryDeclaration_ContextAssignment_2(parent, this, 0, inst);
			case 1: return new RepositoryDeclaration_Alternatives_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRepositoryDeclarationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// documentation=DOCUMENTATION?
protected class RepositoryDeclaration_DocumentationAssignment_0 extends AssignmentToken  {
	
	public RepositoryDeclaration_DocumentationAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRepositoryDeclarationAccess().getDocumentationAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("documentation",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("documentation");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getRepositoryDeclarationAccess().getDocumentationDOCUMENTATIONTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// location=URI|"repository" type=TypeRef
protected class RepositoryDeclaration_Alternatives_1 extends AlternativesToken {

	public RepositoryDeclaration_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getRepositoryDeclarationAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryDeclaration_LocationAssignment_1_0(parent, this, 0, inst);
			case 1: return new RepositoryDeclaration_Group_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// location=URI
protected class RepositoryDeclaration_LocationAssignment_1_0 extends AssignmentToken  {
	
	public RepositoryDeclaration_LocationAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRepositoryDeclarationAccess().getLocationAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryDeclaration_DocumentationAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("location",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("location");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getRepositoryDeclarationAccess().getLocationURIParserRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// "repository" type=TypeRef
protected class RepositoryDeclaration_Group_1_1 extends GroupToken {
	
	public RepositoryDeclaration_Group_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRepositoryDeclarationAccess().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryDeclaration_TypeAssignment_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "repository"
protected class RepositoryDeclaration_RepositoryKeyword_1_1_0 extends KeywordToken  {
	
	public RepositoryDeclaration_RepositoryKeyword_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRepositoryDeclarationAccess().getRepositoryKeyword_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryDeclaration_DocumentationAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// type=TypeRef
protected class RepositoryDeclaration_TypeAssignment_1_1_1 extends AssignmentToken  {
	
	public RepositoryDeclaration_TypeAssignment_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRepositoryDeclarationAccess().getTypeAssignment_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRepositoryDeclarationAccess().getTypeTypeRefParserRuleCall_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RepositoryDeclaration_RepositoryKeyword_1_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// context=ContextBlock?
protected class RepositoryDeclaration_ContextAssignment_2 extends AssignmentToken  {
	
	public RepositoryDeclaration_ContextAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRepositoryDeclarationAccess().getContextAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContextBlock_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("context",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("context");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getContextBlockRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRepositoryDeclarationAccess().getContextContextBlockParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RepositoryDeclaration_Alternatives_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule RepositoryDeclaration ****************/


/************ begin Rule ResolutionStrategy ****************
 *
 * ResolutionStrategy:
 *   strategy=( "select-first" | "select-best" ) "{" repositoryConfig+=
 *   RepositoryConfiguration* "}";
 *
 **/

// strategy=( "select-first" | "select-best" ) "{" repositoryConfig+=
// RepositoryConfiguration* "}"
protected class ResolutionStrategy_Group extends GroupToken {
	
	public ResolutionStrategy_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getResolutionStrategyAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ResolutionStrategy_RightCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getResolutionStrategyRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// strategy=( "select-first" | "select-best" )
protected class ResolutionStrategy_StrategyAssignment_0 extends AssignmentToken  {
	
	public ResolutionStrategy_StrategyAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getResolutionStrategyAccess().getStrategyAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("strategy",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("strategy");
		if("select-first".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getResolutionStrategyAccess().getStrategySelectFirstKeyword_0_0_0();
			return obj;
		}
		if("select-best".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getResolutionStrategyAccess().getStrategySelectBestKeyword_0_0_1();
			return obj;
		}
		return null;
	}

}

// "{"
protected class ResolutionStrategy_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public ResolutionStrategy_LeftCurlyBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getResolutionStrategyAccess().getLeftCurlyBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ResolutionStrategy_StrategyAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// repositoryConfig+=RepositoryConfiguration*
protected class ResolutionStrategy_RepositoryConfigAssignment_2 extends AssignmentToken  {
	
	public ResolutionStrategy_RepositoryConfigAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getResolutionStrategyAccess().getRepositoryConfigAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RepositoryConfiguration_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("repositoryConfig",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("repositoryConfig");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRepositoryConfigurationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getResolutionStrategyAccess().getRepositoryConfigRepositoryConfigurationParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ResolutionStrategy_RepositoryConfigAssignment_2(parent, next, actIndex, consumed);
			case 1: return new ResolutionStrategy_LeftCurlyBracketKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class ResolutionStrategy_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public ResolutionStrategy_RightCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getResolutionStrategyAccess().getRightCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ResolutionStrategy_RepositoryConfigAssignment_2(parent, this, 0, inst);
			case 1: return new ResolutionStrategy_LeftCurlyBracketKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ResolutionStrategy ****************/


/************ begin Rule ContainerConfiguration ****************
 *
 * ContainerConfiguration:
 *   documentation=DOCUMENTATION? "container" name=ID "agent" type=TypeRef contextBlock=
 *   ContextBlock?;
 *
 **/

// documentation=DOCUMENTATION? "container" name=ID "agent" type=TypeRef contextBlock=
// ContextBlock?
protected class ContainerConfiguration_Group extends GroupToken {
	
	public ContainerConfiguration_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getContainerConfigurationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContainerConfiguration_ContextBlockAssignment_5(parent, this, 0, inst);
			case 1: return new ContainerConfiguration_TypeAssignment_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getContainerConfigurationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// documentation=DOCUMENTATION?
protected class ContainerConfiguration_DocumentationAssignment_0 extends AssignmentToken  {
	
	public ContainerConfiguration_DocumentationAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getContainerConfigurationAccess().getDocumentationAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("documentation",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("documentation");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getContainerConfigurationAccess().getDocumentationDOCUMENTATIONTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "container"
protected class ContainerConfiguration_ContainerKeyword_1 extends KeywordToken  {
	
	public ContainerConfiguration_ContainerKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getContainerConfigurationAccess().getContainerKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContainerConfiguration_DocumentationAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class ContainerConfiguration_NameAssignment_2 extends AssignmentToken  {
	
	public ContainerConfiguration_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getContainerConfigurationAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContainerConfiguration_ContainerKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getContainerConfigurationAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "agent"
protected class ContainerConfiguration_AgentKeyword_3 extends KeywordToken  {
	
	public ContainerConfiguration_AgentKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getContainerConfigurationAccess().getAgentKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContainerConfiguration_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=TypeRef
protected class ContainerConfiguration_TypeAssignment_4 extends AssignmentToken  {
	
	public ContainerConfiguration_TypeAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getContainerConfigurationAccess().getTypeAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getContainerConfigurationAccess().getTypeTypeRefParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ContainerConfiguration_AgentKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// contextBlock=ContextBlock?
protected class ContainerConfiguration_ContextBlockAssignment_5 extends AssignmentToken  {
	
	public ContainerConfiguration_ContextBlockAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getContainerConfigurationAccess().getContextBlockAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContextBlock_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contextBlock",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contextBlock");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getContextBlockRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getContainerConfigurationAccess().getContextBlockContextBlockParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ContainerConfiguration_TypeAssignment_4(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ContainerConfiguration ****************/



/************ begin Rule Concern ****************
 *
 * Concern:
 *   documentation=DOCUMENTATION? "concern" name=ID concern=ConcernBlock;
 *
 **/

// documentation=DOCUMENTATION? "concern" name=ID concern=ConcernBlock
protected class Concern_Group extends GroupToken {
	
	public Concern_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConcernAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Concern_ConcernAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getConcernRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// documentation=DOCUMENTATION?
protected class Concern_DocumentationAssignment_0 extends AssignmentToken  {
	
	public Concern_DocumentationAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConcernAccess().getDocumentationAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("documentation",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("documentation");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getConcernAccess().getDocumentationDOCUMENTATIONTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "concern"
protected class Concern_ConcernKeyword_1 extends KeywordToken  {
	
	public Concern_ConcernKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConcernAccess().getConcernKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Concern_DocumentationAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class Concern_NameAssignment_2 extends AssignmentToken  {
	
	public Concern_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConcernAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Concern_ConcernKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getConcernAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// concern=ConcernBlock
protected class Concern_ConcernAssignment_3 extends AssignmentToken  {
	
	public Concern_ConcernAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConcernAccess().getConcernAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConcernBlock_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("concern",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("concern");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConcernBlockRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getConcernAccess().getConcernConcernBlockParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Concern_NameAssignment_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Concern ****************/


/************ begin Rule ConcernBlock ****************
 *
 * ConcernBlock:
 *   {ConcernBlock} ("extends" superConcerns+=ID ("," superConcerns+=ID)*)? "{" (contexts+=
 *   Context|functions+=Function)* "}";
 *
 **/

// {ConcernBlock} ("extends" superConcerns+=ID ("," superConcerns+=ID)*)? "{" (contexts+=
// Context|functions+=Function)* "}"
protected class ConcernBlock_Group extends GroupToken {
	
	public ConcernBlock_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConcernBlockAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConcernBlock_RightCurlyBracketKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getConcernBlockRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {ConcernBlock}
protected class ConcernBlock_ConcernBlockAction_0 extends ActionToken  {

	public ConcernBlock_ConcernBlockAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getConcernBlockAccess().getConcernBlockAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getConcernBlockAccess().getConcernBlockAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// ("extends" superConcerns+=ID ("," superConcerns+=ID)*)?
protected class ConcernBlock_Group_1 extends GroupToken {
	
	public ConcernBlock_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConcernBlockAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConcernBlock_Group_1_2(parent, this, 0, inst);
			case 1: return new ConcernBlock_SuperConcernsAssignment_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "extends"
protected class ConcernBlock_ExtendsKeyword_1_0 extends KeywordToken  {
	
	public ConcernBlock_ExtendsKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConcernBlockAccess().getExtendsKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConcernBlock_ConcernBlockAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// superConcerns+=ID
protected class ConcernBlock_SuperConcernsAssignment_1_1 extends AssignmentToken  {
	
	public ConcernBlock_SuperConcernsAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConcernBlockAccess().getSuperConcernsAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConcernBlock_ExtendsKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("superConcerns",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("superConcerns");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getConcernBlockAccess().getSuperConcernsIDTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// ("," superConcerns+=ID)*
protected class ConcernBlock_Group_1_2 extends GroupToken {
	
	public ConcernBlock_Group_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConcernBlockAccess().getGroup_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConcernBlock_SuperConcernsAssignment_1_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class ConcernBlock_CommaKeyword_1_2_0 extends KeywordToken  {
	
	public ConcernBlock_CommaKeyword_1_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConcernBlockAccess().getCommaKeyword_1_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConcernBlock_Group_1_2(parent, this, 0, inst);
			case 1: return new ConcernBlock_SuperConcernsAssignment_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// superConcerns+=ID
protected class ConcernBlock_SuperConcernsAssignment_1_2_1 extends AssignmentToken  {
	
	public ConcernBlock_SuperConcernsAssignment_1_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConcernBlockAccess().getSuperConcernsAssignment_1_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConcernBlock_CommaKeyword_1_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("superConcerns",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("superConcerns");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getConcernBlockAccess().getSuperConcernsIDTerminalRuleCall_1_2_1_0();
			return obj;
		}
		return null;
	}

}



// "{"
protected class ConcernBlock_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public ConcernBlock_LeftCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConcernBlockAccess().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConcernBlock_Group_1(parent, this, 0, inst);
			case 1: return new ConcernBlock_ConcernBlockAction_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// (contexts+=Context|functions+=Function)*
protected class ConcernBlock_Alternatives_3 extends AlternativesToken {

	public ConcernBlock_Alternatives_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getConcernBlockAccess().getAlternatives_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConcernBlock_ContextsAssignment_3_0(parent, this, 0, inst);
			case 1: return new ConcernBlock_FunctionsAssignment_3_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// contexts+=Context
protected class ConcernBlock_ContextsAssignment_3_0 extends AssignmentToken  {
	
	public ConcernBlock_ContextsAssignment_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConcernBlockAccess().getContextsAssignment_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Context_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contexts",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contexts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getContextRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getConcernBlockAccess().getContextsContextParserRuleCall_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ConcernBlock_Alternatives_3(parent, next, actIndex, consumed);
			case 1: return new ConcernBlock_LeftCurlyBracketKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// functions+=Function
protected class ConcernBlock_FunctionsAssignment_3_1 extends AssignmentToken  {
	
	public ConcernBlock_FunctionsAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConcernBlockAccess().getFunctionsAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("functions",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("functions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFunctionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getConcernBlockAccess().getFunctionsFunctionParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ConcernBlock_Alternatives_3(parent, next, actIndex, consumed);
			case 1: return new ConcernBlock_LeftCurlyBracketKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class ConcernBlock_RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public ConcernBlock_RightCurlyBracketKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConcernBlockAccess().getRightCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConcernBlock_Alternatives_3(parent, this, 0, inst);
			case 1: return new ConcernBlock_LeftCurlyBracketKeyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ConcernBlock ****************/


/************ begin Rule Filter ****************
 *
 * Filter:
 *   "(" predicate=Expression ")";
 *
 **/

// "(" predicate=Expression ")"
protected class Filter_Group extends GroupToken {
	
	public Filter_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFilterAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Filter_RightParenthesisKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFilterRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "("
protected class Filter_LeftParenthesisKeyword_0 extends KeywordToken  {
	
	public Filter_LeftParenthesisKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFilterAccess().getLeftParenthesisKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// predicate=Expression
protected class Filter_PredicateAssignment_1 extends AssignmentToken  {
	
	public Filter_PredicateAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFilterAccess().getPredicateAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("predicate",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("predicate");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFilterAccess().getPredicateExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Filter_LeftParenthesisKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class Filter_RightParenthesisKeyword_2 extends KeywordToken  {
	
	public Filter_RightParenthesisKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFilterAccess().getRightParenthesisKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Filter_PredicateAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Filter ****************/


/************ begin Rule PreCondition ****************
 *
 * PreCondition:
 *   "precondition" "{" asserts+=AssertionExpression+ "}";
 *
 **/

// "precondition" "{" asserts+=AssertionExpression+ "}"
protected class PreCondition_Group extends GroupToken {
	
	public PreCondition_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPreConditionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PreCondition_RightCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPreConditionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "precondition"
protected class PreCondition_PreconditionKeyword_0 extends KeywordToken  {
	
	public PreCondition_PreconditionKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreConditionAccess().getPreconditionKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "{"
protected class PreCondition_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public PreCondition_LeftCurlyBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreConditionAccess().getLeftCurlyBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PreCondition_PreconditionKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// asserts+=AssertionExpression+
protected class PreCondition_AssertsAssignment_2 extends AssignmentToken  {
	
	public PreCondition_AssertsAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreConditionAccess().getAssertsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssertionExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("asserts",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("asserts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssertionExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPreConditionAccess().getAssertsAssertionExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PreCondition_AssertsAssignment_2(parent, next, actIndex, consumed);
			case 1: return new PreCondition_LeftCurlyBracketKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class PreCondition_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public PreCondition_RightCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPreConditionAccess().getRightCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PreCondition_AssertsAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule PreCondition ****************/


/************ begin Rule PostCondition ****************
 *
 * PostCondition:
 *   "postcondition" "{" asserts+=AssertionExpression+ "}";
 *
 **/

// "postcondition" "{" asserts+=AssertionExpression+ "}"
protected class PostCondition_Group extends GroupToken {
	
	public PostCondition_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPostConditionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostCondition_RightCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPostConditionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "postcondition"
protected class PostCondition_PostconditionKeyword_0 extends KeywordToken  {
	
	public PostCondition_PostconditionKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPostConditionAccess().getPostconditionKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "{"
protected class PostCondition_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public PostCondition_LeftCurlyBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPostConditionAccess().getLeftCurlyBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostCondition_PostconditionKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// asserts+=AssertionExpression+
protected class PostCondition_AssertsAssignment_2 extends AssignmentToken  {
	
	public PostCondition_AssertsAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPostConditionAccess().getAssertsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssertionExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("asserts",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("asserts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssertionExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPostConditionAccess().getAssertsAssertionExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PostCondition_AssertsAssignment_2(parent, next, actIndex, consumed);
			case 1: return new PostCondition_LeftCurlyBracketKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class PostCondition_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public PostCondition_RightCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPostConditionAccess().getRightCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostCondition_AssertsAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule PostCondition ****************/


/************ begin Rule AssertionExpression ****************
 *
 * AssertionExpression:
 *   "assert" expr=Expression "," message=STRING ";";
 *
 **/

// "assert" expr=Expression "," message=STRING ";"
protected class AssertionExpression_Group extends GroupToken {
	
	public AssertionExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAssertionExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssertionExpression_SemicolonKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAssertionExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "assert"
protected class AssertionExpression_AssertKeyword_0 extends KeywordToken  {
	
	public AssertionExpression_AssertKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAssertionExpressionAccess().getAssertKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// expr=Expression
protected class AssertionExpression_ExprAssignment_1 extends AssignmentToken  {
	
	public AssertionExpression_ExprAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssertionExpressionAccess().getExprAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAssertionExpressionAccess().getExprExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AssertionExpression_AssertKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ","
protected class AssertionExpression_CommaKeyword_2 extends KeywordToken  {
	
	public AssertionExpression_CommaKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAssertionExpressionAccess().getCommaKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssertionExpression_ExprAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// message=STRING
protected class AssertionExpression_MessageAssignment_3 extends AssignmentToken  {
	
	public AssertionExpression_MessageAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssertionExpressionAccess().getMessageAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssertionExpression_CommaKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("message",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("message");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAssertionExpressionAccess().getMessageSTRINGTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class AssertionExpression_SemicolonKeyword_4 extends KeywordToken  {
	
	public AssertionExpression_SemicolonKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAssertionExpressionAccess().getSemicolonKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssertionExpression_MessageAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule AssertionExpression ****************/


/************ begin Rule ExpressionList ****************
 *
 * ExpressionList:
 *   (expressions+=Expression ";")+;
 *
 **/

// (expressions+=Expression ";")+
protected class ExpressionList_Group extends GroupToken {
	
	public ExpressionList_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExpressionListAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExpressionList_SemicolonKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getExpressionListRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// expressions+=Expression
protected class ExpressionList_ExpressionsAssignment_0 extends AssignmentToken  {
	
	public ExpressionList_ExpressionsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExpressionListAccess().getExpressionsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expressions",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expressions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getExpressionListAccess().getExpressionsExpressionParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExpressionList_Group(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// ";"
protected class ExpressionList_SemicolonKeyword_1 extends KeywordToken  {
	
	public ExpressionList_SemicolonKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExpressionListAccess().getSemicolonKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExpressionList_ExpressionsAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ExpressionList ****************/


/************ begin Rule Function ****************
 *
 * Function returns be::B3Function:
 *   {be::B3Function} documentation=DOCUMENTATION? visibility=Visibility? executionMode=
 *   ExecutionMode? final?="final"? "function" returnType=TypeRef? name=ID ("(" (parameters
 *   +=ParameterDeclaration ("," parameters+=ParameterDeclaration)* ("," varArgs?="..."
 *   parameters+=ParameterDeclaration)?|varArgs?="..." parameters+=
 *   ParameterDeclaration)? ")")? (":" funcExpr=Expression ";"|funcExpr=BlockExpression); 
 * 
 *       
 * 	    
 *    	    
 *         	   	
 *    	    
 *    	
 *    	    
 *    	 
 * //   	( '<' typeParams+= TypeParamDeclaration (',' typeParams+=TypeParamDeclaration)* '>')? // TODO: add support for this in the model
 *    	   
 *    		                      
 *    		            
 *    		    
 *    	        
 * 	
 * 	
 * //TypeParamDeclaration 
 * //	: ID ( ("extends" type+= TypeRef ('&' type+=TypeRef)*) | ("super" superType=TypeRef))?
 * //	;
 * 		
 * / * EXPRESSIONS * /
 *
 **/

// {be::B3Function} documentation=DOCUMENTATION? visibility=Visibility? executionMode=
// ExecutionMode? final?="final"? "function" returnType=TypeRef? name=ID ("(" (parameters
// +=ParameterDeclaration ("," parameters+=ParameterDeclaration)* ("," varArgs?="..."
// parameters+=ParameterDeclaration)?|varArgs?="..." parameters+=
// ParameterDeclaration)? ")")? (":" funcExpr=Expression ";"|funcExpr=BlockExpression)   
// 	    
//    	    
//         	   	
//    	    
//    	
//    	    
//    	 
// //   	( '<' typeParams+= TypeParamDeclaration (',' typeParams+=TypeParamDeclaration)* '>')? // TODO: add support for this in the model
protected class Function_Group extends GroupToken {
	
	public Function_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFunctionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_Alternatives_9(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFunctionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::B3Function}
protected class Function_B3FunctionAction_0 extends ActionToken  {

	public Function_B3FunctionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getFunctionAccess().getB3FunctionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getFunctionAccess().getB3FunctionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// documentation=DOCUMENTATION?
protected class Function_DocumentationAssignment_1 extends AssignmentToken  {
	
	public Function_DocumentationAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionAccess().getDocumentationAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_B3FunctionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("documentation",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("documentation");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFunctionAccess().getDocumentationDOCUMENTATIONTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// visibility=Visibility?
protected class Function_VisibilityAssignment_2 extends AssignmentToken  {
	
	public Function_VisibilityAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionAccess().getVisibilityAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_DocumentationAssignment_1(parent, this, 0, inst);
			case 1: return new Function_B3FunctionAction_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("visibility",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("visibility");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getFunctionAccess().getVisibilityVisibilityEnumRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// executionMode=ExecutionMode?
protected class Function_ExecutionModeAssignment_3 extends AssignmentToken  {
	
	public Function_ExecutionModeAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionAccess().getExecutionModeAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_VisibilityAssignment_2(parent, this, 0, inst);
			case 1: return new Function_DocumentationAssignment_1(parent, this, 1, inst);
			case 2: return new Function_B3FunctionAction_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("executionMode",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("executionMode");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getFunctionAccess().getExecutionModeExecutionModeEnumRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// final?="final"?
protected class Function_FinalAssignment_4 extends AssignmentToken  {
	
	public Function_FinalAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionAccess().getFinalAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_ExecutionModeAssignment_3(parent, this, 0, inst);
			case 1: return new Function_VisibilityAssignment_2(parent, this, 1, inst);
			case 2: return new Function_DocumentationAssignment_1(parent, this, 2, inst);
			case 3: return new Function_B3FunctionAction_0(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("final",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("final");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getFunctionAccess().getFinalFinalKeyword_4_0();
			return obj;
		}
		return null;
	}

}

// "function"
protected class Function_FunctionKeyword_5 extends KeywordToken  {
	
	public Function_FunctionKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionAccess().getFunctionKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_FinalAssignment_4(parent, this, 0, inst);
			case 1: return new Function_ExecutionModeAssignment_3(parent, this, 1, inst);
			case 2: return new Function_VisibilityAssignment_2(parent, this, 2, inst);
			case 3: return new Function_DocumentationAssignment_1(parent, this, 3, inst);
			case 4: return new Function_B3FunctionAction_0(parent, this, 4, inst);
			default: return null;
		}	
	}	
		
}

// returnType=TypeRef?
protected class Function_ReturnTypeAssignment_6 extends AssignmentToken  {
	
	public Function_ReturnTypeAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionAccess().getReturnTypeAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("returnType",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("returnType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFunctionAccess().getReturnTypeTypeRefParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Function_FunctionKeyword_5(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// name=ID 
//    	 
// //   	( '<' typeParams+= TypeParamDeclaration (',' typeParams+=TypeParamDeclaration)* '>')? // TODO: add support for this in the model
protected class Function_NameAssignment_7 extends AssignmentToken  {
	
	public Function_NameAssignment_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionAccess().getNameAssignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_ReturnTypeAssignment_6(parent, this, 0, inst);
			case 1: return new Function_FunctionKeyword_5(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_7_0();
			return obj;
		}
		return null;
	}

}

// ("(" (parameters+=ParameterDeclaration ("," parameters+=ParameterDeclaration)* (","
// varArgs?="..." parameters+=ParameterDeclaration)?|varArgs?="..." parameters+=
// ParameterDeclaration)? ")")?
protected class Function_Group_8 extends GroupToken {
	
	public Function_Group_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFunctionAccess().getGroup_8();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_RightParenthesisKeyword_8_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class Function_LeftParenthesisKeyword_8_0 extends KeywordToken  {
	
	public Function_LeftParenthesisKeyword_8_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_8_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_NameAssignment_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (parameters+=ParameterDeclaration ("," parameters+=ParameterDeclaration)* (","
// varArgs?="..." parameters+=ParameterDeclaration)?|varArgs?="..." parameters+=
// ParameterDeclaration)?
protected class Function_Alternatives_8_1 extends AlternativesToken {

	public Function_Alternatives_8_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getFunctionAccess().getAlternatives_8_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_Group_8_1_0(parent, this, 0, inst);
			case 1: return new Function_Group_8_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// parameters+=ParameterDeclaration ("," parameters+=ParameterDeclaration)* (","
// varArgs?="..." parameters+=ParameterDeclaration)?
protected class Function_Group_8_1_0 extends GroupToken {
	
	public Function_Group_8_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFunctionAccess().getGroup_8_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_Group_8_1_0_2(parent, this, 0, inst);
			case 1: return new Function_Group_8_1_0_1(parent, this, 1, inst);
			case 2: return new Function_ParametersAssignment_8_1_0_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// parameters+=ParameterDeclaration
protected class Function_ParametersAssignment_8_1_0_0 extends AssignmentToken  {
	
	public Function_ParametersAssignment_8_1_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionAccess().getParametersAssignment_8_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameters",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFunctionAccess().getParametersParameterDeclarationParserRuleCall_8_1_0_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Function_LeftParenthesisKeyword_8_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," parameters+=ParameterDeclaration)*
protected class Function_Group_8_1_0_1 extends GroupToken {
	
	public Function_Group_8_1_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFunctionAccess().getGroup_8_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_ParametersAssignment_8_1_0_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Function_CommaKeyword_8_1_0_1_0 extends KeywordToken  {
	
	public Function_CommaKeyword_8_1_0_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionAccess().getCommaKeyword_8_1_0_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_Group_8_1_0_1(parent, this, 0, inst);
			case 1: return new Function_ParametersAssignment_8_1_0_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// parameters+=ParameterDeclaration
protected class Function_ParametersAssignment_8_1_0_1_1 extends AssignmentToken  {
	
	public Function_ParametersAssignment_8_1_0_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionAccess().getParametersAssignment_8_1_0_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameters",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFunctionAccess().getParametersParameterDeclarationParserRuleCall_8_1_0_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Function_CommaKeyword_8_1_0_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("," varArgs?="..." parameters+=ParameterDeclaration)?
protected class Function_Group_8_1_0_2 extends GroupToken {
	
	public Function_Group_8_1_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFunctionAccess().getGroup_8_1_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_ParametersAssignment_8_1_0_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Function_CommaKeyword_8_1_0_2_0 extends KeywordToken  {
	
	public Function_CommaKeyword_8_1_0_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionAccess().getCommaKeyword_8_1_0_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_Group_8_1_0_1(parent, this, 0, inst);
			case 1: return new Function_ParametersAssignment_8_1_0_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// varArgs?="..."
protected class Function_VarArgsAssignment_8_1_0_2_1 extends AssignmentToken  {
	
	public Function_VarArgsAssignment_8_1_0_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionAccess().getVarArgsAssignment_8_1_0_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_CommaKeyword_8_1_0_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("varArgs",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("varArgs");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getFunctionAccess().getVarArgsFullStopFullStopFullStopKeyword_8_1_0_2_1_0();
			return obj;
		}
		return null;
	}

}

// parameters+=ParameterDeclaration
protected class Function_ParametersAssignment_8_1_0_2_2 extends AssignmentToken  {
	
	public Function_ParametersAssignment_8_1_0_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionAccess().getParametersAssignment_8_1_0_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameters",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFunctionAccess().getParametersParameterDeclarationParserRuleCall_8_1_0_2_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Function_VarArgsAssignment_8_1_0_2_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// varArgs?="..." parameters+=ParameterDeclaration
protected class Function_Group_8_1_1 extends GroupToken {
	
	public Function_Group_8_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFunctionAccess().getGroup_8_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_ParametersAssignment_8_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// varArgs?="..."
protected class Function_VarArgsAssignment_8_1_1_0 extends AssignmentToken  {
	
	public Function_VarArgsAssignment_8_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionAccess().getVarArgsAssignment_8_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_LeftParenthesisKeyword_8_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("varArgs",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("varArgs");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getFunctionAccess().getVarArgsFullStopFullStopFullStopKeyword_8_1_1_0_0();
			return obj;
		}
		return null;
	}

}

// parameters+=ParameterDeclaration
protected class Function_ParametersAssignment_8_1_1_1 extends AssignmentToken  {
	
	public Function_ParametersAssignment_8_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionAccess().getParametersAssignment_8_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameters",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFunctionAccess().getParametersParameterDeclarationParserRuleCall_8_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Function_VarArgsAssignment_8_1_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class Function_RightParenthesisKeyword_8_2 extends KeywordToken  {
	
	public Function_RightParenthesisKeyword_8_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionAccess().getRightParenthesisKeyword_8_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_Alternatives_8_1(parent, this, 0, inst);
			case 1: return new Function_LeftParenthesisKeyword_8_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// ":" funcExpr=Expression ";"|funcExpr=BlockExpression
protected class Function_Alternatives_9 extends AlternativesToken {

	public Function_Alternatives_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getFunctionAccess().getAlternatives_9();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_Group_9_0(parent, this, 0, inst);
			case 1: return new Function_FuncExprAssignment_9_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ":" funcExpr=Expression ";"
protected class Function_Group_9_0 extends GroupToken {
	
	public Function_Group_9_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFunctionAccess().getGroup_9_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_SemicolonKeyword_9_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ":"
protected class Function_ColonKeyword_9_0_0 extends KeywordToken  {
	
	public Function_ColonKeyword_9_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionAccess().getColonKeyword_9_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_Group_8(parent, this, 0, inst);
			case 1: return new Function_NameAssignment_7(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// funcExpr=Expression
protected class Function_FuncExprAssignment_9_0_1 extends AssignmentToken  {
	
	public Function_FuncExprAssignment_9_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionAccess().getFuncExprAssignment_9_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("funcExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("funcExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFunctionAccess().getFuncExprExpressionParserRuleCall_9_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Function_ColonKeyword_9_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Function_SemicolonKeyword_9_0_2 extends KeywordToken  {
	
	public Function_SemicolonKeyword_9_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionAccess().getSemicolonKeyword_9_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_FuncExprAssignment_9_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// funcExpr=BlockExpression
protected class Function_FuncExprAssignment_9_1 extends AssignmentToken  {
	
	public Function_FuncExprAssignment_9_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionAccess().getFuncExprAssignment_9_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BlockExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("funcExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("funcExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBlockExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFunctionAccess().getFuncExprBlockExpressionParserRuleCall_9_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Function_Group_8(parent, next, actIndex, consumed);
			case 1: return new Function_NameAssignment_7(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Function ****************/




/************ begin Rule TopLevelExpression ****************
 *
 * TopLevelExpression returns be::BExpression:
 *   VarDeclaration|ValDeclaration|AssignmentExpression; 
 * 
 * // All expressions, including variable and value definitions
 *      
 * 	           
 * 	
 * 
 * // All expressions except variable and value definitions
 *
 **/

// VarDeclaration|ValDeclaration|AssignmentExpression 
// 
// // All expressions, including variable and value definitions
//      
// 	           
// 	
// 
// // All expressions except variable and value definitions
protected class TopLevelExpression_Alternatives extends AlternativesToken {

	public TopLevelExpression_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTopLevelExpressionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TopLevelExpression_VarDeclarationParserRuleCall_0(parent, this, 0, inst);
			case 1: return new TopLevelExpression_ValDeclarationParserRuleCall_1(parent, this, 1, inst);
			case 2: return new TopLevelExpression_AssignmentExpressionParserRuleCall_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTopLevelExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// VarDeclaration
protected class TopLevelExpression_VarDeclarationParserRuleCall_0 extends RuleCallToken {
	
	public TopLevelExpression_VarDeclarationParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTopLevelExpressionAccess().getVarDeclarationParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(VarDeclaration_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getVarDeclarationRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ValDeclaration
protected class TopLevelExpression_ValDeclarationParserRuleCall_1 extends RuleCallToken {
	
	public TopLevelExpression_ValDeclarationParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTopLevelExpressionAccess().getValDeclarationParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ValDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ValDeclaration_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getValDeclarationRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// AssignmentExpression
protected class TopLevelExpression_AssignmentExpressionParserRuleCall_2 extends RuleCallToken {
	
	public TopLevelExpression_AssignmentExpressionParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTopLevelExpressionAccess().getAssignmentExpressionParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignmentExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AssignmentExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAssignmentExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule TopLevelExpression ****************/


/************ begin Rule Expression ****************
 *
 * Expression returns be::BExpression:
 *   AssignmentExpression; 
 * 
 * // All expressions except variable and value definitions
 *
 **/

// AssignmentExpression
protected class Expression_AssignmentExpressionParserRuleCall extends RuleCallToken {
	
	public Expression_AssignmentExpressionParserRuleCall(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignmentExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AssignmentExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAssignmentExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule Expression ****************/


/************ begin Rule AssignmentExpression ****************
 *
 * AssignmentExpression returns be::BExpression:
 *   CachedExpression ({be::BAssignmentExpression.leftExpr=current} functionName=
 *   AssignmentOperator rightExpr=AssignmentExpression)?; 
 * 
 * 
 *     
 * 	// note: VarDecl | OrExpr is order dependant
 * 	      
 * 	 	  
 * 		
 * 
 * //AssignmentExpression returns be::BExpression:
 * //	// note: VarDecl | OrExpr is order dependant
 * //	 (VarDeclaration | ValDeclaration | CachedExpression) ({be::BAssignmentExpression.leftExpr=current} 
 * //	 	functionName=AssignmentOperator rightExpr=AssignmentExpression)?
 * //	;
 *
 **/

// CachedExpression ({be::BAssignmentExpression.leftExpr=current} functionName=
// AssignmentOperator rightExpr=AssignmentExpression)? 
// 	// note: VarDecl | OrExpr is order dependant
protected class AssignmentExpression_Group extends GroupToken {
	
	public AssignmentExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAssignmentExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignmentExpression_Group_1(parent, this, 0, inst);
			case 1: return new AssignmentExpression_CachedExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAssignmentExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// CachedExpression 
// 	// note: VarDecl | OrExpr is order dependant
protected class AssignmentExpression_CachedExpressionParserRuleCall_0 extends RuleCallToken {
	
	public AssignmentExpression_CachedExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAssignmentExpressionAccess().getCachedExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CachedExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CachedExpression_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCachedExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({be::BAssignmentExpression.leftExpr=current} functionName=AssignmentOperator
// rightExpr=AssignmentExpression)?
protected class AssignmentExpression_Group_1 extends GroupToken {
	
	public AssignmentExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAssignmentExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignmentExpression_RightExprAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {be::BAssignmentExpression.leftExpr=current}
protected class AssignmentExpression_BAssignmentExpressionLeftExprAction_1_0 extends ActionToken  {

	public AssignmentExpression_BAssignmentExpressionLeftExprAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAssignmentExpressionAccess().getBAssignmentExpressionLeftExprAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignmentExpression_CachedExpressionParserRuleCall_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getAssignmentExpressionAccess().getBAssignmentExpressionLeftExprAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("leftExpr", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("leftExpr")) return null;
		return getDescr((EObject) val);
	}
}

// functionName=AssignmentOperator
protected class AssignmentExpression_FunctionNameAssignment_1_1 extends AssignmentToken  {
	
	public AssignmentExpression_FunctionNameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssignmentExpressionAccess().getFunctionNameAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignmentExpression_BAssignmentExpressionLeftExprAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("functionName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("functionName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getAssignmentExpressionAccess().getFunctionNameAssignmentOperatorParserRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// rightExpr=AssignmentExpression
protected class AssignmentExpression_RightExprAssignment_1_2 extends AssignmentToken  {
	
	public AssignmentExpression_RightExprAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssignmentExpressionAccess().getRightExprAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignmentExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("rightExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("rightExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssignmentExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAssignmentExpressionAccess().getRightExprAssignmentExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AssignmentExpression_FunctionNameAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AssignmentExpression ****************/


/************ begin Rule VarDeclaration ****************
 *
 * VarDeclaration returns be::BExpression:
 *   {be::BDefValue} final?="final"? (("var"|type=TypeRef) name=ID) ("=" valueExpr=
 *   Expression)?; 	
 * 
 * //AssignmentExpression returns be::BExpression:
 * //	// note: VarDecl | OrExpr is order dependant
 * //	 (VarDeclaration | ValDeclaration | CachedExpression) ({be::BAssignmentExpression.leftExpr=current} 
 * //	 	functionName=AssignmentOperator rightExpr=AssignmentExpression)?
 * //	;
 *
 **/

// {be::BDefValue} final?="final"? (("var"|type=TypeRef) name=ID) ("=" valueExpr=
// Expression)?
protected class VarDeclaration_Group extends GroupToken {
	
	public VarDeclaration_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getVarDeclarationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarDeclaration_Group_3(parent, this, 0, inst);
			case 1: return new VarDeclaration_Group_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getVarDeclarationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BDefValue}
protected class VarDeclaration_BDefValueAction_0 extends ActionToken  {

	public VarDeclaration_BDefValueAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getVarDeclarationAccess().getBDefValueAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getVarDeclarationAccess().getBDefValueAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// final?="final"?
protected class VarDeclaration_FinalAssignment_1 extends AssignmentToken  {
	
	public VarDeclaration_FinalAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVarDeclarationAccess().getFinalAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarDeclaration_BDefValueAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("final",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("final");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getVarDeclarationAccess().getFinalFinalKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// ("var"|type=TypeRef) name=ID
protected class VarDeclaration_Group_2 extends GroupToken {
	
	public VarDeclaration_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getVarDeclarationAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarDeclaration_NameAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "var"|type=TypeRef
protected class VarDeclaration_Alternatives_2_0 extends AlternativesToken {

	public VarDeclaration_Alternatives_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getVarDeclarationAccess().getAlternatives_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarDeclaration_VarKeyword_2_0_0(parent, this, 0, inst);
			case 1: return new VarDeclaration_TypeAssignment_2_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "var"
protected class VarDeclaration_VarKeyword_2_0_0 extends KeywordToken  {
	
	public VarDeclaration_VarKeyword_2_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getVarDeclarationAccess().getVarKeyword_2_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarDeclaration_FinalAssignment_1(parent, this, 0, inst);
			case 1: return new VarDeclaration_BDefValueAction_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// type=TypeRef
protected class VarDeclaration_TypeAssignment_2_0_1 extends AssignmentToken  {
	
	public VarDeclaration_TypeAssignment_2_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVarDeclarationAccess().getTypeAssignment_2_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getVarDeclarationAccess().getTypeTypeRefParserRuleCall_2_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new VarDeclaration_FinalAssignment_1(parent, next, actIndex, consumed);
			case 1: return new VarDeclaration_BDefValueAction_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// name=ID
protected class VarDeclaration_NameAssignment_2_1 extends AssignmentToken  {
	
	public VarDeclaration_NameAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVarDeclarationAccess().getNameAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarDeclaration_Alternatives_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getVarDeclarationAccess().getNameIDTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}


// ("=" valueExpr=Expression)?
protected class VarDeclaration_Group_3 extends GroupToken {
	
	public VarDeclaration_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getVarDeclarationAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarDeclaration_ValueExprAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "="
protected class VarDeclaration_EqualsSignKeyword_3_0 extends KeywordToken  {
	
	public VarDeclaration_EqualsSignKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getVarDeclarationAccess().getEqualsSignKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarDeclaration_Group_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// valueExpr=Expression
protected class VarDeclaration_ValueExprAssignment_3_1 extends AssignmentToken  {
	
	public VarDeclaration_ValueExprAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVarDeclarationAccess().getValueExprAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("valueExpr",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("valueExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getVarDeclarationAccess().getValueExprExpressionParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new VarDeclaration_EqualsSignKeyword_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule VarDeclaration ****************/


/************ begin Rule ValDeclaration ****************
 *
 * ValDeclaration returns be::BExpression:
 *   {be::BDefValue} final?="final"? immutable?="val" type=TypeRef? name=ID "=" valueExpr=
 *   Expression;
 *
 **/

// {be::BDefValue} final?="final"? immutable?="val" type=TypeRef? name=ID "=" valueExpr=
// Expression
protected class ValDeclaration_Group extends GroupToken {
	
	public ValDeclaration_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getValDeclarationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ValDeclaration_ValueExprAssignment_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getValDeclarationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BDefValue}
protected class ValDeclaration_BDefValueAction_0 extends ActionToken  {

	public ValDeclaration_BDefValueAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getValDeclarationAccess().getBDefValueAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getValDeclarationAccess().getBDefValueAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// final?="final"?
protected class ValDeclaration_FinalAssignment_1 extends AssignmentToken  {
	
	public ValDeclaration_FinalAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getValDeclarationAccess().getFinalAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ValDeclaration_BDefValueAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("final",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("final");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getValDeclarationAccess().getFinalFinalKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// immutable?="val"
protected class ValDeclaration_ImmutableAssignment_2 extends AssignmentToken  {
	
	public ValDeclaration_ImmutableAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getValDeclarationAccess().getImmutableAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ValDeclaration_FinalAssignment_1(parent, this, 0, inst);
			case 1: return new ValDeclaration_BDefValueAction_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("immutable",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("immutable");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getValDeclarationAccess().getImmutableValKeyword_2_0();
			return obj;
		}
		return null;
	}

}

// type=TypeRef?
protected class ValDeclaration_TypeAssignment_3 extends AssignmentToken  {
	
	public ValDeclaration_TypeAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getValDeclarationAccess().getTypeAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getValDeclarationAccess().getTypeTypeRefParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ValDeclaration_ImmutableAssignment_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// name=ID
protected class ValDeclaration_NameAssignment_4 extends AssignmentToken  {
	
	public ValDeclaration_NameAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getValDeclarationAccess().getNameAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ValDeclaration_TypeAssignment_3(parent, this, 0, inst);
			case 1: return new ValDeclaration_ImmutableAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getValDeclarationAccess().getNameIDTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// "="
protected class ValDeclaration_EqualsSignKeyword_5 extends KeywordToken  {
	
	public ValDeclaration_EqualsSignKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getValDeclarationAccess().getEqualsSignKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ValDeclaration_NameAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// valueExpr=Expression
protected class ValDeclaration_ValueExprAssignment_6 extends AssignmentToken  {
	
	public ValDeclaration_ValueExprAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getValDeclarationAccess().getValueExprAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("valueExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("valueExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getValDeclarationAccess().getValueExprExpressionParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ValDeclaration_EqualsSignKeyword_5(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ValDeclaration ****************/


/************ begin Rule TypeRef ****************
 *
 * TypeRef returns be::IType:
 *   ClosureTypeRef|SimpleTypeRef; 
 * 		
 *              // TODO: gets lots of warnings from this...
 *
 **/

// ClosureTypeRef|SimpleTypeRef 
// 		
//              // TODO: gets lots of warnings from this...
protected class TypeRef_Alternatives extends AlternativesToken {

	public TypeRef_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTypeRefAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_ClosureTypeRefParserRuleCall_0(parent, this, 0, inst);
			case 1: return new TypeRef_SimpleTypeRefParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ClosureTypeRef
protected class TypeRef_ClosureTypeRefParserRuleCall_0 extends RuleCallToken {
	
	public TypeRef_ClosureTypeRefParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeRefAccess().getClosureTypeRefParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureTypeRef_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ClosureTypeRef_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getClosureTypeRefRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// SimpleTypeRef
protected class TypeRef_SimpleTypeRefParserRuleCall_1 extends RuleCallToken {
	
	public TypeRef_SimpleTypeRefParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeRefAccess().getSimpleTypeRefParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleTypeRef_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(SimpleTypeRef_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSimpleTypeRefRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule TypeRef ****************/


/************ begin Rule SimpleTypeRef ****************
 *
 * SimpleTypeRef returns be::IType:
 *   {be::B3ParameterizedType} rawType=[be::B3JavaImport] ("<" actualArgumentsList+=[be
 *   ::B3JavaImport] ("," actualArgumentsList+=[be::B3JavaImport])* ">")?;   // TODO: gets lots of warnings from this...
 *     
 * 	         
 * 		                  
 * //		('<' actualArgumentsList+=TypeParam (',' actualArgumentsList+=TypeParam)* '>' )? // TODO: Support wildcard as well
 * 	 
 * 	
 * // TODO: typereference is simplified to only the name of a java type - for model imports
 * // the model is imported with name == namespace, and types in the model are referenced after
 * // '::' e.g. "resource:a resouceURi.ecore" as mymodel, and a classifier in this model is
 * // referenced as mymodel::mytype
 * // There is more work required to link a reference to such a type and it is therefore deferred
 * // until we are up on Xtext 0.8 with better scoping and linking.
 * // For now, this is just proof of concept.
 * // 
 * 
 * // ClosureTypeRef declares parameters and return type	TODO: use TypeRef instead of direct reference to imported class
 *
 **/

// {be::B3ParameterizedType} rawType=[be::B3JavaImport] ("<" actualArgumentsList+=[be
// ::B3JavaImport] ("," actualArgumentsList+=[be::B3JavaImport])* ">")?          
// 		                  
// //		('<' actualArgumentsList+=TypeParam (',' actualArgumentsList+=TypeParam)* '>' )? // TODO: Support wildcard as well
protected class SimpleTypeRef_Group extends GroupToken {
	
	public SimpleTypeRef_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSimpleTypeRefAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleTypeRef_Group_2(parent, this, 0, inst);
			case 1: return new SimpleTypeRef_RawTypeAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSimpleTypeRefRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::B3ParameterizedType}
protected class SimpleTypeRef_B3ParameterizedTypeAction_0 extends ActionToken  {

	public SimpleTypeRef_B3ParameterizedTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getSimpleTypeRefAccess().getB3ParameterizedTypeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getSimpleTypeRefAccess().getB3ParameterizedTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// rawType=[be::B3JavaImport]
protected class SimpleTypeRef_RawTypeAssignment_1 extends AssignmentToken  {
	
	public SimpleTypeRef_RawTypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleTypeRefAccess().getRawTypeAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleTypeRef_B3ParameterizedTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("rawType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("rawType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSimpleTypeRefAccess().getRawTypeB3JavaImportCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getSimpleTypeRefAccess().getRawTypeB3JavaImportCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("<" actualArgumentsList+=[be::B3JavaImport] ("," actualArgumentsList+=[be::
// B3JavaImport])* ">")?
protected class SimpleTypeRef_Group_2 extends GroupToken {
	
	public SimpleTypeRef_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSimpleTypeRefAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleTypeRef_GreaterThanSignKeyword_2_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "<"
protected class SimpleTypeRef_LessThanSignKeyword_2_0 extends KeywordToken  {
	
	public SimpleTypeRef_LessThanSignKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleTypeRefAccess().getLessThanSignKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleTypeRef_RawTypeAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// actualArgumentsList+=[be::B3JavaImport]
protected class SimpleTypeRef_ActualArgumentsListAssignment_2_1 extends AssignmentToken  {
	
	public SimpleTypeRef_ActualArgumentsListAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleTypeRefAccess().getActualArgumentsListAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleTypeRef_LessThanSignKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("actualArgumentsList",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("actualArgumentsList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSimpleTypeRefAccess().getActualArgumentsListB3JavaImportCrossReference_2_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getSimpleTypeRefAccess().getActualArgumentsListB3JavaImportCrossReference_2_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("," actualArgumentsList+=[be::B3JavaImport])*
protected class SimpleTypeRef_Group_2_2 extends GroupToken {
	
	public SimpleTypeRef_Group_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSimpleTypeRefAccess().getGroup_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleTypeRef_ActualArgumentsListAssignment_2_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class SimpleTypeRef_CommaKeyword_2_2_0 extends KeywordToken  {
	
	public SimpleTypeRef_CommaKeyword_2_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleTypeRefAccess().getCommaKeyword_2_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleTypeRef_Group_2_2(parent, this, 0, inst);
			case 1: return new SimpleTypeRef_ActualArgumentsListAssignment_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// actualArgumentsList+=[be::B3JavaImport]
protected class SimpleTypeRef_ActualArgumentsListAssignment_2_2_1 extends AssignmentToken  {
	
	public SimpleTypeRef_ActualArgumentsListAssignment_2_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleTypeRefAccess().getActualArgumentsListAssignment_2_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleTypeRef_CommaKeyword_2_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("actualArgumentsList",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("actualArgumentsList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSimpleTypeRefAccess().getActualArgumentsListB3JavaImportCrossReference_2_2_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getSimpleTypeRefAccess().getActualArgumentsListB3JavaImportCrossReference_2_2_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// ">"
protected class SimpleTypeRef_GreaterThanSignKeyword_2_3 extends KeywordToken  {
	
	public SimpleTypeRef_GreaterThanSignKeyword_2_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleTypeRefAccess().getGreaterThanSignKeyword_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleTypeRef_Group_2_2(parent, this, 0, inst);
			case 1: return new SimpleTypeRef_ActualArgumentsListAssignment_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule SimpleTypeRef ****************/


/************ begin Rule ClosureTypeRef ****************
 *
 * ClosureTypeRef returns be::IType:
 *   {be::B3FunctionType} ("(" (parameterTypes+=[be::B3JavaImport] ("," parameterTypes+=[
 *   be::B3JavaImport])*)? ")" "=>" returnType=[be::B3JavaImport]); 
 * 	
 * // TODO: typereference is simplified to only the name of a java type - for model imports
 * // the model is imported with name == namespace, and types in the model are referenced after
 * // '::' e.g. "resource:a resouceURi.ecore" as mymodel, and a classifier in this model is
 * // referenced as mymodel::mytype
 * // There is more work required to link a reference to such a type and it is therefore deferred
 * // until we are up on Xtext 0.8 with better scoping and linking.
 * // For now, this is just proof of concept.
 * // 
 * 
 * // ClosureTypeRef declares parameters and return type	TODO: use TypeRef instead of direct reference to imported class
 *
 **/

// {be::B3FunctionType} ("(" (parameterTypes+=[be::B3JavaImport] ("," parameterTypes+=[
// be::B3JavaImport])*)? ")" "=>" returnType=[be::B3JavaImport])
protected class ClosureTypeRef_Group extends GroupToken {
	
	public ClosureTypeRef_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getClosureTypeRefAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureTypeRef_Group_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getClosureTypeRefRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::B3FunctionType}
protected class ClosureTypeRef_B3FunctionTypeAction_0 extends ActionToken  {

	public ClosureTypeRef_B3FunctionTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getClosureTypeRefAccess().getB3FunctionTypeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getClosureTypeRefAccess().getB3FunctionTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "(" (parameterTypes+=[be::B3JavaImport] ("," parameterTypes+=[be::B3JavaImport])*)?
// ")" "=>" returnType=[be::B3JavaImport]
protected class ClosureTypeRef_Group_1 extends GroupToken {
	
	public ClosureTypeRef_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getClosureTypeRefAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureTypeRef_ReturnTypeAssignment_1_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class ClosureTypeRef_LeftParenthesisKeyword_1_0 extends KeywordToken  {
	
	public ClosureTypeRef_LeftParenthesisKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureTypeRefAccess().getLeftParenthesisKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureTypeRef_B3FunctionTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (parameterTypes+=[be::B3JavaImport] ("," parameterTypes+=[be::B3JavaImport])*)?
protected class ClosureTypeRef_Group_1_1 extends GroupToken {
	
	public ClosureTypeRef_Group_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getClosureTypeRefAccess().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureTypeRef_Group_1_1_1(parent, this, 0, inst);
			case 1: return new ClosureTypeRef_ParameterTypesAssignment_1_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// parameterTypes+=[be::B3JavaImport]
protected class ClosureTypeRef_ParameterTypesAssignment_1_1_0 extends AssignmentToken  {
	
	public ClosureTypeRef_ParameterTypesAssignment_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getClosureTypeRefAccess().getParameterTypesAssignment_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureTypeRef_LeftParenthesisKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameterTypes",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameterTypes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getClosureTypeRefAccess().getParameterTypesB3JavaImportCrossReference_1_1_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getClosureTypeRefAccess().getParameterTypesB3JavaImportCrossReference_1_1_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("," parameterTypes+=[be::B3JavaImport])*
protected class ClosureTypeRef_Group_1_1_1 extends GroupToken {
	
	public ClosureTypeRef_Group_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getClosureTypeRefAccess().getGroup_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureTypeRef_ParameterTypesAssignment_1_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class ClosureTypeRef_CommaKeyword_1_1_1_0 extends KeywordToken  {
	
	public ClosureTypeRef_CommaKeyword_1_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureTypeRefAccess().getCommaKeyword_1_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureTypeRef_Group_1_1_1(parent, this, 0, inst);
			case 1: return new ClosureTypeRef_ParameterTypesAssignment_1_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// parameterTypes+=[be::B3JavaImport]
protected class ClosureTypeRef_ParameterTypesAssignment_1_1_1_1 extends AssignmentToken  {
	
	public ClosureTypeRef_ParameterTypesAssignment_1_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getClosureTypeRefAccess().getParameterTypesAssignment_1_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureTypeRef_CommaKeyword_1_1_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameterTypes",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameterTypes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getClosureTypeRefAccess().getParameterTypesB3JavaImportCrossReference_1_1_1_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getClosureTypeRefAccess().getParameterTypesB3JavaImportCrossReference_1_1_1_1_0(); 
				return obj;
			}
		}
		return null;
	}

}



// ")"
protected class ClosureTypeRef_RightParenthesisKeyword_1_2 extends KeywordToken  {
	
	public ClosureTypeRef_RightParenthesisKeyword_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureTypeRefAccess().getRightParenthesisKeyword_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureTypeRef_Group_1_1(parent, this, 0, inst);
			case 1: return new ClosureTypeRef_LeftParenthesisKeyword_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "=>"
protected class ClosureTypeRef_EqualsSignGreaterThanSignKeyword_1_3 extends KeywordToken  {
	
	public ClosureTypeRef_EqualsSignGreaterThanSignKeyword_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureTypeRefAccess().getEqualsSignGreaterThanSignKeyword_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureTypeRef_RightParenthesisKeyword_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// returnType=[be::B3JavaImport]
protected class ClosureTypeRef_ReturnTypeAssignment_1_4 extends AssignmentToken  {
	
	public ClosureTypeRef_ReturnTypeAssignment_1_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getClosureTypeRefAccess().getReturnTypeAssignment_1_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureTypeRef_EqualsSignGreaterThanSignKeyword_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("returnType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("returnType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getClosureTypeRefAccess().getReturnTypeB3JavaImportCrossReference_1_4_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getClosureTypeRefAccess().getReturnTypeB3JavaImportCrossReference_1_4_0(); 
				return obj;
			}
		}
		return null;
	}

}



/************ end Rule ClosureTypeRef ****************/


/************ begin Rule TypeParam ****************
 *
 * TypeParam returns be::IType:
 *   TypeRefParam|WildcardRefParam;
 *
 **/

// TypeRefParam|WildcardRefParam
protected class TypeParam_Alternatives extends AlternativesToken {

	public TypeParam_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTypeParamAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeParam_TypeRefParamParserRuleCall_0(parent, this, 0, inst);
			case 1: return new TypeParam_WildcardRefParamParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTypeParamRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// TypeRefParam
protected class TypeParam_TypeRefParamParserRuleCall_0 extends RuleCallToken {
	
	public TypeParam_TypeRefParamParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeParamAccess().getTypeRefParamParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRefParam_TypeRefParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(TypeRefParam_TypeRefParserRuleCall.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getTypeRefParamRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// WildcardRefParam
protected class TypeParam_WildcardRefParamParserRuleCall_1 extends RuleCallToken {
	
	public TypeParam_WildcardRefParamParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeParamAccess().getWildcardRefParamParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WildcardRefParam_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(WildcardRefParam_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getWildcardRefParamRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule TypeParam ****************/


/************ begin Rule TypeRefParam ****************
 *
 * TypeRefParam returns be::IType:
 *   TypeRef;
 *
 **/

// TypeRef
protected class TypeRefParam_TypeRefParserRuleCall extends RuleCallToken {
	
	public TypeRefParam_TypeRefParserRuleCall(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeRefParamAccess().getTypeRefParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTypeRefParamRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(TypeRef_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule TypeRefParam ****************/


/************ begin Rule WildcardRefParam ****************
 *
 * WildcardRefParam returns be::IType:
 *   {be::B3WildcardType} "?" ("extends" upperBoundsList+=TypeRef ("," upperBoundsList+=
 *   TypeRef)*|"super" lowerBoundsList+=TypeRef)?;
 *
 **/

// {be::B3WildcardType} "?" ("extends" upperBoundsList+=TypeRef ("," upperBoundsList+=
// TypeRef)*|"super" lowerBoundsList+=TypeRef)?
protected class WildcardRefParam_Group extends GroupToken {
	
	public WildcardRefParam_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWildcardRefParamAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WildcardRefParam_Alternatives_2(parent, this, 0, inst);
			case 1: return new WildcardRefParam_QuestionMarkKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getWildcardRefParamRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::B3WildcardType}
protected class WildcardRefParam_B3WildcardTypeAction_0 extends ActionToken  {

	public WildcardRefParam_B3WildcardTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getWildcardRefParamAccess().getB3WildcardTypeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getWildcardRefParamAccess().getB3WildcardTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "?"
protected class WildcardRefParam_QuestionMarkKeyword_1 extends KeywordToken  {
	
	public WildcardRefParam_QuestionMarkKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWildcardRefParamAccess().getQuestionMarkKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WildcardRefParam_B3WildcardTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("extends" upperBoundsList+=TypeRef ("," upperBoundsList+=TypeRef)*|"super"
// lowerBoundsList+=TypeRef)?
protected class WildcardRefParam_Alternatives_2 extends AlternativesToken {

	public WildcardRefParam_Alternatives_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getWildcardRefParamAccess().getAlternatives_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WildcardRefParam_Group_2_0(parent, this, 0, inst);
			case 1: return new WildcardRefParam_Group_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "extends" upperBoundsList+=TypeRef ("," upperBoundsList+=TypeRef)*
protected class WildcardRefParam_Group_2_0 extends GroupToken {
	
	public WildcardRefParam_Group_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWildcardRefParamAccess().getGroup_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WildcardRefParam_Group_2_0_2(parent, this, 0, inst);
			case 1: return new WildcardRefParam_UpperBoundsListAssignment_2_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "extends"
protected class WildcardRefParam_ExtendsKeyword_2_0_0 extends KeywordToken  {
	
	public WildcardRefParam_ExtendsKeyword_2_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWildcardRefParamAccess().getExtendsKeyword_2_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WildcardRefParam_QuestionMarkKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// upperBoundsList+=TypeRef
protected class WildcardRefParam_UpperBoundsListAssignment_2_0_1 extends AssignmentToken  {
	
	public WildcardRefParam_UpperBoundsListAssignment_2_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWildcardRefParamAccess().getUpperBoundsListAssignment_2_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("upperBoundsList",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("upperBoundsList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWildcardRefParamAccess().getUpperBoundsListTypeRefParserRuleCall_2_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WildcardRefParam_ExtendsKeyword_2_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," upperBoundsList+=TypeRef)*
protected class WildcardRefParam_Group_2_0_2 extends GroupToken {
	
	public WildcardRefParam_Group_2_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWildcardRefParamAccess().getGroup_2_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WildcardRefParam_UpperBoundsListAssignment_2_0_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class WildcardRefParam_CommaKeyword_2_0_2_0 extends KeywordToken  {
	
	public WildcardRefParam_CommaKeyword_2_0_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWildcardRefParamAccess().getCommaKeyword_2_0_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WildcardRefParam_Group_2_0_2(parent, this, 0, inst);
			case 1: return new WildcardRefParam_UpperBoundsListAssignment_2_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// upperBoundsList+=TypeRef
protected class WildcardRefParam_UpperBoundsListAssignment_2_0_2_1 extends AssignmentToken  {
	
	public WildcardRefParam_UpperBoundsListAssignment_2_0_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWildcardRefParamAccess().getUpperBoundsListAssignment_2_0_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("upperBoundsList",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("upperBoundsList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWildcardRefParamAccess().getUpperBoundsListTypeRefParserRuleCall_2_0_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WildcardRefParam_CommaKeyword_2_0_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// "super" lowerBoundsList+=TypeRef
protected class WildcardRefParam_Group_2_1 extends GroupToken {
	
	public WildcardRefParam_Group_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWildcardRefParamAccess().getGroup_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WildcardRefParam_LowerBoundsListAssignment_2_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "super"
protected class WildcardRefParam_SuperKeyword_2_1_0 extends KeywordToken  {
	
	public WildcardRefParam_SuperKeyword_2_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWildcardRefParamAccess().getSuperKeyword_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WildcardRefParam_QuestionMarkKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// lowerBoundsList+=TypeRef
protected class WildcardRefParam_LowerBoundsListAssignment_2_1_1 extends AssignmentToken  {
	
	public WildcardRefParam_LowerBoundsListAssignment_2_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWildcardRefParamAccess().getLowerBoundsListAssignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("lowerBoundsList",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("lowerBoundsList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWildcardRefParamAccess().getLowerBoundsListTypeRefParserRuleCall_2_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WildcardRefParam_SuperKeyword_2_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule WildcardRefParam ****************/


/************ begin Rule CachedExpression ****************
 *
 * CachedExpression returns be::BExpression:
 *   {be::BCachedExpression} "cached" expr=OrExpression|OrExpression;
 *
 **/

// {be::BCachedExpression} "cached" expr=OrExpression|OrExpression
protected class CachedExpression_Alternatives extends AlternativesToken {

	public CachedExpression_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getCachedExpressionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CachedExpression_Group_0(parent, this, 0, inst);
			case 1: return new CachedExpression_OrExpressionParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCachedExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BCachedExpression} "cached" expr=OrExpression
protected class CachedExpression_Group_0 extends GroupToken {
	
	public CachedExpression_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCachedExpressionAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CachedExpression_ExprAssignment_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {be::BCachedExpression}
protected class CachedExpression_BCachedExpressionAction_0_0 extends ActionToken  {

	public CachedExpression_BCachedExpressionAction_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getCachedExpressionAccess().getBCachedExpressionAction_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getCachedExpressionAccess().getBCachedExpressionAction_0_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "cached"
protected class CachedExpression_CachedKeyword_0_1 extends KeywordToken  {
	
	public CachedExpression_CachedKeyword_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCachedExpressionAccess().getCachedKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CachedExpression_BCachedExpressionAction_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// expr=OrExpression
protected class CachedExpression_ExprAssignment_0_2 extends AssignmentToken  {
	
	public CachedExpression_ExprAssignment_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCachedExpressionAccess().getExprAssignment_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOrExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCachedExpressionAccess().getExprOrExpressionParserRuleCall_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CachedExpression_CachedKeyword_0_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// OrExpression
protected class CachedExpression_OrExpressionParserRuleCall_1 extends RuleCallToken {
	
	public CachedExpression_OrExpressionParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getCachedExpressionAccess().getOrExpressionParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(OrExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getOrExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule CachedExpression ****************/


/************ begin Rule OrExpression ****************
 *
 * OrExpression returns be::BExpression:
 *   AndExpression ({be::BOrExpression.leftExpr=current} "||" rightExpr=AndExpression)*;
 *
 **/

// AndExpression ({be::BOrExpression.leftExpr=current} "||" rightExpr=AndExpression)*
protected class OrExpression_Group extends GroupToken {
	
	public OrExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrExpression_Group_1(parent, this, 0, inst);
			case 1: return new OrExpression_AndExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getOrExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// AndExpression
protected class OrExpression_AndExpressionParserRuleCall_0 extends RuleCallToken {
	
	public OrExpression_AndExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AndExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAndExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({be::BOrExpression.leftExpr=current} "||" rightExpr=AndExpression)*
protected class OrExpression_Group_1 extends GroupToken {
	
	public OrExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrExpression_RightExprAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {be::BOrExpression.leftExpr=current}
protected class OrExpression_BOrExpressionLeftExprAction_1_0 extends ActionToken  {

	public OrExpression_BOrExpressionLeftExprAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getBOrExpressionLeftExprAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrExpression_Group_1(parent, this, 0, inst);
			case 1: return new OrExpression_AndExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getOrExpressionAccess().getBOrExpressionLeftExprAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("leftExpr", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("leftExpr")) return null;
		return getDescr((EObject) val);
	}
}

// "||"
protected class OrExpression_VerticalLineVerticalLineKeyword_1_1 extends KeywordToken  {
	
	public OrExpression_VerticalLineVerticalLineKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrExpression_BOrExpressionLeftExprAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// rightExpr=AndExpression
protected class OrExpression_RightExprAssignment_1_2 extends AssignmentToken  {
	
	public OrExpression_RightExprAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getRightExprAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("rightExpr",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("rightExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAndExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getOrExpressionAccess().getRightExprAndExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OrExpression_VerticalLineVerticalLineKeyword_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule OrExpression ****************/


/************ begin Rule AndExpression ****************
 *
 * AndExpression returns be::BExpression:
 *   RelationalExpression ({be::BAndExpression.leftExpr=current} "&&" rightExpr=
 *   RelationalExpression)*; 
 * 	
 *     
 * 	      
 * 
 * // Deprecated - bitwise operators available as system functions (still available in backend if someone wants to
 * // use the backend for some other language.
 * // BitwiseExpression returns be::BExpression :
 * // RelationalExpression ({be::BBinaryOpExpression.leftExpr=current} functionName=("&" | "^" | "|") rightExpr=RelationalExpression)*;
 *
 **/

// RelationalExpression ({be::BAndExpression.leftExpr=current} "&&" rightExpr=
// RelationalExpression)*
protected class AndExpression_Group extends GroupToken {
	
	public AndExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_Group_1(parent, this, 0, inst);
			case 1: return new AndExpression_RelationalExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAndExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// RelationalExpression
protected class AndExpression_RelationalExpressionParserRuleCall_0 extends RuleCallToken {
	
	public AndExpression_RelationalExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getRelationalExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationalExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RelationalExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRelationalExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({be::BAndExpression.leftExpr=current} "&&" rightExpr=RelationalExpression)*
protected class AndExpression_Group_1 extends GroupToken {
	
	public AndExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_RightExprAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {be::BAndExpression.leftExpr=current}
protected class AndExpression_BAndExpressionLeftExprAction_1_0 extends ActionToken  {

	public AndExpression_BAndExpressionLeftExprAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getBAndExpressionLeftExprAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_Group_1(parent, this, 0, inst);
			case 1: return new AndExpression_RelationalExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getAndExpressionAccess().getBAndExpressionLeftExprAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("leftExpr", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("leftExpr")) return null;
		return getDescr((EObject) val);
	}
}

// "&&"
protected class AndExpression_AmpersandAmpersandKeyword_1_1 extends KeywordToken  {
	
	public AndExpression_AmpersandAmpersandKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getAmpersandAmpersandKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_BAndExpressionLeftExprAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// rightExpr=RelationalExpression
protected class AndExpression_RightExprAssignment_1_2 extends AssignmentToken  {
	
	public AndExpression_RightExprAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getRightExprAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationalExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("rightExpr",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("rightExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRelationalExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAndExpressionAccess().getRightExprRelationalExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AndExpression_AmpersandAmpersandKeyword_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AndExpression ****************/


/************ begin Rule RelationalExpression ****************
 *
 * RelationalExpression returns be::BExpression:
 *   InstanceOfExpression ({be::BBinaryOpExpression.leftExpr=current} functionName=
 *   RelationalOperator rightExpr=InstanceOfExpression)*; 
 * 
 * // Deprecated - bitwise operators available as system functions (still available in backend if someone wants to
 * // use the backend for some other language.
 * // BitwiseExpression returns be::BExpression :
 * // RelationalExpression ({be::BBinaryOpExpression.leftExpr=current} functionName=("&" | "^" | "|") rightExpr=RelationalExpression)*;
 *
 **/

// InstanceOfExpression ({be::BBinaryOpExpression.leftExpr=current} functionName=
// RelationalOperator rightExpr=InstanceOfExpression)*
protected class RelationalExpression_Group extends GroupToken {
	
	public RelationalExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationalExpression_Group_1(parent, this, 0, inst);
			case 1: return new RelationalExpression_InstanceOfExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRelationalExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// InstanceOfExpression
protected class RelationalExpression_InstanceOfExpressionParserRuleCall_0 extends RuleCallToken {
	
	public RelationalExpression_InstanceOfExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getInstanceOfExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InstanceOfExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(InstanceOfExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getInstanceOfExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({be::BBinaryOpExpression.leftExpr=current} functionName=RelationalOperator
// rightExpr=InstanceOfExpression)*
protected class RelationalExpression_Group_1 extends GroupToken {
	
	public RelationalExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationalExpression_RightExprAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {be::BBinaryOpExpression.leftExpr=current}
protected class RelationalExpression_BBinaryOpExpressionLeftExprAction_1_0 extends ActionToken  {

	public RelationalExpression_BBinaryOpExpressionLeftExprAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getBBinaryOpExpressionLeftExprAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationalExpression_Group_1(parent, this, 0, inst);
			case 1: return new RelationalExpression_InstanceOfExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getRelationalExpressionAccess().getBBinaryOpExpressionLeftExprAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("leftExpr", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("leftExpr")) return null;
		return getDescr((EObject) val);
	}
}

// functionName=RelationalOperator
protected class RelationalExpression_FunctionNameAssignment_1_1 extends AssignmentToken  {
	
	public RelationalExpression_FunctionNameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getFunctionNameAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationalExpression_BBinaryOpExpressionLeftExprAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("functionName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("functionName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getRelationalExpressionAccess().getFunctionNameRelationalOperatorParserRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// rightExpr=InstanceOfExpression
protected class RelationalExpression_RightExprAssignment_1_2 extends AssignmentToken  {
	
	public RelationalExpression_RightExprAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRelationalExpressionAccess().getRightExprAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InstanceOfExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("rightExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("rightExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInstanceOfExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRelationalExpressionAccess().getRightExprInstanceOfExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RelationalExpression_FunctionNameAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule RelationalExpression ****************/


/************ begin Rule InstanceOfExpression ****************
 *
 * InstanceOfExpression returns be::BExpression:
 *   AdditiveExpression ({be::BBinaryOpExpression.leftExpr=current} functionName=
 *   "instanceof" rightExpr=LiteralType)*; 
 * 
 *       
 * 	        
 * 
 * // Deprecated - bitwise operators available as system functions (still available in backend if someone wants to
 * // use the backend for some other language.	
 * // ShiftExpression returns be::BExpression:
 * // AdditiveExpression ({be::BBinaryOpExpression.leftExpr=current} functionName=("<<" | ">>" | ">>>") rightExpr=AdditiveExpression)*;
 *
 **/

// AdditiveExpression ({be::BBinaryOpExpression.leftExpr=current} functionName=
// "instanceof" rightExpr=LiteralType)*
protected class InstanceOfExpression_Group extends GroupToken {
	
	public InstanceOfExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInstanceOfExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InstanceOfExpression_Group_1(parent, this, 0, inst);
			case 1: return new InstanceOfExpression_AdditiveExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getInstanceOfExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// AdditiveExpression
protected class InstanceOfExpression_AdditiveExpressionParserRuleCall_0 extends RuleCallToken {
	
	public InstanceOfExpression_AdditiveExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getInstanceOfExpressionAccess().getAdditiveExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdditiveExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AdditiveExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAdditiveExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({be::BBinaryOpExpression.leftExpr=current} functionName="instanceof" rightExpr=
// LiteralType)*
protected class InstanceOfExpression_Group_1 extends GroupToken {
	
	public InstanceOfExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInstanceOfExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InstanceOfExpression_RightExprAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {be::BBinaryOpExpression.leftExpr=current}
protected class InstanceOfExpression_BBinaryOpExpressionLeftExprAction_1_0 extends ActionToken  {

	public InstanceOfExpression_BBinaryOpExpressionLeftExprAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getInstanceOfExpressionAccess().getBBinaryOpExpressionLeftExprAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InstanceOfExpression_Group_1(parent, this, 0, inst);
			case 1: return new InstanceOfExpression_AdditiveExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getInstanceOfExpressionAccess().getBBinaryOpExpressionLeftExprAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("leftExpr", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("leftExpr")) return null;
		return getDescr((EObject) val);
	}
}

// functionName="instanceof"
protected class InstanceOfExpression_FunctionNameAssignment_1_1 extends AssignmentToken  {
	
	public InstanceOfExpression_FunctionNameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInstanceOfExpressionAccess().getFunctionNameAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InstanceOfExpression_BBinaryOpExpressionLeftExprAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("functionName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("functionName");
		if("instanceof".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getInstanceOfExpressionAccess().getFunctionNameInstanceofKeyword_1_1_0();
			return obj;
		}
		return null;
	}

}

// rightExpr=LiteralType
protected class InstanceOfExpression_RightExprAssignment_1_2 extends AssignmentToken  {
	
	public InstanceOfExpression_RightExprAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInstanceOfExpressionAccess().getRightExprAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("rightExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("rightExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLiteralTypeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getInstanceOfExpressionAccess().getRightExprLiteralTypeParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InstanceOfExpression_FunctionNameAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule InstanceOfExpression ****************/


/************ begin Rule AdditiveExpression ****************
 *
 * AdditiveExpression returns be::BExpression:
 *   MultiplicativeExpression ({be::BBinaryOpExpression.leftExpr=current} functionName=
 *   ( "+" | "-" ) rightExpr=MultiplicativeExpression)*; 
 * 
 * // Deprecated - bitwise operators available as system functions (still available in backend if someone wants to
 * // use the backend for some other language.	
 * // ShiftExpression returns be::BExpression:
 * // AdditiveExpression ({be::BBinaryOpExpression.leftExpr=current} functionName=("<<" | ">>" | ">>>") rightExpr=AdditiveExpression)*;
 *
 **/

// MultiplicativeExpression ({be::BBinaryOpExpression.leftExpr=current} functionName=
// ( "+" | "-" ) rightExpr=MultiplicativeExpression)*
protected class AdditiveExpression_Group extends GroupToken {
	
	public AdditiveExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdditiveExpression_Group_1(parent, this, 0, inst);
			case 1: return new AdditiveExpression_MultiplicativeExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAdditiveExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// MultiplicativeExpression
protected class AdditiveExpression_MultiplicativeExpressionParserRuleCall_0 extends RuleCallToken {
	
	public AdditiveExpression_MultiplicativeExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(MultiplicativeExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({be::BBinaryOpExpression.leftExpr=current} functionName=( "+" | "-" ) rightExpr=
// MultiplicativeExpression)*
protected class AdditiveExpression_Group_1 extends GroupToken {
	
	public AdditiveExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdditiveExpression_RightExprAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {be::BBinaryOpExpression.leftExpr=current}
protected class AdditiveExpression_BBinaryOpExpressionLeftExprAction_1_0 extends ActionToken  {

	public AdditiveExpression_BBinaryOpExpressionLeftExprAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getBBinaryOpExpressionLeftExprAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdditiveExpression_Group_1(parent, this, 0, inst);
			case 1: return new AdditiveExpression_MultiplicativeExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getAdditiveExpressionAccess().getBBinaryOpExpressionLeftExprAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("leftExpr", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("leftExpr")) return null;
		return getDescr((EObject) val);
	}
}

// functionName=( "+" | "-" )
protected class AdditiveExpression_FunctionNameAssignment_1_1 extends AssignmentToken  {
	
	public AdditiveExpression_FunctionNameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getFunctionNameAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdditiveExpression_BBinaryOpExpressionLeftExprAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("functionName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("functionName");
		if("+".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAdditiveExpressionAccess().getFunctionNamePlusSignKeyword_1_1_0_0();
			return obj;
		}
		if("-".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAdditiveExpressionAccess().getFunctionNameHyphenMinusKeyword_1_1_0_1();
			return obj;
		}
		return null;
	}

}

// rightExpr=MultiplicativeExpression
protected class AdditiveExpression_RightExprAssignment_1_2 extends AssignmentToken  {
	
	public AdditiveExpression_RightExprAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getRightExprAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("rightExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("rightExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAdditiveExpressionAccess().getRightExprMultiplicativeExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AdditiveExpression_FunctionNameAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AdditiveExpression ****************/


/************ begin Rule MultiplicativeExpression ****************
 *
 * MultiplicativeExpression returns be::BExpression:
 *   SetExpression ({be::BBinaryOpExpression.leftExpr=current} functionName=( "*" | "/" |
 *   "%" ) rightExpr=SetExpression)*;
 *
 **/

// SetExpression ({be::BBinaryOpExpression.leftExpr=current} functionName=( "*" | "/" |
// "%" ) rightExpr=SetExpression)*
protected class MultiplicativeExpression_Group extends GroupToken {
	
	public MultiplicativeExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_Group_1(parent, this, 0, inst);
			case 1: return new MultiplicativeExpression_SetExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// SetExpression
protected class MultiplicativeExpression_SetExpressionParserRuleCall_0 extends RuleCallToken {
	
	public MultiplicativeExpression_SetExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getSetExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SetExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(SetExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSetExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({be::BBinaryOpExpression.leftExpr=current} functionName=( "*" | "/" | "%" ) rightExpr=
// SetExpression)*
protected class MultiplicativeExpression_Group_1 extends GroupToken {
	
	public MultiplicativeExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_RightExprAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {be::BBinaryOpExpression.leftExpr=current}
protected class MultiplicativeExpression_BBinaryOpExpressionLeftExprAction_1_0 extends ActionToken  {

	public MultiplicativeExpression_BBinaryOpExpressionLeftExprAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getBBinaryOpExpressionLeftExprAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_Group_1(parent, this, 0, inst);
			case 1: return new MultiplicativeExpression_SetExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getMultiplicativeExpressionAccess().getBBinaryOpExpressionLeftExprAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("leftExpr", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("leftExpr")) return null;
		return getDescr((EObject) val);
	}
}

// functionName=( "*" | "/" | "%" )
protected class MultiplicativeExpression_FunctionNameAssignment_1_1 extends AssignmentToken  {
	
	public MultiplicativeExpression_FunctionNameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getFunctionNameAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_BBinaryOpExpressionLeftExprAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("functionName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("functionName");
		if("*".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getMultiplicativeExpressionAccess().getFunctionNameAsteriskKeyword_1_1_0_0();
			return obj;
		}
		if("/".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getMultiplicativeExpressionAccess().getFunctionNameSolidusKeyword_1_1_0_1();
			return obj;
		}
		if("%".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getMultiplicativeExpressionAccess().getFunctionNamePercentSignKeyword_1_1_0_2();
			return obj;
		}
		return null;
	}

}

// rightExpr=SetExpression
protected class MultiplicativeExpression_RightExprAssignment_1_2 extends AssignmentToken  {
	
	public MultiplicativeExpression_RightExprAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getRightExprAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SetExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("rightExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("rightExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSetExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMultiplicativeExpressionAccess().getRightExprSetExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MultiplicativeExpression_FunctionNameAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule MultiplicativeExpression ****************/


/************ begin Rule SetExpression ****************
 *
 * SetExpression returns be::BExpression:
 *   UnaryOrInfixExpression ({be::BBinaryOpExpression.leftExpr=current} functionName=
 *   ".." rightExpr=UnaryOrInfixExpression)*;
 *
 **/

// UnaryOrInfixExpression ({be::BBinaryOpExpression.leftExpr=current} functionName=
// ".." rightExpr=UnaryOrInfixExpression)*
protected class SetExpression_Group extends GroupToken {
	
	public SetExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSetExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SetExpression_Group_1(parent, this, 0, inst);
			case 1: return new SetExpression_UnaryOrInfixExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSetExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// UnaryOrInfixExpression
protected class SetExpression_UnaryOrInfixExpressionParserRuleCall_0 extends RuleCallToken {
	
	public SetExpression_UnaryOrInfixExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSetExpressionAccess().getUnaryOrInfixExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryOrInfixExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UnaryOrInfixExpression_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUnaryOrInfixExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({be::BBinaryOpExpression.leftExpr=current} functionName=".." rightExpr=
// UnaryOrInfixExpression)*
protected class SetExpression_Group_1 extends GroupToken {
	
	public SetExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSetExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SetExpression_RightExprAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {be::BBinaryOpExpression.leftExpr=current}
protected class SetExpression_BBinaryOpExpressionLeftExprAction_1_0 extends ActionToken  {

	public SetExpression_BBinaryOpExpressionLeftExprAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getSetExpressionAccess().getBBinaryOpExpressionLeftExprAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SetExpression_Group_1(parent, this, 0, inst);
			case 1: return new SetExpression_UnaryOrInfixExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getSetExpressionAccess().getBBinaryOpExpressionLeftExprAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("leftExpr", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("leftExpr")) return null;
		return getDescr((EObject) val);
	}
}

// functionName=".."
protected class SetExpression_FunctionNameAssignment_1_1 extends AssignmentToken  {
	
	public SetExpression_FunctionNameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetExpressionAccess().getFunctionNameAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SetExpression_BBinaryOpExpressionLeftExprAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("functionName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("functionName");
		if("..".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getSetExpressionAccess().getFunctionNameFullStopFullStopKeyword_1_1_0();
			return obj;
		}
		return null;
	}

}

// rightExpr=UnaryOrInfixExpression
protected class SetExpression_RightExprAssignment_1_2 extends AssignmentToken  {
	
	public SetExpression_RightExprAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetExpressionAccess().getRightExprAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryOrInfixExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("rightExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("rightExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUnaryOrInfixExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSetExpressionAccess().getRightExprUnaryOrInfixExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SetExpression_FunctionNameAssignment_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule SetExpression ****************/


/************ begin Rule UnaryOrInfixExpression ****************
 *
 * UnaryOrInfixExpression returns be::BExpression:
 *   PostopExpression|UnaryExpression|PreopExpression; 
 * 
 *     
 * 	   
 * 	  
 * 	  
 * 	 
 * 	
 * // Bitwise unary expression ~ for 2's complement deprecated, b3 language uses a system function instead
 * // kept as comment here if someone wants to use thi grammar for other purposes. 
 * // UnaryExpression returns be::BExpression:
 * //	 {be::BUnaryOpExpression} functionName=("!" | "-" | "~") expr=InfixExpression;
 *
 **/

// PostopExpression|UnaryExpression|PreopExpression 
// 
//     
// 	   
// 	  
// 	  
// 	 
// 	
// // Bitwise unary expression ~ for 2's complement deprecated, b3 language uses a system function instead
// // kept as comment here if someone wants to use thi grammar for other purposes. 
// // UnaryExpression returns be::BExpression:
// //	 {be::BUnaryOpExpression} functionName=("!" | "-" | "~") expr=InfixExpression;
protected class UnaryOrInfixExpression_Alternatives extends AlternativesToken {

	public UnaryOrInfixExpression_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getUnaryOrInfixExpressionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryOrInfixExpression_PostopExpressionParserRuleCall_0(parent, this, 0, inst);
			case 1: return new UnaryOrInfixExpression_UnaryExpressionParserRuleCall_1(parent, this, 1, inst);
			case 2: return new UnaryOrInfixExpression_PreopExpressionParserRuleCall_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnaryOrInfixExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// PostopExpression
protected class UnaryOrInfixExpression_PostopExpressionParserRuleCall_0 extends RuleCallToken {
	
	public UnaryOrInfixExpression_PostopExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getUnaryOrInfixExpressionAccess().getPostopExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostopExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(PostopExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPostopExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// UnaryExpression
protected class UnaryOrInfixExpression_UnaryExpressionParserRuleCall_1 extends RuleCallToken {
	
	public UnaryOrInfixExpression_UnaryExpressionParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getUnaryOrInfixExpressionAccess().getUnaryExpressionParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UnaryExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUnaryExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// PreopExpression
protected class UnaryOrInfixExpression_PreopExpressionParserRuleCall_2 extends RuleCallToken {
	
	public UnaryOrInfixExpression_PreopExpressionParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getUnaryOrInfixExpressionAccess().getPreopExpressionParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PreopExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(PreopExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPreopExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule UnaryOrInfixExpression ****************/


/************ begin Rule UnaryExpression ****************
 *
 * UnaryExpression returns be::BExpression:
 *   {be::BUnaryOpExpression} functionName=( "!" | "-" ) expr=InfixExpression;  
 * 	
 * // Bitwise unary expression ~ for 2's complement deprecated, b3 language uses a system function instead
 * // kept as comment here if someone wants to use thi grammar for other purposes. 
 * // UnaryExpression returns be::BExpression:
 * //	 {be::BUnaryOpExpression} functionName=("!" | "-" | "~") expr=InfixExpression;
 *
 **/

// {be::BUnaryOpExpression} functionName=( "!" | "-" ) expr=InfixExpression
protected class UnaryExpression_Group extends GroupToken {
	
	public UnaryExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnaryExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryExpression_ExprAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnaryExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BUnaryOpExpression}
protected class UnaryExpression_BUnaryOpExpressionAction_0 extends ActionToken  {

	public UnaryExpression_BUnaryOpExpressionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getUnaryExpressionAccess().getBUnaryOpExpressionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getUnaryExpressionAccess().getBUnaryOpExpressionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// functionName=( "!" | "-" )
protected class UnaryExpression_FunctionNameAssignment_1 extends AssignmentToken  {
	
	public UnaryExpression_FunctionNameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnaryExpressionAccess().getFunctionNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryExpression_BUnaryOpExpressionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("functionName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("functionName");
		if("!".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getUnaryExpressionAccess().getFunctionNameExclamationMarkKeyword_1_0_0();
			return obj;
		}
		if("-".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getUnaryExpressionAccess().getFunctionNameHyphenMinusKeyword_1_0_1();
			return obj;
		}
		return null;
	}

}

// expr=InfixExpression
protected class UnaryExpression_ExprAssignment_2 extends AssignmentToken  {
	
	public UnaryExpression_ExprAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnaryExpressionAccess().getExprAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInfixExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnaryExpressionAccess().getExprInfixExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new UnaryExpression_FunctionNameAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule UnaryExpression ****************/


/************ begin Rule PreopExpression ****************
 *
 * PreopExpression returns be::BExpression:
 *   {be::BUnaryPreOpExpression} functionName=( "++" | "--" ) expr=InfixExpression;
 *
 **/

// {be::BUnaryPreOpExpression} functionName=( "++" | "--" ) expr=InfixExpression
protected class PreopExpression_Group extends GroupToken {
	
	public PreopExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPreopExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PreopExpression_ExprAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPreopExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BUnaryPreOpExpression}
protected class PreopExpression_BUnaryPreOpExpressionAction_0 extends ActionToken  {

	public PreopExpression_BUnaryPreOpExpressionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getPreopExpressionAccess().getBUnaryPreOpExpressionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getPreopExpressionAccess().getBUnaryPreOpExpressionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// functionName=( "++" | "--" )
protected class PreopExpression_FunctionNameAssignment_1 extends AssignmentToken  {
	
	public PreopExpression_FunctionNameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreopExpressionAccess().getFunctionNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PreopExpression_BUnaryPreOpExpressionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("functionName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("functionName");
		if("++".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getPreopExpressionAccess().getFunctionNamePlusSignPlusSignKeyword_1_0_0();
			return obj;
		}
		if("--".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getPreopExpressionAccess().getFunctionNameHyphenMinusHyphenMinusKeyword_1_0_1();
			return obj;
		}
		return null;
	}

}

// expr=InfixExpression
protected class PreopExpression_ExprAssignment_2 extends AssignmentToken  {
	
	public PreopExpression_ExprAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreopExpressionAccess().getExprAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInfixExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPreopExpressionAccess().getExprInfixExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PreopExpression_FunctionNameAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule PreopExpression ****************/


/************ begin Rule PostopExpression ****************
 *
 * PostopExpression returns be::BExpression:
 *   InfixExpression ({be::BUnaryPostOpExpression.expr=current} functionName=( "--" | "++"
 *   ))?;
 *
 **/

// InfixExpression ({be::BUnaryPostOpExpression.expr=current} functionName=( "--" | "++"
// ))?
protected class PostopExpression_Group extends GroupToken {
	
	public PostopExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPostopExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostopExpression_Group_1(parent, this, 0, inst);
			case 1: return new PostopExpression_InfixExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPostopExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// InfixExpression
protected class PostopExpression_InfixExpressionParserRuleCall_0 extends RuleCallToken {
	
	public PostopExpression_InfixExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPostopExpressionAccess().getInfixExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(InfixExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getInfixExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({be::BUnaryPostOpExpression.expr=current} functionName=( "--" | "++" ))?
protected class PostopExpression_Group_1 extends GroupToken {
	
	public PostopExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPostopExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostopExpression_FunctionNameAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {be::BUnaryPostOpExpression.expr=current}
protected class PostopExpression_BUnaryPostOpExpressionExprAction_1_0 extends ActionToken  {

	public PostopExpression_BUnaryPostOpExpressionExprAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getPostopExpressionAccess().getBUnaryPostOpExpressionExprAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostopExpression_InfixExpressionParserRuleCall_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getPostopExpressionAccess().getBUnaryPostOpExpressionExprAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("expr", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("expr")) return null;
		return getDescr((EObject) val);
	}
}

// functionName=( "--" | "++" )
protected class PostopExpression_FunctionNameAssignment_1_1 extends AssignmentToken  {
	
	public PostopExpression_FunctionNameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPostopExpressionAccess().getFunctionNameAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PostopExpression_BUnaryPostOpExpressionExprAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("functionName",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("functionName");
		if("--".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getPostopExpressionAccess().getFunctionNameHyphenMinusHyphenMinusKeyword_1_1_0_0();
			return obj;
		}
		if("++".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getPostopExpressionAccess().getFunctionNamePlusSignPlusSignKeyword_1_1_0_1();
			return obj;
		}
		return null;
	}

}



/************ end Rule PostopExpression ****************/


/************ begin Rule InfixExpression ****************
 *
 * InfixExpression returns be::BExpression:
 *   CallExpression ({be::BCallExpression.funcExpr=current} "." name=ID "(" parameterList=
 *   ParameterList? ")"|{be::BAtExpression.objExpr=current} "[" indexExpr=Expression "]"|
 *   {be::BFeatureExpression.objExpr=current} "." featureName=ID)*;
 *
 **/

// CallExpression ({be::BCallExpression.funcExpr=current} "." name=ID "(" parameterList=
// ParameterList? ")"|{be::BAtExpression.objExpr=current} "[" indexExpr=Expression "]"|
// {be::BFeatureExpression.objExpr=current} "." featureName=ID)*
protected class InfixExpression_Group extends GroupToken {
	
	public InfixExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Alternatives_1(parent, this, 0, inst);
			case 1: return new InfixExpression_CallExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getInfixExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// CallExpression
protected class InfixExpression_CallExpressionParserRuleCall_0 extends RuleCallToken {
	
	public InfixExpression_CallExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getCallExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CallExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CallExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCallExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({be::BCallExpression.funcExpr=current} "." name=ID "(" parameterList=ParameterList?
// ")"|{be::BAtExpression.objExpr=current} "[" indexExpr=Expression "]"|{be::
// BFeatureExpression.objExpr=current} "." featureName=ID)*
protected class InfixExpression_Alternatives_1 extends AlternativesToken {

	public InfixExpression_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Group_1_0(parent, this, 0, inst);
			case 1: return new InfixExpression_Group_1_1(parent, this, 1, inst);
			case 2: return new InfixExpression_Group_1_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// {be::BCallExpression.funcExpr=current} "." name=ID "(" parameterList=ParameterList?
// ")"
protected class InfixExpression_Group_1_0 extends GroupToken {
	
	public InfixExpression_Group_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getGroup_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_RightParenthesisKeyword_1_0_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {be::BCallExpression.funcExpr=current}
protected class InfixExpression_BCallExpressionFuncExprAction_1_0_0 extends ActionToken  {

	public InfixExpression_BCallExpressionFuncExprAction_1_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getBCallExpressionFuncExprAction_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Alternatives_1(parent, this, 0, inst);
			case 1: return new InfixExpression_CallExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getInfixExpressionAccess().getBCallExpressionFuncExprAction_1_0_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("funcExpr", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("funcExpr")) return null;
		return getDescr((EObject) val);
	}
}

// "."
protected class InfixExpression_FullStopKeyword_1_0_1 extends KeywordToken  {
	
	public InfixExpression_FullStopKeyword_1_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getFullStopKeyword_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_BCallExpressionFuncExprAction_1_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=ID
protected class InfixExpression_NameAssignment_1_0_2 extends AssignmentToken  {
	
	public InfixExpression_NameAssignment_1_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getNameAssignment_1_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_FullStopKeyword_1_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getInfixExpressionAccess().getNameIDTerminalRuleCall_1_0_2_0();
			return obj;
		}
		return null;
	}

}

// "("
protected class InfixExpression_LeftParenthesisKeyword_1_0_3 extends KeywordToken  {
	
	public InfixExpression_LeftParenthesisKeyword_1_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getLeftParenthesisKeyword_1_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_NameAssignment_1_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// parameterList=ParameterList?
protected class InfixExpression_ParameterListAssignment_1_0_4 extends AssignmentToken  {
	
	public InfixExpression_ParameterListAssignment_1_0_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getParameterListAssignment_1_0_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameterList",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameterList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getInfixExpressionAccess().getParameterListParameterListParserRuleCall_1_0_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InfixExpression_LeftParenthesisKeyword_1_0_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class InfixExpression_RightParenthesisKeyword_1_0_5 extends KeywordToken  {
	
	public InfixExpression_RightParenthesisKeyword_1_0_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getRightParenthesisKeyword_1_0_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_ParameterListAssignment_1_0_4(parent, this, 0, inst);
			case 1: return new InfixExpression_LeftParenthesisKeyword_1_0_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// {be::BAtExpression.objExpr=current} "[" indexExpr=Expression "]"
protected class InfixExpression_Group_1_1 extends GroupToken {
	
	public InfixExpression_Group_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_RightSquareBracketKeyword_1_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {be::BAtExpression.objExpr=current}
protected class InfixExpression_BAtExpressionObjExprAction_1_1_0 extends ActionToken  {

	public InfixExpression_BAtExpressionObjExprAction_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getBAtExpressionObjExprAction_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Alternatives_1(parent, this, 0, inst);
			case 1: return new InfixExpression_CallExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getInfixExpressionAccess().getBAtExpressionObjExprAction_1_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("objExpr", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("objExpr")) return null;
		return getDescr((EObject) val);
	}
}

// "["
protected class InfixExpression_LeftSquareBracketKeyword_1_1_1 extends KeywordToken  {
	
	public InfixExpression_LeftSquareBracketKeyword_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getLeftSquareBracketKeyword_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_BAtExpressionObjExprAction_1_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// indexExpr=Expression
protected class InfixExpression_IndexExprAssignment_1_1_2 extends AssignmentToken  {
	
	public InfixExpression_IndexExprAssignment_1_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getIndexExprAssignment_1_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("indexExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("indexExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getInfixExpressionAccess().getIndexExprExpressionParserRuleCall_1_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InfixExpression_LeftSquareBracketKeyword_1_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class InfixExpression_RightSquareBracketKeyword_1_1_3 extends KeywordToken  {
	
	public InfixExpression_RightSquareBracketKeyword_1_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getRightSquareBracketKeyword_1_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_IndexExprAssignment_1_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// {be::BFeatureExpression.objExpr=current} "." featureName=ID
protected class InfixExpression_Group_1_2 extends GroupToken {
	
	public InfixExpression_Group_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getGroup_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_FeatureNameAssignment_1_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {be::BFeatureExpression.objExpr=current}
protected class InfixExpression_BFeatureExpressionObjExprAction_1_2_0 extends ActionToken  {

	public InfixExpression_BFeatureExpressionObjExprAction_1_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getBFeatureExpressionObjExprAction_1_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_Alternatives_1(parent, this, 0, inst);
			case 1: return new InfixExpression_CallExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getInfixExpressionAccess().getBFeatureExpressionObjExprAction_1_2_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("objExpr", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("objExpr")) return null;
		return getDescr((EObject) val);
	}
}

// "."
protected class InfixExpression_FullStopKeyword_1_2_1 extends KeywordToken  {
	
	public InfixExpression_FullStopKeyword_1_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getFullStopKeyword_1_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_BFeatureExpressionObjExprAction_1_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// featureName=ID
protected class InfixExpression_FeatureNameAssignment_1_2_2 extends AssignmentToken  {
	
	public InfixExpression_FeatureNameAssignment_1_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInfixExpressionAccess().getFeatureNameAssignment_1_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InfixExpression_FullStopKeyword_1_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("featureName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("featureName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getInfixExpressionAccess().getFeatureNameIDTerminalRuleCall_1_2_2_0();
			return obj;
		}
		return null;
	}

}




/************ end Rule InfixExpression ****************/


/************ begin Rule CallExpression ****************
 *
 * CallExpression returns be::BExpression:
 *   PrimaryExpression ({be::BCallExpression.funcExpr=current} "(" parameterList=
 *   ParameterList? ")")*;
 *
 **/

// PrimaryExpression ({be::BCallExpression.funcExpr=current} "(" parameterList=
// ParameterList? ")")*
protected class CallExpression_Group extends GroupToken {
	
	public CallExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCallExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CallExpression_Group_1(parent, this, 0, inst);
			case 1: return new CallExpression_PrimaryExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCallExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// PrimaryExpression
protected class CallExpression_PrimaryExpressionParserRuleCall_0 extends RuleCallToken {
	
	public CallExpression_PrimaryExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getCallExpressionAccess().getPrimaryExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimaryExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(PrimaryExpression_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPrimaryExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({be::BCallExpression.funcExpr=current} "(" parameterList=ParameterList? ")")*
protected class CallExpression_Group_1 extends GroupToken {
	
	public CallExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCallExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CallExpression_RightParenthesisKeyword_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {be::BCallExpression.funcExpr=current}
protected class CallExpression_BCallExpressionFuncExprAction_1_0 extends ActionToken  {

	public CallExpression_BCallExpressionFuncExprAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getCallExpressionAccess().getBCallExpressionFuncExprAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CallExpression_Group_1(parent, this, 0, inst);
			case 1: return new CallExpression_PrimaryExpressionParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getCallExpressionAccess().getBCallExpressionFuncExprAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("funcExpr", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("funcExpr")) return null;
		return getDescr((EObject) val);
	}
}

// "("
protected class CallExpression_LeftParenthesisKeyword_1_1 extends KeywordToken  {
	
	public CallExpression_LeftParenthesisKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCallExpressionAccess().getLeftParenthesisKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CallExpression_BCallExpressionFuncExprAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// parameterList=ParameterList?
protected class CallExpression_ParameterListAssignment_1_2 extends AssignmentToken  {
	
	public CallExpression_ParameterListAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCallExpressionAccess().getParameterListAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameterList",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameterList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCallExpressionAccess().getParameterListParameterListParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CallExpression_LeftParenthesisKeyword_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class CallExpression_RightParenthesisKeyword_1_3 extends KeywordToken  {
	
	public CallExpression_RightParenthesisKeyword_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCallExpressionAccess().getRightParenthesisKeyword_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CallExpression_ParameterListAssignment_1_2(parent, this, 0, inst);
			case 1: return new CallExpression_LeftParenthesisKeyword_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule CallExpression ****************/


/************ begin Rule PrimaryExpression ****************
 *
 * PrimaryExpression returns be::BExpression:
 *   FeatureCall|ConstructorCallExpression|VariableValue|Literal|PropertyValue|
 *   KeywordVariables|ParanthesizedExpression|IfExpression|BlockExpression|
 *   SwitchExpression|ThrowExpression|TryCatchExpression|WildcardExpression; 
 * 		
 *     
 * 	  
 * 	  
 * 	  
 * 	   
 * 	  
 * 	  
 * 	  
 * 	  
 * 	  
 * 	  
 * 	  
 * 	  
 * 	  
 * //	| WithExpression
 * 	 
 * 	
 * //WithExpression returns Expression: WithClauseExpression | WithContextExpression ;
 * //WithClauseExpression returns Expression : {WithClauseExpression} 
 * //	withclause=WithClause expr = BlockExpression 
 * //	;
 * //WithContextExpression returns Expresion : {WithContextExpression } 
 * //	"with" "context" context = Expression expr = BlockExpression
 * //	;
 *
 **/

// FeatureCall|ConstructorCallExpression|VariableValue|Literal|PropertyValue|
// KeywordVariables|ParanthesizedExpression|IfExpression|BlockExpression|
// SwitchExpression|ThrowExpression|TryCatchExpression|WildcardExpression 
// 		
//     
// 	  
// 	  
// 	  
// 	   
// 	  
// 	  
// 	  
// 	  
// 	  
// 	  
// 	  
// 	  
// 	  
// //	| WithExpression
// 	 
// 	
// //WithExpression returns Expression: WithClauseExpression | WithContextExpression ;
// //WithClauseExpression returns Expression : {WithClauseExpression} 
// //	withclause=WithClause expr = BlockExpression 
// //	;
// //WithContextExpression returns Expresion : {WithContextExpression } 
// //	"with" "context" context = Expression expr = BlockExpression
// //	;
protected class PrimaryExpression_Alternatives extends AlternativesToken {

	public PrimaryExpression_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimaryExpression_FeatureCallParserRuleCall_0(parent, this, 0, inst);
			case 1: return new PrimaryExpression_ConstructorCallExpressionParserRuleCall_1(parent, this, 1, inst);
			case 2: return new PrimaryExpression_VariableValueParserRuleCall_2(parent, this, 2, inst);
			case 3: return new PrimaryExpression_LiteralParserRuleCall_3(parent, this, 3, inst);
			case 4: return new PrimaryExpression_PropertyValueParserRuleCall_4(parent, this, 4, inst);
			case 5: return new PrimaryExpression_KeywordVariablesParserRuleCall_5(parent, this, 5, inst);
			case 6: return new PrimaryExpression_ParanthesizedExpressionParserRuleCall_6(parent, this, 6, inst);
			case 7: return new PrimaryExpression_IfExpressionParserRuleCall_7(parent, this, 7, inst);
			case 8: return new PrimaryExpression_BlockExpressionParserRuleCall_8(parent, this, 8, inst);
			case 9: return new PrimaryExpression_SwitchExpressionParserRuleCall_9(parent, this, 9, inst);
			case 10: return new PrimaryExpression_ThrowExpressionParserRuleCall_10(parent, this, 10, inst);
			case 11: return new PrimaryExpression_TryCatchExpressionParserRuleCall_11(parent, this, 11, inst);
			case 12: return new PrimaryExpression_WildcardExpressionParserRuleCall_12(parent, this, 12, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPrimaryExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// FeatureCall
protected class PrimaryExpression_FeatureCallParserRuleCall_0 extends RuleCallToken {
	
	public PrimaryExpression_FeatureCallParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getFeatureCallParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureCall_OperationCallParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(FeatureCall_OperationCallParserRuleCall.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getFeatureCallRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ConstructorCallExpression
protected class PrimaryExpression_ConstructorCallExpressionParserRuleCall_1 extends RuleCallToken {
	
	public PrimaryExpression_ConstructorCallExpressionParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getConstructorCallExpressionParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstructorCallExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ConstructorCallExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getConstructorCallExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// VariableValue
protected class PrimaryExpression_VariableValueParserRuleCall_2 extends RuleCallToken {
	
	public PrimaryExpression_VariableValueParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getVariableValueParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableValue_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(VariableValue_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getVariableValueRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Literal
protected class PrimaryExpression_LiteralParserRuleCall_3 extends RuleCallToken {
	
	public PrimaryExpression_LiteralParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Literal_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Literal_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// PropertyValue
protected class PrimaryExpression_PropertyValueParserRuleCall_4 extends RuleCallToken {
	
	public PrimaryExpression_PropertyValueParserRuleCall_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getPropertyValueParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyValue_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(PropertyValue_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPropertyValueRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// KeywordVariables
protected class PrimaryExpression_KeywordVariablesParserRuleCall_5 extends RuleCallToken {
	
	public PrimaryExpression_KeywordVariablesParserRuleCall_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getKeywordVariablesParserRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new KeywordVariables_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(KeywordVariables_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getKeywordVariablesRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ParanthesizedExpression
protected class PrimaryExpression_ParanthesizedExpressionParserRuleCall_6 extends RuleCallToken {
	
	public PrimaryExpression_ParanthesizedExpressionParserRuleCall_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getParanthesizedExpressionParserRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParanthesizedExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ParanthesizedExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getParanthesizedExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// IfExpression
protected class PrimaryExpression_IfExpressionParserRuleCall_7 extends RuleCallToken {
	
	public PrimaryExpression_IfExpressionParserRuleCall_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getIfExpressionParserRuleCall_7();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(IfExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getIfExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// BlockExpression
protected class PrimaryExpression_BlockExpressionParserRuleCall_8 extends RuleCallToken {
	
	public PrimaryExpression_BlockExpressionParserRuleCall_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getBlockExpressionParserRuleCall_8();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BlockExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(BlockExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBlockExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// SwitchExpression
protected class PrimaryExpression_SwitchExpressionParserRuleCall_9 extends RuleCallToken {
	
	public PrimaryExpression_SwitchExpressionParserRuleCall_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getSwitchExpressionParserRuleCall_9();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SwitchExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(SwitchExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSwitchExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ThrowExpression
protected class PrimaryExpression_ThrowExpressionParserRuleCall_10 extends RuleCallToken {
	
	public PrimaryExpression_ThrowExpressionParserRuleCall_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getThrowExpressionParserRuleCall_10();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThrowExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ThrowExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getThrowExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// TryCatchExpression
protected class PrimaryExpression_TryCatchExpressionParserRuleCall_11 extends RuleCallToken {
	
	public PrimaryExpression_TryCatchExpressionParserRuleCall_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getTryCatchExpressionParserRuleCall_11();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TryCatchExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(TryCatchExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getTryCatchExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// WildcardExpression   
// //	| WithExpression
protected class PrimaryExpression_WildcardExpressionParserRuleCall_12 extends RuleCallToken {
	
	public PrimaryExpression_WildcardExpressionParserRuleCall_12(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getWildcardExpressionParserRuleCall_12();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WildcardExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(WildcardExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getWildcardExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule PrimaryExpression ****************/


/************ begin Rule WildcardExpression ****************
 *
 * WildcardExpression returns be::BExpression:
 *   {be::BLiteralAny} "_"; 
 * 	
 * //WithExpression returns Expression: WithClauseExpression | WithContextExpression ;
 * //WithClauseExpression returns Expression : {WithClauseExpression} 
 * //	withclause=WithClause expr = BlockExpression 
 * //	;
 * //WithContextExpression returns Expresion : {WithContextExpression } 
 * //	"with" "context" context = Expression expr = BlockExpression
 * //	;
 *
 **/

// {be::BLiteralAny} "_"
protected class WildcardExpression_Group extends GroupToken {
	
	public WildcardExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWildcardExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WildcardExpression__Keyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getWildcardExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BLiteralAny}
protected class WildcardExpression_BLiteralAnyAction_0 extends ActionToken  {

	public WildcardExpression_BLiteralAnyAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getWildcardExpressionAccess().getBLiteralAnyAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getWildcardExpressionAccess().getBLiteralAnyAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "_"
protected class WildcardExpression__Keyword_1 extends KeywordToken  {
	
	public WildcardExpression__Keyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWildcardExpressionAccess().get_Keyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WildcardExpression_BLiteralAnyAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule WildcardExpression ****************/


/************ begin Rule ThrowExpression ****************
 *
 * ThrowExpression returns be::BExpression:
 *   {be::BThrowExpression} "throw" expr=Expression;
 *
 **/

// {be::BThrowExpression} "throw" expr=Expression
protected class ThrowExpression_Group extends GroupToken {
	
	public ThrowExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getThrowExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThrowExpression_ExprAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getThrowExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BThrowExpression}
protected class ThrowExpression_BThrowExpressionAction_0 extends ActionToken  {

	public ThrowExpression_BThrowExpressionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getThrowExpressionAccess().getBThrowExpressionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getThrowExpressionAccess().getBThrowExpressionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "throw"
protected class ThrowExpression_ThrowKeyword_1 extends KeywordToken  {
	
	public ThrowExpression_ThrowKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getThrowExpressionAccess().getThrowKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThrowExpression_BThrowExpressionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// expr=Expression
protected class ThrowExpression_ExprAssignment_2 extends AssignmentToken  {
	
	public ThrowExpression_ExprAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getThrowExpressionAccess().getExprAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getThrowExpressionAccess().getExprExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ThrowExpression_ThrowKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ThrowExpression ****************/


/************ begin Rule TryCatchExpression ****************
 *
 * TryCatchExpression returns be::BExpression:
 *   {be::BTryExpression} "try" tryExpr=Expression catchBlocks+=CatchBlock* ("finally"
 *   finallyExpr=Expression)? "endtry";
 *
 **/

// {be::BTryExpression} "try" tryExpr=Expression catchBlocks+=CatchBlock* ("finally"
// finallyExpr=Expression)? "endtry"
protected class TryCatchExpression_Group extends GroupToken {
	
	public TryCatchExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTryCatchExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TryCatchExpression_EndtryKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTryCatchExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BTryExpression}
protected class TryCatchExpression_BTryExpressionAction_0 extends ActionToken  {

	public TryCatchExpression_BTryExpressionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTryCatchExpressionAccess().getBTryExpressionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getTryCatchExpressionAccess().getBTryExpressionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "try"
protected class TryCatchExpression_TryKeyword_1 extends KeywordToken  {
	
	public TryCatchExpression_TryKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTryCatchExpressionAccess().getTryKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TryCatchExpression_BTryExpressionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// tryExpr=Expression
protected class TryCatchExpression_TryExprAssignment_2 extends AssignmentToken  {
	
	public TryCatchExpression_TryExprAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTryCatchExpressionAccess().getTryExprAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("tryExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("tryExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTryCatchExpressionAccess().getTryExprExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TryCatchExpression_TryKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// catchBlocks+=CatchBlock*
protected class TryCatchExpression_CatchBlocksAssignment_3 extends AssignmentToken  {
	
	public TryCatchExpression_CatchBlocksAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTryCatchExpressionAccess().getCatchBlocksAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CatchBlock_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("catchBlocks",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("catchBlocks");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCatchBlockRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTryCatchExpressionAccess().getCatchBlocksCatchBlockParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TryCatchExpression_CatchBlocksAssignment_3(parent, next, actIndex, consumed);
			case 1: return new TryCatchExpression_TryExprAssignment_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("finally" finallyExpr=Expression)?
protected class TryCatchExpression_Group_4 extends GroupToken {
	
	public TryCatchExpression_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTryCatchExpressionAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TryCatchExpression_FinallyExprAssignment_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "finally"
protected class TryCatchExpression_FinallyKeyword_4_0 extends KeywordToken  {
	
	public TryCatchExpression_FinallyKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTryCatchExpressionAccess().getFinallyKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TryCatchExpression_CatchBlocksAssignment_3(parent, this, 0, inst);
			case 1: return new TryCatchExpression_TryExprAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// finallyExpr=Expression
protected class TryCatchExpression_FinallyExprAssignment_4_1 extends AssignmentToken  {
	
	public TryCatchExpression_FinallyExprAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTryCatchExpressionAccess().getFinallyExprAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("finallyExpr",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("finallyExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTryCatchExpressionAccess().getFinallyExprExpressionParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TryCatchExpression_FinallyKeyword_4_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "endtry"
protected class TryCatchExpression_EndtryKeyword_5 extends KeywordToken  {
	
	public TryCatchExpression_EndtryKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTryCatchExpressionAccess().getEndtryKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TryCatchExpression_Group_4(parent, this, 0, inst);
			case 1: return new TryCatchExpression_CatchBlocksAssignment_3(parent, this, 1, inst);
			case 2: return new TryCatchExpression_TryExprAssignment_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule TryCatchExpression ****************/


/************ begin Rule CatchBlock ****************
 *
 * CatchBlock returns be::BCatch:
 *   {be::BCatch} "catch" exceptionType=TypeRef varname=ID ":" catchExpr=Expression;
 *
 **/

// {be::BCatch} "catch" exceptionType=TypeRef varname=ID ":" catchExpr=Expression
protected class CatchBlock_Group extends GroupToken {
	
	public CatchBlock_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCatchBlockAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CatchBlock_CatchExprAssignment_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCatchBlockRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BCatch}
protected class CatchBlock_BCatchAction_0 extends ActionToken  {

	public CatchBlock_BCatchAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getCatchBlockAccess().getBCatchAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getCatchBlockAccess().getBCatchAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "catch"
protected class CatchBlock_CatchKeyword_1 extends KeywordToken  {
	
	public CatchBlock_CatchKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCatchBlockAccess().getCatchKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CatchBlock_BCatchAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// exceptionType=TypeRef
protected class CatchBlock_ExceptionTypeAssignment_2 extends AssignmentToken  {
	
	public CatchBlock_ExceptionTypeAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCatchBlockAccess().getExceptionTypeAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("exceptionType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("exceptionType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCatchBlockAccess().getExceptionTypeTypeRefParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CatchBlock_CatchKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// varname=ID
protected class CatchBlock_VarnameAssignment_3 extends AssignmentToken  {
	
	public CatchBlock_VarnameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCatchBlockAccess().getVarnameAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CatchBlock_ExceptionTypeAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("varname",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("varname");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCatchBlockAccess().getVarnameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ":"
protected class CatchBlock_ColonKeyword_4 extends KeywordToken  {
	
	public CatchBlock_ColonKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCatchBlockAccess().getColonKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CatchBlock_VarnameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// catchExpr=Expression
protected class CatchBlock_CatchExprAssignment_5 extends AssignmentToken  {
	
	public CatchBlock_CatchExprAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCatchBlockAccess().getCatchExprAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("catchExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("catchExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCatchBlockAccess().getCatchExprExpressionParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CatchBlock_ColonKeyword_4(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule CatchBlock ****************/


/************ begin Rule SwitchExpression ****************
 *
 * SwitchExpression returns be::BExpression:
 *   {be::BSwitchExpression} "switch" switchExpression=Expression? caseList+=Case+
 *   "endswitch";
 *
 **/

// {be::BSwitchExpression} "switch" switchExpression=Expression? caseList+=Case+
// "endswitch"
protected class SwitchExpression_Group extends GroupToken {
	
	public SwitchExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSwitchExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SwitchExpression_EndswitchKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSwitchExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BSwitchExpression}
protected class SwitchExpression_BSwitchExpressionAction_0 extends ActionToken  {

	public SwitchExpression_BSwitchExpressionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getSwitchExpressionAccess().getBSwitchExpressionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getSwitchExpressionAccess().getBSwitchExpressionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "switch"
protected class SwitchExpression_SwitchKeyword_1 extends KeywordToken  {
	
	public SwitchExpression_SwitchKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSwitchExpressionAccess().getSwitchKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SwitchExpression_BSwitchExpressionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// switchExpression=Expression?
protected class SwitchExpression_SwitchExpressionAssignment_2 extends AssignmentToken  {
	
	public SwitchExpression_SwitchExpressionAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSwitchExpressionAccess().getSwitchExpressionAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("switchExpression",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("switchExpression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSwitchExpressionAccess().getSwitchExpressionExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SwitchExpression_SwitchKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// caseList+=Case+
protected class SwitchExpression_CaseListAssignment_3 extends AssignmentToken  {
	
	public SwitchExpression_CaseListAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSwitchExpressionAccess().getCaseListAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Case_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("caseList",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("caseList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCaseRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSwitchExpressionAccess().getCaseListCaseParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SwitchExpression_CaseListAssignment_3(parent, next, actIndex, consumed);
			case 1: return new SwitchExpression_SwitchExpressionAssignment_2(parent, next, actIndex, consumed);
			case 2: return new SwitchExpression_SwitchKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "endswitch"
protected class SwitchExpression_EndswitchKeyword_4 extends KeywordToken  {
	
	public SwitchExpression_EndswitchKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSwitchExpressionAccess().getEndswitchKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SwitchExpression_CaseListAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule SwitchExpression ****************/


/************ begin Rule Case ****************
 *
 * Case returns be::BCase:
 *   {be::BCase} "case" conditionExpr=Expression ":" thenExpr=Expression; 
 * 			
 * 	               
 * 
 * // TODO VAREXPR: Blockexpression can have local variables
 *
 **/

// {be::BCase} "case" conditionExpr=Expression ":" thenExpr=Expression
protected class Case_Group extends GroupToken {
	
	public Case_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCaseAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Case_ThenExprAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCaseRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BCase}
protected class Case_BCaseAction_0 extends ActionToken  {

	public Case_BCaseAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getCaseAccess().getBCaseAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getCaseAccess().getBCaseAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "case"
protected class Case_CaseKeyword_1 extends KeywordToken  {
	
	public Case_CaseKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCaseAccess().getCaseKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Case_BCaseAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// conditionExpr=Expression
protected class Case_ConditionExprAssignment_2 extends AssignmentToken  {
	
	public Case_ConditionExprAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCaseAccess().getConditionExprAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("conditionExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("conditionExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCaseAccess().getConditionExprExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Case_CaseKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ":"
protected class Case_ColonKeyword_3 extends KeywordToken  {
	
	public Case_ColonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCaseAccess().getColonKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Case_ConditionExprAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// thenExpr=Expression
protected class Case_ThenExprAssignment_4 extends AssignmentToken  {
	
	public Case_ThenExprAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCaseAccess().getThenExprAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("thenExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("thenExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCaseAccess().getThenExprExpressionParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Case_ColonKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Case ****************/


/************ begin Rule BlockExpression ****************
 *
 * BlockExpression returns be::BExpression:
 *   {be::BChainedExpression} "{" (expressions+=TopLevelExpression ";")* "}"; 
 * 
 * // TODO VAREXPR: Blockexpression can have local variables
 *
 **/

// {be::BChainedExpression} "{" (expressions+=TopLevelExpression ";")* "}"
protected class BlockExpression_Group extends GroupToken {
	
	public BlockExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBlockExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BlockExpression_RightCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBlockExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BChainedExpression}
protected class BlockExpression_BChainedExpressionAction_0 extends ActionToken  {

	public BlockExpression_BChainedExpressionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getBlockExpressionAccess().getBChainedExpressionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getBlockExpressionAccess().getBChainedExpressionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "{"
protected class BlockExpression_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public BlockExpression_LeftCurlyBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBlockExpressionAccess().getLeftCurlyBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BlockExpression_BChainedExpressionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (expressions+=TopLevelExpression ";")*
protected class BlockExpression_Group_2 extends GroupToken {
	
	public BlockExpression_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBlockExpressionAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BlockExpression_SemicolonKeyword_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// expressions+=TopLevelExpression
protected class BlockExpression_ExpressionsAssignment_2_0 extends AssignmentToken  {
	
	public BlockExpression_ExpressionsAssignment_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBlockExpressionAccess().getExpressionsAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TopLevelExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expressions",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expressions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTopLevelExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBlockExpressionAccess().getExpressionsTopLevelExpressionParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BlockExpression_Group_2(parent, next, actIndex, consumed);
			case 1: return new BlockExpression_LeftCurlyBracketKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class BlockExpression_SemicolonKeyword_2_1 extends KeywordToken  {
	
	public BlockExpression_SemicolonKeyword_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBlockExpressionAccess().getSemicolonKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BlockExpression_ExpressionsAssignment_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "}"
protected class BlockExpression_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public BlockExpression_RightCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBlockExpressionAccess().getRightCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BlockExpression_Group_2(parent, this, 0, inst);
			case 1: return new BlockExpression_LeftCurlyBracketKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule BlockExpression ****************/


/************ begin Rule IfExpression ****************
 *
 * IfExpression returns be::BExpression:
 *   {be::BIfExpression} "if" conditionExpr=Expression "then" thenExpr=Expression (
 *   elseExpr=ElseIfExpression|"else" elseExpr=Expression)? "endif";
 *
 **/

// {be::BIfExpression} "if" conditionExpr=Expression "then" thenExpr=Expression (
// elseExpr=ElseIfExpression|"else" elseExpr=Expression)? "endif"
protected class IfExpression_Group extends GroupToken {
	
	public IfExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfExpression_EndifKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getIfExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BIfExpression}
protected class IfExpression_BIfExpressionAction_0 extends ActionToken  {

	public IfExpression_BIfExpressionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getBIfExpressionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getIfExpressionAccess().getBIfExpressionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "if"
protected class IfExpression_IfKeyword_1 extends KeywordToken  {
	
	public IfExpression_IfKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getIfKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfExpression_BIfExpressionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// conditionExpr=Expression
protected class IfExpression_ConditionExprAssignment_2 extends AssignmentToken  {
	
	public IfExpression_ConditionExprAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getConditionExprAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("conditionExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("conditionExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getIfExpressionAccess().getConditionExprExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfExpression_IfKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "then"
protected class IfExpression_ThenKeyword_3 extends KeywordToken  {
	
	public IfExpression_ThenKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getThenKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfExpression_ConditionExprAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// thenExpr=Expression
protected class IfExpression_ThenExprAssignment_4 extends AssignmentToken  {
	
	public IfExpression_ThenExprAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getThenExprAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("thenExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("thenExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getIfExpressionAccess().getThenExprExpressionParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfExpression_ThenKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// (elseExpr=ElseIfExpression|"else" elseExpr=Expression)?
protected class IfExpression_Alternatives_5 extends AlternativesToken {

	public IfExpression_Alternatives_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getAlternatives_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfExpression_ElseExprAssignment_5_0(parent, this, 0, inst);
			case 1: return new IfExpression_Group_5_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// elseExpr=ElseIfExpression
protected class IfExpression_ElseExprAssignment_5_0 extends AssignmentToken  {
	
	public IfExpression_ElseExprAssignment_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getElseExprAssignment_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElseIfExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elseExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elseExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElseIfExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getIfExpressionAccess().getElseExprElseIfExpressionParserRuleCall_5_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfExpression_ThenExprAssignment_4(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "else" elseExpr=Expression
protected class IfExpression_Group_5_1 extends GroupToken {
	
	public IfExpression_Group_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getGroup_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfExpression_ElseExprAssignment_5_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "else"
protected class IfExpression_ElseKeyword_5_1_0 extends KeywordToken  {
	
	public IfExpression_ElseKeyword_5_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getElseKeyword_5_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfExpression_ThenExprAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// elseExpr=Expression
protected class IfExpression_ElseExprAssignment_5_1_1 extends AssignmentToken  {
	
	public IfExpression_ElseExprAssignment_5_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getElseExprAssignment_5_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elseExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elseExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getIfExpressionAccess().getElseExprExpressionParserRuleCall_5_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfExpression_ElseKeyword_5_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// "endif"
protected class IfExpression_EndifKeyword_6 extends KeywordToken  {
	
	public IfExpression_EndifKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIfExpressionAccess().getEndifKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IfExpression_Alternatives_5(parent, this, 0, inst);
			case 1: return new IfExpression_ThenExprAssignment_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule IfExpression ****************/


/************ begin Rule ElseIfExpression ****************
 *
 * ElseIfExpression returns be::BExpression:
 *   {be::BIfExpression} "elseif" conditionExpr=Expression "then" thenExpr=Expression (
 *   elseExpr=ElseIfExpression|"else" elseExpr=Expression)?;
 *
 **/

// {be::BIfExpression} "elseif" conditionExpr=Expression "then" thenExpr=Expression (
// elseExpr=ElseIfExpression|"else" elseExpr=Expression)?
protected class ElseIfExpression_Group extends GroupToken {
	
	public ElseIfExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getElseIfExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElseIfExpression_Alternatives_5(parent, this, 0, inst);
			case 1: return new ElseIfExpression_ThenExprAssignment_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getElseIfExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BIfExpression}
protected class ElseIfExpression_BIfExpressionAction_0 extends ActionToken  {

	public ElseIfExpression_BIfExpressionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getElseIfExpressionAccess().getBIfExpressionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getElseIfExpressionAccess().getBIfExpressionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "elseif"
protected class ElseIfExpression_ElseifKeyword_1 extends KeywordToken  {
	
	public ElseIfExpression_ElseifKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getElseIfExpressionAccess().getElseifKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElseIfExpression_BIfExpressionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// conditionExpr=Expression
protected class ElseIfExpression_ConditionExprAssignment_2 extends AssignmentToken  {
	
	public ElseIfExpression_ConditionExprAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElseIfExpressionAccess().getConditionExprAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("conditionExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("conditionExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getElseIfExpressionAccess().getConditionExprExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ElseIfExpression_ElseifKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "then"
protected class ElseIfExpression_ThenKeyword_3 extends KeywordToken  {
	
	public ElseIfExpression_ThenKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getElseIfExpressionAccess().getThenKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElseIfExpression_ConditionExprAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// thenExpr=Expression
protected class ElseIfExpression_ThenExprAssignment_4 extends AssignmentToken  {
	
	public ElseIfExpression_ThenExprAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElseIfExpressionAccess().getThenExprAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("thenExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("thenExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getElseIfExpressionAccess().getThenExprExpressionParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ElseIfExpression_ThenKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// (elseExpr=ElseIfExpression|"else" elseExpr=Expression)?
protected class ElseIfExpression_Alternatives_5 extends AlternativesToken {

	public ElseIfExpression_Alternatives_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getElseIfExpressionAccess().getAlternatives_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElseIfExpression_ElseExprAssignment_5_0(parent, this, 0, inst);
			case 1: return new ElseIfExpression_Group_5_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// elseExpr=ElseIfExpression
protected class ElseIfExpression_ElseExprAssignment_5_0 extends AssignmentToken  {
	
	public ElseIfExpression_ElseExprAssignment_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElseIfExpressionAccess().getElseExprAssignment_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElseIfExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elseExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elseExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElseIfExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getElseIfExpressionAccess().getElseExprElseIfExpressionParserRuleCall_5_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ElseIfExpression_ThenExprAssignment_4(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "else" elseExpr=Expression
protected class ElseIfExpression_Group_5_1 extends GroupToken {
	
	public ElseIfExpression_Group_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getElseIfExpressionAccess().getGroup_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElseIfExpression_ElseExprAssignment_5_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "else"
protected class ElseIfExpression_ElseKeyword_5_1_0 extends KeywordToken  {
	
	public ElseIfExpression_ElseKeyword_5_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getElseIfExpressionAccess().getElseKeyword_5_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElseIfExpression_ThenExprAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// elseExpr=Expression
protected class ElseIfExpression_ElseExprAssignment_5_1_1 extends AssignmentToken  {
	
	public ElseIfExpression_ElseExprAssignment_5_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElseIfExpressionAccess().getElseExprAssignment_5_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elseExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elseExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getElseIfExpressionAccess().getElseExprExpressionParserRuleCall_5_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ElseIfExpression_ElseKeyword_5_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule ElseIfExpression ****************/


/************ begin Rule PropertyValue ****************
 *
 * PropertyValue returns be::BExpression:
 *   {be::BVariableExpression} name=PID;
 *
 **/

// {be::BVariableExpression} name=PID
protected class PropertyValue_Group extends GroupToken {
	
	public PropertyValue_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPropertyValueAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyValue_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPropertyValueRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BVariableExpression}
protected class PropertyValue_BVariableExpressionAction_0 extends ActionToken  {

	public PropertyValue_BVariableExpressionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getPropertyValueAccess().getBVariableExpressionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getPropertyValueAccess().getBVariableExpressionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// name=PID
protected class PropertyValue_NameAssignment_1 extends AssignmentToken  {
	
	public PropertyValue_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyValueAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyValue_BVariableExpressionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPropertyValueAccess().getNamePIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule PropertyValue ****************/


/************ begin Rule VariableValue ****************
 *
 * VariableValue returns be::BExpression:
 *   {be::BVariableExpression} name=ID;
 *
 **/

// {be::BVariableExpression} name=ID
protected class VariableValue_Group extends GroupToken {
	
	public VariableValue_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getVariableValueAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableValue_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getVariableValueRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BVariableExpression}
protected class VariableValue_BVariableExpressionAction_0 extends ActionToken  {

	public VariableValue_BVariableExpressionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getVariableValueAccess().getBVariableExpressionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getVariableValueAccess().getBVariableExpressionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// name=ID
protected class VariableValue_NameAssignment_1 extends AssignmentToken  {
	
	public VariableValue_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableValueAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableValue_BVariableExpressionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getVariableValueAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule VariableValue ****************/


/************ begin Rule KeywordVariables ****************
 *
 * KeywordVariables returns be::BExpression:
 *   {be::BVariableExpression} name=( InputKeyword | OutputKeyword | "properties" | "unit" );
 *
 **/

// {be::BVariableExpression} name=( InputKeyword | OutputKeyword | "properties" | "unit" )
protected class KeywordVariables_Group extends GroupToken {
	
	public KeywordVariables_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getKeywordVariablesAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new KeywordVariables_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getKeywordVariablesRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BVariableExpression}
protected class KeywordVariables_BVariableExpressionAction_0 extends ActionToken  {

	public KeywordVariables_BVariableExpressionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getKeywordVariablesAccess().getBVariableExpressionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getKeywordVariablesAccess().getBVariableExpressionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// name=( InputKeyword | OutputKeyword | "properties" | "unit" )
protected class KeywordVariables_NameAssignment_1 extends AssignmentToken  {
	
	public KeywordVariables_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getKeywordVariablesAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new KeywordVariables_BVariableExpressionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if("properties".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getKeywordVariablesAccess().getNamePropertiesKeyword_1_0_2();
			return obj;
		}
		if("unit".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getKeywordVariablesAccess().getNameUnitKeyword_1_0_3();
			return obj;
		}
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getKeywordVariablesAccess().getNameInputKeywordParserRuleCall_1_0_0();
			return obj;
		}
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getKeywordVariablesAccess().getNameOutputKeywordParserRuleCall_1_0_1();
			return obj;
		}
		return null;
	}

}


/************ end Rule KeywordVariables ****************/


/************ begin Rule FeatureCall ****************
 *
 * FeatureCall returns be::BExpression:
 *   OperationCall;
 *
 **/

// OperationCall
protected class FeatureCall_OperationCallParserRuleCall extends RuleCallToken {
	
	public FeatureCall_OperationCallParserRuleCall(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFeatureCallAccess().getOperationCallParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OperationCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFeatureCallRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(OperationCall_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getOperationCallRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule FeatureCall ****************/


/************ begin Rule OperationCall ****************
 *
 * OperationCall returns be::BCallExpression:
 *   {be::BCallExpression} name=( ID | PID ) "(" parameterList=ParameterList? ")";
 *
 **/

// {be::BCallExpression} name=( ID | PID ) "(" parameterList=ParameterList? ")"
protected class OperationCall_Group extends GroupToken {
	
	public OperationCall_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOperationCallAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OperationCall_RightParenthesisKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getOperationCallRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BCallExpression}
protected class OperationCall_BCallExpressionAction_0 extends ActionToken  {

	public OperationCall_BCallExpressionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOperationCallAccess().getBCallExpressionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getOperationCallAccess().getBCallExpressionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// name=( ID | PID )
protected class OperationCall_NameAssignment_1 extends AssignmentToken  {
	
	public OperationCall_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOperationCallAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OperationCall_BCallExpressionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getOperationCallAccess().getNameIDTerminalRuleCall_1_0_0();
			return obj;
		}
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getOperationCallAccess().getNamePIDTerminalRuleCall_1_0_1();
			return obj;
		}
		return null;
	}

}

// "("
protected class OperationCall_LeftParenthesisKeyword_2 extends KeywordToken  {
	
	public OperationCall_LeftParenthesisKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOperationCallAccess().getLeftParenthesisKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OperationCall_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// parameterList=ParameterList?
protected class OperationCall_ParameterListAssignment_3 extends AssignmentToken  {
	
	public OperationCall_ParameterListAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOperationCallAccess().getParameterListAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameterList",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameterList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getOperationCallAccess().getParameterListParameterListParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OperationCall_LeftParenthesisKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class OperationCall_RightParenthesisKeyword_4 extends KeywordToken  {
	
	public OperationCall_RightParenthesisKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOperationCallAccess().getRightParenthesisKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OperationCall_ParameterListAssignment_3(parent, this, 0, inst);
			case 1: return new OperationCall_LeftParenthesisKeyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule OperationCall ****************/


/************ begin Rule ConstructorCallExpression ****************
 *
 * ConstructorCallExpression returns be::BExpression:
 *   {be::BCreateExpression} "new" typeExpr=LiteralType ("(" parameterList=ParameterList?
 *   ")")? ("as" alias=ID)? contextBlock=ContextBlock?;
 *
 **/

// {be::BCreateExpression} "new" typeExpr=LiteralType ("(" parameterList=ParameterList?
// ")")? ("as" alias=ID)? contextBlock=ContextBlock?
protected class ConstructorCallExpression_Group extends GroupToken {
	
	public ConstructorCallExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstructorCallExpression_ContextBlockAssignment_5(parent, this, 0, inst);
			case 1: return new ConstructorCallExpression_Group_4(parent, this, 1, inst);
			case 2: return new ConstructorCallExpression_Group_3(parent, this, 2, inst);
			case 3: return new ConstructorCallExpression_TypeExprAssignment_2(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getConstructorCallExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BCreateExpression}
protected class ConstructorCallExpression_BCreateExpressionAction_0 extends ActionToken  {

	public ConstructorCallExpression_BCreateExpressionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getBCreateExpressionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getConstructorCallExpressionAccess().getBCreateExpressionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "new"
protected class ConstructorCallExpression_NewKeyword_1 extends KeywordToken  {
	
	public ConstructorCallExpression_NewKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getNewKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstructorCallExpression_BCreateExpressionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// typeExpr=LiteralType
protected class ConstructorCallExpression_TypeExprAssignment_2 extends AssignmentToken  {
	
	public ConstructorCallExpression_TypeExprAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getTypeExprAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("typeExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("typeExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLiteralTypeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getConstructorCallExpressionAccess().getTypeExprLiteralTypeParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ConstructorCallExpression_NewKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("(" parameterList=ParameterList? ")")?
protected class ConstructorCallExpression_Group_3 extends GroupToken {
	
	public ConstructorCallExpression_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstructorCallExpression_RightParenthesisKeyword_3_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class ConstructorCallExpression_LeftParenthesisKeyword_3_0 extends KeywordToken  {
	
	public ConstructorCallExpression_LeftParenthesisKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getLeftParenthesisKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstructorCallExpression_TypeExprAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// parameterList=ParameterList?
protected class ConstructorCallExpression_ParameterListAssignment_3_1 extends AssignmentToken  {
	
	public ConstructorCallExpression_ParameterListAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getParameterListAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameterList",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameterList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getConstructorCallExpressionAccess().getParameterListParameterListParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ConstructorCallExpression_LeftParenthesisKeyword_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class ConstructorCallExpression_RightParenthesisKeyword_3_2 extends KeywordToken  {
	
	public ConstructorCallExpression_RightParenthesisKeyword_3_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getRightParenthesisKeyword_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstructorCallExpression_ParameterListAssignment_3_1(parent, this, 0, inst);
			case 1: return new ConstructorCallExpression_LeftParenthesisKeyword_3_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// ("as" alias=ID)?
protected class ConstructorCallExpression_Group_4 extends GroupToken {
	
	public ConstructorCallExpression_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstructorCallExpression_AliasAssignment_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "as"
protected class ConstructorCallExpression_AsKeyword_4_0 extends KeywordToken  {
	
	public ConstructorCallExpression_AsKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getAsKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstructorCallExpression_Group_3(parent, this, 0, inst);
			case 1: return new ConstructorCallExpression_TypeExprAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// alias=ID
protected class ConstructorCallExpression_AliasAssignment_4_1 extends AssignmentToken  {
	
	public ConstructorCallExpression_AliasAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getAliasAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstructorCallExpression_AsKeyword_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("alias",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("alias");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getConstructorCallExpressionAccess().getAliasIDTerminalRuleCall_4_1_0();
			return obj;
		}
		return null;
	}

}


// contextBlock=ContextBlock?
protected class ConstructorCallExpression_ContextBlockAssignment_5 extends AssignmentToken  {
	
	public ConstructorCallExpression_ContextBlockAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConstructorCallExpressionAccess().getContextBlockAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContextBlock_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contextBlock",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contextBlock");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getContextBlockRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getConstructorCallExpressionAccess().getContextBlockContextBlockParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ConstructorCallExpression_Group_4(parent, next, actIndex, consumed);
			case 1: return new ConstructorCallExpression_Group_3(parent, next, actIndex, consumed);
			case 2: return new ConstructorCallExpression_TypeExprAssignment_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ConstructorCallExpression ****************/


/************ begin Rule Context ****************
 *
 * Context:
 *   "context" selector=ContextSelector block=ContextBlock;
 *
 **/

// "context" selector=ContextSelector block=ContextBlock
protected class Context_Group extends GroupToken {
	
	public Context_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getContextAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Context_BlockAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getContextRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "context"
protected class Context_ContextKeyword_0 extends KeywordToken  {
	
	public Context_ContextKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getContextAccess().getContextKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// selector=ContextSelector
protected class Context_SelectorAssignment_1 extends AssignmentToken  {
	
	public Context_SelectorAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getContextAccess().getSelectorAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContextSelector_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("selector",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("selector");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getContextSelectorRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getContextAccess().getSelectorContextSelectorParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Context_ContextKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// block=ContextBlock
protected class Context_BlockAssignment_2 extends AssignmentToken  {
	
	public Context_BlockAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getContextAccess().getBlockAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContextBlock_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("block",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("block");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getContextBlockRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getContextAccess().getBlockContextBlockParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Context_SelectorAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Context ****************/


/************ begin Rule ContextSelector ****************
 *
 * ContextSelector:
 *   TypeRefSelector|ExpressionSelector|UnitSelector;
 *
 **/

// TypeRefSelector|ExpressionSelector|UnitSelector
protected class ContextSelector_Alternatives extends AlternativesToken {

	public ContextSelector_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getContextSelectorAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContextSelector_TypeRefSelectorParserRuleCall_0(parent, this, 0, inst);
			case 1: return new ContextSelector_ExpressionSelectorParserRuleCall_1(parent, this, 1, inst);
			case 2: return new ContextSelector_UnitSelectorParserRuleCall_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getContextSelectorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// TypeRefSelector
protected class ContextSelector_TypeRefSelectorParserRuleCall_0 extends RuleCallToken {
	
	public ContextSelector_TypeRefSelectorParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getContextSelectorAccess().getTypeRefSelectorParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRefSelector_TypeAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(TypeRefSelector_TypeAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getTypeRefSelectorRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ExpressionSelector
protected class ContextSelector_ExpressionSelectorParserRuleCall_1 extends RuleCallToken {
	
	public ContextSelector_ExpressionSelectorParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getContextSelectorAccess().getExpressionSelectorParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExpressionSelector_ExprAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ExpressionSelector_ExprAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getExpressionSelectorRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// UnitSelector
protected class ContextSelector_UnitSelectorParserRuleCall_2 extends RuleCallToken {
	
	public ContextSelector_UnitSelectorParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getContextSelectorAccess().getUnitSelectorParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnitSelector_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UnitSelector_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUnitSelectorRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ContextSelector ****************/


/************ begin Rule TypeRefSelector ****************
 *
 * TypeRefSelector returns ContextSelector:
 *   type=TypeRef;
 *
 **/

// type=TypeRef
protected class TypeRefSelector_TypeAssignment extends AssignmentToken  {
	
	public TypeRefSelector_TypeAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTypeRefSelectorAccess().getTypeAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTypeRefSelectorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTypeRefSelectorAccess().getTypeTypeRefParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule TypeRefSelector ****************/


/************ begin Rule ExpressionSelector ****************
 *
 * ExpressionSelector:
 *   expr=Expression;
 *
 **/

// expr=Expression
protected class ExpressionSelector_ExprAssignment extends AssignmentToken  {
	
	public ExpressionSelector_ExprAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExpressionSelectorAccess().getExprAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getExpressionSelectorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getExpressionSelectorAccess().getExprExpressionParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule ExpressionSelector ****************/


/************ begin Rule UnitSelector ****************
 *
 * UnitSelector:
 *   "unit" interface=QID ("/" (name=UnitName|namePattern=REGULAR_EXPR) ("/" versionRange=
 *   VersionRange)?)?;
 *
 **/

// "unit" interface=QID ("/" (name=UnitName|namePattern=REGULAR_EXPR) ("/" versionRange=
// VersionRange)?)?
protected class UnitSelector_Group extends GroupToken {
	
	public UnitSelector_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnitSelectorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnitSelector_Group_2(parent, this, 0, inst);
			case 1: return new UnitSelector_InterfaceAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnitSelectorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "unit"
protected class UnitSelector_UnitKeyword_0 extends KeywordToken  {
	
	public UnitSelector_UnitKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitSelectorAccess().getUnitKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// interface=QID
protected class UnitSelector_InterfaceAssignment_1 extends AssignmentToken  {
	
	public UnitSelector_InterfaceAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitSelectorAccess().getInterfaceAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnitSelector_UnitKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("interface",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("interface");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getUnitSelectorAccess().getInterfaceQIDParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("/" (name=UnitName|namePattern=REGULAR_EXPR) ("/" versionRange=VersionRange)?)?
protected class UnitSelector_Group_2 extends GroupToken {
	
	public UnitSelector_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnitSelectorAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnitSelector_Group_2_2(parent, this, 0, inst);
			case 1: return new UnitSelector_Alternatives_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "/"
protected class UnitSelector_SolidusKeyword_2_0 extends KeywordToken  {
	
	public UnitSelector_SolidusKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitSelectorAccess().getSolidusKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnitSelector_InterfaceAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=UnitName|namePattern=REGULAR_EXPR
protected class UnitSelector_Alternatives_2_1 extends AlternativesToken {

	public UnitSelector_Alternatives_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getUnitSelectorAccess().getAlternatives_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnitSelector_NameAssignment_2_1_0(parent, this, 0, inst);
			case 1: return new UnitSelector_NamePatternAssignment_2_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// name=UnitName
protected class UnitSelector_NameAssignment_2_1_0 extends AssignmentToken  {
	
	public UnitSelector_NameAssignment_2_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitSelectorAccess().getNameAssignment_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnitSelector_SolidusKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getUnitSelectorAccess().getNameUnitNameParserRuleCall_2_1_0_0();
			return obj;
		}
		return null;
	}

}

// namePattern=REGULAR_EXPR
protected class UnitSelector_NamePatternAssignment_2_1_1 extends AssignmentToken  {
	
	public UnitSelector_NamePatternAssignment_2_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitSelectorAccess().getNamePatternAssignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnitSelector_SolidusKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("namePattern",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("namePattern");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getUnitSelectorAccess().getNamePatternREGULAR_EXPRTerminalRuleCall_2_1_1_0();
			return obj;
		}
		return null;
	}

}


// ("/" versionRange=VersionRange)?
protected class UnitSelector_Group_2_2 extends GroupToken {
	
	public UnitSelector_Group_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnitSelectorAccess().getGroup_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnitSelector_VersionRangeAssignment_2_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "/"
protected class UnitSelector_SolidusKeyword_2_2_0 extends KeywordToken  {
	
	public UnitSelector_SolidusKeyword_2_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnitSelectorAccess().getSolidusKeyword_2_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnitSelector_Alternatives_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// versionRange=VersionRange
protected class UnitSelector_VersionRangeAssignment_2_2_1 extends AssignmentToken  {
	
	public UnitSelector_VersionRangeAssignment_2_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitSelectorAccess().getVersionRangeAssignment_2_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VersionRange_RangeAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("versionRange",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("versionRange");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVersionRangeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnitSelectorAccess().getVersionRangeVersionRangeParserRuleCall_2_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new UnitSelector_SolidusKeyword_2_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule UnitSelector ****************/


/************ begin Rule ContextBlock ****************
 *
 * ContextBlock returns be::BExpression:
 *   {be::BChainedExpression} "{" (expressions+=FunctionDefinition|expressions+=
 *   TopLevelExpression ";")* "}"; 
 * 
 *          
 * 	      
 * //		| (expressions+=BuilderDefinition)   // TODO: How to handle Builder definitions as expressions
 * 		     
 * //		| (expressions+=PropertiesStatement) // TODO: How to handle Properties statements as expressions
 * 		    
 * 		
 * 					
 * //ExpressionStatement returns Statement : {ExpressionStatement} val=Expression ';' ;
 * //PropertiesStatement returns Statement : {PropertiesStatement} "properties" properties = NamedPropertySet ;
 *
 **/

// {be::BChainedExpression} "{" (expressions+=FunctionDefinition|expressions+=
// TopLevelExpression ";")* "}"    
// 	      
// //		| (expressions+=BuilderDefinition)   // TODO: How to handle Builder definitions as expressions
// 		     
// //		| (expressions+=PropertiesStatement) // TODO: How to handle Properties statements as expressions
protected class ContextBlock_Group extends GroupToken {
	
	public ContextBlock_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getContextBlockAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContextBlock_RightCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getContextBlockRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BChainedExpression}
protected class ContextBlock_BChainedExpressionAction_0 extends ActionToken  {

	public ContextBlock_BChainedExpressionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getContextBlockAccess().getBChainedExpressionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getContextBlockAccess().getBChainedExpressionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "{"
protected class ContextBlock_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public ContextBlock_LeftCurlyBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getContextBlockAccess().getLeftCurlyBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContextBlock_BChainedExpressionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (expressions+=FunctionDefinition|expressions+=TopLevelExpression ";")*       
// //		| (expressions+=BuilderDefinition)   // TODO: How to handle Builder definitions as expressions
// 		     
// //		| (expressions+=PropertiesStatement) // TODO: How to handle Properties statements as expressions
protected class ContextBlock_Alternatives_2 extends AlternativesToken {

	public ContextBlock_Alternatives_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getContextBlockAccess().getAlternatives_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContextBlock_ExpressionsAssignment_2_0(parent, this, 0, inst);
			case 1: return new ContextBlock_Group_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// expressions+=FunctionDefinition
protected class ContextBlock_ExpressionsAssignment_2_0 extends AssignmentToken  {
	
	public ContextBlock_ExpressionsAssignment_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getContextBlockAccess().getExpressionsAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionDefinition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expressions",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expressions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFunctionDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getContextBlockAccess().getExpressionsFunctionDefinitionParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ContextBlock_Alternatives_2(parent, next, actIndex, consumed);
			case 1: return new ContextBlock_LeftCurlyBracketKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// expressions+=TopLevelExpression ";"
protected class ContextBlock_Group_2_1 extends GroupToken {
	
	public ContextBlock_Group_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getContextBlockAccess().getGroup_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContextBlock_SemicolonKeyword_2_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// expressions+=TopLevelExpression
protected class ContextBlock_ExpressionsAssignment_2_1_0 extends AssignmentToken  {
	
	public ContextBlock_ExpressionsAssignment_2_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getContextBlockAccess().getExpressionsAssignment_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TopLevelExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expressions",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expressions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTopLevelExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getContextBlockAccess().getExpressionsTopLevelExpressionParserRuleCall_2_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ContextBlock_Alternatives_2(parent, next, actIndex, consumed);
			case 1: return new ContextBlock_LeftCurlyBracketKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class ContextBlock_SemicolonKeyword_2_1_1 extends KeywordToken  {
	
	public ContextBlock_SemicolonKeyword_2_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getContextBlockAccess().getSemicolonKeyword_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContextBlock_ExpressionsAssignment_2_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



// "}"
protected class ContextBlock_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public ContextBlock_RightCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getContextBlockAccess().getRightCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContextBlock_Alternatives_2(parent, this, 0, inst);
			case 1: return new ContextBlock_LeftCurlyBracketKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ContextBlock ****************/


/************ begin Rule FunctionDefinition ****************
 *
 * FunctionDefinition returns be::BExpression:
 *   {be::BDefFunction} function=Function; 
 * 					
 * //ExpressionStatement returns Statement : {ExpressionStatement} val=Expression ';' ;
 * //PropertiesStatement returns Statement : {PropertiesStatement} "properties" properties = NamedPropertySet ;
 *               
 * //BuilderDefinition returns Statement : {BuilderStatement} builder = Builder;
 *
 **/

// {be::BDefFunction} function=Function
protected class FunctionDefinition_Group extends GroupToken {
	
	public FunctionDefinition_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFunctionDefinitionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FunctionDefinition_FunctionAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFunctionDefinitionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BDefFunction}
protected class FunctionDefinition_BDefFunctionAction_0 extends ActionToken  {

	public FunctionDefinition_BDefFunctionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getFunctionDefinitionAccess().getBDefFunctionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getFunctionDefinitionAccess().getBDefFunctionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// function=Function
protected class FunctionDefinition_FunctionAssignment_1 extends AssignmentToken  {
	
	public FunctionDefinition_FunctionAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionDefinitionAccess().getFunctionAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Function_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("function",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("function");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFunctionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFunctionDefinitionAccess().getFunctionFunctionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FunctionDefinition_BDefFunctionAction_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule FunctionDefinition ****************/


/************ begin Rule Literal ****************
 *
 * Literal returns be::BExpression:
 *   ValueLiteral|RegexpLiteral|LiteralMap|LiteralList|LiteralFunction; 
 * //BuilderDefinition returns Statement : {BuilderStatement} builder = Builder;
 *
 **/

// ValueLiteral|RegexpLiteral|LiteralMap|LiteralList|LiteralFunction 
// //BuilderDefinition returns Statement : {BuilderStatement} builder = Builder;
protected class Literal_Alternatives extends AlternativesToken {

	public Literal_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getLiteralAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Literal_ValueLiteralParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Literal_RegexpLiteralParserRuleCall_1(parent, this, 1, inst);
			case 2: return new Literal_LiteralMapParserRuleCall_2(parent, this, 2, inst);
			case 3: return new Literal_LiteralListParserRuleCall_3(parent, this, 3, inst);
			case 4: return new Literal_LiteralFunctionParserRuleCall_4(parent, this, 4, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ValueLiteral
protected class Literal_ValueLiteralParserRuleCall_0 extends RuleCallToken {
	
	public Literal_ValueLiteralParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralAccess().getValueLiteralParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ValueLiteral_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ValueLiteral_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getValueLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// RegexpLiteral
protected class Literal_RegexpLiteralParserRuleCall_1 extends RuleCallToken {
	
	public Literal_RegexpLiteralParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralAccess().getRegexpLiteralParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RegexpLiteral_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RegexpLiteral_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRegexpLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// LiteralMap
protected class Literal_LiteralMapParserRuleCall_2 extends RuleCallToken {
	
	public Literal_LiteralMapParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralAccess().getLiteralMapParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralMap_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(LiteralMap_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLiteralMapRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// LiteralList
protected class Literal_LiteralListParserRuleCall_3 extends RuleCallToken {
	
	public Literal_LiteralListParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralAccess().getLiteralListParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralList_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(LiteralList_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLiteralListRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// LiteralFunction
protected class Literal_LiteralFunctionParserRuleCall_4 extends RuleCallToken {
	
	public Literal_LiteralFunctionParserRuleCall_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralAccess().getLiteralFunctionParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralFunction_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(LiteralFunction_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLiteralFunctionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Literal ****************/


/************ begin Rule LiteralList ****************
 *
 * LiteralList returns be::BExpression:
 *   {be::BLiteralListExpression} "[" ("<" entryType=TypeRef ">")? entries+=Expression (","
 *   entries+=Expression)* "]"|{be::BLiteralListExpression} "[" "<" entryType=TypeRef ">"
 *   "]";
 *
 **/

// {be::BLiteralListExpression} "[" ("<" entryType=TypeRef ">")? entries+=Expression (","
// entries+=Expression)* "]"|{be::BLiteralListExpression} "[" "<" entryType=TypeRef ">"
// "]"
protected class LiteralList_Alternatives extends AlternativesToken {

	public LiteralList_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralList_Group_0(parent, this, 0, inst);
			case 1: return new LiteralList_Group_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLiteralListRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BLiteralListExpression} "[" ("<" entryType=TypeRef ">")? entries+=Expression (","
// entries+=Expression)* "]"
protected class LiteralList_Group_0 extends GroupToken {
	
	public LiteralList_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralList_RightSquareBracketKeyword_0_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {be::BLiteralListExpression}
protected class LiteralList_BLiteralListExpressionAction_0_0 extends ActionToken  {

	public LiteralList_BLiteralListExpressionAction_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getBLiteralListExpressionAction_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getLiteralListAccess().getBLiteralListExpressionAction_0_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "["
protected class LiteralList_LeftSquareBracketKeyword_0_1 extends KeywordToken  {
	
	public LiteralList_LeftSquareBracketKeyword_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getLeftSquareBracketKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralList_BLiteralListExpressionAction_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("<" entryType=TypeRef ">")?
protected class LiteralList_Group_0_2 extends GroupToken {
	
	public LiteralList_Group_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getGroup_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralList_GreaterThanSignKeyword_0_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "<"
protected class LiteralList_LessThanSignKeyword_0_2_0 extends KeywordToken  {
	
	public LiteralList_LessThanSignKeyword_0_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getLessThanSignKeyword_0_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralList_LeftSquareBracketKeyword_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// entryType=TypeRef
protected class LiteralList_EntryTypeAssignment_0_2_1 extends AssignmentToken  {
	
	public LiteralList_EntryTypeAssignment_0_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getEntryTypeAssignment_0_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("entryType",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("entryType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLiteralListAccess().getEntryTypeTypeRefParserRuleCall_0_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralList_LessThanSignKeyword_0_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ">"
protected class LiteralList_GreaterThanSignKeyword_0_2_2 extends KeywordToken  {
	
	public LiteralList_GreaterThanSignKeyword_0_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getGreaterThanSignKeyword_0_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralList_EntryTypeAssignment_0_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// entries+=Expression
protected class LiteralList_EntriesAssignment_0_3 extends AssignmentToken  {
	
	public LiteralList_EntriesAssignment_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getEntriesAssignment_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("entries",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("entries");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLiteralListAccess().getEntriesExpressionParserRuleCall_0_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralList_Group_0_2(parent, next, actIndex, consumed);
			case 1: return new LiteralList_LeftSquareBracketKeyword_0_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," entries+=Expression)*
protected class LiteralList_Group_0_4 extends GroupToken {
	
	public LiteralList_Group_0_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getGroup_0_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralList_EntriesAssignment_0_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class LiteralList_CommaKeyword_0_4_0 extends KeywordToken  {
	
	public LiteralList_CommaKeyword_0_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getCommaKeyword_0_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralList_Group_0_4(parent, this, 0, inst);
			case 1: return new LiteralList_EntriesAssignment_0_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// entries+=Expression
protected class LiteralList_EntriesAssignment_0_4_1 extends AssignmentToken  {
	
	public LiteralList_EntriesAssignment_0_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getEntriesAssignment_0_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("entries",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("entries");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLiteralListAccess().getEntriesExpressionParserRuleCall_0_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralList_CommaKeyword_0_4_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "]"
protected class LiteralList_RightSquareBracketKeyword_0_5 extends KeywordToken  {
	
	public LiteralList_RightSquareBracketKeyword_0_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getRightSquareBracketKeyword_0_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralList_Group_0_4(parent, this, 0, inst);
			case 1: return new LiteralList_EntriesAssignment_0_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// {be::BLiteralListExpression} "[" "<" entryType=TypeRef ">" "]"
protected class LiteralList_Group_1 extends GroupToken {
	
	public LiteralList_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralList_RightSquareBracketKeyword_1_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {be::BLiteralListExpression}
protected class LiteralList_BLiteralListExpressionAction_1_0 extends ActionToken  {

	public LiteralList_BLiteralListExpressionAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getBLiteralListExpressionAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getLiteralListAccess().getBLiteralListExpressionAction_1_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "["
protected class LiteralList_LeftSquareBracketKeyword_1_1 extends KeywordToken  {
	
	public LiteralList_LeftSquareBracketKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getLeftSquareBracketKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralList_BLiteralListExpressionAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "<"
protected class LiteralList_LessThanSignKeyword_1_2 extends KeywordToken  {
	
	public LiteralList_LessThanSignKeyword_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getLessThanSignKeyword_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralList_LeftSquareBracketKeyword_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// entryType=TypeRef
protected class LiteralList_EntryTypeAssignment_1_3 extends AssignmentToken  {
	
	public LiteralList_EntryTypeAssignment_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getEntryTypeAssignment_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("entryType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("entryType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLiteralListAccess().getEntryTypeTypeRefParserRuleCall_1_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralList_LessThanSignKeyword_1_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ">"
protected class LiteralList_GreaterThanSignKeyword_1_4 extends KeywordToken  {
	
	public LiteralList_GreaterThanSignKeyword_1_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getGreaterThanSignKeyword_1_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralList_EntryTypeAssignment_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "]"
protected class LiteralList_RightSquareBracketKeyword_1_5 extends KeywordToken  {
	
	public LiteralList_RightSquareBracketKeyword_1_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralListAccess().getRightSquareBracketKeyword_1_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralList_GreaterThanSignKeyword_1_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule LiteralList ****************/


/************ begin Rule LiteralMap ****************
 *
 * LiteralMap returns be::BExpression:
 *   {be::BLiteralMapExpression} "[" ("<" keyType=TypeRef "," valueType=TypeRef ">")?
 *   entries+=MapEntry ("," entries+=MapEntry)* "]"|{be::BLiteralMapExpression} "[" "<"
 *   keyType=TypeRef "," valueType=TypeRef ">" "]";
 *
 **/

// {be::BLiteralMapExpression} "[" ("<" keyType=TypeRef "," valueType=TypeRef ">")?
// entries+=MapEntry ("," entries+=MapEntry)* "]"|{be::BLiteralMapExpression} "[" "<"
// keyType=TypeRef "," valueType=TypeRef ">" "]"
protected class LiteralMap_Alternatives extends AlternativesToken {

	public LiteralMap_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralMap_Group_0(parent, this, 0, inst);
			case 1: return new LiteralMap_Group_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLiteralMapRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BLiteralMapExpression} "[" ("<" keyType=TypeRef "," valueType=TypeRef ">")?
// entries+=MapEntry ("," entries+=MapEntry)* "]"
protected class LiteralMap_Group_0 extends GroupToken {
	
	public LiteralMap_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralMap_RightSquareBracketKeyword_0_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {be::BLiteralMapExpression}
protected class LiteralMap_BLiteralMapExpressionAction_0_0 extends ActionToken  {

	public LiteralMap_BLiteralMapExpressionAction_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getBLiteralMapExpressionAction_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getLiteralMapAccess().getBLiteralMapExpressionAction_0_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "["
protected class LiteralMap_LeftSquareBracketKeyword_0_1 extends KeywordToken  {
	
	public LiteralMap_LeftSquareBracketKeyword_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getLeftSquareBracketKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralMap_BLiteralMapExpressionAction_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("<" keyType=TypeRef "," valueType=TypeRef ">")?
protected class LiteralMap_Group_0_2 extends GroupToken {
	
	public LiteralMap_Group_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getGroup_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralMap_GreaterThanSignKeyword_0_2_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "<"
protected class LiteralMap_LessThanSignKeyword_0_2_0 extends KeywordToken  {
	
	public LiteralMap_LessThanSignKeyword_0_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getLessThanSignKeyword_0_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralMap_LeftSquareBracketKeyword_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// keyType=TypeRef
protected class LiteralMap_KeyTypeAssignment_0_2_1 extends AssignmentToken  {
	
	public LiteralMap_KeyTypeAssignment_0_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getKeyTypeAssignment_0_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("keyType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("keyType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLiteralMapAccess().getKeyTypeTypeRefParserRuleCall_0_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralMap_LessThanSignKeyword_0_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ","
protected class LiteralMap_CommaKeyword_0_2_2 extends KeywordToken  {
	
	public LiteralMap_CommaKeyword_0_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getCommaKeyword_0_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralMap_KeyTypeAssignment_0_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// valueType=TypeRef
protected class LiteralMap_ValueTypeAssignment_0_2_3 extends AssignmentToken  {
	
	public LiteralMap_ValueTypeAssignment_0_2_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getValueTypeAssignment_0_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("valueType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("valueType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLiteralMapAccess().getValueTypeTypeRefParserRuleCall_0_2_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralMap_CommaKeyword_0_2_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ">"
protected class LiteralMap_GreaterThanSignKeyword_0_2_4 extends KeywordToken  {
	
	public LiteralMap_GreaterThanSignKeyword_0_2_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getGreaterThanSignKeyword_0_2_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralMap_ValueTypeAssignment_0_2_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// entries+=MapEntry
protected class LiteralMap_EntriesAssignment_0_3 extends AssignmentToken  {
	
	public LiteralMap_EntriesAssignment_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getEntriesAssignment_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MapEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("entries",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("entries");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMapEntryRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLiteralMapAccess().getEntriesMapEntryParserRuleCall_0_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralMap_Group_0_2(parent, next, actIndex, consumed);
			case 1: return new LiteralMap_LeftSquareBracketKeyword_0_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," entries+=MapEntry)*
protected class LiteralMap_Group_0_4 extends GroupToken {
	
	public LiteralMap_Group_0_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getGroup_0_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralMap_EntriesAssignment_0_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class LiteralMap_CommaKeyword_0_4_0 extends KeywordToken  {
	
	public LiteralMap_CommaKeyword_0_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getCommaKeyword_0_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralMap_Group_0_4(parent, this, 0, inst);
			case 1: return new LiteralMap_EntriesAssignment_0_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// entries+=MapEntry
protected class LiteralMap_EntriesAssignment_0_4_1 extends AssignmentToken  {
	
	public LiteralMap_EntriesAssignment_0_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getEntriesAssignment_0_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MapEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("entries",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("entries");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMapEntryRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLiteralMapAccess().getEntriesMapEntryParserRuleCall_0_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralMap_CommaKeyword_0_4_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "]"
protected class LiteralMap_RightSquareBracketKeyword_0_5 extends KeywordToken  {
	
	public LiteralMap_RightSquareBracketKeyword_0_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getRightSquareBracketKeyword_0_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralMap_Group_0_4(parent, this, 0, inst);
			case 1: return new LiteralMap_EntriesAssignment_0_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// {be::BLiteralMapExpression} "[" "<" keyType=TypeRef "," valueType=TypeRef ">" "]"
protected class LiteralMap_Group_1 extends GroupToken {
	
	public LiteralMap_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralMap_RightSquareBracketKeyword_1_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {be::BLiteralMapExpression}
protected class LiteralMap_BLiteralMapExpressionAction_1_0 extends ActionToken  {

	public LiteralMap_BLiteralMapExpressionAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getBLiteralMapExpressionAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getLiteralMapAccess().getBLiteralMapExpressionAction_1_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "["
protected class LiteralMap_LeftSquareBracketKeyword_1_1 extends KeywordToken  {
	
	public LiteralMap_LeftSquareBracketKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getLeftSquareBracketKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralMap_BLiteralMapExpressionAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "<"
protected class LiteralMap_LessThanSignKeyword_1_2 extends KeywordToken  {
	
	public LiteralMap_LessThanSignKeyword_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getLessThanSignKeyword_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralMap_LeftSquareBracketKeyword_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// keyType=TypeRef
protected class LiteralMap_KeyTypeAssignment_1_3 extends AssignmentToken  {
	
	public LiteralMap_KeyTypeAssignment_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getKeyTypeAssignment_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("keyType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("keyType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLiteralMapAccess().getKeyTypeTypeRefParserRuleCall_1_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralMap_LessThanSignKeyword_1_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ","
protected class LiteralMap_CommaKeyword_1_4 extends KeywordToken  {
	
	public LiteralMap_CommaKeyword_1_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getCommaKeyword_1_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralMap_KeyTypeAssignment_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// valueType=TypeRef
protected class LiteralMap_ValueTypeAssignment_1_5 extends AssignmentToken  {
	
	public LiteralMap_ValueTypeAssignment_1_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getValueTypeAssignment_1_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("valueType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("valueType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLiteralMapAccess().getValueTypeTypeRefParserRuleCall_1_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralMap_CommaKeyword_1_4(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ">"
protected class LiteralMap_GreaterThanSignKeyword_1_6 extends KeywordToken  {
	
	public LiteralMap_GreaterThanSignKeyword_1_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getGreaterThanSignKeyword_1_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralMap_ValueTypeAssignment_1_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "]"
protected class LiteralMap_RightSquareBracketKeyword_1_7 extends KeywordToken  {
	
	public LiteralMap_RightSquareBracketKeyword_1_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralMapAccess().getRightSquareBracketKeyword_1_7();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralMap_GreaterThanSignKeyword_1_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule LiteralMap ****************/


/************ begin Rule LiteralFunction ****************
 *
 * LiteralFunction returns be::BExpression:
 *   {be::B3Function} "{" ("<" returnType=TypeRef ">")? (parameters+=ParameterDeclaration (
 *   "," parameters+=ParameterDeclaration)*)? "|" funcExpr=OneOrManyExpressions "}";
 *
 **/

// {be::B3Function} "{" ("<" returnType=TypeRef ">")? (parameters+=ParameterDeclaration (
// "," parameters+=ParameterDeclaration)*)? "|" funcExpr=OneOrManyExpressions "}"
protected class LiteralFunction_Group extends GroupToken {
	
	public LiteralFunction_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLiteralFunctionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralFunction_RightCurlyBracketKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLiteralFunctionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::B3Function}
protected class LiteralFunction_B3FunctionAction_0 extends ActionToken  {

	public LiteralFunction_B3FunctionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getLiteralFunctionAccess().getB3FunctionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getLiteralFunctionAccess().getB3FunctionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "{"
protected class LiteralFunction_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public LiteralFunction_LeftCurlyBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralFunctionAccess().getLeftCurlyBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralFunction_B3FunctionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("<" returnType=TypeRef ">")?
protected class LiteralFunction_Group_2 extends GroupToken {
	
	public LiteralFunction_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLiteralFunctionAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralFunction_GreaterThanSignKeyword_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "<"
protected class LiteralFunction_LessThanSignKeyword_2_0 extends KeywordToken  {
	
	public LiteralFunction_LessThanSignKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralFunctionAccess().getLessThanSignKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralFunction_LeftCurlyBracketKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// returnType=TypeRef
protected class LiteralFunction_ReturnTypeAssignment_2_1 extends AssignmentToken  {
	
	public LiteralFunction_ReturnTypeAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralFunctionAccess().getReturnTypeAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("returnType",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("returnType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLiteralFunctionAccess().getReturnTypeTypeRefParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralFunction_LessThanSignKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ">"
protected class LiteralFunction_GreaterThanSignKeyword_2_2 extends KeywordToken  {
	
	public LiteralFunction_GreaterThanSignKeyword_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralFunctionAccess().getGreaterThanSignKeyword_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralFunction_ReturnTypeAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// (parameters+=ParameterDeclaration ("," parameters+=ParameterDeclaration)*)?
protected class LiteralFunction_Group_3 extends GroupToken {
	
	public LiteralFunction_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLiteralFunctionAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralFunction_Group_3_1(parent, this, 0, inst);
			case 1: return new LiteralFunction_ParametersAssignment_3_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// parameters+=ParameterDeclaration
protected class LiteralFunction_ParametersAssignment_3_0 extends AssignmentToken  {
	
	public LiteralFunction_ParametersAssignment_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralFunctionAccess().getParametersAssignment_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameters",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLiteralFunctionAccess().getParametersParameterDeclarationParserRuleCall_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralFunction_Group_2(parent, next, actIndex, consumed);
			case 1: return new LiteralFunction_LeftCurlyBracketKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," parameters+=ParameterDeclaration)*
protected class LiteralFunction_Group_3_1 extends GroupToken {
	
	public LiteralFunction_Group_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLiteralFunctionAccess().getGroup_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralFunction_ParametersAssignment_3_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class LiteralFunction_CommaKeyword_3_1_0 extends KeywordToken  {
	
	public LiteralFunction_CommaKeyword_3_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralFunctionAccess().getCommaKeyword_3_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralFunction_Group_3_1(parent, this, 0, inst);
			case 1: return new LiteralFunction_ParametersAssignment_3_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// parameters+=ParameterDeclaration
protected class LiteralFunction_ParametersAssignment_3_1_1 extends AssignmentToken  {
	
	public LiteralFunction_ParametersAssignment_3_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralFunctionAccess().getParametersAssignment_3_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameters",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLiteralFunctionAccess().getParametersParameterDeclarationParserRuleCall_3_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralFunction_CommaKeyword_3_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// "|"
protected class LiteralFunction_VerticalLineKeyword_4 extends KeywordToken  {
	
	public LiteralFunction_VerticalLineKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralFunctionAccess().getVerticalLineKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralFunction_Group_3(parent, this, 0, inst);
			case 1: return new LiteralFunction_Group_2(parent, this, 1, inst);
			case 2: return new LiteralFunction_LeftCurlyBracketKeyword_1(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// funcExpr=OneOrManyExpressions
protected class LiteralFunction_FuncExprAssignment_5 extends AssignmentToken  {
	
	public LiteralFunction_FuncExprAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralFunctionAccess().getFuncExprAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OneOrManyExpressions_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("funcExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("funcExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOneOrManyExpressionsRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLiteralFunctionAccess().getFuncExprOneOrManyExpressionsParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralFunction_VerticalLineKeyword_4(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class LiteralFunction_RightCurlyBracketKeyword_6 extends KeywordToken  {
	
	public LiteralFunction_RightCurlyBracketKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralFunctionAccess().getRightCurlyBracketKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralFunction_FuncExprAssignment_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule LiteralFunction ****************/


/************ begin Rule ClosureExpression ****************
 *
 * ClosureExpression returns be::BExpression:
 *   {be::B3Function} ("<" returnType=TypeRef ">")? (parameters+=ParameterDeclaration (","
 *   parameters+=ParameterDeclaration)*)? "|" funcExpr=OneOrManyExpressions;
 *
 **/

// {be::B3Function} ("<" returnType=TypeRef ">")? (parameters+=ParameterDeclaration (","
// parameters+=ParameterDeclaration)*)? "|" funcExpr=OneOrManyExpressions
protected class ClosureExpression_Group extends GroupToken {
	
	public ClosureExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getClosureExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureExpression_FuncExprAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getClosureExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::B3Function}
protected class ClosureExpression_B3FunctionAction_0 extends ActionToken  {

	public ClosureExpression_B3FunctionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getClosureExpressionAccess().getB3FunctionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getClosureExpressionAccess().getB3FunctionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// ("<" returnType=TypeRef ">")?
protected class ClosureExpression_Group_1 extends GroupToken {
	
	public ClosureExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getClosureExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureExpression_GreaterThanSignKeyword_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "<"
protected class ClosureExpression_LessThanSignKeyword_1_0 extends KeywordToken  {
	
	public ClosureExpression_LessThanSignKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureExpressionAccess().getLessThanSignKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureExpression_B3FunctionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// returnType=TypeRef
protected class ClosureExpression_ReturnTypeAssignment_1_1 extends AssignmentToken  {
	
	public ClosureExpression_ReturnTypeAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getClosureExpressionAccess().getReturnTypeAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("returnType",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("returnType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClosureExpressionAccess().getReturnTypeTypeRefParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ClosureExpression_LessThanSignKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ">"
protected class ClosureExpression_GreaterThanSignKeyword_1_2 extends KeywordToken  {
	
	public ClosureExpression_GreaterThanSignKeyword_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureExpressionAccess().getGreaterThanSignKeyword_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureExpression_ReturnTypeAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// (parameters+=ParameterDeclaration ("," parameters+=ParameterDeclaration)*)?
protected class ClosureExpression_Group_2 extends GroupToken {
	
	public ClosureExpression_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getClosureExpressionAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureExpression_Group_2_1(parent, this, 0, inst);
			case 1: return new ClosureExpression_ParametersAssignment_2_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// parameters+=ParameterDeclaration
protected class ClosureExpression_ParametersAssignment_2_0 extends AssignmentToken  {
	
	public ClosureExpression_ParametersAssignment_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getClosureExpressionAccess().getParametersAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameters",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClosureExpressionAccess().getParametersParameterDeclarationParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ClosureExpression_Group_1(parent, next, actIndex, consumed);
			case 1: return new ClosureExpression_B3FunctionAction_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," parameters+=ParameterDeclaration)*
protected class ClosureExpression_Group_2_1 extends GroupToken {
	
	public ClosureExpression_Group_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getClosureExpressionAccess().getGroup_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureExpression_ParametersAssignment_2_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class ClosureExpression_CommaKeyword_2_1_0 extends KeywordToken  {
	
	public ClosureExpression_CommaKeyword_2_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureExpressionAccess().getCommaKeyword_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureExpression_Group_2_1(parent, this, 0, inst);
			case 1: return new ClosureExpression_ParametersAssignment_2_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// parameters+=ParameterDeclaration
protected class ClosureExpression_ParametersAssignment_2_1_1 extends AssignmentToken  {
	
	public ClosureExpression_ParametersAssignment_2_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getClosureExpressionAccess().getParametersAssignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParameterDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameters",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClosureExpressionAccess().getParametersParameterDeclarationParserRuleCall_2_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ClosureExpression_CommaKeyword_2_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// "|"
protected class ClosureExpression_VerticalLineKeyword_3 extends KeywordToken  {
	
	public ClosureExpression_VerticalLineKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getClosureExpressionAccess().getVerticalLineKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClosureExpression_Group_2(parent, this, 0, inst);
			case 1: return new ClosureExpression_Group_1(parent, this, 1, inst);
			case 2: return new ClosureExpression_B3FunctionAction_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// funcExpr=OneOrManyExpressions
protected class ClosureExpression_FuncExprAssignment_4 extends AssignmentToken  {
	
	public ClosureExpression_FuncExprAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getClosureExpressionAccess().getFuncExprAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OneOrManyExpressions_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("funcExpr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("funcExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOneOrManyExpressionsRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClosureExpressionAccess().getFuncExprOneOrManyExpressionsParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ClosureExpression_VerticalLineKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ClosureExpression ****************/


/************ begin Rule OneOrManyExpressions ****************
 *
 * OneOrManyExpressions returns be::BExpression:
 *   BlockExpressionWithoutBrackets|Expression; 
 * 
 *     
 * 	  
 * 	  
 * 	
 * // TODO VAREXPR - can have variable definitions
 *
 **/

// BlockExpressionWithoutBrackets|Expression 
// 
//     
// 	  
// 	  
// 	
// // TODO VAREXPR - can have variable definitions
protected class OneOrManyExpressions_Alternatives extends AlternativesToken {

	public OneOrManyExpressions_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getOneOrManyExpressionsAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OneOrManyExpressions_BlockExpressionWithoutBracketsParserRuleCall_0(parent, this, 0, inst);
			case 1: return new OneOrManyExpressions_ExpressionParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getOneOrManyExpressionsRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// BlockExpressionWithoutBrackets
protected class OneOrManyExpressions_BlockExpressionWithoutBracketsParserRuleCall_0 extends RuleCallToken {
	
	public OneOrManyExpressions_BlockExpressionWithoutBracketsParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOneOrManyExpressionsAccess().getBlockExpressionWithoutBracketsParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BlockExpressionWithoutBrackets_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(BlockExpressionWithoutBrackets_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBlockExpressionWithoutBracketsRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Expression
protected class OneOrManyExpressions_ExpressionParserRuleCall_1 extends RuleCallToken {
	
	public OneOrManyExpressions_ExpressionParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOneOrManyExpressionsAccess().getExpressionParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Expression_AssignmentExpressionParserRuleCall.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule OneOrManyExpressions ****************/


/************ begin Rule BlockExpressionWithoutBrackets ****************
 *
 * BlockExpressionWithoutBrackets returns be::BExpression:
 *   {be::BChainedExpression} (expressions+=TopLevelExpression ";")+; 
 * // TODO VAREXPR - can have variable definitions
 *
 **/

// {be::BChainedExpression} (expressions+=TopLevelExpression ";")+
protected class BlockExpressionWithoutBrackets_Group extends GroupToken {
	
	public BlockExpressionWithoutBrackets_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBlockExpressionWithoutBracketsAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BlockExpressionWithoutBrackets_Group_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBlockExpressionWithoutBracketsRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BChainedExpression}
protected class BlockExpressionWithoutBrackets_BChainedExpressionAction_0 extends ActionToken  {

	public BlockExpressionWithoutBrackets_BChainedExpressionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getBlockExpressionWithoutBracketsAccess().getBChainedExpressionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getBlockExpressionWithoutBracketsAccess().getBChainedExpressionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// (expressions+=TopLevelExpression ";")+
protected class BlockExpressionWithoutBrackets_Group_1 extends GroupToken {
	
	public BlockExpressionWithoutBrackets_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBlockExpressionWithoutBracketsAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BlockExpressionWithoutBrackets_SemicolonKeyword_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// expressions+=TopLevelExpression
protected class BlockExpressionWithoutBrackets_ExpressionsAssignment_1_0 extends AssignmentToken  {
	
	public BlockExpressionWithoutBrackets_ExpressionsAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBlockExpressionWithoutBracketsAccess().getExpressionsAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TopLevelExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expressions",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expressions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTopLevelExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBlockExpressionWithoutBracketsAccess().getExpressionsTopLevelExpressionParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BlockExpressionWithoutBrackets_Group_1(parent, next, actIndex, consumed);
			case 1: return new BlockExpressionWithoutBrackets_BChainedExpressionAction_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class BlockExpressionWithoutBrackets_SemicolonKeyword_1_1 extends KeywordToken  {
	
	public BlockExpressionWithoutBrackets_SemicolonKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBlockExpressionWithoutBracketsAccess().getSemicolonKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BlockExpressionWithoutBrackets_ExpressionsAssignment_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule BlockExpressionWithoutBrackets ****************/


/************ begin Rule MapEntry ****************
 *
 * MapEntry returns be::BMapEntry:
 *   {be::BMapEntry} key=KeyLiteral ":" value=Expression;
 *
 **/

// {be::BMapEntry} key=KeyLiteral ":" value=Expression
protected class MapEntry_Group extends GroupToken {
	
	public MapEntry_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMapEntryAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MapEntry_ValueAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getMapEntryRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BMapEntry}
protected class MapEntry_BMapEntryAction_0 extends ActionToken  {

	public MapEntry_BMapEntryAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getMapEntryAccess().getBMapEntryAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getMapEntryAccess().getBMapEntryAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// key=KeyLiteral
protected class MapEntry_KeyAssignment_1 extends AssignmentToken  {
	
	public MapEntry_KeyAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMapEntryAccess().getKeyAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new KeyLiteral_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("key",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("key");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getKeyLiteralRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMapEntryAccess().getKeyKeyLiteralParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MapEntry_BMapEntryAction_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ":"
protected class MapEntry_ColonKeyword_2 extends KeywordToken  {
	
	public MapEntry_ColonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMapEntryAccess().getColonKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MapEntry_KeyAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// value=Expression
protected class MapEntry_ValueAssignment_3 extends AssignmentToken  {
	
	public MapEntry_ValueAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMapEntryAccess().getValueAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMapEntryAccess().getValueExpressionParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MapEntry_ColonKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule MapEntry ****************/


/************ begin Rule KeyLiteral ****************
 *
 * KeyLiteral returns be::BExpression:
 *   {be::BLiteralExpression} value=( ID | PID | STRING );
 *
 **/

// {be::BLiteralExpression} value=( ID | PID | STRING )
protected class KeyLiteral_Group extends GroupToken {
	
	public KeyLiteral_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getKeyLiteralAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new KeyLiteral_ValueAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getKeyLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BLiteralExpression}
protected class KeyLiteral_BLiteralExpressionAction_0 extends ActionToken  {

	public KeyLiteral_BLiteralExpressionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getKeyLiteralAccess().getBLiteralExpressionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getKeyLiteralAccess().getBLiteralExpressionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// value=( ID | PID | STRING )
protected class KeyLiteral_ValueAssignment_1 extends AssignmentToken  {
	
	public KeyLiteral_ValueAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getKeyLiteralAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new KeyLiteral_BLiteralExpressionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getKeyLiteralAccess().getValueIDTerminalRuleCall_1_0_0();
			return obj;
		}
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getKeyLiteralAccess().getValuePIDTerminalRuleCall_1_0_1();
			return obj;
		}
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getKeyLiteralAccess().getValueSTRINGTerminalRuleCall_1_0_2();
			return obj;
		}
		return null;
	}

}


/************ end Rule KeyLiteral ****************/


/************ begin Rule LiteralType ****************
 *
 * LiteralType returns be::BExpression:
 *   {be::BLiteralType} type=TypeRef;
 *
 **/

// {be::BLiteralType} type=TypeRef
protected class LiteralType_Group extends GroupToken {
	
	public LiteralType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLiteralTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LiteralType_TypeAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLiteralTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BLiteralType}
protected class LiteralType_BLiteralTypeAction_0 extends ActionToken  {

	public LiteralType_BLiteralTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getLiteralTypeAccess().getBLiteralTypeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getLiteralTypeAccess().getBLiteralTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// type=TypeRef
protected class LiteralType_TypeAssignment_1 extends AssignmentToken  {
	
	public LiteralType_TypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralTypeAccess().getTypeAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLiteralTypeAccess().getTypeTypeRefParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LiteralType_BLiteralTypeAction_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule LiteralType ****************/


/************ begin Rule ValueLiteral ****************
 *
 * ValueLiteral returns be::BExpression:
 *   BooleanLiteral|RealLiteral|IntegerLiteral|NullLiteral|StringLiteral|UnitLiteral; 
 * 
 *      
 * 	   
 * 	     // SEE ISSUE 297089 - must be placed before IntegerLiteral
 * 	    
 * 	   
 * 	  
 * //	| QueryLiteral
 *
 **/

// BooleanLiteral|RealLiteral|IntegerLiteral|NullLiteral|StringLiteral|UnitLiteral 
// 
//      
// 	   
// 	     // SEE ISSUE 297089 - must be placed before IntegerLiteral
// 	    
// 	   
// 	  
// //	| QueryLiteral
protected class ValueLiteral_Alternatives extends AlternativesToken {

	public ValueLiteral_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getValueLiteralAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ValueLiteral_BooleanLiteralParserRuleCall_0(parent, this, 0, inst);
			case 1: return new ValueLiteral_RealLiteralParserRuleCall_1(parent, this, 1, inst);
			case 2: return new ValueLiteral_IntegerLiteralParserRuleCall_2(parent, this, 2, inst);
			case 3: return new ValueLiteral_NullLiteralParserRuleCall_3(parent, this, 3, inst);
			case 4: return new ValueLiteral_StringLiteralParserRuleCall_4(parent, this, 4, inst);
			case 5: return new ValueLiteral_UnitLiteralParserRuleCall_5(parent, this, 5, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getValueLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// BooleanLiteral
protected class ValueLiteral_BooleanLiteralParserRuleCall_0 extends RuleCallToken {
	
	public ValueLiteral_BooleanLiteralParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getValueLiteralAccess().getBooleanLiteralParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BooleanLiteral_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(BooleanLiteral_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBooleanLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// RealLiteral      // SEE ISSUE 297089 - must be placed before IntegerLiteral
protected class ValueLiteral_RealLiteralParserRuleCall_1 extends RuleCallToken {
	
	public ValueLiteral_RealLiteralParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getValueLiteralAccess().getRealLiteralParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RealLiteral_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RealLiteral_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRealLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// IntegerLiteral
protected class ValueLiteral_IntegerLiteralParserRuleCall_2 extends RuleCallToken {
	
	public ValueLiteral_IntegerLiteralParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getValueLiteralAccess().getIntegerLiteralParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntegerLiteral_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(IntegerLiteral_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getIntegerLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// NullLiteral
protected class ValueLiteral_NullLiteralParserRuleCall_3 extends RuleCallToken {
	
	public ValueLiteral_NullLiteralParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getValueLiteralAccess().getNullLiteralParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NullLiteral_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(NullLiteral_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getNullLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// StringLiteral   
// //	| QueryLiteral
protected class ValueLiteral_StringLiteralParserRuleCall_4 extends RuleCallToken {
	
	public ValueLiteral_StringLiteralParserRuleCall_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getValueLiteralAccess().getStringLiteralParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringLiteral_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(StringLiteral_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getStringLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// UnitLiteral
protected class ValueLiteral_UnitLiteralParserRuleCall_5 extends RuleCallToken {
	
	public ValueLiteral_UnitLiteralParserRuleCall_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getValueLiteralAccess().getUnitLiteralParserRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnitLiteral_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UnitLiteral_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUnitLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ValueLiteral ****************/


/************ begin Rule BooleanLiteral ****************
 *
 * BooleanLiteral returns be::BExpression:
 *   {be::BLiteralExpression} value=BooleanValue;
 *
 **/

// {be::BLiteralExpression} value=BooleanValue
protected class BooleanLiteral_Group extends GroupToken {
	
	public BooleanLiteral_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBooleanLiteralAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BooleanLiteral_ValueAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBooleanLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BLiteralExpression}
protected class BooleanLiteral_BLiteralExpressionAction_0 extends ActionToken  {

	public BooleanLiteral_BLiteralExpressionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getBooleanLiteralAccess().getBLiteralExpressionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getBooleanLiteralAccess().getBLiteralExpressionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// value=BooleanValue
protected class BooleanLiteral_ValueAssignment_1 extends AssignmentToken  {
	
	public BooleanLiteral_ValueAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBooleanLiteralAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BooleanLiteral_BLiteralExpressionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getBooleanLiteralAccess().getValueBooleanValueParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule BooleanLiteral ****************/


/************ begin Rule IntegerLiteral ****************
 *
 * IntegerLiteral returns be::BExpression:
 *   {be::BLiteralExpression} value=IntValue;
 *
 **/

// {be::BLiteralExpression} value=IntValue
protected class IntegerLiteral_Group extends GroupToken {
	
	public IntegerLiteral_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getIntegerLiteralAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntegerLiteral_ValueAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getIntegerLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BLiteralExpression}
protected class IntegerLiteral_BLiteralExpressionAction_0 extends ActionToken  {

	public IntegerLiteral_BLiteralExpressionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getIntegerLiteralAccess().getBLiteralExpressionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getIntegerLiteralAccess().getBLiteralExpressionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// value=IntValue
protected class IntegerLiteral_ValueAssignment_1 extends AssignmentToken  {
	
	public IntegerLiteral_ValueAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIntegerLiteralAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntegerLiteral_BLiteralExpressionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getIntegerLiteralAccess().getValueIntValueParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule IntegerLiteral ****************/


/************ begin Rule UnitLiteral ****************
 *
 * UnitLiteral returns be::BExpression:
 *   {be::BLiteralExpression} value="unit";
 *
 **/

// {be::BLiteralExpression} value="unit"
protected class UnitLiteral_Group extends GroupToken {
	
	public UnitLiteral_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnitLiteralAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnitLiteral_ValueAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnitLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BLiteralExpression}
protected class UnitLiteral_BLiteralExpressionAction_0 extends ActionToken  {

	public UnitLiteral_BLiteralExpressionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getUnitLiteralAccess().getBLiteralExpressionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getUnitLiteralAccess().getBLiteralExpressionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// value="unit"
protected class UnitLiteral_ValueAssignment_1 extends AssignmentToken  {
	
	public UnitLiteral_ValueAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnitLiteralAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnitLiteral_BLiteralExpressionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if("unit".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getUnitLiteralAccess().getValueUnitKeyword_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule UnitLiteral ****************/


/************ begin Rule StringLiteral ****************
 *
 * StringLiteral returns be::BExpression:
 *   {be::BLiteralExpression} value=STRING;
 *
 **/

// {be::BLiteralExpression} value=STRING
protected class StringLiteral_Group extends GroupToken {
	
	public StringLiteral_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStringLiteralAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringLiteral_ValueAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getStringLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BLiteralExpression}
protected class StringLiteral_BLiteralExpressionAction_0 extends ActionToken  {

	public StringLiteral_BLiteralExpressionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getStringLiteralAccess().getBLiteralExpressionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getStringLiteralAccess().getBLiteralExpressionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// value=STRING
protected class StringLiteral_ValueAssignment_1 extends AssignmentToken  {
	
	public StringLiteral_ValueAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStringLiteralAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringLiteral_BLiteralExpressionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule StringLiteral ****************/


/************ begin Rule RealLiteral ****************
 *
 * RealLiteral returns be::BExpression:
 *   {be::BLiteralExpression} value=RealValue;
 *
 **/

// {be::BLiteralExpression} value=RealValue
protected class RealLiteral_Group extends GroupToken {
	
	public RealLiteral_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRealLiteralAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RealLiteral_ValueAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRealLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BLiteralExpression}
protected class RealLiteral_BLiteralExpressionAction_0 extends ActionToken  {

	public RealLiteral_BLiteralExpressionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRealLiteralAccess().getBLiteralExpressionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getRealLiteralAccess().getBLiteralExpressionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// value=RealValue
protected class RealLiteral_ValueAssignment_1 extends AssignmentToken  {
	
	public RealLiteral_ValueAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRealLiteralAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RealLiteral_BLiteralExpressionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getRealLiteralAccess().getValueRealValueParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule RealLiteral ****************/


/************ begin Rule RegexpLiteral ****************
 *
 * RegexpLiteral returns be::BExpression:
 *   {be::BRegularExpression} pattern=REGULAR_EXPR;
 *
 **/

// {be::BRegularExpression} pattern=REGULAR_EXPR
protected class RegexpLiteral_Group extends GroupToken {
	
	public RegexpLiteral_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRegexpLiteralAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RegexpLiteral_PatternAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRegexpLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BRegularExpression}
protected class RegexpLiteral_BRegularExpressionAction_0 extends ActionToken  {

	public RegexpLiteral_BRegularExpressionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRegexpLiteralAccess().getBRegularExpressionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getRegexpLiteralAccess().getBRegularExpressionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// pattern=REGULAR_EXPR
protected class RegexpLiteral_PatternAssignment_1 extends AssignmentToken  {
	
	public RegexpLiteral_PatternAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRegexpLiteralAccess().getPatternAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RegexpLiteral_BRegularExpressionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("pattern",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("pattern");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getRegexpLiteralAccess().getPatternREGULAR_EXPRTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule RegexpLiteral ****************/


/************ begin Rule NullLiteral ****************
 *
 * NullLiteral returns be::BExpression:
 *   {be::BLiteralExpression} "null"; 
 * 	          // TODO: check that type is Object
 * 
 * //ThisLiteral	returns  be::BExpression: {ThisLiteral} val="this";
 * //SuperLiteral returns  be::BExpression: {SuperLiteral} val="super";
 * 
 * // Has conversion rule
 *
 **/

// {be::BLiteralExpression} "null"
protected class NullLiteral_Group extends GroupToken {
	
	public NullLiteral_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNullLiteralAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NullLiteral_NullKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getNullLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {be::BLiteralExpression}
protected class NullLiteral_BLiteralExpressionAction_0 extends ActionToken  {

	public NullLiteral_BLiteralExpressionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getNullLiteralAccess().getBLiteralExpressionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getNullLiteralAccess().getBLiteralExpressionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "null"
protected class NullLiteral_NullKeyword_1 extends KeywordToken  {
	
	public NullLiteral_NullKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNullLiteralAccess().getNullKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NullLiteral_BLiteralExpressionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule NullLiteral ****************/





/************ begin Rule ParanthesizedExpression ****************
 *
 * ParanthesizedExpression returns be::BExpression:
 *   "(" Expression ")";
 *
 **/

// "(" Expression ")"
protected class ParanthesizedExpression_Group extends GroupToken {
	
	public ParanthesizedExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParanthesizedExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParanthesizedExpression_RightParenthesisKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getParanthesizedExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "("
protected class ParanthesizedExpression_LeftParenthesisKeyword_0 extends KeywordToken  {
	
	public ParanthesizedExpression_LeftParenthesisKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getParanthesizedExpressionAccess().getLeftParenthesisKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// Expression
protected class ParanthesizedExpression_ExpressionParserRuleCall_1 extends RuleCallToken {
	
	public ParanthesizedExpression_ExpressionParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getParanthesizedExpressionAccess().getExpressionParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Expression_AssignmentExpressionParserRuleCall.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParanthesizedExpression_LeftParenthesisKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// ")"
protected class ParanthesizedExpression_RightParenthesisKeyword_2 extends KeywordToken  {
	
	public ParanthesizedExpression_RightParenthesisKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getParanthesizedExpressionAccess().getRightParenthesisKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParanthesizedExpression_ExpressionParserRuleCall_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ParanthesizedExpression ****************/


/************ begin Rule Version ****************
 *
 * Version:
 *   version=VersionLiteral;
 *
 **/

// version=VersionLiteral
protected class Version_VersionAssignment extends AssignmentToken  {
	
	public Version_VersionAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVersionAccess().getVersionAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getVersionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("version",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("version");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getVersionAccess().getVersionVersionLiteralParserRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule Version ****************/



/************ begin Rule VersionRange ****************
 *
 * VersionRange:
 *   range=VersionRangeLiteral;
 *
 **/

// range=VersionRangeLiteral
protected class VersionRange_RangeAssignment extends AssignmentToken  {
	
	public VersionRange_RangeAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVersionRangeAccess().getRangeAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getVersionRangeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("range",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("range");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getVersionRangeAccess().getRangeVersionRangeLiteralParserRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule VersionRange ****************/













}
