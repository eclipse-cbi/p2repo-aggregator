/*
* generated by Xtext
*/
grammar InternalBeeLang;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.eclipse.b3.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.b3.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.b3.services.BeeLangGrammarAccess;

}

@parser::members {
 
 	private BeeLangGrammarAccess grammarAccess;
 	
    public InternalBeeLangParser(TokenStream input, IAstFactory factory, BeeLangGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/b3/parser/antlr/internal/InternalBeeLang.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "BeeModel";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleBeeModel
entryRuleBeeModel returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBeeModelRule(), currentNode); }
	 iv_ruleBeeModel=ruleBeeModel 
	 { $current=$iv_ruleBeeModel.current; } 
	 EOF 
;

// Rule BeeModel
ruleBeeModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT", "RULE_ML_COMMENT");
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
		myHiddenTokenState.restore();
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBeeModelAccess().getImportsImportParserRuleCall_0_0(), currentNode); 
	    }
	    lv_imports_0=ruleImport 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBeeModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "imports", lv_imports_0, "Import", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBeeModelAccess().getFunctionsFunctionParserRuleCall_1_0_0(), currentNode); 
	    }
	    lv_functions_1=ruleFunction 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBeeModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "functions", lv_functions_1, "Function", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBeeModelAccess().getConcernConcernParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_concern_2=ruleConcern 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBeeModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "concern", lv_concern_2, "Concern", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBeeModelAccess().getBodyUnitParserRuleCall_2_0(), currentNode); 
	    }
	    lv_body_3=ruleUnit 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBeeModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "body", lv_body_3, "Unit", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?);





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getImportRule(), currentNode); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_reexport_0='reexport' 
    {
        createLeafNode(grammarAccess.getImportAccess().getReexportReexportKeyword_0_0(), "reexport"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImportRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "reexport", true, "reexport", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?'import' 
    {
        createLeafNode(grammarAccess.getImportAccess().getImportKeyword_1(), null); 
    }
(	
	
	    lv_importer_2=(	{ 
        currentNode=createCompositeNode(grammarAccess.getImportAccess().getImporterJavaImporterParserRuleCall_2_0_0(), currentNode); 
    }
	ruleJavaImporter	{ 
        currentNode = currentNode.getParent();
    }

    |	{ 
        currentNode=createCompositeNode(grammarAccess.getImportAccess().getImporterNativeImporterParserRuleCall_2_0_1(), currentNode); 
    }
	ruleNativeImporter	{ 
        currentNode = currentNode.getParent();
    }
)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImportRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "importer", lv_importer_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)('as' 
    {
        createLeafNode(grammarAccess.getImportAccess().getAsKeyword_3_0(), null); 
    }
(	
	
	    lv_nameSpace_4=	RULE_ID
	{
		createLeafNode(grammarAccess.getImportAccess().getNameSpaceIDTerminalRuleCall_3_1_0(), "nameSpace"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImportRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "nameSpace", lv_nameSpace_4, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?';' 
    {
        createLeafNode(grammarAccess.getImportAccess().getSemicolonKeyword_4(), null); 
    }
);





// Entry rule entryRuleJavaImporter
entryRuleJavaImporter returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getJavaImporterRule(), currentNode); }
	 iv_ruleJavaImporter=ruleJavaImporter 
	 { $current=$iv_ruleJavaImporter.current; } 
	 EOF 
;

// Rule JavaImporter
ruleJavaImporter returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getJavaImporterAccess().getNameQIDParserRuleCall_0(), currentNode); 
	    }
	    lv_name_0=ruleQID 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJavaImporterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, "QID", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
);





// Entry rule entryRuleNativeImporter
entryRuleNativeImporter returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getNativeImporterRule(), currentNode); }
	 iv_ruleNativeImporter=ruleNativeImporter 
	 { $current=$iv_ruleNativeImporter.current; } 
	 EOF 
;

// Rule NativeImporter
ruleNativeImporter returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    lv_uriString_0=	RULE_STRING
	{
		createLeafNode(grammarAccess.getNativeImporterAccess().getUriStringSTRINGTerminalRuleCall_0(), "uriString"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNativeImporterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "uriString", lv_uriString_0, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
);





// Entry rule entryRuleUnit
entryRuleUnit returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getUnitRule(), currentNode); }
	 iv_ruleUnit=ruleUnit 
	 { $current=$iv_ruleUnit.current; } 
	 EOF 
;

// Rule Unit
ruleUnit returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
		myHiddenTokenState.restore();
    }:
((	
	
	    lv_documentation_0=	RULE_DOCUMENTATION
	{
		createLeafNode(grammarAccess.getUnitAccess().getDocumentationDOCUMENTATIONTerminalRuleCall_0_0(), "documentation"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "documentation", lv_documentation_0, "DOCUMENTATION", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getExecutionModeExecutionModeEnumRuleCall_1_0(), currentNode); 
	    }
	    lv_executionMode_1=ruleExecutionMode 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "executionMode", lv_executionMode_1, "ExecutionMode", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?'unit' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getUnitKeyword_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getNameUnitNameParserRuleCall_3_0(), currentNode); 
	    }
	    lv_name_3=ruleUnitName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_3, "UnitName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?('version' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getVersionKeyword_4_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getVersionVersionParserRuleCall_4_1_0(), currentNode); 
	    }
	    lv_version_5=ruleVersion 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "version", lv_version_5, "Version", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?('implements' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getImplementsKeyword_5_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getImplementsInterfaceNameParserRuleCall_5_1_0(), currentNode); 
	    }
	    lv_implements_7=ruleInterfaceName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "implements", lv_implements_7, "InterfaceName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getCommaKeyword_5_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getImplementsInterfaceNameParserRuleCall_5_2_1_0(), currentNode); 
	    }
	    lv_implements_9=ruleInterfaceName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "implements", lv_implements_9, "InterfaceName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)?'{' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_6(), null); 
    }
('default' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getDefaultKeyword_7_0(), null); 
    }
'properties' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getPropertiesKeyword_7_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getDefaultPropertiesPropertySetParserRuleCall_7_2_0(), currentNode); 
	    }
	    lv_defaultProperties_13=rulePropertySet 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "defaultProperties", lv_defaultProperties_13, "PropertySet", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?(('provides' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getProvidesKeyword_8_0_0(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_8_0_1(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_8_0_2_0_0(), currentNode); 
	    }
	    lv_providedCapabilities_16=ruleProvidedCapability 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "providedCapabilities", lv_providedCapabilities_16, "ProvidedCapability", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getSemicolonKeyword_8_0_2_1(), null); 
    }
)+'}' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_8_0_3(), null); 
    }
)
    |('provides' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getProvidesKeyword_8_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_8_1_1_0(), currentNode); 
	    }
	    lv_providedCapabilities_20=ruleProvidedCapability 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "providedCapabilities", lv_providedCapabilities_20, "ProvidedCapability", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getSemicolonKeyword_8_1_2(), null); 
    }
)
    |('requires' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRequiresKeyword_8_2_0(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_8_2_1(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getRequiredCapabilitiesRequiredCapabilityParserRuleCall_8_2_2_0_0(), currentNode); 
	    }
	    lv_requiredCapabilities_24=ruleRequiredCapability 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "requiredCapabilities", lv_requiredCapabilities_24, "RequiredCapability", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getSemicolonKeyword_8_2_2_1(), null); 
    }
)+'}' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_8_2_3(), null); 
    }
)
    |('requires' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRequiresKeyword_8_3_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getRequiredCapabilitiesRequiredCapabilityParserRuleCall_8_3_1_0(), currentNode); 
	    }
	    lv_requiredCapabilities_28=ruleRequiredCapability 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "requiredCapabilities", lv_requiredCapabilities_28, "RequiredCapability", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getSemicolonKeyword_8_3_2(), null); 
    }
)
    |('env' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getEnvKeyword_8_4_0(), null); 
    }
'requires' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRequiresKeyword_8_4_1(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_8_4_2(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getMetaRequiredCapabilitiesRequiredCapabilityParserRuleCall_8_4_3_0_0(), currentNode); 
	    }
	    lv_metaRequiredCapabilities_33=ruleRequiredCapability 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "metaRequiredCapabilities", lv_metaRequiredCapabilities_33, "RequiredCapability", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getSemicolonKeyword_8_4_3_1(), null); 
    }
)+'}' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_8_4_4(), null); 
    }
)
    |('env' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getEnvKeyword_8_5_0(), null); 
    }
'requires' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRequiresKeyword_8_5_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getMetaRequiredCapabilitiesRequiredCapabilityParserRuleCall_8_5_2_0(), currentNode); 
	    }
	    lv_metaRequiredCapabilities_38=ruleRequiredCapability 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "metaRequiredCapabilities", lv_metaRequiredCapabilities_38, "RequiredCapability", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getSemicolonKeyword_8_5_3(), null); 
    }
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getConcernsConcernParserRuleCall_8_6_0(), currentNode); 
	    }
	    lv_concerns_40=ruleConcern 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "concerns", lv_concerns_40, "Concern", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |('sequential' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getSequentialKeyword_8_7_0(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_8_7_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getSynchronizationsSynchronizationParserRuleCall_8_7_2_0(), currentNode); 
	    }
	    lv_synchronizations_43=ruleSynchronization 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "synchronizations", lv_synchronizations_43, "Synchronization", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)+'}' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_8_7_3(), null); 
    }
)
    |('sequential' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getSequentialKeyword_8_8_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getSynchronizationsSynchronizationParserRuleCall_8_8_1_0(), currentNode); 
	    }
	    lv_synchronizations_46=ruleSynchronization 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "synchronizations", lv_synchronizations_46, "Synchronization", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getBuildersBuilderParserRuleCall_8_9_0(), currentNode); 
	    }
	    lv_builders_47=ruleBuilder 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "builders", lv_builders_47, "Builder", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getMethodsMethodParserRuleCall_8_10_0(), currentNode); 
	    }
	    lv_methods_48=ruleMethod 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "methods", lv_methods_48, "Method", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |('repositories' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRepositoriesKeyword_8_11_0(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_8_11_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getRepositoryConfigurationsRepositoryConfigurationParserRuleCall_8_11_2_0(), currentNode); 
	    }
	    lv_repositoryConfigurations_51=ruleRepositoryConfiguration 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "repositoryConfigurations", lv_repositoryConfigurations_51, "RepositoryConfiguration", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_8_11_3(), null); 
    }
)
    |('properties' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getPropertiesKeyword_8_12_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getPropertySetsNamedPropertySetParserRuleCall_8_12_1_0(), currentNode); 
	    }
	    lv_propertySets_54=ruleNamedPropertySet 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "propertySets", lv_propertySets_54, "NamedPropertySet", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))
    |('containers' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getContainersKeyword_8_13_0(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_8_13_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getContainersContainerConfigurationParserRuleCall_8_13_2_0(), currentNode); 
	    }
	    lv_containers_57=ruleContainerConfiguration 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "containers", lv_containers_57, "ContainerConfiguration", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_8_13_3(), null); 
    }
))*'}' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_9(), null); 
    }
);





// Entry rule entryRuleProvidedCapability
entryRuleProvidedCapability returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getProvidedCapabilityRule(), currentNode); }
	 iv_ruleProvidedCapability=ruleProvidedCapability 
	 { $current=$iv_ruleProvidedCapability.current; } 
	 EOF 
;

// Rule ProvidedCapability
ruleProvidedCapability returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getProvidedCapabilityAccess().getCapabilityFilteredCapabilityParserRuleCall_0_0(), currentNode); 
	    }
	    lv_capability_0=ruleFilteredCapability 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProvidedCapabilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "capability", lv_capability_0, "FilteredCapability", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('/' 
    {
        createLeafNode(grammarAccess.getProvidedCapabilityAccess().getSolidusKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getProvidedCapabilityAccess().getVersionVersionParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_version_2=ruleVersion 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProvidedCapabilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "version", lv_version_2, "Version", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?);





// Entry rule entryRuleRequiredCapability
entryRuleRequiredCapability returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRequiredCapabilityRule(), currentNode); }
	 iv_ruleRequiredCapability=ruleRequiredCapability 
	 { $current=$iv_ruleRequiredCapability.current; } 
	 EOF 
;

// Rule RequiredCapability
ruleRequiredCapability returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRequiredCapabilityAccess().getCapabilityFilteredCapabilityParserRuleCall_0_0(), currentNode); 
	    }
	    lv_capability_0=ruleFilteredCapability 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRequiredCapabilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "capability", lv_capability_0, "FilteredCapability", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('/' 
    {
        createLeafNode(grammarAccess.getRequiredCapabilityAccess().getSolidusKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRequiredCapabilityAccess().getRangeVersionRangeParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_range_2=ruleVersionRange 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRequiredCapabilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "range", lv_range_2, "VersionRange", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?);





// Entry rule entryRuleFilteredCapability
entryRuleFilteredCapability returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFilteredCapabilityRule(), currentNode); }
	 iv_ruleFilteredCapability=ruleFilteredCapability 
	 { $current=$iv_ruleFilteredCapability.current; } 
	 EOF 
;

// Rule FilteredCapability
ruleFilteredCapability returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('when' 
    {
        createLeafNode(grammarAccess.getFilteredCapabilityAccess().getWhenKeyword_0_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFilteredCapabilityAccess().getFilterFilterParserRuleCall_0_1_0(), currentNode); 
	    }
	    lv_filter_1=ruleFilter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFilteredCapabilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "filter", lv_filter_1, "Filter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFilteredCapabilityAccess().getCapabilityCapabilityParserRuleCall_1_0(), currentNode); 
	    }
	    lv_capability_2=ruleCapability 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFilteredCapabilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "capability", lv_capability_2, "Capability", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleCapability
entryRuleCapability returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCapabilityRule(), currentNode); }
	 iv_ruleCapability=ruleCapability 
	 { $current=$iv_ruleCapability.current; } 
	 EOF 
;

// Rule Capability
ruleCapability returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCapabilityAccess().getInterfaceInterfaceNameParserRuleCall_0_0(), currentNode); 
	    }
	    lv_interface_0=ruleInterfaceName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCapabilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "interface", lv_interface_0, "InterfaceName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'/' 
    {
        createLeafNode(grammarAccess.getCapabilityAccess().getSolidusKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCapabilityAccess().getNameUnitNameParserRuleCall_2_0(), currentNode); 
	    }
	    lv_name_2=ruleUnitName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCapabilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_2, "UnitName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleNamedPropertySet
entryRuleNamedPropertySet returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getNamedPropertySetRule(), currentNode); }
	 iv_ruleNamedPropertySet=ruleNamedPropertySet 
	 { $current=$iv_ruleNamedPropertySet.current; } 
	 EOF 
;

// Rule NamedPropertySet
ruleNamedPropertySet returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_name_0=	RULE_ID
	{
		createLeafNode(grammarAccess.getNamedPropertySetAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNamedPropertySetRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getNamedPropertySetAccess().getBodyPropertySetParserRuleCall_1_0(), currentNode); 
	    }
	    lv_body_1=rulePropertySet 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNamedPropertySetRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "body", lv_body_1, "PropertySet", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRulePropertySet
entryRulePropertySet returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPropertySetRule(), currentNode); }
	 iv_rulePropertySet=rulePropertySet 
	 { $current=$iv_rulePropertySet.current; } 
	 EOF 
;

// Rule PropertySet
rulePropertySet returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('extends' 
    {
        createLeafNode(grammarAccess.getPropertySetAccess().getExtendsKeyword_0_0(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertySetRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertySetAccess().getExtendsNamedPropertySetCrossReference_0_1_0(), currentNode); 
	    }
		ruleQIDREF		{ 
	        currentNode = currentNode.getParent();
	    }

		// TODO assign feature to currentNode
	
))?'{' 
    {
        createLeafNode(grammarAccess.getPropertySetAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPropertySetAccess().getOperationsPropertyOperationParserRuleCall_2_0(), currentNode); 
	    }
	    lv_operations_3=rulePropertyOperation 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertySetRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "operations", lv_operations_3, "PropertyOperation", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getPropertySetAccess().getRightCurlyBracketKeyword_3(), null); 
    }
);





// Entry rule entryRulePropertyOperation
entryRulePropertyOperation returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPropertyOperationRule(), currentNode); }
	 iv_rulePropertyOperation=rulePropertyOperation 
	 { $current=$iv_rulePropertyOperation.current; } 
	 EOF 
;

// Rule PropertyOperation
rulePropertyOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getPropertyOperationAccess().getFilteredPropertyOperationParserRuleCall_0(), currentNode); 
    }
    this_FilteredPropertyOperation_0=ruleFilteredPropertyOperation
    { 
        $current = $this_FilteredPropertyOperation_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPropertyOperationAccess().getSetPropertyOperationParserRuleCall_1(), currentNode); 
    }
    this_SetPropertyOperation_1=ruleSetPropertyOperation
    { 
        $current = $this_SetPropertyOperation_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPropertyOperationAccess().getUnsetPropertyOperationParserRuleCall_2(), currentNode); 
    }
    this_UnsetPropertyOperation_2=ruleUnsetPropertyOperation
    { 
        $current = $this_UnsetPropertyOperation_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPropertyOperationAccess().getPropertySetParserRuleCall_3(), currentNode); 
    }
    this_PropertySet_3=rulePropertySet
    { 
        $current = $this_PropertySet_3.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleFilteredPropertyOperation
entryRuleFilteredPropertyOperation returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFilteredPropertyOperationRule(), currentNode); }
	 iv_ruleFilteredPropertyOperation=ruleFilteredPropertyOperation 
	 { $current=$iv_ruleFilteredPropertyOperation.current; } 
	 EOF 
;

// Rule FilteredPropertyOperation
ruleFilteredPropertyOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('when' 
    {
        createLeafNode(grammarAccess.getFilteredPropertyOperationAccess().getWhenKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFilteredPropertyOperationAccess().getFilterFilterParserRuleCall_1_0(), currentNode); 
	    }
	    lv_filter_1=ruleFilter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFilteredPropertyOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "filter", lv_filter_1, "Filter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    lv_body_2=(	{ 
        currentNode=createCompositeNode(grammarAccess.getFilteredPropertyOperationAccess().getBodySetPropertyOperationParserRuleCall_2_0_0(), currentNode); 
    }
	ruleSetPropertyOperation	{ 
        currentNode = currentNode.getParent();
    }

    |	{ 
        currentNode=createCompositeNode(grammarAccess.getFilteredPropertyOperationAccess().getBodyUnsetPropertyOperationParserRuleCall_2_0_1(), currentNode); 
    }
	ruleUnsetPropertyOperation	{ 
        currentNode = currentNode.getParent();
    }

    |	{ 
        currentNode=createCompositeNode(grammarAccess.getFilteredPropertyOperationAccess().getBodyPropertySetParserRuleCall_2_0_2(), currentNode); 
    }
	rulePropertySet	{ 
        currentNode = currentNode.getParent();
    }
)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFilteredPropertyOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "body", lv_body_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleSetPropertyOperation
entryRuleSetPropertyOperation returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSetPropertyOperationRule(), currentNode); }
	 iv_ruleSetPropertyOperation=ruleSetPropertyOperation 
	 { $current=$iv_ruleSetPropertyOperation.current; } 
	 EOF 
;

// Rule SetPropertyOperation
ruleSetPropertyOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_final_0='final' 
    {
        createLeafNode(grammarAccess.getSetPropertyOperationAccess().getFinalFinalKeyword_0_0(), "final"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSetPropertyOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "final", true, "final", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSetPropertyOperationAccess().getKeyPropertyNameParserRuleCall_1_0(), currentNode); 
	    }
	    lv_key_1=rulePropertyName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSetPropertyOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "key", lv_key_1, "PropertyName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSetPropertyOperationAccess().getOpAssignmentOperatorEnumRuleCall_2_0(), currentNode); 
	    }
	    lv_op_2=ruleAssignmentOperator 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSetPropertyOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2, "AssignmentOperator", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSetPropertyOperationAccess().getValueExpressionParserRuleCall_3_0(), currentNode); 
	    }
	    lv_value_3=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSetPropertyOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_3, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getSetPropertyOperationAccess().getSemicolonKeyword_4(), null); 
    }
);





// Entry rule entryRuleUnsetPropertyOperation
entryRuleUnsetPropertyOperation returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getUnsetPropertyOperationRule(), currentNode); }
	 iv_ruleUnsetPropertyOperation=ruleUnsetPropertyOperation 
	 { $current=$iv_ruleUnsetPropertyOperation.current; } 
	 EOF 
;

// Rule UnsetPropertyOperation
ruleUnsetPropertyOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('unset' 
    {
        createLeafNode(grammarAccess.getUnsetPropertyOperationAccess().getUnsetKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnsetPropertyOperationAccess().getKeyPropertyNameParserRuleCall_1_0(), currentNode); 
	    }
	    lv_key_1=rulePropertyName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnsetPropertyOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "key", lv_key_1, "PropertyName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getUnsetPropertyOperationAccess().getSemicolonKeyword_2(), null); 
    }
);





// Entry rule entryRuleSynchronization
entryRuleSynchronization returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSynchronizationRule(), currentNode); }
	 iv_ruleSynchronization=ruleSynchronization 
	 { $current=$iv_ruleSynchronization.current; } 
	 EOF 
;

// Rule Synchronization
ruleSynchronization returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSynchronizationAccess().getPartrefsSynchronizedPartParserRuleCall_0_0(), currentNode); 
	    }
	    lv_partrefs_0=ruleSynchronizedPart 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSynchronizationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "partrefs", lv_partrefs_0, "SynchronizedPart", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getSynchronizationAccess().getCommaKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSynchronizationAccess().getPartrefsSynchronizedPartParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_partrefs_2=ruleSynchronizedPart 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSynchronizationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "partrefs", lv_partrefs_2, "SynchronizedPart", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))+';' 
    {
        createLeafNode(grammarAccess.getSynchronizationAccess().getSemicolonKeyword_2(), null); 
    }
);





// Entry rule entryRuleSynchronizedPart
entryRuleSynchronizedPart returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSynchronizedPartRule(), currentNode); } 
	 iv_ruleSynchronizedPart=ruleSynchronizedPart 
	 { $current=$iv_ruleSynchronizedPart.current.getText(); }  
	 EOF 
;

// Rule SynchronizedPart
ruleSynchronizedPart returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
((
    { 
        currentNode=createCompositeNode(grammarAccess.getSynchronizedPartAccess().getCompoundNameParserRuleCall_0_0(), currentNode); 
    }
    this_CompoundName_0=ruleCompoundName    {
		$current.merge(this_CompoundName_0);
    }

    { 
        currentNode = currentNode.getParent();
    }
(
	kw='#' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSynchronizedPartAccess().getNumberSignKeyword_0_1_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getSynchronizedPartAccess().getPartNameParserRuleCall_0_1_1(), currentNode); 
    }
    this_PartName_2=rulePartName    {
		$current.merge(this_PartName_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
)?)
    |
    { 
        currentNode=createCompositeNode(grammarAccess.getSynchronizedPartAccess().getPartNameParserRuleCall_1(), currentNode); 
    }
    this_PartName_3=rulePartName    {
		$current.merge(this_PartName_3);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRulePathGroup
entryRulePathGroup returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPathGroupRule(), currentNode); }
	 iv_rulePathGroup=rulePathGroup 
	 { $current=$iv_rulePathGroup.current; } 
	 EOF 
;

// Rule PathGroup
rulePathGroup returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPathGroupAccess().getPathsPathVectorElementParserRuleCall_0_0(), currentNode); 
	    }
	    lv_paths_0=rulePathVectorElement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "paths", lv_paths_0, "PathVectorElement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)+('annotations' 
    {
        createLeafNode(grammarAccess.getPathGroupAccess().getAnnotationsKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPathGroupAccess().getAnnotationsPropertySetParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_annotations_2=rulePropertySet 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "annotations", lv_annotations_2, "PropertySet", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?);





// Entry rule entryRulePathVectorElement
entryRulePathVectorElement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPathVectorElementRule(), currentNode); }
	 iv_rulePathVectorElement=rulePathVectorElement 
	 { $current=$iv_rulePathVectorElement.current; } 
	 EOF 
;

// Rule PathVectorElement
rulePathVectorElement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getPathVectorElementAccess().getFilteredPathVectorParserRuleCall_0(), currentNode); 
    }
    this_FilteredPathVector_0=ruleFilteredPathVector
    { 
        $current = $this_FilteredPathVector_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPathVectorElementAccess().getBasePathVectorParserRuleCall_1(), currentNode); 
    }
    this_BasePathVector_1=ruleBasePathVector
    { 
        $current = $this_BasePathVector_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPathVectorElementAccess().getUnbasedPathVectorParserRuleCall_2(), currentNode); 
    }
    this_UnbasedPathVector_2=ruleUnbasedPathVector
    { 
        $current = $this_UnbasedPathVector_2.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleFilteredPathVector
entryRuleFilteredPathVector returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFilteredPathVectorRule(), currentNode); }
	 iv_ruleFilteredPathVector=ruleFilteredPathVector 
	 { $current=$iv_ruleFilteredPathVector.current; } 
	 EOF 
;

// Rule FilteredPathVector
ruleFilteredPathVector returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('when' 
    {
        createLeafNode(grammarAccess.getFilteredPathVectorAccess().getWhenKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFilteredPathVectorAccess().getFilterFilterParserRuleCall_1_0(), currentNode); 
	    }
	    lv_filter_1=ruleFilter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFilteredPathVectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "filter", lv_filter_1, "Filter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    lv_body_2=(	{ 
        currentNode=createCompositeNode(grammarAccess.getFilteredPathVectorAccess().getBodyBasePathVectorParserRuleCall_2_0_0(), currentNode); 
    }
	ruleBasePathVector	{ 
        currentNode = currentNode.getParent();
    }

    |	{ 
        currentNode=createCompositeNode(grammarAccess.getFilteredPathVectorAccess().getBodyUnbasedPathVectorParserRuleCall_2_0_1(), currentNode); 
    }
	ruleUnbasedPathVector	{ 
        currentNode = currentNode.getParent();
    }

    |	{ 
        currentNode=createCompositeNode(grammarAccess.getFilteredPathVectorAccess().getBodyCompoundPathVectorParserRuleCall_2_0_2(), currentNode); 
    }
	ruleCompoundPathVector	{ 
        currentNode = currentNode.getParent();
    }
)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFilteredPathVectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "body", lv_body_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleBasePathVector
entryRuleBasePathVector returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBasePathVectorRule(), currentNode); }
	 iv_ruleBasePathVector=ruleBasePathVector 
	 { $current=$iv_ruleBasePathVector.current; } 
	 EOF 
;

// Rule BasePathVector
ruleBasePathVector returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBasePathVectorAccess().getBasePathPathParserRuleCall_0_0(), currentNode); 
	    }
	    lv_basePath_0=rulePath 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBasePathVectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "basePath", lv_basePath_0, "Path", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'[' 
    {
        createLeafNode(grammarAccess.getBasePathVectorAccess().getLeftSquareBracketKeyword_1(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBasePathVectorAccess().getPathsPathParserRuleCall_2_0_0(), currentNode); 
	    }
	    lv_paths_2=rulePath 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBasePathVectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "paths", lv_paths_2, "Path", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getBasePathVectorAccess().getCommaKeyword_2_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBasePathVectorAccess().getPathsPathParserRuleCall_2_1_1_0(), currentNode); 
	    }
	    lv_paths_4=rulePath 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBasePathVectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "paths", lv_paths_4, "Path", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)?']' 
    {
        createLeafNode(grammarAccess.getBasePathVectorAccess().getRightSquareBracketKeyword_3(), null); 
    }
';' 
    {
        createLeafNode(grammarAccess.getBasePathVectorAccess().getSemicolonKeyword_4(), null); 
    }
);





// Entry rule entryRuleUnbasedPathVector
entryRuleUnbasedPathVector returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getUnbasedPathVectorRule(), currentNode); }
	 iv_ruleUnbasedPathVector=ruleUnbasedPathVector 
	 { $current=$iv_ruleUnbasedPathVector.current; } 
	 EOF 
;

// Rule UnbasedPathVector
ruleUnbasedPathVector returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnbasedPathVectorAccess().getPathsPathParserRuleCall_0_0(), currentNode); 
	    }
	    lv_paths_0=rulePath 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnbasedPathVectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "paths", lv_paths_0, "Path", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getUnbasedPathVectorAccess().getCommaKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnbasedPathVectorAccess().getPathsPathParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_paths_2=rulePath 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnbasedPathVectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "paths", lv_paths_2, "Path", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*';' 
    {
        createLeafNode(grammarAccess.getUnbasedPathVectorAccess().getSemicolonKeyword_2(), null); 
    }
);





// Entry rule entryRuleCompoundPathVector
entryRuleCompoundPathVector returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCompoundPathVectorRule(), currentNode); }
	 iv_ruleCompoundPathVector=ruleCompoundPathVector 
	 { $current=$iv_ruleCompoundPathVector.current; } 
	 EOF 
;

// Rule CompoundPathVector
ruleCompoundPathVector returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('{' 
    {
        createLeafNode(grammarAccess.getCompoundPathVectorAccess().getLeftCurlyBracketKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCompoundPathVectorAccess().getBodyPathVectorElementParserRuleCall_1_0(), currentNode); 
	    }
	    lv_body_1=rulePathVectorElement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompoundPathVectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "body", lv_body_1, "PathVectorElement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getCompoundPathVectorAccess().getRightCurlyBracketKeyword_2(), null); 
    }
);





// Entry rule entryRulePath
entryRulePath returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPathRule(), currentNode); } 
	 iv_rulePath=rulePath 
	 { $current=$iv_rulePath.current.getText(); }  
	 EOF 
;

// Rule Path
rulePath returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
		myHiddenTokenState.restore();
    }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    createLeafNode(grammarAccess.getPathAccess().getSTRINGTerminalRuleCall_0(), null); 
    }

    |((
	kw='/' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPathAccess().getSolidusKeyword_1_0(), null); 
    }
)?
    { 
        currentNode=createCompositeNode(grammarAccess.getPathAccess().getQIDParserRuleCall_1_1(), currentNode); 
    }
    this_QID_2=ruleQID    {
		$current.merge(this_QID_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
(
	kw='/' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPathAccess().getSolidusKeyword_1_2_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getPathAccess().getQIDParserRuleCall_1_2_1(), currentNode); 
    }
    this_QID_4=ruleQID    {
		$current.merge(this_QID_4);
    }

    { 
        currentNode = currentNode.getParent();
    }
)*(
	kw='/' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPathAccess().getSolidusKeyword_1_3(), null); 
    }
)?
    { 
        currentNode=createCompositeNode(grammarAccess.getPathAccess().getHIDDENBUGParserRuleCall_1_4(), currentNode); 
    }
    this_HIDDENBUG_6=ruleHIDDENBUG    {
		$current.merge(this_HIDDENBUG_6);
    }

    { 
        currentNode = currentNode.getParent();
    }
))
    ;





// Entry rule entryRulePrerequisite
entryRulePrerequisite returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPrerequisiteRule(), currentNode); }
	 iv_rulePrerequisite=rulePrerequisite 
	 { $current=$iv_rulePrerequisite.current; } 
	 EOF 
;

// Rule Prerequisite
rulePrerequisite returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('when' 
    {
        createLeafNode(grammarAccess.getPrerequisiteAccess().getWhenKeyword_0_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPrerequisiteAccess().getFilterFilterParserRuleCall_0_1_0(), currentNode); 
	    }
	    lv_filter_1=ruleFilter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrerequisiteRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "filter", lv_filter_1, "Filter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPrerequisiteAccess().getWithClauseWithClauseParserRuleCall_1_0(), currentNode); 
	    }
	    lv_withClause_2=ruleWithClause 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrerequisiteRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "withClause", lv_withClause_2, "WithClause", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPrerequisiteAccess().getPartReferencePrerequisiteEntryParserRuleCall_2_0(), currentNode); 
	    }
	    lv_partReference_3=rulePrerequisiteEntry 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrerequisiteRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "partReference", lv_partReference_3, "PrerequisiteEntry", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('as' 
    {
        createLeafNode(grammarAccess.getPrerequisiteAccess().getAsKeyword_3_0(), null); 
    }
(	
	
	    lv_alias_5=	RULE_ID
	{
		createLeafNode(grammarAccess.getPrerequisiteAccess().getAliasIDTerminalRuleCall_3_1_0(), "alias"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrerequisiteRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "alias", lv_alias_5, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?';' 
    {
        createLeafNode(grammarAccess.getPrerequisiteAccess().getSemicolonKeyword_4(), null); 
    }
);





// Entry rule entryRuleWithClause
entryRuleWithClause returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getWithClauseRule(), currentNode); }
	 iv_ruleWithClause=ruleWithClause 
	 { $current=$iv_ruleWithClause.current; } 
	 EOF 
;

// Rule WithClause
ruleWithClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getWithClauseAccess().getWithClauseAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getWithClauseAccess().getWithClauseAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'with' 
    {
        createLeafNode(grammarAccess.getWithClauseAccess().getWithKeyword_1(), null); 
    }
('(' 
    {
        createLeafNode(grammarAccess.getWithClauseAccess().getLeftParenthesisKeyword_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getWithClauseAccess().getReferencesExpressionParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_references_3=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWithClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "references", lv_references_3, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getWithClauseAccess().getCommaKeyword_2_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getWithClauseAccess().getReferencesExpressionParserRuleCall_2_2_1_0(), currentNode); 
	    }
	    lv_references_5=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWithClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "references", lv_references_5, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*')' 
    {
        createLeafNode(grammarAccess.getWithClauseAccess().getRightParenthesisKeyword_2_3(), null); 
    }
)?(('properties' 
    {
        createLeafNode(grammarAccess.getWithClauseAccess().getPropertiesKeyword_3_0_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getWithClauseAccess().getPropertiesPropertySetParserRuleCall_3_0_1_0(), currentNode); 
	    }
	    lv_properties_8=rulePropertySet 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWithClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "properties", lv_properties_8, "PropertySet", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))
    |('concern' 
    {
        createLeafNode(grammarAccess.getWithClauseAccess().getConcernKeyword_3_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getWithClauseAccess().getConcernConcernBlockParserRuleCall_3_1_1_0(), currentNode); 
	    }
	    lv_concern_10=ruleConcernBlock 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWithClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "concern", lv_concern_10, "ConcernBlock", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)))*);





// Entry rule entryRulePrerequisiteEntry
entryRulePrerequisiteEntry returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPrerequisiteEntryRule(), currentNode); }
	 iv_rulePrerequisiteEntry=rulePrerequisiteEntry 
	 { $current=$iv_rulePrerequisiteEntry.current; } 
	 EOF 
;

// Rule PrerequisiteEntry
rulePrerequisiteEntry returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getPrerequisiteEntryAccess().getDirectPartReferemceParserRuleCall_0(), currentNode); 
    }
    this_DirectPartReferemce_0=ruleDirectPartReferemce
    { 
        $current = $this_DirectPartReferemce_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrerequisiteEntryAccess().getCapabilityReferencedPartParserRuleCall_1(), currentNode); 
    }
    this_CapabilityReferencedPart_1=ruleCapabilityReferencedPart
    { 
        $current = $this_CapabilityReferencedPart_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrerequisiteEntryAccess().getCompoundReferencesParserRuleCall_2(), currentNode); 
    }
    this_CompoundReferences_2=ruleCompoundReferences
    { 
        $current = $this_CompoundReferences_2.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleDirectPartReferemce
entryRuleDirectPartReferemce returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getDirectPartReferemceRule(), currentNode); }
	 iv_ruleDirectPartReferemce=ruleDirectPartReferemce 
	 { $current=$iv_ruleDirectPartReferemce.current; } 
	 EOF 
;

// Rule DirectPartReferemce
ruleDirectPartReferemce returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getDirectPartReferemceAccess().getUnitQIDParserRuleCall_0_0_0(), currentNode); 
	    }
	    lv_unit_0=ruleQID 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDirectPartReferemceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "unit", lv_unit_0, "QID", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    lv_unit_1='unit' 
    {
        createLeafNode(grammarAccess.getDirectPartReferemceAccess().getUnitUnitKeyword_0_1_0(), "unit"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDirectPartReferemceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "unit", /* lv_unit_1 */ input.LT(-1), "unit", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?'#' 
    {
        createLeafNode(grammarAccess.getDirectPartReferemceAccess().getNumberSignKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getDirectPartReferemceAccess().getBuilderPartNameParserRuleCall_2_0(), currentNode); 
	    }
	    lv_builder_3=rulePartName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDirectPartReferemceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "builder", lv_builder_3, "PartName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getDirectPartReferemceAccess().getParametersParameterListParserRuleCall_3_0(), currentNode); 
	    }
	    lv_parameters_4=ruleParameterList 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDirectPartReferemceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "parameters", lv_parameters_4, "ParameterList", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?);





// Entry rule entryRuleCapabilityReferencedPart
entryRuleCapabilityReferencedPart returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCapabilityReferencedPartRule(), currentNode); }
	 iv_ruleCapabilityReferencedPart=ruleCapabilityReferencedPart 
	 { $current=$iv_ruleCapabilityReferencedPart.current; } 
	 EOF 
;

// Rule CapabilityReferencedPart
ruleCapabilityReferencedPart returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCapabilityReferencedPartAccess().getCapabilityCapabilityParserRuleCall_0_0(), currentNode); 
	    }
	    lv_capability_0=ruleCapability 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCapabilityReferencedPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "capability", lv_capability_0, "Capability", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('/' 
    {
        createLeafNode(grammarAccess.getCapabilityReferencedPartAccess().getSolidusKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCapabilityReferencedPartAccess().getRangeVersionRangeParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_range_2=ruleVersionRange 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCapabilityReferencedPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "range", lv_range_2, "VersionRange", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?('#' 
    {
        createLeafNode(grammarAccess.getCapabilityReferencedPartAccess().getNumberSignKeyword_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCapabilityReferencedPartAccess().getPartNamePartNameParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_partName_4=rulePartName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCapabilityReferencedPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "partName", lv_partName_4, "PartName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCapabilityReferencedPartAccess().getParametersParameterListParserRuleCall_3_0(), currentNode); 
	    }
	    lv_parameters_5=ruleParameterList 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCapabilityReferencedPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "parameters", lv_parameters_5, "ParameterList", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?);





// Entry rule entryRuleCompoundReferences
entryRuleCompoundReferences returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCompoundReferencesRule(), currentNode); }
	 iv_ruleCompoundReferences=ruleCompoundReferences 
	 { $current=$iv_ruleCompoundReferences.current; } 
	 EOF 
;

// Rule CompoundReferences
ruleCompoundReferences returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('{' 
    {
        createLeafNode(grammarAccess.getCompoundReferencesAccess().getLeftCurlyBracketKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCompoundReferencesAccess().getPrerequisitesPrerequisiteParserRuleCall_1_0(), currentNode); 
	    }
	    lv_prerequisites_1=rulePrerequisite 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompoundReferencesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "prerequisites", lv_prerequisites_1, "Prerequisite", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getCompoundReferencesAccess().getRightCurlyBracketKeyword_2(), null); 
    }
);





// Entry rule entryRuleBuilder
entryRuleBuilder returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBuilderRule(), currentNode); }
	 iv_ruleBuilder=ruleBuilder 
	 { $current=$iv_ruleBuilder.current; } 
	 EOF 
;

// Rule Builder
ruleBuilder returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getBuilderAccess().getBuilderAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBuilderAccess().getBuilderAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_documentation_1=	RULE_DOCUMENTATION
	{
		createLeafNode(grammarAccess.getBuilderAccess().getDocumentationDOCUMENTATIONTerminalRuleCall_1_0(), "documentation"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "documentation", lv_documentation_1, "DOCUMENTATION", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBuilderAccess().getVisibilityVisibilityEnumRuleCall_2_0(), currentNode); 
	    }
	    lv_visibility_2=ruleVisibility 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "visibility", lv_visibility_2, "Visibility", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBuilderAccess().getExecutionModeExecutionModeEnumRuleCall_3_0(), currentNode); 
	    }
	    lv_executionMode_3=ruleExecutionMode 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "executionMode", lv_executionMode_3, "ExecutionMode", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    lv_final_4='final' 
    {
        createLeafNode(grammarAccess.getBuilderAccess().getFinalFinalKeyword_4_0(), "final"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "final", true, "final", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    lv_cached_5='cached' 
    {
        createLeafNode(grammarAccess.getBuilderAccess().getCachedCachedKeyword_5_0(), "cached"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "cached", true, "cached", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?'builder' 
    {
        createLeafNode(grammarAccess.getBuilderAccess().getBuilderKeyword_6(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBuilderAccess().getNamePartNameParserRuleCall_7_0(), currentNode); 
	    }
	    lv_name_7=rulePartName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_7, "PartName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('(' 
    {
        createLeafNode(grammarAccess.getBuilderAccess().getLeftParenthesisKeyword_8_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBuilderAccess().getParamsParameterDeclarationListParserRuleCall_8_1_0(), currentNode); 
	    }
	    lv_params_9=ruleParameterDeclarationList 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "params", lv_params_9, "ParameterDeclarationList", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)')' 
    {
        createLeafNode(grammarAccess.getBuilderAccess().getRightParenthesisKeyword_8_2(), null); 
    }
)?('provides' 
    {
        createLeafNode(grammarAccess.getBuilderAccess().getProvidesKeyword_9_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBuilderAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_9_1_0(), currentNode); 
	    }
	    lv_providedCapabilities_12=ruleProvidedCapability 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "providedCapabilities", lv_providedCapabilities_12, "ProvidedCapability", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getBuilderAccess().getCommaKeyword_9_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBuilderAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_9_2_1_0(), currentNode); 
	    }
	    lv_providedCapabilities_14=ruleProvidedCapability 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "providedCapabilities", lv_providedCapabilities_14, "ProvidedCapability", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBuilderAccess().getPreConditionPreConditionParserRuleCall_10_0(), currentNode); 
	    }
	    lv_preCondition_15=rulePreCondition 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "preCondition", lv_preCondition_15, "PreCondition", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBuilderAccess().getPostConditionPostConditionParserRuleCall_11_0(), currentNode); 
	    }
	    lv_postCondition_16=rulePostCondition 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "postCondition", lv_postCondition_16, "PostCondition", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?'{' 
    {
        createLeafNode(grammarAccess.getBuilderAccess().getLeftCurlyBracketKeyword_12(), null); 
    }
('default' 
    {
        createLeafNode(grammarAccess.getBuilderAccess().getDefaultKeyword_13_0(), null); 
    }
'properties' 
    {
        createLeafNode(grammarAccess.getBuilderAccess().getPropertiesKeyword_13_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBuilderAccess().getPropertiesPropertySetParserRuleCall_13_2_0(), currentNode); 
	    }
	    lv_properties_20=rulePropertySet 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "properties", lv_properties_20, "PropertySet", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBuilderAccess().getInputBuilderInputParserRuleCall_14_0(), currentNode); 
	    }
	    lv_input_21=ruleBuilderInput 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "input", lv_input_21, "BuilderInput", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBuilderAccess().getOutputBuilderOutputParserRuleCall_15_0(), currentNode); 
	    }
	    lv_output_22=ruleBuilderOutput 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "output", lv_output_22, "BuilderOutput", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBuilderAccess().getExpressionListExpressionListParserRuleCall_16_0(), currentNode); 
	    }
	    lv_expressionList_23=ruleExpressionList 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expressionList", lv_expressionList_23, "ExpressionList", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?'}' 
    {
        createLeafNode(grammarAccess.getBuilderAccess().getRightCurlyBracketKeyword_17(), null); 
    }
);





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getParameterRule(), currentNode); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((	
	
	    lv_name_0=	RULE_ID
	{
		createLeafNode(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)':' 
    {
        createLeafNode(grammarAccess.getParameterAccess().getColonKeyword_0_1(), null); 
    }
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getParameterAccess().getValExpressionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_val_2=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "val", lv_val_2, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleParameterList
entryRuleParameterList returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getParameterListRule(), currentNode); }
	 iv_ruleParameterList=ruleParameterList 
	 { $current=$iv_ruleParameterList.current; } 
	 EOF 
;

// Rule ParameterList
ruleParameterList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getParameterListAccess().getParamsParameterParserRuleCall_0_0_0(), currentNode); 
	    }
	    lv_params_0=ruleParameter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_0, "Parameter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getParameterListAccess().getCommaKeyword_0_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getParameterListAccess().getParamsParameterParserRuleCall_0_1_1_0(), currentNode); 
	    }
	    lv_params_2=ruleParameter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_2, "Parameter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getParameterListAccess().getParamsClosureExpressionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_params_3=ruleClosureExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_3, "ClosureExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?;





// Entry rule entryRuleParameterDeclarationList
entryRuleParameterDeclarationList returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getParameterDeclarationListRule(), currentNode); }
	 iv_ruleParameterDeclarationList=ruleParameterDeclarationList 
	 { $current=$iv_ruleParameterDeclarationList.current; } 
	 EOF 
;

// Rule ParameterDeclarationList
ruleParameterDeclarationList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getParameterDeclarationListAccess().getParamsParameterDeclarationParserRuleCall_0_0_0(), currentNode); 
	    }
	    lv_params_0=ruleParameterDeclaration 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterDeclarationListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_0, "ParameterDeclaration", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getParameterDeclarationListAccess().getCommaKeyword_0_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getParameterDeclarationListAccess().getParamsParameterDeclarationParserRuleCall_0_1_1_0(), currentNode); 
	    }
	    lv_params_2=ruleParameterDeclaration 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterDeclarationListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_2, "ParameterDeclaration", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*(',' 
    {
        createLeafNode(grammarAccess.getParameterDeclarationListAccess().getCommaKeyword_0_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getParameterDeclarationListAccess().getParamsParameterDeclarationEllipseParserRuleCall_0_2_1_0(), currentNode); 
	    }
	    lv_params_4=ruleParameterDeclarationEllipse 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterDeclarationListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_4, "ParameterDeclarationEllipse", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getParameterDeclarationListAccess().getParamsParameterDeclarationEllipseParserRuleCall_1_0(), currentNode); 
	    }
	    lv_params_5=ruleParameterDeclarationEllipse 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterDeclarationListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_5, "ParameterDeclarationEllipse", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleParameterDeclaration
entryRuleParameterDeclaration returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getParameterDeclarationRule(), currentNode); }
	 iv_ruleParameterDeclaration=ruleParameterDeclaration 
	 { $current=$iv_ruleParameterDeclaration.current; } 
	 EOF 
;

// Rule ParameterDeclaration
ruleParameterDeclaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getParameterDeclarationAccess().getTypeTypeRefParserRuleCall_0_0(), currentNode); 
	    }
	    lv_type_0=ruleTypeRef 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_0, "TypeRef", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getParameterDeclarationAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleParameterDeclarationEllipse
entryRuleParameterDeclarationEllipse returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getParameterDeclarationEllipseRule(), currentNode); }
	 iv_ruleParameterDeclarationEllipse=ruleParameterDeclarationEllipse 
	 { $current=$iv_ruleParameterDeclarationEllipse.current; } 
	 EOF 
;

// Rule ParameterDeclarationEllipse
ruleParameterDeclarationEllipse returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getParameterDeclarationEllipseAccess().getVarargParameterDeclarationAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getParameterDeclarationEllipseAccess().getVarargParameterDeclarationAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'...' 
    {
        createLeafNode(grammarAccess.getParameterDeclarationEllipseAccess().getFullStopFullStopFullStopKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getParameterDeclarationEllipseAccess().getTypeTypeRefParserRuleCall_2_0(), currentNode); 
	    }
	    lv_type_2=ruleTypeRef 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterDeclarationEllipseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_2, "TypeRef", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    lv_name_3=	RULE_ID
	{
		createLeafNode(grammarAccess.getParameterDeclarationEllipseAccess().getNameIDTerminalRuleCall_3_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterDeclarationEllipseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_3, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleInputKeyword
entryRuleInputKeyword returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getInputKeywordRule(), currentNode); } 
	 iv_ruleInputKeyword=ruleInputKeyword 
	 { $current=$iv_ruleInputKeyword.current.getText(); }  
	 EOF 
;

// Rule InputKeyword
ruleInputKeyword returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:

	kw='input' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getInputKeywordAccess().getInputKeyword(), null); 
    }

    ;





// Entry rule entryRuleOutputKeyword
entryRuleOutputKeyword returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getOutputKeywordRule(), currentNode); } 
	 iv_ruleOutputKeyword=ruleOutputKeyword 
	 { $current=$iv_ruleOutputKeyword.current.getText(); }  
	 EOF 
;

// Rule OutputKeyword
ruleOutputKeyword returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:

	kw='output' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOutputKeywordAccess().getOutputKeyword(), null); 
    }

    ;





// Entry rule entryRuleBuilderOutput
entryRuleBuilderOutput returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBuilderOutputRule(), currentNode); }
	 iv_ruleBuilderOutput=ruleBuilderOutput 
	 { $current=$iv_ruleBuilderOutput.current; } 
	 EOF 
;

// Rule BuilderOutput
ruleBuilderOutput returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(ruleOutputKeyword'{' 
    {
        createLeafNode(grammarAccess.getBuilderOutputAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBuilderOutputAccess().getBodyPathGroupParserRuleCall_2_0(), currentNode); 
	    }
	    lv_body_2=rulePathGroup 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderOutputRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "body", lv_body_2, "PathGroup", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'}' 
    {
        createLeafNode(grammarAccess.getBuilderOutputAccess().getRightCurlyBracketKeyword_3(), null); 
    }
);





// Entry rule entryRuleBuilderInput
entryRuleBuilderInput returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBuilderInputRule(), currentNode); }
	 iv_ruleBuilderInput=ruleBuilderInput 
	 { $current=$iv_ruleBuilderInput.current; } 
	 EOF 
;

// Rule BuilderInput
ruleBuilderInput returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(ruleInputKeyword(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBuilderInputAccess().getPreConditionPreConditionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_preCondition_1=rulePreCondition 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderInputRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "preCondition", lv_preCondition_1, "PreCondition", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBuilderInputAccess().getPostConditionPostConditionParserRuleCall_2_0(), currentNode); 
	    }
	    lv_postCondition_2=rulePostCondition 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderInputRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "postCondition", lv_postCondition_2, "PostCondition", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?'{' 
    {
        createLeafNode(grammarAccess.getBuilderInputAccess().getLeftCurlyBracketKeyword_3(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBuilderInputAccess().getPrerequisitesPrerequisiteParserRuleCall_4_0(), currentNode); 
	    }
	    lv_prerequisites_4=rulePrerequisite 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderInputRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "prerequisites", lv_prerequisites_4, "Prerequisite", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)+'}' 
    {
        createLeafNode(grammarAccess.getBuilderInputAccess().getRightCurlyBracketKeyword_5(), null); 
    }
);





// Entry rule entryRuleRepositoryConfiguration
entryRuleRepositoryConfiguration returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRepositoryConfigurationRule(), currentNode); }
	 iv_ruleRepositoryConfiguration=ruleRepositoryConfiguration 
	 { $current=$iv_ruleRepositoryConfiguration.current; } 
	 EOF 
;

// Rule RepositoryConfiguration
ruleRepositoryConfiguration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getRepositoryConfigurationAccess().getRepositoryDeclarationParserRuleCall_0(), currentNode); 
    }
    this_RepositoryDeclaration_0=ruleRepositoryDeclaration
    { 
        $current = $this_RepositoryDeclaration_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getRepositoryConfigurationAccess().getResolutionStrategyParserRuleCall_1(), currentNode); 
    }
    this_ResolutionStrategy_1=ruleResolutionStrategy
    { 
        $current = $this_ResolutionStrategy_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleRepositoryDeclaration
entryRuleRepositoryDeclaration returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRepositoryDeclarationRule(), currentNode); }
	 iv_ruleRepositoryDeclaration=ruleRepositoryDeclaration 
	 { $current=$iv_ruleRepositoryDeclaration.current; } 
	 EOF 
;

// Rule RepositoryDeclaration
ruleRepositoryDeclaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_documentation_0=	RULE_DOCUMENTATION
	{
		createLeafNode(grammarAccess.getRepositoryDeclarationAccess().getDocumentationDOCUMENTATIONTerminalRuleCall_0_0(), "documentation"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRepositoryDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "documentation", lv_documentation_0, "DOCUMENTATION", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRepositoryDeclarationAccess().getLocationURIParserRuleCall_1_0_0(), currentNode); 
	    }
	    lv_location_1=ruleURI 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRepositoryDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "location", lv_location_1, "URI", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |('repository' 
    {
        createLeafNode(grammarAccess.getRepositoryDeclarationAccess().getRepositoryKeyword_1_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRepositoryDeclarationAccess().getTypeTypeRefParserRuleCall_1_1_1_0(), currentNode); 
	    }
	    lv_type_3=ruleTypeRef 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRepositoryDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_3, "TypeRef", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)))(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRepositoryDeclarationAccess().getContextContextBlockParserRuleCall_2_0(), currentNode); 
	    }
	    lv_context_4=ruleContextBlock 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRepositoryDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "context", lv_context_4, "ContextBlock", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?);





// Entry rule entryRuleResolutionStrategy
entryRuleResolutionStrategy returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getResolutionStrategyRule(), currentNode); }
	 iv_ruleResolutionStrategy=ruleResolutionStrategy 
	 { $current=$iv_ruleResolutionStrategy.current; } 
	 EOF 
;

// Rule ResolutionStrategy
ruleResolutionStrategy returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_strategy_0=('select-first' 
    {
        createLeafNode(grammarAccess.getResolutionStrategyAccess().getStrategySelectFirstKeyword_0_0_0(), "strategy"); 
    }


    |'select-best' 
    {
        createLeafNode(grammarAccess.getResolutionStrategyAccess().getStrategySelectBestKeyword_0_0_1(), "strategy"); 
    }

)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getResolutionStrategyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "strategy", /* lv_strategy_0 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)'{' 
    {
        createLeafNode(grammarAccess.getResolutionStrategyAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getResolutionStrategyAccess().getRepositoryConfigRepositoryConfigurationParserRuleCall_2_0(), currentNode); 
	    }
	    lv_repositoryConfig_2=ruleRepositoryConfiguration 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getResolutionStrategyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "repositoryConfig", lv_repositoryConfig_2, "RepositoryConfiguration", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getResolutionStrategyAccess().getRightCurlyBracketKeyword_3(), null); 
    }
);





// Entry rule entryRuleContainerConfiguration
entryRuleContainerConfiguration returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getContainerConfigurationRule(), currentNode); }
	 iv_ruleContainerConfiguration=ruleContainerConfiguration 
	 { $current=$iv_ruleContainerConfiguration.current; } 
	 EOF 
;

// Rule ContainerConfiguration
ruleContainerConfiguration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_documentation_0=	RULE_DOCUMENTATION
	{
		createLeafNode(grammarAccess.getContainerConfigurationAccess().getDocumentationDOCUMENTATIONTerminalRuleCall_0_0(), "documentation"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getContainerConfigurationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "documentation", lv_documentation_0, "DOCUMENTATION", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?'container' 
    {
        createLeafNode(grammarAccess.getContainerConfigurationAccess().getContainerKeyword_1(), null); 
    }
(	
	
	    lv_name_2=	RULE_ID
	{
		createLeafNode(grammarAccess.getContainerConfigurationAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getContainerConfigurationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)'agent' 
    {
        createLeafNode(grammarAccess.getContainerConfigurationAccess().getAgentKeyword_3(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getContainerConfigurationAccess().getTypeTypeRefParserRuleCall_4_0(), currentNode); 
	    }
	    lv_type_4=ruleTypeRef 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getContainerConfigurationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_4, "TypeRef", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getContainerConfigurationAccess().getContextBlockContextBlockParserRuleCall_5_0(), currentNode); 
	    }
	    lv_contextBlock_5=ruleContextBlock 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getContainerConfigurationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "contextBlock", lv_contextBlock_5, "ContextBlock", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?);





// Entry rule entryRuleURI
entryRuleURI returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getURIRule(), currentNode); } 
	 iv_ruleURI=ruleURI 
	 { $current=$iv_ruleURI.current.getText(); }  
	 EOF 
;

// Rule URI
ruleURI returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    createLeafNode(grammarAccess.getURIAccess().getSTRINGTerminalRuleCall(), null); 
    }

    ;





// Entry rule entryRuleConcern
entryRuleConcern returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getConcernRule(), currentNode); }
	 iv_ruleConcern=ruleConcern 
	 { $current=$iv_ruleConcern.current; } 
	 EOF 
;

// Rule Concern
ruleConcern returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_documentation_0=	RULE_DOCUMENTATION
	{
		createLeafNode(grammarAccess.getConcernAccess().getDocumentationDOCUMENTATIONTerminalRuleCall_0_0(), "documentation"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConcernRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "documentation", lv_documentation_0, "DOCUMENTATION", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?'concern' 
    {
        createLeafNode(grammarAccess.getConcernAccess().getConcernKeyword_1(), null); 
    }
(	
	
	    lv_name_2=	RULE_ID
	{
		createLeafNode(grammarAccess.getConcernAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConcernRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getConcernAccess().getConcernConcernBlockParserRuleCall_3_0(), currentNode); 
	    }
	    lv_concern_3=ruleConcernBlock 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConcernRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "concern", lv_concern_3, "ConcernBlock", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleConcernBlock
entryRuleConcernBlock returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getConcernBlockRule(), currentNode); }
	 iv_ruleConcernBlock=ruleConcernBlock 
	 { $current=$iv_ruleConcernBlock.current; } 
	 EOF 
;

// Rule ConcernBlock
ruleConcernBlock returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('extends' 
    {
        createLeafNode(grammarAccess.getConcernBlockAccess().getExtendsKeyword_0_0(), null); 
    }
(	
	
	    lv_superConcerns_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getConcernBlockAccess().getSuperConcernsIDTerminalRuleCall_0_1_0(), "superConcerns"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConcernBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "superConcerns", lv_superConcerns_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getConcernBlockAccess().getCommaKeyword_0_2_0(), null); 
    }
(	
	
	    lv_superConcerns_3=	RULE_ID
	{
		createLeafNode(grammarAccess.getConcernBlockAccess().getSuperConcernsIDTerminalRuleCall_0_2_1_0(), "superConcerns"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConcernBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "superConcerns", lv_superConcerns_3, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))*)?'{' 
    {
        createLeafNode(grammarAccess.getConcernBlockAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getConcernBlockAccess().getContextsContextParserRuleCall_2_0_0(), currentNode); 
	    }
	    lv_contexts_5=ruleContext 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConcernBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "contexts", lv_contexts_5, "Context", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getConcernBlockAccess().getFunctionsFunctionParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_functions_6=ruleFunction 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConcernBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "functions", lv_functions_6, "Function", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*'}' 
    {
        createLeafNode(grammarAccess.getConcernBlockAccess().getRightCurlyBracketKeyword_3(), null); 
    }
);





// Entry rule entryRuleQuery
entryRuleQuery returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getQueryRule(), currentNode); }
	 iv_ruleQuery=ruleQuery 
	 { $current=$iv_ruleQuery.current; } 
	 EOF 
;

// Rule Query
ruleQuery returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('query' 
    {
        createLeafNode(grammarAccess.getQueryAccess().getQueryKeyword_0(), null); 
    }
('{' 
    {
        createLeafNode(grammarAccess.getQueryAccess().getLeftCurlyBracketKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getQueryAccess().getSelectorQueryPathParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_selector_2=ruleQueryPath 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "selector", lv_selector_2, "QueryPath", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'}' 
    {
        createLeafNode(grammarAccess.getQueryAccess().getRightCurlyBracketKeyword_1_2(), null); 
    }
));





// Entry rule entryRuleQueryPath
entryRuleQueryPath returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getQueryPathRule(), currentNode); }
	 iv_ruleQueryPath=ruleQueryPath 
	 { $current=$iv_ruleQueryPath.current; } 
	 EOF 
;

// Rule QueryPath
ruleQueryPath returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_absolute_0=':' 
    {
        createLeafNode(grammarAccess.getQueryPathAccess().getAbsoluteColonKeyword_0_0(), "absolute"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQueryPathRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "absolute", true, ":", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getQueryPathAccess().getSelectorsSelectorParserRuleCall_1_0(), currentNode); 
	    }
	    lv_selectors_1=ruleSelector 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQueryPathRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "selectors", lv_selectors_1, "Selector", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(':' 
    {
        createLeafNode(grammarAccess.getQueryPathAccess().getColonKeyword_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getQueryPathAccess().getSelectorsSelectorParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_selectors_3=ruleSelector 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQueryPathRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "selectors", lv_selectors_3, "Selector", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleSelector
entryRuleSelector returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSelectorRule(), currentNode); }
	 iv_ruleSelector=ruleSelector 
	 { $current=$iv_ruleSelector.current; } 
	 EOF 
;

// Rule Selector
ruleSelector returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSelectorAccess().getNameQIDParserRuleCall_0_0_0(), currentNode); 
	    }
	    lv_name_0=ruleQID 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, "QID", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSelectorAccess().getOpSelectorOperatorEnumRuleCall_0_1_0(), currentNode); 
	    }
	    lv_op_1=ruleSelectorOperator 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_1, "SelectorOperator", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    lv_pattern_2=	RULE_REGEX
	{
		createLeafNode(grammarAccess.getSelectorAccess().getPatternREGEXTerminalRuleCall_0_2_0(), "pattern"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "pattern", lv_pattern_2, "REGEX", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))('[' 
    {
        createLeafNode(grammarAccess.getSelectorAccess().getLeftSquareBracketKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSelectorAccess().getPredicateExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_predicate_4=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "predicate", lv_predicate_4, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)']' 
    {
        createLeafNode(grammarAccess.getSelectorAccess().getRightSquareBracketKeyword_1_2(), null); 
    }
)?);





// Entry rule entryRuleFilter
entryRuleFilter returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFilterRule(), currentNode); }
	 iv_ruleFilter=ruleFilter 
	 { $current=$iv_ruleFilter.current; } 
	 EOF 
;

// Rule Filter
ruleFilter returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('(' 
    {
        createLeafNode(grammarAccess.getFilterAccess().getLeftParenthesisKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFilterAccess().getPredicateExpressionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_predicate_1=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFilterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "predicate", lv_predicate_1, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)')' 
    {
        createLeafNode(grammarAccess.getFilterAccess().getRightParenthesisKeyword_2(), null); 
    }
);





// Entry rule entryRulePreCondition
entryRulePreCondition returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPreConditionRule(), currentNode); }
	 iv_rulePreCondition=rulePreCondition 
	 { $current=$iv_rulePreCondition.current; } 
	 EOF 
;

// Rule PreCondition
rulePreCondition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('precondition' 
    {
        createLeafNode(grammarAccess.getPreConditionAccess().getPreconditionKeyword_0(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getPreConditionAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPreConditionAccess().getAssertsAssertionExpressionParserRuleCall_2_0(), currentNode); 
	    }
	    lv_asserts_2=ruleAssertionExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPreConditionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "asserts", lv_asserts_2, "AssertionExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)+'}' 
    {
        createLeafNode(grammarAccess.getPreConditionAccess().getRightCurlyBracketKeyword_3(), null); 
    }
);





// Entry rule entryRulePostCondition
entryRulePostCondition returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPostConditionRule(), currentNode); }
	 iv_rulePostCondition=rulePostCondition 
	 { $current=$iv_rulePostCondition.current; } 
	 EOF 
;

// Rule PostCondition
rulePostCondition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('postcondition' 
    {
        createLeafNode(grammarAccess.getPostConditionAccess().getPostconditionKeyword_0(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getPostConditionAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPostConditionAccess().getAssertsAssertionExpressionParserRuleCall_2_0(), currentNode); 
	    }
	    lv_asserts_2=ruleAssertionExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPostConditionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "asserts", lv_asserts_2, "AssertionExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)+'}' 
    {
        createLeafNode(grammarAccess.getPostConditionAccess().getRightCurlyBracketKeyword_3(), null); 
    }
);





// Entry rule entryRuleAssertionExpression
entryRuleAssertionExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAssertionExpressionRule(), currentNode); }
	 iv_ruleAssertionExpression=ruleAssertionExpression 
	 { $current=$iv_ruleAssertionExpression.current; } 
	 EOF 
;

// Rule AssertionExpression
ruleAssertionExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('assert' 
    {
        createLeafNode(grammarAccess.getAssertionExpressionAccess().getAssertKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAssertionExpressionAccess().getExprExpressionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_expr_1=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssertionExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expr", lv_expr_1, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)',' 
    {
        createLeafNode(grammarAccess.getAssertionExpressionAccess().getCommaKeyword_2(), null); 
    }
(	
	
	    lv_message_3=	RULE_STRING
	{
		createLeafNode(grammarAccess.getAssertionExpressionAccess().getMessageSTRINGTerminalRuleCall_3_0(), "message"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssertionExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "message", lv_message_3, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getAssertionExpressionAccess().getSemicolonKeyword_4(), null); 
    }
);





// Entry rule entryRuleExpressionList
entryRuleExpressionList returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getExpressionListRule(), currentNode); }
	 iv_ruleExpressionList=ruleExpressionList 
	 { $current=$iv_ruleExpressionList.current; } 
	 EOF 
;

// Rule ExpressionList
ruleExpressionList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getExpressionListAccess().getExpressionsExpressionParserRuleCall_0_0(), currentNode); 
	    }
	    lv_expressions_0=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "expressions", lv_expressions_0, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getExpressionListAccess().getSemicolonKeyword_1(), null); 
    }
)+;





// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFunctionRule(), currentNode); }
	 iv_ruleFunction=ruleFunction 
	 { $current=$iv_ruleFunction.current; } 
	 EOF 
;

// Rule Function
ruleFunction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getFunctionAccess().getFunctionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getFunctionAccess().getFunctionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFunctionAccess().getFuncFunctionOrMethodParserRuleCall_1_0(), currentNode); 
	    }
	    lv_func_1=ruleFunctionOrMethod 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "func", lv_func_1, "FunctionOrMethod", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getMethodRule(), currentNode); }
	 iv_ruleMethod=ruleMethod 
	 { $current=$iv_ruleMethod.current; } 
	 EOF 
;

// Rule Method
ruleMethod returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getMethodAccess().getMethodAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMethodAccess().getMethodAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getMethodAccess().getMethodFunctionOrMethodParserRuleCall_1_0(), currentNode); 
	    }
	    lv_method_1=ruleFunctionOrMethod 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "method", lv_method_1, "FunctionOrMethod", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleFunctionOrMethod
entryRuleFunctionOrMethod returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFunctionOrMethodRule(), currentNode); }
	 iv_ruleFunctionOrMethod=ruleFunctionOrMethod 
	 { $current=$iv_ruleFunctionOrMethod.current; } 
	 EOF 
;

// Rule FunctionOrMethod
ruleFunctionOrMethod returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_documentation_0=	RULE_DOCUMENTATION
	{
		createLeafNode(grammarAccess.getFunctionOrMethodAccess().getDocumentationDOCUMENTATIONTerminalRuleCall_0_0(), "documentation"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionOrMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "documentation", lv_documentation_0, "DOCUMENTATION", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFunctionOrMethodAccess().getVisibilityVisibilityEnumRuleCall_1_0(), currentNode); 
	    }
	    lv_visibility_1=ruleVisibility 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionOrMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "visibility", lv_visibility_1, "Visibility", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFunctionOrMethodAccess().getExecutionModeExecutionModeEnumRuleCall_2_0(), currentNode); 
	    }
	    lv_executionMode_2=ruleExecutionMode 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionOrMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "executionMode", lv_executionMode_2, "ExecutionMode", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    lv_final_3='final' 
    {
        createLeafNode(grammarAccess.getFunctionOrMethodAccess().getFinalFinalKeyword_3_0(), "final"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionOrMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "final", true, "final", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    lv_cached_4='cached' 
    {
        createLeafNode(grammarAccess.getFunctionOrMethodAccess().getCachedCachedKeyword_4_0(), "cached"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionOrMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "cached", true, "cached", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    lv_form_5=('function' 
    {
        createLeafNode(grammarAccess.getFunctionOrMethodAccess().getFormFunctionKeyword_5_0_0(), "form"); 
    }


    |'method' 
    {
        createLeafNode(grammarAccess.getFunctionOrMethodAccess().getFormMethodKeyword_5_0_1(), "form"); 
    }

)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionOrMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "form", /* lv_form_5 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFunctionOrMethodAccess().getTypeTypeRefParserRuleCall_6_0(), currentNode); 
	    }
	    lv_type_6=ruleTypeRef 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionOrMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_6, "TypeRef", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    lv_name_7=	RULE_ID
	{
		createLeafNode(grammarAccess.getFunctionOrMethodAccess().getNameIDTerminalRuleCall_7_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionOrMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_7, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)('<' 
    {
        createLeafNode(grammarAccess.getFunctionOrMethodAccess().getLessThanSignKeyword_8_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFunctionOrMethodAccess().getTypeParamsTypeParamDeclarationParserRuleCall_8_1_0(), currentNode); 
	    }
	    lv_typeParams_9=ruleTypeParamDeclaration 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionOrMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "typeParams", lv_typeParams_9, "TypeParamDeclaration", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getFunctionOrMethodAccess().getCommaKeyword_8_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFunctionOrMethodAccess().getTypeParamsTypeParamDeclarationParserRuleCall_8_2_1_0(), currentNode); 
	    }
	    lv_typeParams_11=ruleTypeParamDeclaration 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionOrMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "typeParams", lv_typeParams_11, "TypeParamDeclaration", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*'>' 
    {
        createLeafNode(grammarAccess.getFunctionOrMethodAccess().getGreaterThanSignKeyword_8_3(), null); 
    }
)?('(' 
    {
        createLeafNode(grammarAccess.getFunctionOrMethodAccess().getLeftParenthesisKeyword_9_0(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFunctionOrMethodAccess().getParamsParameterDeclarationParserRuleCall_9_1_0_0(), currentNode); 
	    }
	    lv_params_14=ruleParameterDeclaration 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionOrMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_14, "ParameterDeclaration", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getFunctionOrMethodAccess().getCommaKeyword_9_1_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFunctionOrMethodAccess().getParamsParameterDeclarationParserRuleCall_9_1_1_1_0(), currentNode); 
	    }
	    lv_params_16=ruleParameterDeclaration 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionOrMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_16, "ParameterDeclaration", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)?')' 
    {
        createLeafNode(grammarAccess.getFunctionOrMethodAccess().getRightParenthesisKeyword_9_2(), null); 
    }
)?((':' 
    {
        createLeafNode(grammarAccess.getFunctionOrMethodAccess().getColonKeyword_10_0_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFunctionOrMethodAccess().getBodyExpressionParserRuleCall_10_0_1_0(), currentNode); 
	    }
	    lv_body_19=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionOrMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "body", lv_body_19, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getFunctionOrMethodAccess().getSemicolonKeyword_10_0_2(), null); 
    }
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFunctionOrMethodAccess().getBodyBlockExpressionParserRuleCall_10_1_0(), currentNode); 
	    }
	    lv_body_21=ruleBlockExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionOrMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "body", lv_body_21, "BlockExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)));





// Entry rule entryRuleTypeParamDeclaration
entryRuleTypeParamDeclaration returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTypeParamDeclarationRule(), currentNode); }
	 iv_ruleTypeParamDeclaration=ruleTypeParamDeclaration 
	 { $current=$iv_ruleTypeParamDeclaration.current; } 
	 EOF 
;

// Rule TypeParamDeclaration
ruleTypeParamDeclaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(RULE_ID
    { 
    createLeafNode(grammarAccess.getTypeParamDeclarationAccess().getIDTerminalRuleCall_0(), null); 
    }
(('extends' 
    {
        createLeafNode(grammarAccess.getTypeParamDeclarationAccess().getExtendsKeyword_1_0_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTypeParamDeclarationAccess().getTypeTypeRefParserRuleCall_1_0_1_0(), currentNode); 
	    }
	    lv_type_2=ruleTypeRef 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeParamDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "type", lv_type_2, "TypeRef", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('&' 
    {
        createLeafNode(grammarAccess.getTypeParamDeclarationAccess().getAmpersandKeyword_1_0_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTypeParamDeclarationAccess().getTypeTypeRefParserRuleCall_1_0_2_1_0(), currentNode); 
	    }
	    lv_type_4=ruleTypeRef 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeParamDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "type", lv_type_4, "TypeRef", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)
    |('super' 
    {
        createLeafNode(grammarAccess.getTypeParamDeclarationAccess().getSuperKeyword_1_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTypeParamDeclarationAccess().getSuperTypeTypeRefParserRuleCall_1_1_1_0(), currentNode); 
	    }
	    lv_superType_6=ruleTypeRef 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeParamDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "superType", lv_superType_6, "TypeRef", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)))?);





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0(), currentNode); 
    }
    this_AssignmentExpression_0=ruleAssignmentExpression
    { 
        $current = $this_AssignmentExpression_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getReturnExpressionParserRuleCall_1(), currentNode); 
    }
    this_ReturnExpression_1=ruleReturnExpression
    { 
        $current = $this_ReturnExpression_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleReturnExpression
entryRuleReturnExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getReturnExpressionRule(), currentNode); }
	 iv_ruleReturnExpression=ruleReturnExpression 
	 { $current=$iv_ruleReturnExpression.current; } 
	 EOF 
;

// Rule ReturnExpression
ruleReturnExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getReturnExpressionAccess().getReturnExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getReturnExpressionAccess().getReturnExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'return' 
    {
        createLeafNode(grammarAccess.getReturnExpressionAccess().getReturnKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getReturnExpressionAccess().getExprAssignmentExpressionParserRuleCall_2_0(), currentNode); 
	    }
	    lv_expr_2=ruleAssignmentExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReturnExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expr", lv_expr_2, "AssignmentExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleAssignmentExpression
entryRuleAssignmentExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAssignmentExpressionRule(), currentNode); }
	 iv_ruleAssignmentExpression=ruleAssignmentExpression 
	 { $current=$iv_ruleAssignmentExpression.current; } 
	 EOF 
;

// Rule AssignmentExpression
ruleAssignmentExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        currentNode=createCompositeNode(grammarAccess.getAssignmentExpressionAccess().getOrExpressionParserRuleCall_0_0(), currentNode); 
    }
    this_OrExpression_0=ruleOrExpression
    { 
        $current = $this_OrExpression_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAssignmentExpressionAccess().getVarDeclarationParserRuleCall_0_1(), currentNode); 
    }
    this_VarDeclaration_1=ruleVarDeclaration
    { 
        $current = $this_VarDeclaration_1.current; 
        currentNode = currentNode.getParent();
    }
)((
    { 
        temp=factory.create(grammarAccess.getAssignmentExpressionAccess().getAssignmentOperationLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAssignmentExpressionAccess().getAssignmentOperationLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAssignmentExpressionAccess().getOpAssignmentOperatorEnumRuleCall_1_1_0(), currentNode); 
	    }
	    lv_op_3=ruleAssignmentOperator 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_3, "AssignmentOperator", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAssignmentExpressionAccess().getRightAssignmentExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_right_4=ruleAssignmentExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "right", lv_right_4, "AssignmentExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?);





// Entry rule entryRuleVarDeclaration
entryRuleVarDeclaration returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getVarDeclarationRule(), currentNode); }
	 iv_ruleVarDeclaration=ruleVarDeclaration 
	 { $current=$iv_ruleVarDeclaration.current; } 
	 EOF 
;

// Rule VarDeclaration
ruleVarDeclaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getVarDeclarationAccess().getVarDeclarationAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getVarDeclarationAccess().getVarDeclarationAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)('var' 
    {
        createLeafNode(grammarAccess.getVarDeclarationAccess().getVarKeyword_1_0(), null); 
    }

    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getVarDeclarationAccess().getTypeTypeRefParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_type_2=ruleTypeRef 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVarDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_2, "TypeRef", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))(	
	
	    lv_name_3=	RULE_ID
	{
		createLeafNode(grammarAccess.getVarDeclarationAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVarDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_3, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleTypeRef
entryRuleTypeRef returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTypeRefRule(), currentNode); }
	 iv_ruleTypeRef=ruleTypeRef 
	 { $current=$iv_ruleTypeRef.current; } 
	 EOF 
;

// Rule TypeRef
ruleTypeRef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeRefAccess().getSimpleTypeRefParserRuleCall_0(), currentNode); 
    }
    this_SimpleTypeRef_0=ruleSimpleTypeRef
    { 
        $current = $this_SimpleTypeRef_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeRefAccess().getClosureTypeRefParserRuleCall_1(), currentNode); 
    }
    this_ClosureTypeRef_1=ruleClosureTypeRef
    { 
        $current = $this_ClosureTypeRef_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleSimpleTypeRef
entryRuleSimpleTypeRef returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSimpleTypeRefRule(), currentNode); }
	 iv_ruleSimpleTypeRef=ruleSimpleTypeRef 
	 { $current=$iv_ruleSimpleTypeRef.current; } 
	 EOF 
;

// Rule SimpleTypeRef
ruleSimpleTypeRef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_typeName_0=	RULE_ID
	{
		createLeafNode(grammarAccess.getSimpleTypeRefAccess().getTypeNameIDTerminalRuleCall_0_0(), "typeName"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleTypeRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "typeName", lv_typeName_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)('::' 
    {
        createLeafNode(grammarAccess.getSimpleTypeRefAccess().getColonColonKeyword_1_0(), null); 
    }
(	
	
	    lv_typeName_2=	RULE_ID
	{
		createLeafNode(grammarAccess.getSimpleTypeRefAccess().getTypeNameIDTerminalRuleCall_1_1_0(), "typeName"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleTypeRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "typeName", lv_typeName_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))*('<' 
    {
        createLeafNode(grammarAccess.getSimpleTypeRefAccess().getLessThanSignKeyword_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSimpleTypeRefAccess().getRuleTypeParameterRuleTypeParamParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_ruleTypeParameter_4=ruleRuleTypeParam 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleTypeRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "ruleTypeParameter", lv_ruleTypeParameter_4, "RuleTypeParam", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getSimpleTypeRefAccess().getCommaKeyword_2_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSimpleTypeRefAccess().getRuleTypeParameterRuleTypeParamParserRuleCall_2_2_1_0(), currentNode); 
	    }
	    lv_ruleTypeParameter_6=ruleRuleTypeParam 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleTypeRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "ruleTypeParameter", lv_ruleTypeParameter_6, "RuleTypeParam", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*'>' 
    {
        createLeafNode(grammarAccess.getSimpleTypeRefAccess().getGreaterThanSignKeyword_2_3(), null); 
    }
)?);





// Entry rule entryRuleClosureTypeRef
entryRuleClosureTypeRef returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getClosureTypeRefRule(), currentNode); }
	 iv_ruleClosureTypeRef=ruleClosureTypeRef 
	 { $current=$iv_ruleClosureTypeRef.current; } 
	 EOF 
;

// Rule ClosureTypeRef
ruleClosureTypeRef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('(' 
    {
        createLeafNode(grammarAccess.getClosureTypeRefAccess().getLeftParenthesisKeyword_0_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClosureTypeRefAccess().getParameterTypesTypeRefParserRuleCall_0_1_0(), currentNode); 
	    }
	    lv_parameterTypes_1=ruleTypeRef 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClosureTypeRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "parameterTypes", lv_parameterTypes_1, "TypeRef", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getClosureTypeRefAccess().getCommaKeyword_0_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClosureTypeRefAccess().getParameterTypesTypeRefParserRuleCall_0_2_1_0(), currentNode); 
	    }
	    lv_parameterTypes_3=ruleTypeRef 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClosureTypeRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "parameterTypes", lv_parameterTypes_3, "TypeRef", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*')' 
    {
        createLeafNode(grammarAccess.getClosureTypeRefAccess().getRightParenthesisKeyword_0_3(), null); 
    }
)?'=>' 
    {
        createLeafNode(grammarAccess.getClosureTypeRefAccess().getEqualsSignGreaterThanSignKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClosureTypeRefAccess().getReturnTypeTypeRefParserRuleCall_2_0(), currentNode); 
	    }
	    lv_returnType_6=ruleTypeRef 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClosureTypeRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "returnType", lv_returnType_6, "TypeRef", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleRuleTypeParam
entryRuleRuleTypeParam returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRuleTypeParamRule(), currentNode); }
	 iv_ruleRuleTypeParam=ruleRuleTypeParam 
	 { $current=$iv_ruleRuleTypeParam.current; } 
	 EOF 
;

// Rule RuleTypeParam
ruleRuleTypeParam returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getRuleTypeParamAccess().getRuleTypeRefParamParserRuleCall_0(), currentNode); 
    }
    this_RuleTypeRefParam_0=ruleRuleTypeRefParam
    { 
        $current = $this_RuleTypeRefParam_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getRuleTypeParamAccess().getWildcardRefParamParserRuleCall_1(), currentNode); 
    }
    this_WildcardRefParam_1=ruleWildcardRefParam
    { 
        $current = $this_WildcardRefParam_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleRuleTypeRefParam
entryRuleRuleTypeRefParam returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRuleTypeRefParamRule(), currentNode); }
	 iv_ruleRuleTypeRefParam=ruleRuleTypeRefParam 
	 { $current=$iv_ruleRuleTypeRefParam.current; } 
	 EOF 
;

// Rule RuleTypeRefParam
ruleRuleTypeRefParam returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getRuleTypeRefParamAccess().getTypeRefParserRuleCall(), currentNode); 
    }
    this_TypeRef_0=ruleTypeRef
    { 
        $current = $this_TypeRef_0.current; 
        currentNode = currentNode.getParent();
    }
;





// Entry rule entryRuleWildcardRefParam
entryRuleWildcardRefParam returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getWildcardRefParamRule(), currentNode); }
	 iv_ruleWildcardRefParam=ruleWildcardRefParam 
	 { $current=$iv_ruleWildcardRefParam.current; } 
	 EOF 
;

// Rule WildcardRefParam
ruleWildcardRefParam returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('?' 
    {
        createLeafNode(grammarAccess.getWildcardRefParamAccess().getQuestionMarkKeyword_0(), null); 
    }
(('extends' 
    {
        createLeafNode(grammarAccess.getWildcardRefParamAccess().getExtendsKeyword_1_0_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getWildcardRefParamAccess().getExtendsTypeRefParserRuleCall_1_0_1_0(), currentNode); 
	    }
	    lv_extends_2=ruleTypeRef 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWildcardRefParamRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "extends", lv_extends_2, "TypeRef", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getWildcardRefParamAccess().getCommaKeyword_1_0_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getWildcardRefParamAccess().getExtendsTypeRefParserRuleCall_1_0_2_1_0(), currentNode); 
	    }
	    lv_extends_4=ruleTypeRef 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWildcardRefParamRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "extends", lv_extends_4, "TypeRef", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)
    |('super' 
    {
        createLeafNode(grammarAccess.getWildcardRefParamAccess().getSuperKeyword_1_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getWildcardRefParamAccess().getSuperRefTypeRefParserRuleCall_1_1_1_0(), currentNode); 
	    }
	    lv_superRef_6=ruleTypeRef 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWildcardRefParamRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "superRef", lv_superRef_6, "TypeRef", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)))?);





// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getOrExpressionRule(), currentNode); }
	 iv_ruleOrExpression=ruleOrExpression 
	 { $current=$iv_ruleOrExpression.current; } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0(), currentNode); 
    }
    this_AndExpression_0=ruleAndExpression
    { 
        $current = $this_AndExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getOrExpressionAccess().getBooleanOperationLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getOrExpressionAccess().getBooleanOperationLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_operator_2='||' 
    {
        createLeafNode(grammarAccess.getOrExpressionAccess().getOperatorVerticalLineVerticalLineKeyword_1_1_0(), "operator"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "operator", /* lv_operator_2 */ input.LT(-1), "||", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_right_3=ruleAndExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "right", lv_right_3, "AndExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAndExpressionRule(), currentNode); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAndExpressionAccess().getBitwiseExpressionParserRuleCall_0(), currentNode); 
    }
    this_BitwiseExpression_0=ruleBitwiseExpression
    { 
        $current = $this_BitwiseExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getAndExpressionAccess().getBooleanOperationLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAndExpressionAccess().getBooleanOperationLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_operator_2='&&' 
    {
        createLeafNode(grammarAccess.getAndExpressionAccess().getOperatorAmpersandAmpersandKeyword_1_1_0(), "operator"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "operator", /* lv_operator_2 */ input.LT(-1), "&&", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAndExpressionAccess().getRightBitwiseExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_right_3=ruleBitwiseExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "right", lv_right_3, "BitwiseExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleBitwiseExpression
entryRuleBitwiseExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBitwiseExpressionRule(), currentNode); }
	 iv_ruleBitwiseExpression=ruleBitwiseExpression 
	 { $current=$iv_ruleBitwiseExpression.current; } 
	 EOF 
;

// Rule BitwiseExpression
ruleBitwiseExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getBitwiseExpressionAccess().getRelationalExpressionParserRuleCall_0(), currentNode); 
    }
    this_RelationalExpression_0=ruleRelationalExpression
    { 
        $current = $this_RelationalExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getBitwiseExpressionAccess().getOperationCallParamsAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "params", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBitwiseExpressionAccess().getOperationCallParamsAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_name_2=('&' 
    {
        createLeafNode(grammarAccess.getBitwiseExpressionAccess().getNameAmpersandKeyword_1_1_0_0(), "name"); 
    }


    |'^' 
    {
        createLeafNode(grammarAccess.getBitwiseExpressionAccess().getNameCircumflexAccentKeyword_1_1_0_1(), "name"); 
    }


    |'|' 
    {
        createLeafNode(grammarAccess.getBitwiseExpressionAccess().getNameVerticalLineKeyword_1_1_0_2(), "name"); 
    }

)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBitwiseExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", /* lv_name_2 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBitwiseExpressionAccess().getParamsRelationalExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_params_3=ruleRelationalExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBitwiseExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_3, "RelationalExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRelationalExpressionRule(), currentNode); }
	 iv_ruleRelationalExpression=ruleRelationalExpression 
	 { $current=$iv_ruleRelationalExpression.current; } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0(), currentNode); 
    }
    this_ShiftExpression_0=ruleShiftExpression
    { 
        $current = $this_ShiftExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getRelationalExpressionAccess().getRelationalOperationLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getRelationalExpressionAccess().getRelationalOperationLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getOperatorRelationalOperatorEnumRuleCall_1_1_0(), currentNode); 
	    }
	    lv_operator_2=ruleRelationalOperator 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operator", lv_operator_2, "RelationalOperator", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getRightShiftExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_right_3=ruleShiftExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "right", lv_right_3, "ShiftExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleShiftExpression
entryRuleShiftExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getShiftExpressionRule(), currentNode); }
	 iv_ruleShiftExpression=ruleShiftExpression 
	 { $current=$iv_ruleShiftExpression.current; } 
	 EOF 
;

// Rule ShiftExpression
ruleShiftExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0(), currentNode); 
    }
    this_AdditiveExpression_0=ruleAdditiveExpression
    { 
        $current = $this_AdditiveExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getShiftExpressionAccess().getOperationCallParamsAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "params", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getShiftExpressionAccess().getOperationCallParamsAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_name_2=('<<' 
    {
        createLeafNode(grammarAccess.getShiftExpressionAccess().getNameLessThanSignLessThanSignKeyword_1_1_0_0(), "name"); 
    }


    |'>>' 
    {
        createLeafNode(grammarAccess.getShiftExpressionAccess().getNameGreaterThanSignGreaterThanSignKeyword_1_1_0_1(), "name"); 
    }


    |'>>>' 
    {
        createLeafNode(grammarAccess.getShiftExpressionAccess().getNameGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_1_0_2(), "name"); 
    }

)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getShiftExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", /* lv_name_2 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getShiftExpressionAccess().getParamsAdditiveExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_params_3=ruleAdditiveExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getShiftExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_3, "AdditiveExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAdditiveExpressionRule(), currentNode); }
	 iv_ruleAdditiveExpression=ruleAdditiveExpression 
	 { $current=$iv_ruleAdditiveExpression.current; } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0(), currentNode); 
    }
    this_MultiplicativeExpression_0=ruleMultiplicativeExpression
    { 
        $current = $this_MultiplicativeExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getAdditiveExpressionAccess().getOperationCallParamsAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "params", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOperationCallParamsAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_name_2=('+' 
    {
        createLeafNode(grammarAccess.getAdditiveExpressionAccess().getNamePlusSignKeyword_1_1_0_0(), "name"); 
    }


    |'-' 
    {
        createLeafNode(grammarAccess.getAdditiveExpressionAccess().getNameHyphenMinusKeyword_1_1_0_1(), "name"); 
    }

)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", /* lv_name_2 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getParamsMultiplicativeExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_params_3=ruleMultiplicativeExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_3, "MultiplicativeExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getMultiplicativeExpressionRule(), currentNode); }
	 iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression 
	 { $current=$iv_ruleMultiplicativeExpression.current; } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getSetExpressionParserRuleCall_0(), currentNode); 
    }
    this_SetExpression_0=ruleSetExpression
    { 
        $current = $this_SetExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getMultiplicativeExpressionAccess().getOperationCallParamsAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "params", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOperationCallParamsAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_name_2=('*' 
    {
        createLeafNode(grammarAccess.getMultiplicativeExpressionAccess().getNameAsteriskKeyword_1_1_0_0(), "name"); 
    }


    |'/' 
    {
        createLeafNode(grammarAccess.getMultiplicativeExpressionAccess().getNameSolidusKeyword_1_1_0_1(), "name"); 
    }


    |'%' 
    {
        createLeafNode(grammarAccess.getMultiplicativeExpressionAccess().getNamePercentSignKeyword_1_1_0_2(), "name"); 
    }

)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", /* lv_name_2 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getParamsSetExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_params_3=ruleSetExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_3, "SetExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleSetExpression
entryRuleSetExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSetExpressionRule(), currentNode); }
	 iv_ruleSetExpression=ruleSetExpression 
	 { $current=$iv_ruleSetExpression.current; } 
	 EOF 
;

// Rule SetExpression
ruleSetExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getSetExpressionAccess().getUnaryOrInfixExpressionParserRuleCall_0(), currentNode); 
    }
    this_UnaryOrInfixExpression_0=ruleUnaryOrInfixExpression
    { 
        $current = $this_UnaryOrInfixExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getSetExpressionAccess().getSetOperationCallParamsAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "params", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSetExpressionAccess().getSetOperationCallParamsAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSetExpressionAccess().getOpSetOperatorEnumRuleCall_1_1_0(), currentNode); 
	    }
	    lv_op_2=ruleSetOperator 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSetExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2, "SetOperator", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSetExpressionAccess().getParamsUnaryOrInfixExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_params_3=ruleUnaryOrInfixExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSetExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_3, "UnaryOrInfixExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleUnaryOrInfixExpression
entryRuleUnaryOrInfixExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getUnaryOrInfixExpressionRule(), currentNode); }
	 iv_ruleUnaryOrInfixExpression=ruleUnaryOrInfixExpression 
	 { $current=$iv_ruleUnaryOrInfixExpression.current; } 
	 EOF 
;

// Rule UnaryOrInfixExpression
ruleUnaryOrInfixExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getUnaryOrInfixExpressionAccess().getUnaryExpressionParserRuleCall_0(), currentNode); 
    }
    this_UnaryExpression_0=ruleUnaryExpression
    { 
        $current = $this_UnaryExpression_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getUnaryOrInfixExpressionAccess().getPostopExpressionParserRuleCall_1(), currentNode); 
    }
    this_PostopExpression_1=rulePostopExpression
    { 
        $current = $this_PostopExpression_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getUnaryExpressionRule(), currentNode); }
	 iv_ruleUnaryExpression=ruleUnaryExpression 
	 { $current=$iv_ruleUnaryExpression.current; } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getUnaryExpressionAccess().getUnaryOperationAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getUnaryExpressionAccess().getUnaryOperationAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_name_1=('!' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getNameExclamationMarkKeyword_1_0_0(), "name"); 
    }


    |'-' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getNameHyphenMinusKeyword_1_0_1(), "name"); 
    }


    |'++' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getNamePlusSignPlusSignKeyword_1_0_2(), "name"); 
    }


    |'--' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getNameHyphenMinusHyphenMinusKeyword_1_0_3(), "name"); 
    }


    |'~' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getNameTildeKeyword_1_0_4(), "name"); 
    }

)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", /* lv_name_1 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getParamsPostopExpressionParserRuleCall_2_0(), currentNode); 
	    }
	    lv_params_2=rulePostopExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "params", lv_params_2, "PostopExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRulePostopExpression
entryRulePostopExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPostopExpressionRule(), currentNode); }
	 iv_rulePostopExpression=rulePostopExpression 
	 { $current=$iv_rulePostopExpression.current; } 
	 EOF 
;

// Rule PostopExpression
rulePostopExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getPostopExpressionAccess().getInfixExpressionParserRuleCall_0(), currentNode); 
    }
    this_InfixExpression_0=ruleInfixExpression
    { 
        $current = $this_InfixExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getPostopExpressionAccess().getOperationCallPostTargetAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "postTarget", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPostopExpressionAccess().getOperationCallPostTargetAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_name_2=('--' 
    {
        createLeafNode(grammarAccess.getPostopExpressionAccess().getNameHyphenMinusHyphenMinusKeyword_1_1_0_0(), "name"); 
    }


    |'++' 
    {
        createLeafNode(grammarAccess.getPostopExpressionAccess().getNamePlusSignPlusSignKeyword_1_1_0_1(), "name"); 
    }

)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPostopExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", /* lv_name_2 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?);





// Entry rule entryRuleInfixExpression
entryRuleInfixExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getInfixExpressionRule(), currentNode); }
	 iv_ruleInfixExpression=ruleInfixExpression 
	 { $current=$iv_ruleInfixExpression.current; } 
	 EOF 
;

// Rule InfixExpression
ruleInfixExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getInfixExpressionAccess().getCallExpressionParserRuleCall_0(), currentNode); 
    }
    this_CallExpression_0=ruleCallExpression
    { 
        $current = $this_CallExpression_0.current; 
        currentNode = currentNode.getParent();
    }
(((
    { 
        temp=factory.create(grammarAccess.getInfixExpressionAccess().getOperationCallTargetAction_1_0_0().getType().getClassifier());
        try {
        	factory.set(temp, "target", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getInfixExpressionAccess().getOperationCallTargetAction_1_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'.' 
    {
        createLeafNode(grammarAccess.getInfixExpressionAccess().getFullStopKeyword_1_0_1(), null); 
    }
(	
	
	    lv_name_3=	RULE_ID
	{
		createLeafNode(grammarAccess.getInfixExpressionAccess().getNameIDTerminalRuleCall_1_0_2_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInfixExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_3, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)'(' 
    {
        createLeafNode(grammarAccess.getInfixExpressionAccess().getLeftParenthesisKeyword_1_0_3(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getInfixExpressionAccess().getParametersParameterListParserRuleCall_1_0_4_0(), currentNode); 
	    }
	    lv_parameters_5=ruleParameterList 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInfixExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "parameters", lv_parameters_5, "ParameterList", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)')' 
    {
        createLeafNode(grammarAccess.getInfixExpressionAccess().getRightParenthesisKeyword_1_0_5(), null); 
    }
)
    |((
    { 
        temp=factory.create(grammarAccess.getInfixExpressionAccess().getAtCallTargetAction_1_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "target", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getInfixExpressionAccess().getAtCallTargetAction_1_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'[' 
    {
        createLeafNode(grammarAccess.getInfixExpressionAccess().getLeftSquareBracketKeyword_1_1_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getInfixExpressionAccess().getIndexExpressionParserRuleCall_1_1_2_0(), currentNode); 
	    }
	    lv_index_9=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInfixExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "index", lv_index_9, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)']' 
    {
        createLeafNode(grammarAccess.getInfixExpressionAccess().getRightSquareBracketKeyword_1_1_3(), null); 
    }
('(' 
    {
        createLeafNode(grammarAccess.getInfixExpressionAccess().getLeftParenthesisKeyword_1_1_4_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getInfixExpressionAccess().getParametersParameterListParserRuleCall_1_1_4_1_0(), currentNode); 
	    }
	    lv_parameters_12=ruleParameterList 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInfixExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "parameters", lv_parameters_12, "ParameterList", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)')' 
    {
        createLeafNode(grammarAccess.getInfixExpressionAccess().getRightParenthesisKeyword_1_1_4_2(), null); 
    }
)?)
    |((
    { 
        temp=factory.create(grammarAccess.getInfixExpressionAccess().getFeatureCallTargetAction_1_2_0().getType().getClassifier());
        try {
        	factory.set(temp, "target", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getInfixExpressionAccess().getFeatureCallTargetAction_1_2_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'.' 
    {
        createLeafNode(grammarAccess.getInfixExpressionAccess().getFullStopKeyword_1_2_1(), null); 
    }
(	
	
	    lv_type_16=	RULE_ID
	{
		createLeafNode(grammarAccess.getInfixExpressionAccess().getTypeIDTerminalRuleCall_1_2_2_0(), "type"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInfixExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_16, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)))*);





// Entry rule entryRuleCallExpression
entryRuleCallExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCallExpressionRule(), currentNode); }
	 iv_ruleCallExpression=ruleCallExpression 
	 { $current=$iv_ruleCallExpression.current; } 
	 EOF 
;

// Rule CallExpression
ruleCallExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getCallExpressionAccess().getPrimaryExpressionParserRuleCall_0(), currentNode); 
    }
    this_PrimaryExpression_0=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getCallExpressionAccess().getOperationCallTargetAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "target", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getCallExpressionAccess().getOperationCallTargetAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'(' 
    {
        createLeafNode(grammarAccess.getCallExpressionAccess().getLeftParenthesisKeyword_1_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCallExpressionAccess().getParametersParameterListParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_parameters_3=ruleParameterList 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCallExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "parameters", lv_parameters_3, "ParameterList", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)')' 
    {
        createLeafNode(grammarAccess.getCallExpressionAccess().getRightParenthesisKeyword_1_3(), null); 
    }
)*);





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPrimaryExpressionRule(), currentNode); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_0(), currentNode); 
    }
    this_Literal_0=ruleLiteral
    { 
        $current = $this_Literal_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFeatureCallParserRuleCall_1(), currentNode); 
    }
    this_FeatureCall_1=ruleFeatureCall
    { 
        $current = $this_FeatureCall_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getConstructorCallExpressionParserRuleCall_2(), currentNode); 
    }
    this_ConstructorCallExpression_2=ruleConstructorCallExpression
    { 
        $current = $this_ConstructorCallExpression_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getVariableValueParserRuleCall_3(), currentNode); 
    }
    this_VariableValue_3=ruleVariableValue
    { 
        $current = $this_VariableValue_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getPropertyValueParserRuleCall_4(), currentNode); 
    }
    this_PropertyValue_4=rulePropertyValue
    { 
        $current = $this_PropertyValue_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getKeywordVariablesParserRuleCall_5(), currentNode); 
    }
    this_KeywordVariables_5=ruleKeywordVariables
    { 
        $current = $this_KeywordVariables_5.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParanthesizedExpressionParserRuleCall_6(), currentNode); 
    }
    this_ParanthesizedExpression_6=ruleParanthesizedExpression
    { 
        $current = $this_ParanthesizedExpression_6.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIfExpressionParserRuleCall_7(), currentNode); 
    }
    this_IfExpression_7=ruleIfExpression
    { 
        $current = $this_IfExpression_7.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getBlockExpressionParserRuleCall_8(), currentNode); 
    }
    this_BlockExpression_8=ruleBlockExpression
    { 
        $current = $this_BlockExpression_8.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getSwitchExpressionParserRuleCall_9(), currentNode); 
    }
    this_SwitchExpression_9=ruleSwitchExpression
    { 
        $current = $this_SwitchExpression_9.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getThrowExpressionParserRuleCall_10(), currentNode); 
    }
    this_ThrowExpression_10=ruleThrowExpression
    { 
        $current = $this_ThrowExpression_10.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getTryCatchExpressionParserRuleCall_11(), currentNode); 
    }
    this_TryCatchExpression_11=ruleTryCatchExpression
    { 
        $current = $this_TryCatchExpression_11.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getWildcardExpressionParserRuleCall_12(), currentNode); 
    }
    this_WildcardExpression_12=ruleWildcardExpression
    { 
        $current = $this_WildcardExpression_12.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getWithExpressionParserRuleCall_13(), currentNode); 
    }
    this_WithExpression_13=ruleWithExpression
    { 
        $current = $this_WithExpression_13.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleWithExpression
entryRuleWithExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getWithExpressionRule(), currentNode); }
	 iv_ruleWithExpression=ruleWithExpression 
	 { $current=$iv_ruleWithExpression.current; } 
	 EOF 
;

// Rule WithExpression
ruleWithExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getWithExpressionAccess().getWithClauseExpressionParserRuleCall_0(), currentNode); 
    }
    this_WithClauseExpression_0=ruleWithClauseExpression
    { 
        $current = $this_WithClauseExpression_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getWithExpressionAccess().getWithContextExpressionParserRuleCall_1(), currentNode); 
    }
    this_WithContextExpression_1=ruleWithContextExpression
    { 
        $current = $this_WithContextExpression_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleWithClauseExpression
entryRuleWithClauseExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getWithClauseExpressionRule(), currentNode); }
	 iv_ruleWithClauseExpression=ruleWithClauseExpression 
	 { $current=$iv_ruleWithClauseExpression.current; } 
	 EOF 
;

// Rule WithClauseExpression
ruleWithClauseExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getWithClauseExpressionAccess().getWithClauseExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getWithClauseExpressionAccess().getWithClauseExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getWithClauseExpressionAccess().getWithclauseWithClauseParserRuleCall_1_0(), currentNode); 
	    }
	    lv_withclause_1=ruleWithClause 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWithClauseExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "withclause", lv_withclause_1, "WithClause", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getWithClauseExpressionAccess().getExprBlockExpressionParserRuleCall_2_0(), currentNode); 
	    }
	    lv_expr_2=ruleBlockExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWithClauseExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expr", lv_expr_2, "BlockExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleWithContextExpression
entryRuleWithContextExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getWithContextExpressionRule(), currentNode); }
	 iv_ruleWithContextExpression=ruleWithContextExpression 
	 { $current=$iv_ruleWithContextExpression.current; } 
	 EOF 
;

// Rule WithContextExpression
ruleWithContextExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getWithContextExpressionAccess().getWithContextExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getWithContextExpressionAccess().getWithContextExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'with' 
    {
        createLeafNode(grammarAccess.getWithContextExpressionAccess().getWithKeyword_1(), null); 
    }
'context' 
    {
        createLeafNode(grammarAccess.getWithContextExpressionAccess().getContextKeyword_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getWithContextExpressionAccess().getContextExpressionParserRuleCall_3_0(), currentNode); 
	    }
	    lv_context_3=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWithContextExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "context", lv_context_3, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getWithContextExpressionAccess().getExprBlockExpressionParserRuleCall_4_0(), currentNode); 
	    }
	    lv_expr_4=ruleBlockExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWithContextExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expr", lv_expr_4, "BlockExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleWildcardExpression
entryRuleWildcardExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getWildcardExpressionRule(), currentNode); }
	 iv_ruleWildcardExpression=ruleWildcardExpression 
	 { $current=$iv_ruleWildcardExpression.current; } 
	 EOF 
;

// Rule WildcardExpression
ruleWildcardExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getWildcardExpressionAccess().getWildcardExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getWildcardExpressionAccess().getWildcardExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'_' 
    {
        createLeafNode(grammarAccess.getWildcardExpressionAccess().get_Keyword_1(), null); 
    }
);





// Entry rule entryRuleThrowExpression
entryRuleThrowExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getThrowExpressionRule(), currentNode); }
	 iv_ruleThrowExpression=ruleThrowExpression 
	 { $current=$iv_ruleThrowExpression.current; } 
	 EOF 
;

// Rule ThrowExpression
ruleThrowExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getThrowExpressionAccess().getThrowExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getThrowExpressionAccess().getThrowExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'throw' 
    {
        createLeafNode(grammarAccess.getThrowExpressionAccess().getThrowKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getThrowExpressionAccess().getExprExpressionParserRuleCall_2_0(), currentNode); 
	    }
	    lv_expr_2=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getThrowExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expr", lv_expr_2, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getThrowExpressionAccess().getSemicolonKeyword_3(), null); 
    }
);





// Entry rule entryRuleTryCatchExpression
entryRuleTryCatchExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTryCatchExpressionRule(), currentNode); }
	 iv_ruleTryCatchExpression=ruleTryCatchExpression 
	 { $current=$iv_ruleTryCatchExpression.current; } 
	 EOF 
;

// Rule TryCatchExpression
ruleTryCatchExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('try' 
    {
        createLeafNode(grammarAccess.getTryCatchExpressionAccess().getTryKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTryCatchExpressionAccess().getTryBlockExpressionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_tryBlock_1=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTryCatchExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "tryBlock", lv_tryBlock_1, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTryCatchExpressionAccess().getCatchCatchBlockParserRuleCall_2_0(), currentNode); 
	    }
	    lv_catch_2=ruleCatchBlock 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTryCatchExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "catch", lv_catch_2, "CatchBlock", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTryCatchExpressionAccess().getFinallyFinallyBlockParserRuleCall_3_0(), currentNode); 
	    }
	    lv_finally_3=ruleFinallyBlock 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTryCatchExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "finally", lv_finally_3, "FinallyBlock", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?'endtry' 
    {
        createLeafNode(grammarAccess.getTryCatchExpressionAccess().getEndtryKeyword_4(), null); 
    }
);





// Entry rule entryRuleCatchBlock
entryRuleCatchBlock returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCatchBlockRule(), currentNode); }
	 iv_ruleCatchBlock=ruleCatchBlock 
	 { $current=$iv_ruleCatchBlock.current; } 
	 EOF 
;

// Rule CatchBlock
ruleCatchBlock returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('catch' 
    {
        createLeafNode(grammarAccess.getCatchBlockAccess().getCatchKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCatchBlockAccess().getTypeTypeRefParserRuleCall_1_0(), currentNode); 
	    }
	    lv_type_1=ruleTypeRef 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCatchBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_1, "TypeRef", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    lv_var_2=	RULE_ID
	{
		createLeafNode(grammarAccess.getCatchBlockAccess().getVarIDTerminalRuleCall_2_0(), "var"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCatchBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "var", lv_var_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)':' 
    {
        createLeafNode(grammarAccess.getCatchBlockAccess().getColonKeyword_3(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCatchBlockAccess().getExprExpressionParserRuleCall_4_0(), currentNode); 
	    }
	    lv_expr_4=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCatchBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expr", lv_expr_4, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleFinallyBlock
entryRuleFinallyBlock returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFinallyBlockRule(), currentNode); }
	 iv_ruleFinallyBlock=ruleFinallyBlock 
	 { $current=$iv_ruleFinallyBlock.current; } 
	 EOF 
;

// Rule FinallyBlock
ruleFinallyBlock returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('finally' 
    {
        createLeafNode(grammarAccess.getFinallyBlockAccess().getFinallyKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFinallyBlockAccess().getExprExpressionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_expr_1=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFinallyBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expr", lv_expr_1, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleSwitchExpression
entryRuleSwitchExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSwitchExpressionRule(), currentNode); }
	 iv_ruleSwitchExpression=ruleSwitchExpression 
	 { $current=$iv_ruleSwitchExpression.current; } 
	 EOF 
;

// Rule SwitchExpression
ruleSwitchExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('switch' 
    {
        createLeafNode(grammarAccess.getSwitchExpressionAccess().getSwitchKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSwitchExpressionAccess().getSwitchExprExpressionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_switchExpr_1=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSwitchExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "switchExpr", lv_switchExpr_1, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSwitchExpressionAccess().getCaseCaseParserRuleCall_2_0(), currentNode); 
	    }
	    lv_case_2=ruleCase 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSwitchExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "case", lv_case_2, "Case", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)+'endswitch' 
    {
        createLeafNode(grammarAccess.getSwitchExpressionAccess().getEndswitchKeyword_3(), null); 
    }
);





// Entry rule entryRuleCase
entryRuleCase returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCaseRule(), currentNode); }
	 iv_ruleCase=ruleCase 
	 { $current=$iv_ruleCase.current; } 
	 EOF 
;

// Rule Case
ruleCase returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('case' 
    {
        createLeafNode(grammarAccess.getCaseAccess().getCaseKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCaseAccess().getConditionExpressionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_condition_1=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "condition", lv_condition_1, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)':' 
    {
        createLeafNode(grammarAccess.getCaseAccess().getColonKeyword_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCaseAccess().getExprExpressionParserRuleCall_3_0(), currentNode); 
	    }
	    lv_expr_3=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expr", lv_expr_3, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleBlockExpression
entryRuleBlockExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBlockExpressionRule(), currentNode); }
	 iv_ruleBlockExpression=ruleBlockExpression 
	 { $current=$iv_ruleBlockExpression.current; } 
	 EOF 
;

// Rule BlockExpression
ruleBlockExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getBlockExpressionAccess().getBlockExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBlockExpressionAccess().getBlockExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'{' 
    {
        createLeafNode(grammarAccess.getBlockExpressionAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBlockExpressionAccess().getExprExpressionParserRuleCall_2_0_0(), currentNode); 
	    }
	    lv_expr_2=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBlockExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "expr", lv_expr_2, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getBlockExpressionAccess().getSemicolonKeyword_2_1(), null); 
    }
)*'}' 
    {
        createLeafNode(grammarAccess.getBlockExpressionAccess().getRightCurlyBracketKeyword_3(), null); 
    }
);





// Entry rule entryRuleIfExpression
entryRuleIfExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getIfExpressionRule(), currentNode); }
	 iv_ruleIfExpression=ruleIfExpression 
	 { $current=$iv_ruleIfExpression.current; } 
	 EOF 
;

// Rule IfExpression
ruleIfExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getIfExpressionAccess().getIfExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getIfExpressionAccess().getIfExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'if' 
    {
        createLeafNode(grammarAccess.getIfExpressionAccess().getIfKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getIfExpressionAccess().getCondExpressionParserRuleCall_2_0(), currentNode); 
	    }
	    lv_cond_2=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "cond", lv_cond_2, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'then' 
    {
        createLeafNode(grammarAccess.getIfExpressionAccess().getThenKeyword_3(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getIfExpressionAccess().getValueExpressionParserRuleCall_4_0(), currentNode); 
	    }
	    lv_value_4=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_4, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getIfExpressionAccess().getTailElseIfExpressionParserRuleCall_5_0(), currentNode); 
	    }
	    lv_tail_5=ruleElseIfExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "tail", lv_tail_5, "ElseIfExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getIfExpressionAccess().getTailElseExpressionParserRuleCall_6_0(), currentNode); 
	    }
	    lv_tail_6=ruleElseExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "tail", lv_tail_6, "ElseExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?'endif' 
    {
        createLeafNode(grammarAccess.getIfExpressionAccess().getEndifKeyword_7(), null); 
    }
);







// Entry rule entryRuleElseIfExpression
entryRuleElseIfExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getElseIfExpressionRule(), currentNode); }
	 iv_ruleElseIfExpression=ruleElseIfExpression 
	 { $current=$iv_ruleElseIfExpression.current; } 
	 EOF 
;

// Rule ElseIfExpression
ruleElseIfExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getElseIfExpressionAccess().getElseIfExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getElseIfExpressionAccess().getElseIfExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'elseif' 
    {
        createLeafNode(grammarAccess.getElseIfExpressionAccess().getElseifKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getElseIfExpressionAccess().getConditionExpressionParserRuleCall_2_0(), currentNode); 
	    }
	    lv_condition_2=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElseIfExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "condition", lv_condition_2, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'then' 
    {
        createLeafNode(grammarAccess.getElseIfExpressionAccess().getThenKeyword_3(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getElseIfExpressionAccess().getValueExpressionParserRuleCall_4_0(), currentNode); 
	    }
	    lv_value_4=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElseIfExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_4, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleElseExpression
entryRuleElseExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getElseExpressionRule(), currentNode); }
	 iv_ruleElseExpression=ruleElseExpression 
	 { $current=$iv_ruleElseExpression.current; } 
	 EOF 
;

// Rule ElseExpression
ruleElseExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getElseExpressionAccess().getElseExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getElseExpressionAccess().getElseExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'else' 
    {
        createLeafNode(grammarAccess.getElseExpressionAccess().getElseKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getElseExpressionAccess().getValueExpressionParserRuleCall_2_0(), currentNode); 
	    }
	    lv_value_2=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElseExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_2, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRulePropertyValue
entryRulePropertyValue returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPropertyValueRule(), currentNode); }
	 iv_rulePropertyValue=rulePropertyValue 
	 { $current=$iv_rulePropertyValue.current; } 
	 EOF 
;

// Rule PropertyValue
rulePropertyValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getPropertyValueAccess().getPropertyValueAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPropertyValueAccess().getPropertyValueAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_name_1=	RULE_PID
	{
		createLeafNode(grammarAccess.getPropertyValueAccess().getNamePIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "PID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleVariableValue
entryRuleVariableValue returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getVariableValueRule(), currentNode); }
	 iv_ruleVariableValue=ruleVariableValue 
	 { $current=$iv_ruleVariableValue.current; } 
	 EOF 
;

// Rule VariableValue
ruleVariableValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getVariableValueAccess().getVariableValueAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getVariableValueAccess().getVariableValueAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getVariableValueAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleKeywordVariables
entryRuleKeywordVariables returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getKeywordVariablesRule(), currentNode); }
	 iv_ruleKeywordVariables=ruleKeywordVariables 
	 { $current=$iv_ruleKeywordVariables.current; } 
	 EOF 
;

// Rule KeywordVariables
ruleKeywordVariables returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getKeywordVariablesAccess().getKeywordVariableAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getKeywordVariablesAccess().getKeywordVariableAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_name_1=(	{ 
        currentNode=createCompositeNode(grammarAccess.getKeywordVariablesAccess().getNameInputKeywordParserRuleCall_1_0_0(), currentNode); 
    }
	ruleInputKeyword	{ 
        currentNode = currentNode.getParent();
    }

    |	{ 
        currentNode=createCompositeNode(grammarAccess.getKeywordVariablesAccess().getNameOutputKeywordParserRuleCall_1_0_1(), currentNode); 
    }
	ruleOutputKeyword	{ 
        currentNode = currentNode.getParent();
    }

    |'properties' 
    {
        createLeafNode(grammarAccess.getKeywordVariablesAccess().getNamePropertiesKeyword_1_0_2(), "name"); 
    }


    |'unit' 
    {
        createLeafNode(grammarAccess.getKeywordVariablesAccess().getNameUnitKeyword_1_0_3(), "name"); 
    }

)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getKeywordVariablesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", /* lv_name_1 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleFeatureCall
entryRuleFeatureCall returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFeatureCallRule(), currentNode); }
	 iv_ruleFeatureCall=ruleFeatureCall 
	 { $current=$iv_ruleFeatureCall.current; } 
	 EOF 
;

// Rule FeatureCall
ruleFeatureCall returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getFeatureCallAccess().getOperationCallParserRuleCall(), currentNode); 
    }
    this_OperationCall_0=ruleOperationCall
    { 
        $current = $this_OperationCall_0.current; 
        currentNode = currentNode.getParent();
    }
;





// Entry rule entryRuleOperationCall
entryRuleOperationCall returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getOperationCallRule(), currentNode); }
	 iv_ruleOperationCall=ruleOperationCall 
	 { $current=$iv_ruleOperationCall.current; } 
	 EOF 
;

// Rule OperationCall
ruleOperationCall returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((	
	
	    lv_name_0=(	RULE_ID
	{
		createLeafNode(grammarAccess.getOperationCallAccess().getNameIDTerminalRuleCall_0_0_0_0(), "name"); 
	}

    |	RULE_PID
	{
		createLeafNode(grammarAccess.getOperationCallAccess().getNamePIDTerminalRuleCall_0_0_0_1(), "name"); 
	}
)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)'(' 
    {
        createLeafNode(grammarAccess.getOperationCallAccess().getLeftParenthesisKeyword_0_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getOperationCallAccess().getParametersParameterListParserRuleCall_0_2_0(), currentNode); 
	    }
	    lv_parameters_2=ruleParameterList 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "parameters", lv_parameters_2, "ParameterList", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?')' 
    {
        createLeafNode(grammarAccess.getOperationCallAccess().getRightParenthesisKeyword_0_3(), null); 
    }
)
    |((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getOperationCallAccess().getTargetSuperLiteralParserRuleCall_1_0_0(), currentNode); 
	    }
	    lv_target_4=ruleSuperLiteral 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "target", lv_target_4, "SuperLiteral", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'.' 
    {
        createLeafNode(grammarAccess.getOperationCallAccess().getFullStopKeyword_1_1(), null); 
    }
(	
	
	    lv_name_6=	RULE_ID
	{
		createLeafNode(grammarAccess.getOperationCallAccess().getNameIDTerminalRuleCall_1_2_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_6, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)'(' 
    {
        createLeafNode(grammarAccess.getOperationCallAccess().getLeftParenthesisKeyword_1_3(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getOperationCallAccess().getParametersParameterListParserRuleCall_1_4_0(), currentNode); 
	    }
	    lv_parameters_8=ruleParameterList 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "parameters", lv_parameters_8, "ParameterList", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?')' 
    {
        createLeafNode(grammarAccess.getOperationCallAccess().getRightParenthesisKeyword_1_5(), null); 
    }
));





// Entry rule entryRuleConstructorCallExpression
entryRuleConstructorCallExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getConstructorCallExpressionRule(), currentNode); }
	 iv_ruleConstructorCallExpression=ruleConstructorCallExpression 
	 { $current=$iv_ruleConstructorCallExpression.current; } 
	 EOF 
;

// Rule ConstructorCallExpression
ruleConstructorCallExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getConstructorCallExpressionAccess().getCreatorCallAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getConstructorCallExpressionAccess().getCreatorCallAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_name_1='new' 
    {
        createLeafNode(grammarAccess.getConstructorCallExpressionAccess().getNameNewKeyword_1_0(), "name"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructorCallExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", /* lv_name_1 */ input.LT(-1), "new", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getConstructorCallExpressionAccess().getTargetTypeRefParserRuleCall_2_0(), currentNode); 
	    }
	    lv_target_2=ruleTypeRef 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructorCallExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "target", lv_target_2, "TypeRef", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('(' 
    {
        createLeafNode(grammarAccess.getConstructorCallExpressionAccess().getLeftParenthesisKeyword_3_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getConstructorCallExpressionAccess().getParametersParameterListParserRuleCall_3_1_0(), currentNode); 
	    }
	    lv_parameters_4=ruleParameterList 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructorCallExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "parameters", lv_parameters_4, "ParameterList", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?')' 
    {
        createLeafNode(grammarAccess.getConstructorCallExpressionAccess().getRightParenthesisKeyword_3_2(), null); 
    }
)?('as' 
    {
        createLeafNode(grammarAccess.getConstructorCallExpressionAccess().getAsKeyword_4_0(), null); 
    }
(	
	
	    lv_alias_7=	RULE_ID
	{
		createLeafNode(grammarAccess.getConstructorCallExpressionAccess().getAliasIDTerminalRuleCall_4_1_0(), "alias"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructorCallExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "alias", lv_alias_7, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getConstructorCallExpressionAccess().getContextBlockContextBlockParserRuleCall_5_0(), currentNode); 
	    }
	    lv_contextBlock_8=ruleContextBlock 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructorCallExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "contextBlock", lv_contextBlock_8, "ContextBlock", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?);





// Entry rule entryRuleContext
entryRuleContext returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getContextRule(), currentNode); }
	 iv_ruleContext=ruleContext 
	 { $current=$iv_ruleContext.current; } 
	 EOF 
;

// Rule Context
ruleContext returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('context' 
    {
        createLeafNode(grammarAccess.getContextAccess().getContextKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getContextAccess().getSelectorContextSelectorParserRuleCall_1_0(), currentNode); 
	    }
	    lv_selector_1=ruleContextSelector 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getContextRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "selector", lv_selector_1, "ContextSelector", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getContextAccess().getBlockContextBlockParserRuleCall_2_0(), currentNode); 
	    }
	    lv_block_2=ruleContextBlock 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getContextRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "block", lv_block_2, "ContextBlock", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleContextSelector
entryRuleContextSelector returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getContextSelectorRule(), currentNode); }
	 iv_ruleContextSelector=ruleContextSelector 
	 { $current=$iv_ruleContextSelector.current; } 
	 EOF 
;

// Rule ContextSelector
ruleContextSelector returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getContextSelectorAccess().getTypeRefSelectorParserRuleCall_0(), currentNode); 
    }
    this_TypeRefSelector_0=ruleTypeRefSelector
    { 
        $current = $this_TypeRefSelector_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getContextSelectorAccess().getExpressionSelectorParserRuleCall_1(), currentNode); 
    }
    this_ExpressionSelector_1=ruleExpressionSelector
    { 
        $current = $this_ExpressionSelector_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getContextSelectorAccess().getUnitSelectorParserRuleCall_2(), currentNode); 
    }
    this_UnitSelector_2=ruleUnitSelector
    { 
        $current = $this_UnitSelector_2.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleTypeRefSelector
entryRuleTypeRefSelector returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTypeRefSelectorRule(), currentNode); }
	 iv_ruleTypeRefSelector=ruleTypeRefSelector 
	 { $current=$iv_ruleTypeRefSelector.current; } 
	 EOF 
;

// Rule TypeRefSelector
ruleTypeRefSelector returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTypeRefSelectorAccess().getTypeTypeRefParserRuleCall_0(), currentNode); 
	    }
	    lv_type_0=ruleTypeRef 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRefSelectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_0, "TypeRef", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
);





// Entry rule entryRuleExpressionSelector
entryRuleExpressionSelector returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getExpressionSelectorRule(), currentNode); }
	 iv_ruleExpressionSelector=ruleExpressionSelector 
	 { $current=$iv_ruleExpressionSelector.current; } 
	 EOF 
;

// Rule ExpressionSelector
ruleExpressionSelector returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getExpressionSelectorAccess().getExprExpressionParserRuleCall_0(), currentNode); 
	    }
	    lv_expr_0=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionSelectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expr", lv_expr_0, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
);





// Entry rule entryRuleUnitSelector
entryRuleUnitSelector returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getUnitSelectorRule(), currentNode); }
	 iv_ruleUnitSelector=ruleUnitSelector 
	 { $current=$iv_ruleUnitSelector.current; } 
	 EOF 
;

// Rule UnitSelector
ruleUnitSelector returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('unit' 
    {
        createLeafNode(grammarAccess.getUnitSelectorAccess().getUnitKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitSelectorAccess().getInterfaceQIDParserRuleCall_1_0(), currentNode); 
	    }
	    lv_interface_1=ruleQID 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitSelectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "interface", lv_interface_1, "QID", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('/' 
    {
        createLeafNode(grammarAccess.getUnitSelectorAccess().getSolidusKeyword_2_0(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitSelectorAccess().getNameUnitNameParserRuleCall_2_1_0_0(), currentNode); 
	    }
	    lv_name_3=ruleUnitName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitSelectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_3, "UnitName", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    lv_namePattern_4=	RULE_REGEX
	{
		createLeafNode(grammarAccess.getUnitSelectorAccess().getNamePatternREGEXTerminalRuleCall_2_1_1_0(), "namePattern"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitSelectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "namePattern", lv_namePattern_4, "REGEX", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))('/' 
    {
        createLeafNode(grammarAccess.getUnitSelectorAccess().getSolidusKeyword_2_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnitSelectorAccess().getVersionRangeVersionRangeParserRuleCall_2_2_1_0(), currentNode); 
	    }
	    lv_versionRange_6=ruleVersionRange 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitSelectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "versionRange", lv_versionRange_6, "VersionRange", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?)?);





// Entry rule entryRuleContextBlock
entryRuleContextBlock returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getContextBlockRule(), currentNode); }
	 iv_ruleContextBlock=ruleContextBlock 
	 { $current=$iv_ruleContextBlock.current; } 
	 EOF 
;

// Rule ContextBlock
ruleContextBlock returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('{' 
    {
        createLeafNode(grammarAccess.getContextBlockAccess().getLeftCurlyBracketKeyword_0(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getContextBlockAccess().getStatementsMethodParserRuleCall_1_0_0(), currentNode); 
	    }
	    lv_statements_1=ruleMethod 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getContextBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "statements", lv_statements_1, "Method", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getContextBlockAccess().getStatementsBuilderParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_statements_2=ruleBuilder 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getContextBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "statements", lv_statements_2, "Builder", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getContextBlockAccess().getStatementsExpressionStatementParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_statements_3=ruleExpressionStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getContextBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "statements", lv_statements_3, "ExpressionStatement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getContextBlockAccess().getStatementsPropertiesStatementParserRuleCall_1_3_0(), currentNode); 
	    }
	    lv_statements_4=rulePropertiesStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getContextBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "statements", lv_statements_4, "PropertiesStatement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*'}' 
    {
        createLeafNode(grammarAccess.getContextBlockAccess().getRightCurlyBracketKeyword_2(), null); 
    }
);





// Entry rule entryRuleExpressionStatement
entryRuleExpressionStatement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getExpressionStatementRule(), currentNode); }
	 iv_ruleExpressionStatement=ruleExpressionStatement 
	 { $current=$iv_ruleExpressionStatement.current; } 
	 EOF 
;

// Rule ExpressionStatement
ruleExpressionStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getExpressionStatementAccess().getExpressionStatementAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getExpressionStatementAccess().getExpressionStatementAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getExpressionStatementAccess().getValExpressionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_val_1=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "val", lv_val_1, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_2(), null); 
    }
);





// Entry rule entryRulePropertiesStatement
entryRulePropertiesStatement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPropertiesStatementRule(), currentNode); }
	 iv_rulePropertiesStatement=rulePropertiesStatement 
	 { $current=$iv_rulePropertiesStatement.current; } 
	 EOF 
;

// Rule PropertiesStatement
rulePropertiesStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getPropertiesStatementAccess().getPropertiesStatementAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPropertiesStatementAccess().getPropertiesStatementAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'properties' 
    {
        createLeafNode(grammarAccess.getPropertiesStatementAccess().getPropertiesKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPropertiesStatementAccess().getPropertiesNamedPropertySetParserRuleCall_2_0(), currentNode); 
	    }
	    lv_properties_2=ruleNamedPropertySet 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertiesStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "properties", lv_properties_2, "NamedPropertySet", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLiteralRule(), currentNode); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getValueLiteralParserRuleCall_0(), currentNode); 
    }
    this_ValueLiteral_0=ruleValueLiteral
    { 
        $current = $this_ValueLiteral_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getRegexpLiteralParserRuleCall_1(), currentNode); 
    }
    this_RegexpLiteral_1=ruleRegexpLiteral
    { 
        $current = $this_RegexpLiteral_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getLiteralListParserRuleCall_2(), currentNode); 
    }
    this_LiteralList_2=ruleLiteralList
    { 
        $current = $this_LiteralList_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getLiteralMapParserRuleCall_3(), currentNode); 
    }
    this_LiteralMap_3=ruleLiteralMap
    { 
        $current = $this_LiteralMap_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getLiteralFunctionParserRuleCall_4(), currentNode); 
    }
    this_LiteralFunction_4=ruleLiteralFunction
    { 
        $current = $this_LiteralFunction_4.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleLiteralList
entryRuleLiteralList returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLiteralListRule(), currentNode); }
	 iv_ruleLiteralList=ruleLiteralList 
	 { $current=$iv_ruleLiteralList.current; } 
	 EOF 
;

// Rule LiteralList
ruleLiteralList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
    { 
        temp=factory.create(grammarAccess.getLiteralListAccess().getLiteralListAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLiteralListAccess().getLiteralListAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'[' 
    {
        createLeafNode(grammarAccess.getLiteralListAccess().getLeftSquareBracketKeyword_0_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getLiteralListAccess().getElementExpressionParserRuleCall_0_2_0(), currentNode); 
	    }
	    lv_element_2=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "element", lv_element_2, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getLiteralListAccess().getCommaKeyword_0_3_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getLiteralListAccess().getElementExpressionParserRuleCall_0_3_1_0(), currentNode); 
	    }
	    lv_element_4=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "element", lv_element_4, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*']' 
    {
        createLeafNode(grammarAccess.getLiteralListAccess().getRightSquareBracketKeyword_0_4(), null); 
    }
('<' 
    {
        createLeafNode(grammarAccess.getLiteralListAccess().getLessThanSignKeyword_0_5_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getLiteralListAccess().getTypeTypeRefParserRuleCall_0_5_1_0(), currentNode); 
	    }
	    lv_type_7=ruleTypeRef 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_7, "TypeRef", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'>' 
    {
        createLeafNode(grammarAccess.getLiteralListAccess().getGreaterThanSignKeyword_0_5_2(), null); 
    }
)?)
    |((
    { 
        temp=factory.create(grammarAccess.getLiteralListAccess().getLiteralListAction_1_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLiteralListAccess().getLiteralListAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'[' 
    {
        createLeafNode(grammarAccess.getLiteralListAccess().getLeftSquareBracketKeyword_1_1(), null); 
    }
']' 
    {
        createLeafNode(grammarAccess.getLiteralListAccess().getRightSquareBracketKeyword_1_2(), null); 
    }
'<' 
    {
        createLeafNode(grammarAccess.getLiteralListAccess().getLessThanSignKeyword_1_3(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getLiteralListAccess().getTypeTypeRefParserRuleCall_1_4_0(), currentNode); 
	    }
	    lv_type_13=ruleTypeRef 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_13, "TypeRef", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'>' 
    {
        createLeafNode(grammarAccess.getLiteralListAccess().getGreaterThanSignKeyword_1_5(), null); 
    }
));





// Entry rule entryRuleLiteralMap
entryRuleLiteralMap returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLiteralMapRule(), currentNode); }
	 iv_ruleLiteralMap=ruleLiteralMap 
	 { $current=$iv_ruleLiteralMap.current; } 
	 EOF 
;

// Rule LiteralMap
ruleLiteralMap returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
    { 
        temp=factory.create(grammarAccess.getLiteralMapAccess().getLiteralMapAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLiteralMapAccess().getLiteralMapAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'[' 
    {
        createLeafNode(grammarAccess.getLiteralMapAccess().getLeftSquareBracketKeyword_0_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getLiteralMapAccess().getFeaturesFeatureParserRuleCall_0_2_0(), currentNode); 
	    }
	    lv_features_2=ruleFeature 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralMapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "features", lv_features_2, "Feature", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getLiteralMapAccess().getCommaKeyword_0_3_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getLiteralMapAccess().getFeaturesFeatureParserRuleCall_0_3_1_0(), currentNode); 
	    }
	    lv_features_4=ruleFeature 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralMapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "features", lv_features_4, "Feature", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*']' 
    {
        createLeafNode(grammarAccess.getLiteralMapAccess().getRightSquareBracketKeyword_0_4(), null); 
    }
('<' 
    {
        createLeafNode(grammarAccess.getLiteralMapAccess().getLessThanSignKeyword_0_5_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getLiteralMapAccess().getKeyTypeTypeRefParserRuleCall_0_5_1_0(), currentNode); 
	    }
	    lv_keyType_7=ruleTypeRef 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralMapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "keyType", lv_keyType_7, "TypeRef", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)',' 
    {
        createLeafNode(grammarAccess.getLiteralMapAccess().getCommaKeyword_0_5_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getLiteralMapAccess().getValTypeTypeRefParserRuleCall_0_5_3_0(), currentNode); 
	    }
	    lv_valType_9=ruleTypeRef 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralMapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "valType", lv_valType_9, "TypeRef", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'>' 
    {
        createLeafNode(grammarAccess.getLiteralMapAccess().getGreaterThanSignKeyword_0_5_4(), null); 
    }
)?)
    |((
    { 
        temp=factory.create(grammarAccess.getLiteralMapAccess().getLiteralMapAction_1_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLiteralMapAccess().getLiteralMapAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'[' 
    {
        createLeafNode(grammarAccess.getLiteralMapAccess().getLeftSquareBracketKeyword_1_1(), null); 
    }
']' 
    {
        createLeafNode(grammarAccess.getLiteralMapAccess().getRightSquareBracketKeyword_1_2(), null); 
    }
'<' 
    {
        createLeafNode(grammarAccess.getLiteralMapAccess().getLessThanSignKeyword_1_3(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getLiteralMapAccess().getKeyTypeTypeRefParserRuleCall_1_4_0(), currentNode); 
	    }
	    lv_keyType_15=ruleTypeRef 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralMapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "keyType", lv_keyType_15, "TypeRef", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)',' 
    {
        createLeafNode(grammarAccess.getLiteralMapAccess().getCommaKeyword_1_5(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getLiteralMapAccess().getValTypeTypeRefParserRuleCall_1_6_0(), currentNode); 
	    }
	    lv_valType_17=ruleTypeRef 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralMapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "valType", lv_valType_17, "TypeRef", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'>' 
    {
        createLeafNode(grammarAccess.getLiteralMapAccess().getGreaterThanSignKeyword_1_7(), null); 
    }
));





// Entry rule entryRuleLiteralFunction
entryRuleLiteralFunction returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLiteralFunctionRule(), currentNode); }
	 iv_ruleLiteralFunction=ruleLiteralFunction 
	 { $current=$iv_ruleLiteralFunction.current; } 
	 EOF 
;

// Rule LiteralFunction
ruleLiteralFunction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getLiteralFunctionAccess().getLiteralFunctionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLiteralFunctionAccess().getLiteralFunctionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'{' 
    {
        createLeafNode(grammarAccess.getLiteralFunctionAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getLiteralFunctionAccess().getClosureClosureExpressionParserRuleCall_2_0(), currentNode); 
	    }
	    lv_closure_2=ruleClosureExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "closure", lv_closure_2, "ClosureExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'}' 
    {
        createLeafNode(grammarAccess.getLiteralFunctionAccess().getRightCurlyBracketKeyword_3(), null); 
    }
);





// Entry rule entryRuleClosureExpression
entryRuleClosureExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getClosureExpressionRule(), currentNode); }
	 iv_ruleClosureExpression=ruleClosureExpression 
	 { $current=$iv_ruleClosureExpression.current; } 
	 EOF 
;

// Rule ClosureExpression
ruleClosureExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClosureExpressionAccess().getParametersParameterDeclarationParserRuleCall_0_0_0(), currentNode); 
	    }
	    lv_parameters_0=ruleParameterDeclaration 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClosureExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "parameters", lv_parameters_0, "ParameterDeclaration", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getClosureExpressionAccess().getCommaKeyword_0_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClosureExpressionAccess().getParametersParameterDeclarationParserRuleCall_0_1_1_0(), currentNode); 
	    }
	    lv_parameters_2=ruleParameterDeclaration 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClosureExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "parameters", lv_parameters_2, "ParameterDeclaration", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)?'|' 
    {
        createLeafNode(grammarAccess.getClosureExpressionAccess().getVerticalLineKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClosureExpressionAccess().getExprExpressionParserRuleCall_2_0(), currentNode); 
	    }
	    lv_expr_4=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClosureExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expr", lv_expr_4, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleFeature
entryRuleFeature returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFeatureRule(), currentNode); }
	 iv_ruleFeature=ruleFeature 
	 { $current=$iv_ruleFeature.current; } 
	 EOF 
;

// Rule Feature
ruleFeature returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getFeatureAccess().getFeatureAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getFeatureAccess().getFeatureAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_name_1=(	RULE_ID
	{
		createLeafNode(grammarAccess.getFeatureAccess().getNameIDTerminalRuleCall_1_0_0(), "name"); 
	}

    |	RULE_PID
	{
		createLeafNode(grammarAccess.getFeatureAccess().getNamePIDTerminalRuleCall_1_0_1(), "name"); 
	}

    |	RULE_STRING
	{
		createLeafNode(grammarAccess.getFeatureAccess().getNameSTRINGTerminalRuleCall_1_0_2(), "name"); 
	}
)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFeatureRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)':' 
    {
        createLeafNode(grammarAccess.getFeatureAccess().getColonKeyword_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFeatureAccess().getValueExpressionParserRuleCall_3_0(), currentNode); 
	    }
	    lv_value_3=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFeatureRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_3, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleValueLiteral
entryRuleValueLiteral returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getValueLiteralRule(), currentNode); }
	 iv_ruleValueLiteral=ruleValueLiteral 
	 { $current=$iv_ruleValueLiteral.current; } 
	 EOF 
;

// Rule ValueLiteral
ruleValueLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getValueLiteralAccess().getBooleanLiteralParserRuleCall_0(), currentNode); 
    }
    this_BooleanLiteral_0=ruleBooleanLiteral
    { 
        $current = $this_BooleanLiteral_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueLiteralAccess().getIntegerLiteralParserRuleCall_1(), currentNode); 
    }
    this_IntegerLiteral_1=ruleIntegerLiteral
    { 
        $current = $this_IntegerLiteral_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueLiteralAccess().getNullLiteralParserRuleCall_2(), currentNode); 
    }
    this_NullLiteral_2=ruleNullLiteral
    { 
        $current = $this_NullLiteral_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueLiteralAccess().getStringLiteralParserRuleCall_3(), currentNode); 
    }
    this_StringLiteral_3=ruleStringLiteral
    { 
        $current = $this_StringLiteral_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueLiteralAccess().getRealLiteralParserRuleCall_4(), currentNode); 
    }
    this_RealLiteral_4=ruleRealLiteral
    { 
        $current = $this_RealLiteral_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueLiteralAccess().getQueryLiteralParserRuleCall_5(), currentNode); 
    }
    this_QueryLiteral_5=ruleQueryLiteral
    { 
        $current = $this_QueryLiteral_5.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueLiteralAccess().getThisLiteralParserRuleCall_6(), currentNode); 
    }
    this_ThisLiteral_6=ruleThisLiteral
    { 
        $current = $this_ThisLiteral_6.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueLiteralAccess().getUnitLiteralParserRuleCall_7(), currentNode); 
    }
    this_UnitLiteral_7=ruleUnitLiteral
    { 
        $current = $this_UnitLiteral_7.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBooleanLiteralRule(), currentNode); }
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current; } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_val_1=('true' 
    {
        createLeafNode(grammarAccess.getBooleanLiteralAccess().getValTrueKeyword_1_0_0(), "val"); 
    }


    |'false' 
    {
        createLeafNode(grammarAccess.getBooleanLiteralAccess().getValFalseKeyword_1_0_1(), "val"); 
    }

)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "val", /* lv_val_1 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getIntegerLiteralRule(), currentNode); }
	 iv_ruleIntegerLiteral=ruleIntegerLiteral 
	 { $current=$iv_ruleIntegerLiteral.current; } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getIntegerLiteralAccess().getIntegerLiteralAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getIntegerLiteralAccess().getIntegerLiteralAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getIntegerLiteralAccess().getValIntValueParserRuleCall_1_0(), currentNode); 
	    }
	    lv_val_1=ruleIntValue 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "val", lv_val_1, "IntValue", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleNullLiteral
entryRuleNullLiteral returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getNullLiteralRule(), currentNode); }
	 iv_ruleNullLiteral=ruleNullLiteral 
	 { $current=$iv_ruleNullLiteral.current; } 
	 EOF 
;

// Rule NullLiteral
ruleNullLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getNullLiteralAccess().getNullLiteralAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getNullLiteralAccess().getNullLiteralAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_val_1='null' 
    {
        createLeafNode(grammarAccess.getNullLiteralAccess().getValNullKeyword_1_0(), "val"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNullLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "val", /* lv_val_1 */ input.LT(-1), "null", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleThisLiteral
entryRuleThisLiteral returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getThisLiteralRule(), currentNode); }
	 iv_ruleThisLiteral=ruleThisLiteral 
	 { $current=$iv_ruleThisLiteral.current; } 
	 EOF 
;

// Rule ThisLiteral
ruleThisLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getThisLiteralAccess().getThisLiteralAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getThisLiteralAccess().getThisLiteralAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_val_1='this' 
    {
        createLeafNode(grammarAccess.getThisLiteralAccess().getValThisKeyword_1_0(), "val"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getThisLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "val", /* lv_val_1 */ input.LT(-1), "this", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleSuperLiteral
entryRuleSuperLiteral returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSuperLiteralRule(), currentNode); }
	 iv_ruleSuperLiteral=ruleSuperLiteral 
	 { $current=$iv_ruleSuperLiteral.current; } 
	 EOF 
;

// Rule SuperLiteral
ruleSuperLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getSuperLiteralAccess().getSuperLiteralAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSuperLiteralAccess().getSuperLiteralAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_val_1='super' 
    {
        createLeafNode(grammarAccess.getSuperLiteralAccess().getValSuperKeyword_1_0(), "val"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSuperLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "val", /* lv_val_1 */ input.LT(-1), "super", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleUnitLiteral
entryRuleUnitLiteral returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getUnitLiteralRule(), currentNode); }
	 iv_ruleUnitLiteral=ruleUnitLiteral 
	 { $current=$iv_ruleUnitLiteral.current; } 
	 EOF 
;

// Rule UnitLiteral
ruleUnitLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getUnitLiteralAccess().getUnitLiteralAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getUnitLiteralAccess().getUnitLiteralAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_val_1='unit' 
    {
        createLeafNode(grammarAccess.getUnitLiteralAccess().getValUnitKeyword_1_0(), "val"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "val", /* lv_val_1 */ input.LT(-1), "unit", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getStringLiteralRule(), currentNode); }
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current; } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getStringLiteralAccess().getStringLiteralAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getStringLiteralAccess().getStringLiteralAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_val_1=	RULE_STRING
	{
		createLeafNode(grammarAccess.getStringLiteralAccess().getValSTRINGTerminalRuleCall_1_0(), "val"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "val", lv_val_1, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleRealLiteral
entryRuleRealLiteral returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRealLiteralRule(), currentNode); }
	 iv_ruleRealLiteral=ruleRealLiteral 
	 { $current=$iv_ruleRealLiteral.current; } 
	 EOF 
;

// Rule RealLiteral
ruleRealLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getRealLiteralAccess().getRealLiteralAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getRealLiteralAccess().getRealLiteralAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRealLiteralAccess().getValRealValueParserRuleCall_1_0(), currentNode); 
	    }
	    lv_val_1=ruleRealValue 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRealLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "val", lv_val_1, "RealValue", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleRealValue
entryRuleRealValue returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRealValueRule(), currentNode); } 
	 iv_ruleRealValue=ruleRealValue 
	 { $current=$iv_ruleRealValue.current.getText(); }  
	 EOF 
;

// Rule RealValue
ruleRealValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getRealValueAccess().getREALParserRuleCall(), currentNode); 
    }
    this_REAL_0=ruleREAL    {
		$current.merge(this_REAL_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    ;





// Entry rule entryRuleIntValue
entryRuleIntValue returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getIntValueRule(), currentNode); } 
	 iv_ruleIntValue=ruleIntValue 
	 { $current=$iv_ruleIntValue.current.getText(); }  
	 EOF 
;

// Rule IntValue
ruleIntValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(grammarAccess.getIntValueAccess().getINTTerminalRuleCall_0(), null); 
    }

    |    this_HEX_1=RULE_HEX    {
		$current.merge(this_HEX_1);
    }

    { 
    createLeafNode(grammarAccess.getIntValueAccess().getHEXTerminalRuleCall_1(), null); 
    }
)
    ;





// Entry rule entryRuleRegexpLiteral
entryRuleRegexpLiteral returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRegexpLiteralRule(), currentNode); }
	 iv_ruleRegexpLiteral=ruleRegexpLiteral 
	 { $current=$iv_ruleRegexpLiteral.current; } 
	 EOF 
;

// Rule RegexpLiteral
ruleRegexpLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getRegexpLiteralAccess().getRegexpLiteralAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getRegexpLiteralAccess().getRegexpLiteralAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    lv_val_1=	RULE_REGEX
	{
		createLeafNode(grammarAccess.getRegexpLiteralAccess().getValREGEXTerminalRuleCall_1_0(), "val"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRegexpLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "val", lv_val_1, "REGEX", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleQueryLiteral
entryRuleQueryLiteral returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getQueryLiteralRule(), currentNode); }
	 iv_ruleQueryLiteral=ruleQueryLiteral 
	 { $current=$iv_ruleQueryLiteral.current; } 
	 EOF 
;

// Rule QueryLiteral
ruleQueryLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getQueryLiteralAccess().getQueryLiteralAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getQueryLiteralAccess().getQueryLiteralAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getQueryLiteralAccess().getValQueryParserRuleCall_1_0(), currentNode); 
	    }
	    lv_val_1=ruleQuery 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQueryLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "val", lv_val_1, "Query", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleParanthesizedExpression
entryRuleParanthesizedExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getParanthesizedExpressionRule(), currentNode); }
	 iv_ruleParanthesizedExpression=ruleParanthesizedExpression 
	 { $current=$iv_ruleParanthesizedExpression.current; } 
	 EOF 
;

// Rule ParanthesizedExpression
ruleParanthesizedExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('(' 
    {
        createLeafNode(grammarAccess.getParanthesizedExpressionAccess().getLeftParenthesisKeyword_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getParanthesizedExpressionAccess().getExpressionParserRuleCall_1(), currentNode); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        currentNode = currentNode.getParent();
    }
')' 
    {
        createLeafNode(grammarAccess.getParanthesizedExpressionAccess().getRightParenthesisKeyword_2(), null); 
    }
);





// Entry rule entryRuleVersion
entryRuleVersion returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getVersionRule(), currentNode); }
	 iv_ruleVersion=ruleVersion 
	 { $current=$iv_ruleVersion.current; } 
	 EOF 
;

// Rule Version
ruleVersion returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getVersionAccess().getVersionVersionLiteralParserRuleCall_0(), currentNode); 
	    }
	    lv_version_0=ruleVersionLiteral 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVersionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "version", lv_version_0, "VersionLiteral", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
);





// Entry rule entryRuleVersionLiteral
entryRuleVersionLiteral returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getVersionLiteralRule(), currentNode); } 
	 iv_ruleVersionLiteral=ruleVersionLiteral 
	 { $current=$iv_ruleVersionLiteral.current.getText(); }  
	 EOF 
;

// Rule VersionLiteral
ruleVersionLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    createLeafNode(grammarAccess.getVersionLiteralAccess().getSTRINGTerminalRuleCall_0(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getVersionLiteralAccess().getAlfanumSymParserRuleCall_1(), currentNode); 
    }
    this_AlfanumSym_1=ruleAlfanumSym    {
		$current.merge(this_AlfanumSym_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleVersionRange
entryRuleVersionRange returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getVersionRangeRule(), currentNode); }
	 iv_ruleVersionRange=ruleVersionRange 
	 { $current=$iv_ruleVersionRange.current; } 
	 EOF 
;

// Rule VersionRange
ruleVersionRange returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getVersionRangeAccess().getRangeVersionRangeLiteralParserRuleCall_0(), currentNode); 
	    }
	    lv_range_0=ruleVersionRangeLiteral 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVersionRangeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "range", lv_range_0, "VersionRangeLiteral", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
);





// Entry rule entryRuleVersionRangeLiteral
entryRuleVersionRangeLiteral returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getVersionRangeLiteralRule(), currentNode); } 
	 iv_ruleVersionRangeLiteral=ruleVersionRangeLiteral 
	 { $current=$iv_ruleVersionRangeLiteral.current.getText(); }  
	 EOF 
;

// Rule VersionRangeLiteral
ruleVersionRangeLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(((
	kw='[' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getVersionRangeLiteralAccess().getLeftSquareBracketKeyword_0_0_0(), null); 
    }

    |
	kw='(' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getVersionRangeLiteralAccess().getLeftParenthesisKeyword_0_0_1(), null); 
    }
)(    this_STRING_2=RULE_STRING    {
		$current.merge(this_STRING_2);
    }

    { 
    createLeafNode(grammarAccess.getVersionRangeLiteralAccess().getSTRINGTerminalRuleCall_0_1_0(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getVersionRangeLiteralAccess().getAlfanumSymParserRuleCall_0_1_1(), currentNode); 
    }
    this_AlfanumSym_3=ruleAlfanumSym    {
		$current.merge(this_AlfanumSym_3);
    }

    { 
        currentNode = currentNode.getParent();
    }
)(
	kw=',' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getVersionRangeLiteralAccess().getCommaKeyword_0_2_0(), null); 
    }
(    this_STRING_5=RULE_STRING    {
		$current.merge(this_STRING_5);
    }

    { 
    createLeafNode(grammarAccess.getVersionRangeLiteralAccess().getSTRINGTerminalRuleCall_0_2_1_0(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getVersionRangeLiteralAccess().getAlfanumSymParserRuleCall_0_2_1_1(), currentNode); 
    }
    this_AlfanumSym_6=ruleAlfanumSym    {
		$current.merge(this_AlfanumSym_6);
    }

    { 
        currentNode = currentNode.getParent();
    }
))?(
	kw=']' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getVersionRangeLiteralAccess().getRightSquareBracketKeyword_0_3_0(), null); 
    }

    |
	kw=')' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getVersionRangeLiteralAccess().getRightParenthesisKeyword_0_3_1(), null); 
    }
))
    |(    this_STRING_9=RULE_STRING    {
		$current.merge(this_STRING_9);
    }

    { 
    createLeafNode(grammarAccess.getVersionRangeLiteralAccess().getSTRINGTerminalRuleCall_1_0(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getVersionRangeLiteralAccess().getAlfanumSymParserRuleCall_1_1(), currentNode); 
    }
    this_AlfanumSym_10=ruleAlfanumSym    {
		$current.merge(this_AlfanumSym_10);
    }

    { 
        currentNode = currentNode.getParent();
    }
))
    ;





// Entry rule entryRuleQIDREF
entryRuleQIDREF returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getQIDREFRule(), currentNode); } 
	 iv_ruleQIDREF=ruleQIDREF 
	 { $current=$iv_ruleQIDREF.current.getText(); }  
	 EOF 
;

// Rule QIDREF
ruleQIDREF returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(((
	kw='super' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getQIDREFAccess().getSuperKeyword_0_0_0(), null); 
    }

    |((
	kw='unit' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getQIDREFAccess().getUnitKeyword_0_0_1_0_0(), null); 
    }

    |
	kw='this' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getQIDREFAccess().getThisKeyword_0_0_1_0_1(), null); 
    }
)(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getQIDREFAccess().getFullStopKeyword_0_0_1_1_0(), null); 
    }

	kw='super' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getQIDREFAccess().getSuperKeyword_0_0_1_1_1(), null); 
    }
)?))(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getQIDREFAccess().getFullStopKeyword_0_1_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getQIDREFAccess().getQIDParserRuleCall_0_1_1(), currentNode); 
    }
    this_QID_6=ruleQID    {
		$current.merge(this_QID_6);
    }

    { 
        currentNode = currentNode.getParent();
    }
)?)
    |
    { 
        currentNode=createCompositeNode(grammarAccess.getQIDREFAccess().getQIDParserRuleCall_1(), currentNode); 
    }
    this_QID_7=ruleQID    {
		$current.merge(this_QID_7);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleQID
entryRuleQID returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getQIDRule(), currentNode); } 
	 iv_ruleQID=ruleQID 
	 { $current=$iv_ruleQID.current.getText(); }  
	 EOF 
;

// Rule QID
ruleQID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
		myHiddenTokenState.restore();
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getQIDAccess().getIDTerminalRuleCall_0(), null); 
    }
(    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    createLeafNode(grammarAccess.getQIDAccess().getINTTerminalRuleCall_1_0(), null); 
    }

    |    this_HEX_2=RULE_HEX    {
		$current.merge(this_HEX_2);
    }

    { 
    createLeafNode(grammarAccess.getQIDAccess().getHEXTerminalRuleCall_1_1(), null); 
    }

    |    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    createLeafNode(grammarAccess.getQIDAccess().getIDTerminalRuleCall_1_2(), null); 
    }
)*(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getQIDAccess().getFullStopKeyword_2_0(), null); 
    }
    this_ID_5=RULE_ID    {
		$current.merge(this_ID_5);
    }

    { 
    createLeafNode(grammarAccess.getQIDAccess().getIDTerminalRuleCall_2_1(), null); 
    }
(    this_INT_6=RULE_INT    {
		$current.merge(this_INT_6);
    }

    { 
    createLeafNode(grammarAccess.getQIDAccess().getINTTerminalRuleCall_2_2_0(), null); 
    }

    |    this_HEX_7=RULE_HEX    {
		$current.merge(this_HEX_7);
    }

    { 
    createLeafNode(grammarAccess.getQIDAccess().getHEXTerminalRuleCall_2_2_1(), null); 
    }

    |    this_ID_8=RULE_ID    {
		$current.merge(this_ID_8);
    }

    { 
    createLeafNode(grammarAccess.getQIDAccess().getIDTerminalRuleCall_2_2_2(), null); 
    }
)*)*
    { 
        currentNode=createCompositeNode(grammarAccess.getQIDAccess().getHIDDENBUGParserRuleCall_3(), currentNode); 
    }
    this_HIDDENBUG_9=ruleHIDDENBUG    {
		$current.merge(this_HIDDENBUG_9);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleHIDDENBUG
entryRuleHIDDENBUG returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getHIDDENBUGRule(), currentNode); } 
	 iv_ruleHIDDENBUG=ruleHIDDENBUG 
	 { $current=$iv_ruleHIDDENBUG.current.getText(); }  
	 EOF 
;

// Rule HIDDENBUG
ruleHIDDENBUG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT", "RULE_ML_COMMENT");
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
		myHiddenTokenState.restore();
    }:
(
	kw='~~~~~' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getHIDDENBUGAccess().getTildeTildeTildeTildeTildeKeyword(), null); 
    }
)?
    ;





// Entry rule entryRulePropertyName
entryRulePropertyName returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPropertyNameRule(), currentNode); } 
	 iv_rulePropertyName=rulePropertyName 
	 { $current=$iv_rulePropertyName.current.getText(); }  
	 EOF 
;

// Rule PropertyName
rulePropertyName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
    this_PID_0=RULE_PID    {
		$current.merge(this_PID_0);
    }

    { 
    createLeafNode(grammarAccess.getPropertyNameAccess().getPIDTerminalRuleCall(), null); 
    }

    ;





// Entry rule entryRuleEscapedQualifiedName
entryRuleEscapedQualifiedName returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getEscapedQualifiedNameRule(), currentNode); } 
	 iv_ruleEscapedQualifiedName=ruleEscapedQualifiedName 
	 { $current=$iv_ruleEscapedQualifiedName.current.getText(); }  
	 EOF 
;

// Rule EscapedQualifiedName
ruleEscapedQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    createLeafNode(grammarAccess.getEscapedQualifiedNameAccess().getSTRINGTerminalRuleCall_0(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getEscapedQualifiedNameAccess().getQIDParserRuleCall_1(), currentNode); 
    }
    this_QID_1=ruleQID    {
		$current.merge(this_QID_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleInterfaceName
entryRuleInterfaceName returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getInterfaceNameRule(), currentNode); } 
	 iv_ruleInterfaceName=ruleInterfaceName 
	 { $current=$iv_ruleInterfaceName.current.getText(); }  
	 EOF 
;

// Rule InterfaceName
ruleInterfaceName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getInterfaceNameAccess().getQIDParserRuleCall(), currentNode); 
    }
    this_QID_0=ruleQID    {
		$current.merge(this_QID_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    ;





// Entry rule entryRuleCompoundName
entryRuleCompoundName returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCompoundNameRule(), currentNode); } 
	 iv_ruleCompoundName=ruleCompoundName 
	 { $current=$iv_ruleCompoundName.current.getText(); }  
	 EOF 
;

// Rule CompoundName
ruleCompoundName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getCompoundNameAccess().getEscapedQualifiedNameParserRuleCall_0(), currentNode); 
    }
    this_EscapedQualifiedName_0=ruleEscapedQualifiedName    {
		$current.merge(this_EscapedQualifiedName_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

	kw='/' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getCompoundNameAccess().getSolidusKeyword_1(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getCompoundNameAccess().getEscapedQualifiedNameParserRuleCall_2(), currentNode); 
    }
    this_EscapedQualifiedName_2=ruleEscapedQualifiedName    {
		$current.merge(this_EscapedQualifiedName_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleUnitName
entryRuleUnitName returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getUnitNameRule(), currentNode); } 
	 iv_ruleUnitName=ruleUnitName 
	 { $current=$iv_ruleUnitName.current.getText(); }  
	 EOF 
;

// Rule UnitName
ruleUnitName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getUnitNameAccess().getEscapedQualifiedNameParserRuleCall(), currentNode); 
    }
    this_EscapedQualifiedName_0=ruleEscapedQualifiedName    {
		$current.merge(this_EscapedQualifiedName_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    ;





// Entry rule entryRulePartName
entryRulePartName returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPartNameRule(), currentNode); } 
	 iv_rulePartName=rulePartName 
	 { $current=$iv_rulePartName.current.getText(); }  
	 EOF 
;

// Rule PartName
rulePartName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getPartNameAccess().getEscapedQualifiedNameParserRuleCall(), currentNode); 
    }
    this_EscapedQualifiedName_0=ruleEscapedQualifiedName    {
		$current.merge(this_EscapedQualifiedName_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    ;





// Entry rule entryRuleSeparator
entryRuleSeparator returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSeparatorRule(), currentNode); } 
	 iv_ruleSeparator=ruleSeparator 
	 { $current=$iv_ruleSeparator.current.getText(); }  
	 EOF 
;

// Rule Separator
ruleSeparator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getFullStopKeyword_0(), null); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getHyphenMinusKeyword_1(), null); 
    }

    |
	kw='!' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getExclamationMarkKeyword_2(), null); 
    }

    |
	kw='@' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getCommercialAtKeyword_3(), null); 
    }

    |
	kw='$' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getDollarSignKeyword_4(), null); 
    }

    |
	kw='%' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getPercentSignKeyword_5(), null); 
    }

    |
	kw='&' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getAmpersandKeyword_6(), null); 
    }

    |
	kw='+' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getPlusSignKeyword_7(), null); 
    }

    |
	kw='=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getEqualsSignKeyword_8(), null); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getAsteriskKeyword_9(), null); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getLessThanSignKeyword_10(), null); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getGreaterThanSignKeyword_11(), null); 
    }

    |
	kw=':' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getColonKeyword_12(), null); 
    }

    |
	kw='?' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getQuestionMarkKeyword_13(), null); 
    }
)
    ;





// Entry rule entryRuleAlfanumSym
entryRuleAlfanumSym returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAlfanumSymRule(), currentNode); } 
	 iv_ruleAlfanumSym=ruleAlfanumSym 
	 { $current=$iv_ruleAlfanumSym.current.getText(); }  
	 EOF 
;

// Rule AlfanumSym
ruleAlfanumSym returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
((    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getAlfanumSymAccess().getIDTerminalRuleCall_0_0(), null); 
    }

    |    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    createLeafNode(grammarAccess.getAlfanumSymAccess().getINTTerminalRuleCall_0_1(), null); 
    }

    |    this_HEX_2=RULE_HEX    {
		$current.merge(this_HEX_2);
    }

    { 
    createLeafNode(grammarAccess.getAlfanumSymAccess().getHEXTerminalRuleCall_0_2(), null); 
    }

    |    this_EXT_INT_3=RULE_EXT_INT    {
		$current.merge(this_EXT_INT_3);
    }

    { 
    createLeafNode(grammarAccess.getAlfanumSymAccess().getEXT_INTTerminalRuleCall_0_3(), null); 
    }
)(
    { 
        currentNode=createCompositeNode(grammarAccess.getAlfanumSymAccess().getSeparatorParserRuleCall_1_0(), currentNode); 
    }
    this_Separator_4=ruleSeparator    {
		$current.merge(this_Separator_4);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |    this_ID_5=RULE_ID    {
		$current.merge(this_ID_5);
    }

    { 
    createLeafNode(grammarAccess.getAlfanumSymAccess().getIDTerminalRuleCall_1_1(), null); 
    }

    |    this_INT_6=RULE_INT    {
		$current.merge(this_INT_6);
    }

    { 
    createLeafNode(grammarAccess.getAlfanumSymAccess().getINTTerminalRuleCall_1_2(), null); 
    }

    |    this_HEX_7=RULE_HEX    {
		$current.merge(this_HEX_7);
    }

    { 
    createLeafNode(grammarAccess.getAlfanumSymAccess().getHEXTerminalRuleCall_1_3(), null); 
    }

    |    this_EXT_INT_8=RULE_EXT_INT    {
		$current.merge(this_EXT_INT_8);
    }

    { 
    createLeafNode(grammarAccess.getAlfanumSymAccess().getEXT_INTTerminalRuleCall_1_4(), null); 
    }
)*)
    ;





// Entry rule entryRuleREAL
entryRuleREAL returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getREALRule(), currentNode); } 
	 iv_ruleREAL=ruleREAL 
	 { $current=$iv_ruleREAL.current.getText(); }  
	 EOF 
;

// Rule REAL
ruleREAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
		myHiddenTokenState.restore();
    }:
((    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(grammarAccess.getREALAccess().getINTTerminalRuleCall_0(), null); 
    }
)?
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getREALAccess().getFullStopKeyword_1(), null); 
    }
(    this_EXT_INT_2=RULE_EXT_INT    {
		$current.merge(this_EXT_INT_2);
    }

    { 
    createLeafNode(grammarAccess.getREALAccess().getEXT_INTTerminalRuleCall_2_0(), null); 
    }

    |    this_INT_3=RULE_INT    {
		$current.merge(this_INT_3);
    }

    { 
    createLeafNode(grammarAccess.getREALAccess().getINTTerminalRuleCall_2_1(), null); 
    }
)
    { 
        currentNode=createCompositeNode(grammarAccess.getREALAccess().getHIDDENBUGParserRuleCall_3(), currentNode); 
    }
    this_HIDDENBUG_4=ruleHIDDENBUG    {
		$current.merge(this_HIDDENBUG_4);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Rule SelectorOperator
ruleSelectorOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'.' 
	{
        $current = grammarAccess.getSelectorOperatorAccess().getTHISEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getSelectorOperatorAccess().getTHISEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'..' 
	{
        $current = grammarAccess.getSelectorOperatorAccess().getPARENTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getSelectorOperatorAccess().getPARENTEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'*' 
	{
        $current = grammarAccess.getSelectorOperatorAccess().getCHILDRENEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getSelectorOperatorAccess().getCHILDRENEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'**' 
	{
        $current = grammarAccess.getSelectorOperatorAccess().getANSCESTORSEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getSelectorOperatorAccess().getANSCESTORSEnumLiteralDeclaration_3(), null); 
    }
));



// Rule AssignmentOperator
ruleAssignmentOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getSETEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getSETEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'+=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getSET_PLUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getSET_PLUSEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'-=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getSET_MINUSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getSET_MINUSEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'*=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getSET_MULEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getSET_MULEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'/=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getSET_DIVEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getSET_DIVEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'%=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getSET_MODEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getSET_MODEnumLiteralDeclaration_5(), null); 
    }
)
    |(	'&=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getSET_ANDEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getSET_ANDEnumLiteralDeclaration_6(), null); 
    }
)
    |(	'^=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getSET_XOREnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getSET_XOREnumLiteralDeclaration_7(), null); 
    }
)
    |(	'|=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getSET_OREnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getSET_OREnumLiteralDeclaration_8(), null); 
    }
)
    |(	'<<=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getSET_LSHIFTEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getSET_LSHIFTEnumLiteralDeclaration_9(), null); 
    }
)
    |(	'>>=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getSET_RSHIFTEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getSET_RSHIFTEnumLiteralDeclaration_10(), null); 
    }
)
    |(	'>>>=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getSET_RSHIFT_0EnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getSET_RSHIFT_0EnumLiteralDeclaration_11(), null); 
    }
));



// Rule RelationalOperator
ruleRelationalOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'~=' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getEQ_MATCHESEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getEQ_MATCHESEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'==' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getEQEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getEQEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'===' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getEQ_IDENTITYEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getEQ_IDENTITYEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'!=' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getEQ_NOTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getEQ_NOTEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'!==' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getEQ_NOT_IDENTITYEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getEQ_NOT_IDENTITYEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'>=' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getEQ_GTEQEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getEQ_GTEQEnumLiteralDeclaration_5(), null); 
    }
)
    |(	'<=' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getEQ_LEEQEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getEQ_LEEQEnumLiteralDeclaration_6(), null); 
    }
)
    |(	'>' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getEQ_GTEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getEQ_GTEnumLiteralDeclaration_7(), null); 
    }
)
    |(	'<' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getEQ_LTEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getEQ_LTEnumLiteralDeclaration_8(), null); 
    }
)
    |(	'instanceof' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getEQ_INSTANCEOFEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getEQ_INSTANCEOFEnumLiteralDeclaration_9(), null); 
    }
));



// Rule SetOperator
ruleSetOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'..' 
	{
        $current = grammarAccess.getSetOperatorAccess().getSEQUENCEEnumLiteralDeclaration().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getSetOperatorAccess().getSEQUENCEEnumLiteralDeclaration(), null); 
    }
);



// Rule Visibility
ruleVisibility returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'public' 
	{
        $current = grammarAccess.getVisibilityAccess().getPublicEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getVisibilityAccess().getPublicEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'private' 
	{
        $current = grammarAccess.getVisibilityAccess().getPrivateEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getVisibilityAccess().getPrivateEnumLiteralDeclaration_1(), null); 
    }
));



// Rule ExecutionMode
ruleExecutionMode returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'parallel' 
	{
        $current = grammarAccess.getExecutionModeAccess().getParallelEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getExecutionModeAccess().getParallelEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'sequential' 
	{
        $current = grammarAccess.getExecutionModeAccess().getSequentialEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getExecutionModeAccess().getSequentialEnumLiteralDeclaration_1(), null); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*;

RULE_PID : '$' RULE_ID ('.' RULE_ID)*;

RULE_REGEX : '~/' ('\\' ('/'|'f'|'n'|'r'|'t'|'v'|'\\'|'.'|'*'|'+'|'?'|'w'|'W'|'s'|'S'|'d'|'D'|'b'|'|'|'{'|'}'|'['|']'|'('|')'|'0'..'7' '0'..'7' '0'..'7'|'x' ('0'..'9'|'a'..'f'|'A'..'F') ('0'..'9'|'a'..'f'|'A'..'F')|'c' 'A'..'Z')|~(('\\'|'/'|' '|'\t'|'\r'|'\n')))* '/' ('g'|'m'|'i')?;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'x'|'0'|'"'|'\''|'\\')|~(('\\'|'"'|'\r'|'\n')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'x'|'0'|'"'|'\''|'\\')|~(('\\'|'\''|'\r'|'\n')))* '\'');

RULE_DOCUMENTATION : '/**' ( options {greedy=false;} : . )*'*/';

RULE_ML_COMMENT : '/*' ~('*') ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_HEX : '0' ('x'|'X') ('0'..'9'|'a'..'f'|'A'..'F')+;

RULE_INT : ('0'..'9')+;

RULE_EXT_INT : RULE_INT ('e'|'E') ('-'|'+') RULE_INT;

RULE_ANY_OTHER : .;


