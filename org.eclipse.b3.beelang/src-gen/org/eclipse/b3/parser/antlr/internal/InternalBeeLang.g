/*
* generated by Xtext
*/
grammar InternalBeeLang;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.eclipse.b3.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.b3.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.b3.services.BeeLangGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private BeeLangGrammarAccess grammarAccess;
 	
    public InternalBeeLangParser(TokenStream input, IAstFactory factory, BeeLangGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/b3/parser/antlr/internal/InternalBeeLang.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "BeeModel";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleBeeModel
entryRuleBeeModel returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT", "RULE_ML_COMMENT");
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getBeeModelRule(), currentNode); }
	 iv_ruleBeeModel=ruleBeeModel 
	 { $current=$iv_ruleBeeModel.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule BeeModel
ruleBeeModel returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT", "RULE_ML_COMMENT");
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBeeModelAccess().getImportsImportParserRuleCall_0_0(), currentNode); 
	    }
		lv_imports_0_0=ruleImport		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBeeModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"imports",
	        		lv_imports_0_0, 
	        		"Import", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBeeModelAccess().getFunctionsFunctionParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_functions_1_0=ruleFunction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBeeModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"functions",
	        		lv_functions_1_0, 
	        		"Function", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBeeModelAccess().getConcernConcern_NamedParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_concern_2_0=ruleConcern_Named		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBeeModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"concern",
	        		lv_concern_2_0, 
	        		"Concern_Named", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(	'properties' 
    {
        createLeafNode(grammarAccess.getBeeModelAccess().getPropertiesKeyword_1_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBeeModelAccess().getPropertySetsPropertySet_NamedParserRuleCall_1_2_1_0(), currentNode); 
	    }
		lv_propertySets_4_0=rulePropertySet_Named		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBeeModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"propertySets",
	        		lv_propertySets_4_0, 
	        		"PropertySet_Named", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBeeModelAccess().getBodyUnitParserRuleCall_2_0(), currentNode); 
	    }
		lv_body_5_0=ruleUnit		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBeeModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"body",
	        		lv_body_5_0, 
	        		"Unit", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getImportRule(), currentNode); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getImportAccess().getB3JavaImportAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getImportAccess().getB3JavaImportAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_reexport_1_0=	'reexport' 
    {
        createLeafNode(grammarAccess.getImportAccess().getReexportReexportKeyword_1_0(), "reexport"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImportRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "reexport", true, "reexport", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?	'import' 
    {
        createLeafNode(grammarAccess.getImportAccess().getImportKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getImportAccess().getQualifiedNameQIDParserRuleCall_3_0(), currentNode); 
	    }
		lv_qualifiedName_3_0=ruleQID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImportRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"qualifiedName",
	        		lv_qualifiedName_3_0, 
	        		"QID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'as' 
    {
        createLeafNode(grammarAccess.getImportAccess().getAsKeyword_4_0(), null); 
    }
(
(
		lv_name_5_0=RULE_ID
		{
			createLeafNode(grammarAccess.getImportAccess().getNameIDTerminalRuleCall_4_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImportRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_5_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?	';' 
    {
        createLeafNode(grammarAccess.getImportAccess().getSemicolonKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleUnit
entryRuleUnit returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnitRule(), currentNode); }
	 iv_ruleUnit=ruleUnit 
	 { $current=$iv_ruleUnit.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Unit
ruleUnit returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getUnitAccess().getBuildUnitAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getUnitAccess().getBuildUnitAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_documentation_1_0=RULE_DOCUMENTATION
		{
			createLeafNode(grammarAccess.getUnitAccess().getDocumentationDOCUMENTATIONTerminalRuleCall_1_0(), "documentation"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"documentation",
	        		lv_documentation_1_0, 
	        		"DOCUMENTATION", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getExecutionModeExecutionModeEnumRuleCall_2_0(), currentNode); 
	    }
		lv_executionMode_2_0=ruleExecutionMode		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"executionMode",
	        		lv_executionMode_2_0, 
	        		"ExecutionMode", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	'unit' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getUnitKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getNameUnitNameParserRuleCall_4_0(), currentNode); 
	    }
		lv_name_4_0=ruleUnitName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"UnitName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(	'version' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getVersionKeyword_5_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getVersionVersionLiteralParserRuleCall_5_1_0(), currentNode); 
	    }
		lv_version_6_0=ruleVersionLiteral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"version",
	        		lv_version_6_0, 
	        		"VersionLiteral", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'implements' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getImplementsKeyword_6_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getImplementsSimpleTypeRefParserRuleCall_6_1_0(), currentNode); 
	    }
		lv_implements_8_0=ruleSimpleTypeRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"implements",
	        		lv_implements_8_0, 
	        		"SimpleTypeRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getCommaKeyword_6_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getImplementsSimpleTypeRefParserRuleCall_6_2_1_0(), currentNode); 
	    }
		lv_implements_10_0=ruleSimpleTypeRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"implements",
	        		lv_implements_10_0, 
	        		"SimpleTypeRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	'{' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_7(), null); 
    }
(	'default' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getDefaultKeyword_8_0(), null); 
    }
	'properties' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getPropertiesKeyword_8_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getDefaultPropertiesPropertySetParserRuleCall_8_2_0(), currentNode); 
	    }
		lv_defaultProperties_14_0=rulePropertySet		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"defaultProperties",
	        		lv_defaultProperties_14_0, 
	        		"PropertySet", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?((	'provides' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getProvidesKeyword_9_0_0(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_9_0_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getUnitProvidedCapabilitiesProvidedCapabilityParserRuleCall_9_0_2_0_0(), currentNode); 
	    }
		lv_unitProvidedCapabilities_17_0=ruleProvidedCapability		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"unitProvidedCapabilities",
	        		lv_unitProvidedCapabilities_17_0, 
	        		"ProvidedCapability", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getSemicolonKeyword_9_0_2_1(), null); 
    }
)+	'}' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_9_0_3(), null); 
    }
)
    |(	'provides' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getProvidesKeyword_9_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getUnitProvidedCapabilitiesProvidedCapabilityParserRuleCall_9_1_1_0(), currentNode); 
	    }
		lv_unitProvidedCapabilities_21_0=ruleProvidedCapability		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"unitProvidedCapabilities",
	        		lv_unitProvidedCapabilities_21_0, 
	        		"ProvidedCapability", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getSemicolonKeyword_9_1_2(), null); 
    }
)
    |(	'requires' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRequiresKeyword_9_2_0(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_9_2_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getRequiredCapabilitiesRequiredCapabilityParserRuleCall_9_2_2_0_0(), currentNode); 
	    }
		lv_requiredCapabilities_25_0=ruleRequiredCapability		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"requiredCapabilities",
	        		lv_requiredCapabilities_25_0, 
	        		"RequiredCapability", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getSemicolonKeyword_9_2_2_1(), null); 
    }
)+	'}' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_9_2_3(), null); 
    }
)
    |(	'requires' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRequiresKeyword_9_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getRequiredCapabilitiesRequiredCapabilityParserRuleCall_9_3_1_0(), currentNode); 
	    }
		lv_requiredCapabilities_29_0=ruleRequiredCapability		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"requiredCapabilities",
	        		lv_requiredCapabilities_29_0, 
	        		"RequiredCapability", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getSemicolonKeyword_9_3_2(), null); 
    }
)
    |(	'env' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getEnvKeyword_9_4_0(), null); 
    }
	'requires' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRequiresKeyword_9_4_1(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_9_4_2(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getMetaRequiredCapabilitiesRequiredCapabilityParserRuleCall_9_4_3_0_0(), currentNode); 
	    }
		lv_metaRequiredCapabilities_34_0=ruleRequiredCapability		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"metaRequiredCapabilities",
	        		lv_metaRequiredCapabilities_34_0, 
	        		"RequiredCapability", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getSemicolonKeyword_9_4_3_1(), null); 
    }
)+	'}' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_9_4_4(), null); 
    }
)
    |(	'env' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getEnvKeyword_9_5_0(), null); 
    }
	'requires' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRequiresKeyword_9_5_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getMetaRequiredCapabilitiesRequiredCapabilityParserRuleCall_9_5_2_0(), currentNode); 
	    }
		lv_metaRequiredCapabilities_39_0=ruleRequiredCapability		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"metaRequiredCapabilities",
	        		lv_metaRequiredCapabilities_39_0, 
	        		"RequiredCapability", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getSemicolonKeyword_9_5_3(), null); 
    }
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getConcernsConcern_NamedParserRuleCall_9_6_0(), currentNode); 
	    }
		lv_concerns_41_0=ruleConcern_Named		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"concerns",
	        		lv_concerns_41_0, 
	        		"Concern_Named", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(	'sequential' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getSequentialKeyword_9_7_0(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_9_7_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getSynchronizationsSynchronizationParserRuleCall_9_7_2_0(), currentNode); 
	    }
		lv_synchronizations_44_0=ruleSynchronization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"synchronizations",
	        		lv_synchronizations_44_0, 
	        		"Synchronization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+	'}' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_9_7_3(), null); 
    }
)
    |(	'sequential' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getSequentialKeyword_9_8_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getSynchronizationsSynchronizationParserRuleCall_9_8_1_0(), currentNode); 
	    }
		lv_synchronizations_47_0=ruleSynchronization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"synchronizations",
	        		lv_synchronizations_47_0, 
	        		"Synchronization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getBuildersBuilderParserRuleCall_9_9_0(), currentNode); 
	    }
		lv_builders_48_0=ruleBuilder		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"builders",
	        		lv_builders_48_0, 
	        		"Builder", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getFunctionsFunctionParserRuleCall_9_10_0(), currentNode); 
	    }
		lv_functions_49_0=ruleFunction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"functions",
	        		lv_functions_49_0, 
	        		"Function", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(	'repositories' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRepositoriesKeyword_9_11_0(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_9_11_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getRepositoriesRepositoryConfigurationParserRuleCall_9_11_2_0(), currentNode); 
	    }
		lv_repositories_52_0=ruleRepositoryConfiguration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"repositories",
	        		lv_repositories_52_0, 
	        		"RepositoryConfiguration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_9_11_3(), null); 
    }
)
    |(	'properties' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getPropertiesKeyword_9_12_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getPropertySetsPropertySet_NamedParserRuleCall_9_12_1_0(), currentNode); 
	    }
		lv_propertySets_55_0=rulePropertySet_Named		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"propertySets",
	        		lv_propertySets_55_0, 
	        		"PropertySet_Named", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'containers' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getContainersKeyword_9_13_0(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_9_13_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnitAccess().getContainersContainerConfigurationParserRuleCall_9_13_2_0(), currentNode); 
	    }
		lv_containers_58_0=ruleContainerConfiguration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"containers",
	        		lv_containers_58_0, 
	        		"ContainerConfiguration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_9_13_3(), null); 
    }
))*	'}' 
    {
        createLeafNode(grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_10(), null); 
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleProvidedCapability
entryRuleProvidedCapability returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getProvidedCapabilityRule(), currentNode); }
	 iv_ruleProvidedCapability=ruleProvidedCapability 
	 { $current=$iv_ruleProvidedCapability.current; } 
	 EOF 
;

// Rule ProvidedCapability
ruleProvidedCapability returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getProvidedCapabilityAccess().getVersionedCapabilityAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getProvidedCapabilityAccess().getVersionedCapabilityAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'when' 
    {
        createLeafNode(grammarAccess.getProvidedCapabilityAccess().getWhenKeyword_1_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getProvidedCapabilityAccess().getLeftParenthesisKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProvidedCapabilityAccess().getCondExprExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_condExpr_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProvidedCapabilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condExpr",
	        		lv_condExpr_3_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getProvidedCapabilityAccess().getRightParenthesisKeyword_1_3(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProvidedCapabilityAccess().getNameSpaceInterfaceNameParserRuleCall_2_0(), currentNode); 
	    }
		lv_nameSpace_5_0=ruleInterfaceName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProvidedCapabilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"nameSpace",
	        		lv_nameSpace_5_0, 
	        		"InterfaceName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'/' 
    {
        createLeafNode(grammarAccess.getProvidedCapabilityAccess().getSolidusKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProvidedCapabilityAccess().getNameCapabilityNameParserRuleCall_4_0(), currentNode); 
	    }
		lv_name_7_0=ruleCapabilityName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProvidedCapabilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_7_0, 
	        		"CapabilityName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'/' 
    {
        createLeafNode(grammarAccess.getProvidedCapabilityAccess().getSolidusKeyword_5_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProvidedCapabilityAccess().getVersionVersionLiteralParserRuleCall_5_1_0(), currentNode); 
	    }
		lv_version_9_0=ruleVersionLiteral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProvidedCapabilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"version",
	        		lv_version_9_0, 
	        		"VersionLiteral", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleRequiredCapability
entryRuleRequiredCapability returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRequiredCapabilityRule(), currentNode); }
	 iv_ruleRequiredCapability=ruleRequiredCapability 
	 { $current=$iv_ruleRequiredCapability.current; } 
	 EOF 
;

// Rule RequiredCapability
ruleRequiredCapability returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getRequiredCapabilityAccess().getRequiredCapabilityAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getRequiredCapabilityAccess().getRequiredCapabilityAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'when' 
    {
        createLeafNode(grammarAccess.getRequiredCapabilityAccess().getWhenKeyword_1_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getRequiredCapabilityAccess().getLeftParenthesisKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRequiredCapabilityAccess().getCondExprExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_condExpr_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRequiredCapabilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condExpr",
	        		lv_condExpr_3_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getRequiredCapabilityAccess().getRightParenthesisKeyword_1_3(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRequiredCapabilityAccess().getNameSpaceInterfaceNameParserRuleCall_2_0(), currentNode); 
	    }
		lv_nameSpace_5_0=ruleInterfaceName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRequiredCapabilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"nameSpace",
	        		lv_nameSpace_5_0, 
	        		"InterfaceName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'/' 
    {
        createLeafNode(grammarAccess.getRequiredCapabilityAccess().getSolidusKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRequiredCapabilityAccess().getNameCapabilityNameParserRuleCall_4_0(), currentNode); 
	    }
		lv_name_7_0=ruleCapabilityName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRequiredCapabilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_7_0, 
	        		"CapabilityName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'/' 
    {
        createLeafNode(grammarAccess.getRequiredCapabilityAccess().getSolidusKeyword_5_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRequiredCapabilityAccess().getVersionRangeVersionRangeLiteralParserRuleCall_5_1_0(), currentNode); 
	    }
		lv_versionRange_9_0=ruleVersionRangeLiteral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRequiredCapabilityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"versionRange",
	        		lv_versionRange_9_0, 
	        		"VersionRangeLiteral", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleRequiredCapability_Unfiltered
entryRuleRequiredCapability_Unfiltered returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRequiredCapability_UnfilteredRule(), currentNode); }
	 iv_ruleRequiredCapability_Unfiltered=ruleRequiredCapability_Unfiltered 
	 { $current=$iv_ruleRequiredCapability_Unfiltered.current; } 
	 EOF 
;

// Rule RequiredCapability_Unfiltered
ruleRequiredCapability_Unfiltered returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getRequiredCapability_UnfilteredAccess().getRequiredCapabilityAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getRequiredCapability_UnfilteredAccess().getRequiredCapabilityAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRequiredCapability_UnfilteredAccess().getNameSpaceInterfaceNameParserRuleCall_1_0(), currentNode); 
	    }
		lv_nameSpace_1_0=ruleInterfaceName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRequiredCapability_UnfilteredRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"nameSpace",
	        		lv_nameSpace_1_0, 
	        		"InterfaceName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'/' 
    {
        createLeafNode(grammarAccess.getRequiredCapability_UnfilteredAccess().getSolidusKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRequiredCapability_UnfilteredAccess().getNameCapabilityNameParserRuleCall_3_0(), currentNode); 
	    }
		lv_name_3_0=ruleCapabilityName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRequiredCapability_UnfilteredRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_3_0, 
	        		"CapabilityName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'/' 
    {
        createLeafNode(grammarAccess.getRequiredCapability_UnfilteredAccess().getSolidusKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRequiredCapability_UnfilteredAccess().getVersionRangeVersionRangeLiteralParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_versionRange_5_0=ruleVersionRangeLiteral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRequiredCapability_UnfilteredRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"versionRange",
	        		lv_versionRange_5_0, 
	        		"VersionRangeLiteral", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleRequiredCapability_Unit
entryRuleRequiredCapability_Unit returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRequiredCapability_UnitRule(), currentNode); }
	 iv_ruleRequiredCapability_Unit=ruleRequiredCapability_Unit 
	 { $current=$iv_ruleRequiredCapability_Unit.current; } 
	 EOF 
;

// Rule RequiredCapability_Unit
ruleRequiredCapability_Unit returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getRequiredCapability_UnitAccess().getRequiredCapabilityAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getRequiredCapability_UnitAccess().getRequiredCapabilityAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRequiredCapability_UnitAccess().getNameQIDParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_name_1_0=ruleQID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRequiredCapability_UnitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"QID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |	'unit' 
    {
        createLeafNode(grammarAccess.getRequiredCapability_UnitAccess().getUnitKeyword_1_1(), null); 
    }
)?)
;





// Entry rule entryRulePropertySet_Named
entryRulePropertySet_Named returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPropertySet_NamedRule(), currentNode); }
	 iv_rulePropertySet_Named=rulePropertySet_Named 
	 { $current=$iv_rulePropertySet_Named.current; } 
	 EOF 
;

// Rule PropertySet_Named
rulePropertySet_Named returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getPropertySet_NamedAccess().getBPropertySetAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPropertySet_NamedAccess().getBPropertySetAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getPropertySet_NamedAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertySet_NamedRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'extends' 
    {
        createLeafNode(grammarAccess.getPropertySet_NamedAccess().getExtendsKeyword_2_0(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertySet_NamedRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertySet_NamedAccess().getExtendsBPropertySetCrossReference_2_1_0(), currentNode); 
	    }
		ruleQIDREF		{ 
	        currentNode = currentNode.getParent();
	    }

)
))?	'{' 
    {
        createLeafNode(grammarAccess.getPropertySet_NamedAccess().getLeftCurlyBracketKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertySet_NamedAccess().getOperationsPropertyOperationParserRuleCall_4_0(), currentNode); 
	    }
		lv_operations_5_0=rulePropertyOperation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertySet_NamedRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operations",
	        		lv_operations_5_0, 
	        		"PropertyOperation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getPropertySet_NamedAccess().getRightCurlyBracketKeyword_5(), null); 
    }
)
;





// Entry rule entryRulePropertySet
entryRulePropertySet returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPropertySetRule(), currentNode); }
	 iv_rulePropertySet=rulePropertySet 
	 { $current=$iv_rulePropertySet.current; } 
	 EOF 
;

// Rule PropertySet
rulePropertySet returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getPropertySetAccess().getBPropertySetAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPropertySetAccess().getBPropertySetAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'extends' 
    {
        createLeafNode(grammarAccess.getPropertySetAccess().getExtendsKeyword_1_0(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertySetRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertySetAccess().getExtendsBPropertySetCrossReference_1_1_0(), currentNode); 
	    }
		ruleQIDREF		{ 
	        currentNode = currentNode.getParent();
	    }

)
))?	'{' 
    {
        createLeafNode(grammarAccess.getPropertySetAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertySetAccess().getOperationsPropertyOperationParserRuleCall_3_0(), currentNode); 
	    }
		lv_operations_4_0=rulePropertyOperation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertySetRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operations",
	        		lv_operations_4_0, 
	        		"PropertyOperation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getPropertySetAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRulePropertyOperation
entryRulePropertyOperation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPropertyOperationRule(), currentNode); }
	 iv_rulePropertyOperation=rulePropertyOperation 
	 { $current=$iv_rulePropertyOperation.current; } 
	 EOF 
;

// Rule PropertyOperation
rulePropertyOperation returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPropertyOperationAccess().getConditionalPropertyOperationParserRuleCall_0(), currentNode); 
    }
    this_ConditionalPropertyOperation_0=ruleConditionalPropertyOperation
    { 
        $current = $this_ConditionalPropertyOperation_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPropertyOperationAccess().getPropertyDefinitionOperationParserRuleCall_1(), currentNode); 
    }
    this_PropertyDefinitionOperation_1=rulePropertyDefinitionOperation
    { 
        $current = $this_PropertyDefinitionOperation_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPropertyOperationAccess().getPropertySetOperationParserRuleCall_2(), currentNode); 
    }
    this_PropertySetOperation_2=rulePropertySetOperation
    { 
        $current = $this_PropertySetOperation_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleConditionalPropertyOperation
entryRuleConditionalPropertyOperation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConditionalPropertyOperationRule(), currentNode); }
	 iv_ruleConditionalPropertyOperation=ruleConditionalPropertyOperation 
	 { $current=$iv_ruleConditionalPropertyOperation.current; } 
	 EOF 
;

// Rule ConditionalPropertyOperation
ruleConditionalPropertyOperation returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getConditionalPropertyOperationAccess().getBConditionalPropertyOperationAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getConditionalPropertyOperationAccess().getBConditionalPropertyOperationAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'when' 
    {
        createLeafNode(grammarAccess.getConditionalPropertyOperationAccess().getWhenKeyword_1(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getConditionalPropertyOperationAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditionalPropertyOperationAccess().getCondExprExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_condExpr_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionalPropertyOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condExpr",
	        		lv_condExpr_3_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getConditionalPropertyOperationAccess().getRightParenthesisKeyword_4(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditionalPropertyOperationAccess().getBodyPropertyDefinitionOperationParserRuleCall_5_0_0(), currentNode); 
	    }
		lv_body_5_0=rulePropertyDefinitionOperation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionalPropertyOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"body",
	        		lv_body_5_0, 
	        		"PropertyDefinitionOperation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditionalPropertyOperationAccess().getBodyPropertySetOperationParserRuleCall_5_1_0(), currentNode); 
	    }
		lv_body_6_0=rulePropertySetOperation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionalPropertyOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"body",
	        		lv_body_6_0, 
	        		"PropertySetOperation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRulePropertyDefinitionOperation
entryRulePropertyDefinitionOperation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPropertyDefinitionOperationRule(), currentNode); }
	 iv_rulePropertyDefinitionOperation=rulePropertyDefinitionOperation 
	 { $current=$iv_rulePropertyDefinitionOperation.current; } 
	 EOF 
;

// Rule PropertyDefinitionOperation
rulePropertyDefinitionOperation returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getPropertyDefinitionOperationAccess().getBPropertyDefinitionOperationAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPropertyDefinitionOperationAccess().getBPropertyDefinitionOperationAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyDefinitionOperationAccess().getDefinitionPropertyValDeclarationParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_definition_1_0=rulePropertyValDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyDefinitionOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"definition",
	        		lv_definition_1_0, 
	        		"PropertyValDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyDefinitionOperationAccess().getDefinitionPropertyVarDeclarationParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_definition_2_0=rulePropertyVarDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyDefinitionOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"definition",
	        		lv_definition_2_0, 
	        		"PropertyVarDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRulePropertyValDeclaration
entryRulePropertyValDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPropertyValDeclarationRule(), currentNode); }
	 iv_rulePropertyValDeclaration=rulePropertyValDeclaration 
	 { $current=$iv_rulePropertyValDeclaration.current; } 
	 EOF 
;

// Rule PropertyValDeclaration
rulePropertyValDeclaration returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getPropertyValDeclarationAccess().getBDefPropertyAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPropertyValDeclarationAccess().getBDefPropertyAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_final_1_0=	'final' 
    {
        createLeafNode(grammarAccess.getPropertyValDeclarationAccess().getFinalFinalKeyword_1_0(), "final"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyValDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "final", true, "final", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyValDeclarationAccess().getTypeTypeRefParserRuleCall_2_0(), currentNode); 
	    }
		lv_type_2_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyValDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"TypeRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		lv_name_3_0=RULE_PID
		{
			createLeafNode(grammarAccess.getPropertyValDeclarationAccess().getNamePIDTerminalRuleCall_3_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyValDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_3_0, 
	        		"PID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getPropertyValDeclarationAccess().getEqualsSignKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyValDeclarationAccess().getValueExprExpressionParserRuleCall_5_0(), currentNode); 
	    }
		lv_valueExpr_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyValDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"valueExpr",
	        		lv_valueExpr_5_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getPropertyValDeclarationAccess().getSemicolonKeyword_6(), null); 
    }
)
;





// Entry rule entryRulePropertyVarDeclaration
entryRulePropertyVarDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPropertyVarDeclarationRule(), currentNode); }
	 iv_rulePropertyVarDeclaration=rulePropertyVarDeclaration 
	 { $current=$iv_rulePropertyVarDeclaration.current; } 
	 EOF 
;

// Rule PropertyVarDeclaration
rulePropertyVarDeclaration returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getPropertyVarDeclarationAccess().getBDefPropertyAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPropertyVarDeclarationAccess().getBDefPropertyAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_final_1_0=	'final' 
    {
        createLeafNode(grammarAccess.getPropertyVarDeclarationAccess().getFinalFinalKeyword_1_0(), "final"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyVarDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "final", true, "final", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		lv_mutable_2_0=	'mutable' 
    {
        createLeafNode(grammarAccess.getPropertyVarDeclarationAccess().getMutableMutableKeyword_2_0(), "mutable"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyVarDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "mutable", true, "mutable", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyVarDeclarationAccess().getTypeTypeRefParserRuleCall_3_0(), currentNode); 
	    }
		lv_type_3_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyVarDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_3_0, 
	        		"TypeRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		lv_name_4_0=RULE_PID
		{
			createLeafNode(grammarAccess.getPropertyVarDeclarationAccess().getNamePIDTerminalRuleCall_4_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyVarDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"PID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'=' 
    {
        createLeafNode(grammarAccess.getPropertyVarDeclarationAccess().getEqualsSignKeyword_5_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyVarDeclarationAccess().getValueExprExpressionParserRuleCall_5_1_0(), currentNode); 
	    }
		lv_valueExpr_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyVarDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"valueExpr",
	        		lv_valueExpr_6_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	';' 
    {
        createLeafNode(grammarAccess.getPropertyVarDeclarationAccess().getSemicolonKeyword_6(), null); 
    }
)
;





// Entry rule entryRulePropertySetOperation
entryRulePropertySetOperation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPropertySetOperationRule(), currentNode); }
	 iv_rulePropertySetOperation=rulePropertySetOperation 
	 { $current=$iv_rulePropertySetOperation.current; } 
	 EOF 
;

// Rule PropertySetOperation
rulePropertySetOperation returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getPropertySetOperationAccess().getBPropertySetOperationAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPropertySetOperationAccess().getBPropertySetOperationAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertySetOperationAccess().getPropertySetPropertySetParserRuleCall_1_0(), currentNode); 
	    }
		lv_propertySet_1_0=rulePropertySet		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertySetOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"propertySet",
	        		lv_propertySet_1_0, 
	        		"PropertySet", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleSynchronization
entryRuleSynchronization returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSynchronizationRule(), currentNode); }
	 iv_ruleSynchronization=ruleSynchronization 
	 { $current=$iv_ruleSynchronization.current; } 
	 EOF 
;

// Rule Synchronization
ruleSynchronization returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getSynchronizationAccess().getSynchronizationAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSynchronizationAccess().getSynchronizationAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSynchronizationAccess().getBuildersSynchronizedBuilderParserRuleCall_1_0(), currentNode); 
	    }
		lv_builders_1_0=ruleSynchronizedBuilder		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSynchronizationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"builders",
	        		lv_builders_1_0, 
	        		"SynchronizedBuilder", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getSynchronizationAccess().getCommaKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSynchronizationAccess().getBuildersSynchronizedBuilderParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_builders_3_0=ruleSynchronizedBuilder		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSynchronizationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"builders",
	        		lv_builders_3_0, 
	        		"SynchronizedBuilder", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))+	';' 
    {
        createLeafNode(grammarAccess.getSynchronizationAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleSynchronizedBuilder
entryRuleSynchronizedBuilder returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSynchronizedBuilderRule(), currentNode); }
	 iv_ruleSynchronizedBuilder=ruleSynchronizedBuilder 
	 { $current=$iv_ruleSynchronizedBuilder.current; } 
	 EOF 
;

// Rule SynchronizedBuilder
ruleSynchronizedBuilder returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getSynchronizedBuilderAccess().getSynchronizedBuilderAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSynchronizedBuilderAccess().getSynchronizedBuilderAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSynchronizedBuilderAccess().getNameSpaceEscapedQualifiedNameParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_nameSpace_1_0=ruleEscapedQualifiedName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSynchronizedBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"nameSpace",
	        		lv_nameSpace_1_0, 
	        		"EscapedQualifiedName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'/' 
    {
        createLeafNode(grammarAccess.getSynchronizedBuilderAccess().getSolidusKeyword_0_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSynchronizedBuilderAccess().getNameEscapedQualifiedNameParserRuleCall_0_3_0(), currentNode); 
	    }
		lv_name_3_0=ruleEscapedQualifiedName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSynchronizedBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_3_0, 
	        		"EscapedQualifiedName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'#' 
    {
        createLeafNode(grammarAccess.getSynchronizedBuilderAccess().getNumberSignKeyword_0_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSynchronizedBuilderAccess().getBuilderNameBuilderNameParserRuleCall_0_4_1_0(), currentNode); 
	    }
		lv_builderName_5_0=ruleBuilderName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSynchronizedBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"builderName",
	        		lv_builderName_5_0, 
	        		"BuilderName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSynchronizedBuilderAccess().getBuilderNameBuilderNameParserRuleCall_1_0(), currentNode); 
	    }
		lv_builderName_6_0=ruleBuilderName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSynchronizedBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"builderName",
	        		lv_builderName_6_0, 
	        		"BuilderName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulePathGroup
entryRulePathGroup returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPathGroupRule(), currentNode); }
	 iv_rulePathGroup=rulePathGroup 
	 { $current=$iv_rulePathGroup.current; } 
	 EOF 
;

// Rule PathGroup
rulePathGroup returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getPathGroupAccess().getPathGroupAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPathGroupAccess().getPathGroupAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPathGroupAccess().getPathVectorsPathVectorParserRuleCall_1_0(), currentNode); 
	    }
		lv_pathVectors_1_0=rulePathVector		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"pathVectors",
	        		lv_pathVectors_1_0, 
	        		"PathVector", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+(	'annotations' 
    {
        createLeafNode(grammarAccess.getPathGroupAccess().getAnnotationsKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPathGroupAccess().getAnnotationsPropertySetParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_annotations_3_0=rulePropertySet		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"annotations",
	        		lv_annotations_3_0, 
	        		"PropertySet", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRulePathVector
entryRulePathVector returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPathVectorRule(), currentNode); }
	 iv_rulePathVector=rulePathVector 
	 { $current=$iv_rulePathVector.current; } 
	 EOF 
;

// Rule PathVector
rulePathVector returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPathVectorAccess().getBasePathVectorParserRuleCall_0(), currentNode); 
    }
    this_BasePathVector_0=ruleBasePathVector
    { 
        $current = $this_BasePathVector_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPathVectorAccess().getUnbasedPathVectorParserRuleCall_1(), currentNode); 
    }
    this_UnbasedPathVector_1=ruleUnbasedPathVector
    { 
        $current = $this_UnbasedPathVector_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPathVectorAccess().getCompoundPathVectorParserRuleCall_2(), currentNode); 
    }
    this_CompoundPathVector_2=ruleCompoundPathVector
    { 
        $current = $this_CompoundPathVector_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleBasePathVector
entryRuleBasePathVector returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBasePathVectorRule(), currentNode); }
	 iv_ruleBasePathVector=ruleBasePathVector 
	 { $current=$iv_ruleBasePathVector.current; } 
	 EOF 
;

// Rule BasePathVector
ruleBasePathVector returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getBasePathVectorAccess().getPathVectorElementAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBasePathVectorAccess().getPathVectorElementAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'when' 
    {
        createLeafNode(grammarAccess.getBasePathVectorAccess().getWhenKeyword_1_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getBasePathVectorAccess().getLeftParenthesisKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBasePathVectorAccess().getCondExprExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_condExpr_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBasePathVectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condExpr",
	        		lv_condExpr_3_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getBasePathVectorAccess().getRightParenthesisKeyword_1_3(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBasePathVectorAccess().getBasePathPathParserRuleCall_2_0(), currentNode); 
	    }
		lv_basePath_5_0=rulePath		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBasePathVectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"basePath",
	        		lv_basePath_5_0, 
	        		"Path", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'[' 
    {
        createLeafNode(grammarAccess.getBasePathVectorAccess().getLeftSquareBracketKeyword_3(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBasePathVectorAccess().getPathsPathParserRuleCall_4_0_0(), currentNode); 
	    }
		lv_paths_7_0=rulePath		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBasePathVectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"paths",
	        		lv_paths_7_0, 
	        		"Path", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getBasePathVectorAccess().getCommaKeyword_4_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBasePathVectorAccess().getPathsPathParserRuleCall_4_1_1_0(), currentNode); 
	    }
		lv_paths_9_0=rulePath		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBasePathVectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"paths",
	        		lv_paths_9_0, 
	        		"Path", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	']' 
    {
        createLeafNode(grammarAccess.getBasePathVectorAccess().getRightSquareBracketKeyword_5(), null); 
    }
	';' 
    {
        createLeafNode(grammarAccess.getBasePathVectorAccess().getSemicolonKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleUnbasedPathVector
entryRuleUnbasedPathVector returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnbasedPathVectorRule(), currentNode); }
	 iv_ruleUnbasedPathVector=ruleUnbasedPathVector 
	 { $current=$iv_ruleUnbasedPathVector.current; } 
	 EOF 
;

// Rule UnbasedPathVector
ruleUnbasedPathVector returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getUnbasedPathVectorAccess().getPathVectorElementAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getUnbasedPathVectorAccess().getPathVectorElementAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'when' 
    {
        createLeafNode(grammarAccess.getUnbasedPathVectorAccess().getWhenKeyword_1_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getUnbasedPathVectorAccess().getLeftParenthesisKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnbasedPathVectorAccess().getCondExprExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_condExpr_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnbasedPathVectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condExpr",
	        		lv_condExpr_3_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getUnbasedPathVectorAccess().getRightParenthesisKeyword_1_3(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnbasedPathVectorAccess().getPathsPathParserRuleCall_2_0(), currentNode); 
	    }
		lv_paths_5_0=rulePath		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnbasedPathVectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"paths",
	        		lv_paths_5_0, 
	        		"Path", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getUnbasedPathVectorAccess().getCommaKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnbasedPathVectorAccess().getPathsPathParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_paths_7_0=rulePath		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnbasedPathVectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"paths",
	        		lv_paths_7_0, 
	        		"Path", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	';' 
    {
        createLeafNode(grammarAccess.getUnbasedPathVectorAccess().getSemicolonKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleCompoundPathVector
entryRuleCompoundPathVector returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCompoundPathVectorRule(), currentNode); }
	 iv_ruleCompoundPathVector=ruleCompoundPathVector 
	 { $current=$iv_ruleCompoundPathVector.current; } 
	 EOF 
;

// Rule CompoundPathVector
ruleCompoundPathVector returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getCompoundPathVectorAccess().getCompoundPathVectorAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getCompoundPathVectorAccess().getCompoundPathVectorAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'when' 
    {
        createLeafNode(grammarAccess.getCompoundPathVectorAccess().getWhenKeyword_1(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getCompoundPathVectorAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompoundPathVectorAccess().getCondExprExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_condExpr_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompoundPathVectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condExpr",
	        		lv_condExpr_3_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getCompoundPathVectorAccess().getRightParenthesisKeyword_4(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getCompoundPathVectorAccess().getLeftCurlyBracketKeyword_5(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompoundPathVectorAccess().getPathVectorsPathVectorParserRuleCall_6_0(), currentNode); 
	    }
		lv_pathVectors_6_0=rulePathVector		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompoundPathVectorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"pathVectors",
	        		lv_pathVectors_6_0, 
	        		"PathVector", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getCompoundPathVectorAccess().getRightCurlyBracketKeyword_7(), null); 
    }
)
;





// Entry rule entryRulePath
entryRulePath returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getPathRule(), currentNode); } 
	 iv_rulePath=rulePath 
	 { $current=$iv_rulePath.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Path
rulePath returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    createLeafNode(grammarAccess.getPathAccess().getSTRINGTerminalRuleCall_0(), null); 
    }

    |((
	kw='/' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPathAccess().getSolidusKeyword_1_0(), null); 
    }
)?
    { 
        currentNode=createCompositeNode(grammarAccess.getPathAccess().getQIDParserRuleCall_1_1(), currentNode); 
    }
    this_QID_2=ruleQID    {
		$current.merge(this_QID_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
(
	kw='/' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPathAccess().getSolidusKeyword_1_2_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getPathAccess().getQIDParserRuleCall_1_2_1(), currentNode); 
    }
    this_QID_4=ruleQID    {
		$current.merge(this_QID_4);
    }

    { 
        currentNode = currentNode.getParent();
    }
)*(
	kw='/' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPathAccess().getSolidusKeyword_1_3(), null); 
    }
)?))
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRulePrerequisite
entryRulePrerequisite returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrerequisiteRule(), currentNode); }
	 iv_rulePrerequisite=rulePrerequisite 
	 { $current=$iv_rulePrerequisite.current; } 
	 EOF 
;

// Rule Prerequisite
rulePrerequisite returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getPrerequisiteAccess().getPrerequisiteAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPrerequisiteAccess().getPrerequisiteAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'when' 
    {
        createLeafNode(grammarAccess.getPrerequisiteAccess().getWhenKeyword_1_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getPrerequisiteAccess().getLeftParenthesisKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrerequisiteAccess().getCondExprExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_condExpr_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrerequisiteRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condExpr",
	        		lv_condExpr_3_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getPrerequisiteAccess().getRightParenthesisKeyword_1_3(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrerequisiteAccess().getWithExprWithClauseParserRuleCall_2_0(), currentNode); 
	    }
		lv_withExpr_5_0=ruleWithClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrerequisiteRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"withExpr",
	        		lv_withExpr_5_0, 
	        		"WithClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrerequisiteAccess().getBuildResultBuildResultReferenceParserRuleCall_3_0(), currentNode); 
	    }
		lv_buildResult_6_0=ruleBuildResultReference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrerequisiteRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"buildResult",
	        		lv_buildResult_6_0, 
	        		"BuildResultReference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'as' 
    {
        createLeafNode(grammarAccess.getPrerequisiteAccess().getAsKeyword_4_0(), null); 
    }
(
(
		lv_alias_8_0=RULE_ID
		{
			createLeafNode(grammarAccess.getPrerequisiteAccess().getAliasIDTerminalRuleCall_4_1_0(), "alias"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrerequisiteRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"alias",
	        		lv_alias_8_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?	';' 
    {
        createLeafNode(grammarAccess.getPrerequisiteAccess().getSemicolonKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleWithClause
entryRuleWithClause returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWithClauseRule(), currentNode); }
	 iv_ruleWithClause=ruleWithClause 
	 { $current=$iv_ruleWithClause.current; } 
	 EOF 
;

// Rule WithClause
ruleWithClause returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getWithClauseAccess().getBWithExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getWithClauseAccess().getBWithExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'with' 
    {
        createLeafNode(grammarAccess.getWithClauseAccess().getWithKeyword_1(), null); 
    }
(	'(' 
    {
        createLeafNode(grammarAccess.getWithClauseAccess().getLeftParenthesisKeyword_2_0(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getWithClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getWithClauseAccess().getReferencedAdviceBAdviceCrossReference_2_1_0(), "referencedAdvice"); 
	}

)
)(	',' 
    {
        createLeafNode(grammarAccess.getWithClauseAccess().getCommaKeyword_2_2_0(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getWithClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getWithClauseAccess().getReferencedAdviceBAdviceCrossReference_2_2_1_0(), "referencedAdvice"); 
	}

)
))*	')' 
    {
        createLeafNode(grammarAccess.getWithClauseAccess().getRightParenthesisKeyword_2_3(), null); 
    }
)?((	'properties' 
    {
        createLeafNode(grammarAccess.getWithClauseAccess().getPropertiesKeyword_3_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWithClauseAccess().getPropertySetsPropertySetParserRuleCall_3_0_1_0(), currentNode); 
	    }
		lv_propertySets_8_0=rulePropertySet		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWithClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"propertySets",
	        		lv_propertySets_8_0, 
	        		"PropertySet", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'concern' 
    {
        createLeafNode(grammarAccess.getWithClauseAccess().getConcernKeyword_3_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWithClauseAccess().getConcernsConcern_AnonymousParserRuleCall_3_1_1_0(), currentNode); 
	    }
		lv_concerns_10_0=ruleConcern_Anonymous		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWithClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"concerns",
	        		lv_concerns_10_0, 
	        		"Concern_Anonymous", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))*)
;





// Entry rule entryRuleBuildResultReference
entryRuleBuildResultReference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBuildResultReferenceRule(), currentNode); }
	 iv_ruleBuildResultReference=ruleBuildResultReference 
	 { $current=$iv_ruleBuildResultReference.current; } 
	 EOF 
;

// Rule BuildResultReference
ruleBuildResultReference returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getBuildResultReferenceAccess().getUnitReferenceParserRuleCall_0(), currentNode); 
    }
    this_UnitReference_0=ruleUnitReference
    { 
        $current = $this_UnitReference_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getBuildResultReferenceAccess().getCapabilityReferenceParserRuleCall_1(), currentNode); 
    }
    this_CapabilityReference_1=ruleCapabilityReference
    { 
        $current = $this_CapabilityReference_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getBuildResultReferenceAccess().getCompoundBuildResultReferenceParserRuleCall_2(), currentNode); 
    }
    this_CompoundBuildResultReference_2=ruleCompoundBuildResultReference
    { 
        $current = $this_CompoundBuildResultReference_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleUnitReference
entryRuleUnitReference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnitReferenceRule(), currentNode); }
	 iv_ruleUnitReference=ruleUnitReference 
	 { $current=$iv_ruleUnitReference.current; } 
	 EOF 
;

// Rule UnitReference
ruleUnitReference returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getUnitReferenceAccess().getBuilderReferenceAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getUnitReferenceAccess().getBuilderReferenceAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnitReferenceAccess().getRequiredCapabilityRequiredCapability_UnitParserRuleCall_1_0(), currentNode); 
	    }
		lv_requiredCapability_1_0=ruleRequiredCapability_Unit		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"requiredCapability",
	        		lv_requiredCapability_1_0, 
	        		"RequiredCapability_Unit", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	'#' 
    {
        createLeafNode(grammarAccess.getUnitReferenceAccess().getNumberSignKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnitReferenceAccess().getBuilderNameBuilderNameParserRuleCall_3_0(), currentNode); 
	    }
		lv_builderName_3_0=ruleBuilderName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"builderName",
	        		lv_builderName_3_0, 
	        		"BuilderName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnitReferenceAccess().getParametersParameterListParserRuleCall_4_0(), currentNode); 
	    }
		lv_parameters_4_0=ruleParameterList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"parameters",
	        		lv_parameters_4_0, 
	        		"ParameterList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleCapabilityReference
entryRuleCapabilityReference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCapabilityReferenceRule(), currentNode); }
	 iv_ruleCapabilityReference=ruleCapabilityReference 
	 { $current=$iv_ruleCapabilityReference.current; } 
	 EOF 
;

// Rule CapabilityReference
ruleCapabilityReference returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getCapabilityReferenceAccess().getBuilderReferenceAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getCapabilityReferenceAccess().getBuilderReferenceAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCapabilityReferenceAccess().getRequiredCapabilityRequiredCapability_UnfilteredParserRuleCall_1_0(), currentNode); 
	    }
		lv_requiredCapability_1_0=ruleRequiredCapability_Unfiltered		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCapabilityReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"requiredCapability",
	        		lv_requiredCapability_1_0, 
	        		"RequiredCapability_Unfiltered", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'#' 
    {
        createLeafNode(grammarAccess.getCapabilityReferenceAccess().getNumberSignKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCapabilityReferenceAccess().getBuilderNameBuilderNameParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_builderName_3_0=ruleBuilderName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCapabilityReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"builderName",
	        		lv_builderName_3_0, 
	        		"BuilderName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCapabilityReferenceAccess().getParametersParameterListParserRuleCall_3_0(), currentNode); 
	    }
		lv_parameters_4_0=ruleParameterList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCapabilityReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"parameters",
	        		lv_parameters_4_0, 
	        		"ParameterList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleCompoundBuildResultReference
entryRuleCompoundBuildResultReference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCompoundBuildResultReferenceRule(), currentNode); }
	 iv_ruleCompoundBuildResultReference=ruleCompoundBuildResultReference 
	 { $current=$iv_ruleCompoundBuildResultReference.current; } 
	 EOF 
;

// Rule CompoundBuildResultReference
ruleCompoundBuildResultReference returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getCompoundBuildResultReferenceAccess().getCompoundBuildResultReferenceAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getCompoundBuildResultReferenceAccess().getCompoundBuildResultReferenceAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'{' 
    {
        createLeafNode(grammarAccess.getCompoundBuildResultReferenceAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompoundBuildResultReferenceAccess().getPrerequisitesPrerequisiteParserRuleCall_2_0(), currentNode); 
	    }
		lv_prerequisites_2_0=rulePrerequisite		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompoundBuildResultReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"prerequisites",
	        		lv_prerequisites_2_0, 
	        		"Prerequisite", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getCompoundBuildResultReferenceAccess().getRightCurlyBracketKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleBuilder
entryRuleBuilder returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBuilderRule(), currentNode); }
	 iv_ruleBuilder=ruleBuilder 
	 { $current=$iv_ruleBuilder.current; } 
	 EOF 
;

// Rule Builder
ruleBuilder returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getBuilderAccess().getBuilderAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBuilderAccess().getBuilderAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_documentation_1_0=RULE_DOCUMENTATION
		{
			createLeafNode(grammarAccess.getBuilderAccess().getDocumentationDOCUMENTATIONTerminalRuleCall_1_0(), "documentation"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"documentation",
	        		lv_documentation_1_0, 
	        		"DOCUMENTATION", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuilderAccess().getVisibilityVisibilityEnumRuleCall_2_0(), currentNode); 
	    }
		lv_visibility_2_0=ruleVisibility		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"visibility",
	        		lv_visibility_2_0, 
	        		"Visibility", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuilderAccess().getExecutionModeExecutionModeEnumRuleCall_3_0(), currentNode); 
	    }
		lv_executionMode_3_0=ruleExecutionMode		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"executionMode",
	        		lv_executionMode_3_0, 
	        		"ExecutionMode", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		lv_final_4_0=	'final' 
    {
        createLeafNode(grammarAccess.getBuilderAccess().getFinalFinalKeyword_4_0(), "final"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "final", true, "final", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?	'builder' 
    {
        createLeafNode(grammarAccess.getBuilderAccess().getBuilderKeyword_5(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuilderAccess().getNameBuilderNameParserRuleCall_6_0(), currentNode); 
	    }
		lv_name_6_0=ruleBuilderName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_6_0, 
	        		"BuilderName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((	'(' 
    {
        createLeafNode(grammarAccess.getBuilderAccess().getLeftParenthesisKeyword_7_0_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuilderAccess().getParametersParameterDeclarationParserRuleCall_7_0_1_0_0(), currentNode); 
	    }
		lv_parameters_8_0=ruleParameterDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_8_0, 
	        		"ParameterDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getBuilderAccess().getCommaKeyword_7_0_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuilderAccess().getParametersParameterDeclarationParserRuleCall_7_0_1_1_1_0(), currentNode); 
	    }
		lv_parameters_10_0=ruleParameterDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_10_0, 
	        		"ParameterDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*(	',' 
    {
        createLeafNode(grammarAccess.getBuilderAccess().getCommaKeyword_7_0_1_2_0(), null); 
    }
(
(
		lv_varArgs_12_0=	'...' 
    {
        createLeafNode(grammarAccess.getBuilderAccess().getVarArgsFullStopFullStopFullStopKeyword_7_0_1_2_1_0(), "varArgs"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "varArgs", true, "...", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuilderAccess().getParametersParameterDeclarationParserRuleCall_7_0_1_2_2_0(), currentNode); 
	    }
		lv_parameters_13_0=ruleParameterDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_13_0, 
	        		"ParameterDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?))
    |(((
(
		lv_varArgs_14_0=	'...' 
    {
        createLeafNode(grammarAccess.getBuilderAccess().getVarArgsFullStopFullStopFullStopKeyword_7_1_0_0_0(), "varArgs"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "varArgs", true, "...", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuilderAccess().getParametersParameterDeclarationParserRuleCall_7_1_0_1_0(), currentNode); 
	    }
		lv_parameters_15_0=ruleParameterDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_15_0, 
	        		"ParameterDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))	')' 
    {
        createLeafNode(grammarAccess.getBuilderAccess().getRightParenthesisKeyword_7_1_1(), null); 
    }
))?(	'provides' 
    {
        createLeafNode(grammarAccess.getBuilderAccess().getProvidesKeyword_8_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuilderAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_8_1_0(), currentNode); 
	    }
		lv_providedCapabilities_18_0=ruleProvidedCapability		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"providedCapabilities",
	        		lv_providedCapabilities_18_0, 
	        		"ProvidedCapability", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getBuilderAccess().getCommaKeyword_8_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuilderAccess().getProvidedCapabilitiesProvidedCapabilityParserRuleCall_8_2_1_0(), currentNode); 
	    }
		lv_providedCapabilities_20_0=ruleProvidedCapability		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"providedCapabilities",
	        		lv_providedCapabilities_20_0, 
	        		"ProvidedCapability", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?(	'precondition' 
    {
        createLeafNode(grammarAccess.getBuilderAccess().getPreconditionKeyword_9_0(), null); 
    }
((	':' 
    {
        createLeafNode(grammarAccess.getBuilderAccess().getColonKeyword_9_1_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuilderAccess().getPrecondExprExpressionParserRuleCall_9_1_0_1_0(), currentNode); 
	    }
		lv_precondExpr_23_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"precondExpr",
	        		lv_precondExpr_23_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getBuilderAccess().getSemicolonKeyword_9_1_0_2(), null); 
    }
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuilderAccess().getPrecondExprBlockExpressionParserRuleCall_9_1_1_0(), currentNode); 
	    }
		lv_precondExpr_25_0=ruleBlockExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"precondExpr",
	        		lv_precondExpr_25_0, 
	        		"BlockExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))?(	'postcondition' 
    {
        createLeafNode(grammarAccess.getBuilderAccess().getPostconditionKeyword_10_0(), null); 
    }
((	':' 
    {
        createLeafNode(grammarAccess.getBuilderAccess().getColonKeyword_10_1_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuilderAccess().getPostcondExprExpressionParserRuleCall_10_1_0_1_0(), currentNode); 
	    }
		lv_postcondExpr_28_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"postcondExpr",
	        		lv_postcondExpr_28_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getBuilderAccess().getSemicolonKeyword_10_1_0_2(), null); 
    }
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuilderAccess().getPostcondExprBlockExpressionParserRuleCall_10_1_1_0(), currentNode); 
	    }
		lv_postcondExpr_30_0=ruleBlockExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"postcondExpr",
	        		lv_postcondExpr_30_0, 
	        		"BlockExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))?	'{' 
    {
        createLeafNode(grammarAccess.getBuilderAccess().getLeftCurlyBracketKeyword_11(), null); 
    }
(	'default' 
    {
        createLeafNode(grammarAccess.getBuilderAccess().getDefaultKeyword_12_0(), null); 
    }
	'properties' 
    {
        createLeafNode(grammarAccess.getBuilderAccess().getPropertiesKeyword_12_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuilderAccess().getDefaultPropertiesPropertySetParserRuleCall_12_2_0(), currentNode); 
	    }
		lv_defaultProperties_34_0=rulePropertySet		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"defaultProperties",
	        		lv_defaultProperties_34_0, 
	        		"PropertySet", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuilderAccess().getInputBuilderInputParserRuleCall_13_0(), currentNode); 
	    }
		lv_input_35_0=ruleBuilderInput		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"input",
	        		lv_input_35_0, 
	        		"BuilderInput", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(	'output' 
    {
        createLeafNode(grammarAccess.getBuilderAccess().getOutputKeyword_14_0(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getBuilderAccess().getLeftCurlyBracketKeyword_14_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuilderAccess().getOutputPathGroupParserRuleCall_14_2_0(), currentNode); 
	    }
		lv_output_38_0=rulePathGroup		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"output",
	        		lv_output_38_0, 
	        		"PathGroup", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'}' 
    {
        createLeafNode(grammarAccess.getBuilderAccess().getRightCurlyBracketKeyword_14_3(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuilderAccess().getFuncExprBlockExpressionWithoutBracketsParserRuleCall_15_0(), currentNode); 
	    }
		lv_funcExpr_40_0=ruleBlockExpressionWithoutBrackets		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"funcExpr",
	        		lv_funcExpr_40_0, 
	        		"BlockExpressionWithoutBrackets", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	'}' 
    {
        createLeafNode(grammarAccess.getBuilderAccess().getRightCurlyBracketKeyword_16(), null); 
    }
)
;





// Entry rule entryRuleParameterList
entryRuleParameterList returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParameterListRule(), currentNode); }
	 iv_ruleParameterList=ruleParameterList 
	 { $current=$iv_ruleParameterList.current; } 
	 EOF 
;

// Rule ParameterList
ruleParameterList returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getParameterListAccess().getBParameterListAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getParameterListAccess().getBParameterListAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterListAccess().getParametersFirstParameterParserRuleCall_1_0(), currentNode); 
	    }
		lv_parameters_1_0=ruleFirstParameter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_1_0, 
	        		"FirstParameter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getParameterListAccess().getCommaKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterListAccess().getParametersFirstParameterParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_parameters_3_0=ruleFirstParameter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_3_0, 
	        		"FirstParameter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleFirstParameter
entryRuleFirstParameter returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFirstParameterRule(), currentNode); }
	 iv_ruleFirstParameter=ruleFirstParameter 
	 { $current=$iv_ruleFirstParameter.current; } 
	 EOF 
;

// Rule FirstParameter
ruleFirstParameter returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getFirstParameterAccess().getClosureParameterParserRuleCall_0(), currentNode); 
    }
    this_ClosureParameter_0=ruleClosureParameter
    { 
        $current = $this_ClosureParameter_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getFirstParameterAccess().getParameterParserRuleCall_1(), currentNode); 
    }
    this_Parameter_1=ruleParameter
    { 
        $current = $this_Parameter_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParameterRule(), currentNode); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getParameterAccess().getBParameterAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getParameterAccess().getBParameterAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterAccess().getExprExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_expr_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_1_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleClosureParameter
entryRuleClosureParameter returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getClosureParameterRule(), currentNode); }
	 iv_ruleClosureParameter=ruleClosureParameter 
	 { $current=$iv_ruleClosureParameter.current; } 
	 EOF 
;

// Rule ClosureParameter
ruleClosureParameter returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getClosureParameterAccess().getBParameterAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getClosureParameterAccess().getBParameterAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClosureParameterAccess().getExprClosureExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_expr_1_0=ruleClosureExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClosureParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_1_0, 
	        		"ClosureExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleParameterDeclaration
entryRuleParameterDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParameterDeclarationRule(), currentNode); }
	 iv_ruleParameterDeclaration=ruleParameterDeclaration 
	 { $current=$iv_ruleParameterDeclaration.current; } 
	 EOF 
;

// Rule ParameterDeclaration
ruleParameterDeclaration returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getParameterDeclarationAccess().getBParameterDeclarationAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getParameterDeclarationAccess().getBParameterDeclarationAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterDeclarationAccess().getTypeTypeRefParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_type_1_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_1_0, 
	        		"TypeRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		lv_name_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getParameterDeclarationAccess().getNameIDTerminalRuleCall_1_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)))
;





// Entry rule entryRuleBuilderInput
entryRuleBuilderInput returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBuilderInputRule(), currentNode); }
	 iv_ruleBuilderInput=ruleBuilderInput 
	 { $current=$iv_ruleBuilderInput.current; } 
	 EOF 
;

// Rule BuilderInput
ruleBuilderInput returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getBuilderInputAccess().getBuilderInputAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBuilderInputAccess().getBuilderInputAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'input' 
    {
        createLeafNode(grammarAccess.getBuilderInputAccess().getInputKeyword_1(), null); 
    }
(	'precondition' 
    {
        createLeafNode(grammarAccess.getBuilderInputAccess().getPreconditionKeyword_2_0(), null); 
    }
((	':' 
    {
        createLeafNode(grammarAccess.getBuilderInputAccess().getColonKeyword_2_1_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuilderInputAccess().getPrecondExprExpressionParserRuleCall_2_1_0_1_0(), currentNode); 
	    }
		lv_precondExpr_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderInputRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"precondExpr",
	        		lv_precondExpr_4_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getBuilderInputAccess().getSemicolonKeyword_2_1_0_2(), null); 
    }
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuilderInputAccess().getPrecondExprBlockExpressionParserRuleCall_2_1_1_0(), currentNode); 
	    }
		lv_precondExpr_6_0=ruleBlockExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderInputRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"precondExpr",
	        		lv_precondExpr_6_0, 
	        		"BlockExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))?(	'postcondition' 
    {
        createLeafNode(grammarAccess.getBuilderInputAccess().getPostconditionKeyword_3_0(), null); 
    }
((	':' 
    {
        createLeafNode(grammarAccess.getBuilderInputAccess().getColonKeyword_3_1_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuilderInputAccess().getPostcondExprExpressionParserRuleCall_3_1_0_1_0(), currentNode); 
	    }
		lv_postcondExpr_9_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderInputRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"postcondExpr",
	        		lv_postcondExpr_9_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getBuilderInputAccess().getSemicolonKeyword_3_1_0_2(), null); 
    }
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuilderInputAccess().getPostcondExprBlockExpressionParserRuleCall_3_1_1_0(), currentNode); 
	    }
		lv_postcondExpr_11_0=ruleBlockExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderInputRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"postcondExpr",
	        		lv_postcondExpr_11_0, 
	        		"BlockExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))?	'{' 
    {
        createLeafNode(grammarAccess.getBuilderInputAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuilderInputAccess().getPrerequisitesPrerequisiteParserRuleCall_5_0(), currentNode); 
	    }
		lv_prerequisites_13_0=rulePrerequisite		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuilderInputRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"prerequisites",
	        		lv_prerequisites_13_0, 
	        		"Prerequisite", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+	'}' 
    {
        createLeafNode(grammarAccess.getBuilderInputAccess().getRightCurlyBracketKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleRepositoryConfiguration
entryRuleRepositoryConfiguration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRepositoryConfigurationRule(), currentNode); }
	 iv_ruleRepositoryConfiguration=ruleRepositoryConfiguration 
	 { $current=$iv_ruleRepositoryConfiguration.current; } 
	 EOF 
;

// Rule RepositoryConfiguration
ruleRepositoryConfiguration returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getRepositoryConfigurationAccess().getRepositoryDeclarationParserRuleCall_0(), currentNode); 
    }
    this_RepositoryDeclaration_0=ruleRepositoryDeclaration
    { 
        $current = $this_RepositoryDeclaration_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getRepositoryConfigurationAccess().getResolutionStrategyParserRuleCall_1(), currentNode); 
    }
    this_ResolutionStrategy_1=ruleResolutionStrategy
    { 
        $current = $this_ResolutionStrategy_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleRepositoryDeclaration
entryRuleRepositoryDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRepositoryDeclarationRule(), currentNode); }
	 iv_ruleRepositoryDeclaration=ruleRepositoryDeclaration 
	 { $current=$iv_ruleRepositoryDeclaration.current; } 
	 EOF 
;

// Rule RepositoryDeclaration
ruleRepositoryDeclaration returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getRepositoryDeclarationAccess().getRepositoryDeclarationAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getRepositoryDeclarationAccess().getRepositoryDeclarationAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_documentation_1_0=RULE_DOCUMENTATION
		{
			createLeafNode(grammarAccess.getRepositoryDeclarationAccess().getDocumentationDOCUMENTATIONTerminalRuleCall_1_0(), "documentation"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRepositoryDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"documentation",
	        		lv_documentation_1_0, 
	        		"DOCUMENTATION", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRepositoryDeclarationAccess().getLocationURIParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_location_2_0=ruleURI		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRepositoryDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"location",
	        		lv_location_2_0, 
	        		"URI", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(	'repository' 
    {
        createLeafNode(grammarAccess.getRepositoryDeclarationAccess().getRepositoryKeyword_2_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRepositoryDeclarationAccess().getResolverTypeTypeRefParserRuleCall_2_1_1_0(), currentNode); 
	    }
		lv_resolverType_4_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRepositoryDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"resolverType",
	        		lv_resolverType_4_0, 
	        		"TypeRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRepositoryDeclarationAccess().getContextBlockContextBlock_CreationParserRuleCall_3_0(), currentNode); 
	    }
		lv_contextBlock_5_0=ruleContextBlock_Creation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRepositoryDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"contextBlock",
	        		lv_contextBlock_5_0, 
	        		"ContextBlock_Creation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleResolutionStrategy
entryRuleResolutionStrategy returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getResolutionStrategyRule(), currentNode); }
	 iv_ruleResolutionStrategy=ruleResolutionStrategy 
	 { $current=$iv_ruleResolutionStrategy.current; } 
	 EOF 
;

// Rule ResolutionStrategy
ruleResolutionStrategy returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getResolutionStrategyAccess().getResolutionStrategyFirstParserRuleCall_0(), currentNode); 
    }
    this_ResolutionStrategyFirst_0=ruleResolutionStrategyFirst
    { 
        $current = $this_ResolutionStrategyFirst_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getResolutionStrategyAccess().getResolutionStrategyBestParserRuleCall_1(), currentNode); 
    }
    this_ResolutionStrategyBest_1=ruleResolutionStrategyBest
    { 
        $current = $this_ResolutionStrategyBest_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleResolutionStrategyFirst
entryRuleResolutionStrategyFirst returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getResolutionStrategyFirstRule(), currentNode); }
	 iv_ruleResolutionStrategyFirst=ruleResolutionStrategyFirst 
	 { $current=$iv_ruleResolutionStrategyFirst.current; } 
	 EOF 
;

// Rule ResolutionStrategyFirst
ruleResolutionStrategyFirst returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getResolutionStrategyFirstAccess().getResolutionStrategyFirstAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getResolutionStrategyFirstAccess().getResolutionStrategyFirstAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'select-first' 
    {
        createLeafNode(grammarAccess.getResolutionStrategyFirstAccess().getSelectFirstKeyword_1(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getResolutionStrategyFirstAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getResolutionStrategyFirstAccess().getRepositoriesRepositoryConfigurationParserRuleCall_3_0(), currentNode); 
	    }
		lv_repositories_3_0=ruleRepositoryConfiguration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getResolutionStrategyFirstRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"repositories",
	        		lv_repositories_3_0, 
	        		"RepositoryConfiguration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getResolutionStrategyFirstAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleResolutionStrategyBest
entryRuleResolutionStrategyBest returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getResolutionStrategyBestRule(), currentNode); }
	 iv_ruleResolutionStrategyBest=ruleResolutionStrategyBest 
	 { $current=$iv_ruleResolutionStrategyBest.current; } 
	 EOF 
;

// Rule ResolutionStrategyBest
ruleResolutionStrategyBest returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getResolutionStrategyBestAccess().getResolutionStrategyBestAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getResolutionStrategyBestAccess().getResolutionStrategyBestAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'select-best' 
    {
        createLeafNode(grammarAccess.getResolutionStrategyBestAccess().getSelectBestKeyword_1(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getResolutionStrategyBestAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getResolutionStrategyBestAccess().getRepositoriesRepositoryConfigurationParserRuleCall_3_0(), currentNode); 
	    }
		lv_repositories_3_0=ruleRepositoryConfiguration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getResolutionStrategyBestRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"repositories",
	        		lv_repositories_3_0, 
	        		"RepositoryConfiguration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getResolutionStrategyBestAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleContainerConfiguration
entryRuleContainerConfiguration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getContainerConfigurationRule(), currentNode); }
	 iv_ruleContainerConfiguration=ruleContainerConfiguration 
	 { $current=$iv_ruleContainerConfiguration.current; } 
	 EOF 
;

// Rule ContainerConfiguration
ruleContainerConfiguration returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getContainerConfigurationAccess().getContainerConfigurationAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getContainerConfigurationAccess().getContainerConfigurationAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_documentation_1_0=RULE_DOCUMENTATION
		{
			createLeafNode(grammarAccess.getContainerConfigurationAccess().getDocumentationDOCUMENTATIONTerminalRuleCall_1_0(), "documentation"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getContainerConfigurationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"documentation",
	        		lv_documentation_1_0, 
	        		"DOCUMENTATION", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?	'container' 
    {
        createLeafNode(grammarAccess.getContainerConfigurationAccess().getContainerKeyword_2(), null); 
    }
(
(
		lv_name_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getContainerConfigurationAccess().getNameIDTerminalRuleCall_3_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getContainerConfigurationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'agent' 
    {
        createLeafNode(grammarAccess.getContainerConfigurationAccess().getAgentKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getContainerConfigurationAccess().getAgentTypeTypeRefParserRuleCall_5_0(), currentNode); 
	    }
		lv_agentType_5_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getContainerConfigurationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"agentType",
	        		lv_agentType_5_0, 
	        		"TypeRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getContainerConfigurationAccess().getContextBlockContextBlock_CreationParserRuleCall_6_0(), currentNode); 
	    }
		lv_contextBlock_6_0=ruleContextBlock_Creation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getContainerConfigurationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"contextBlock",
	        		lv_contextBlock_6_0, 
	        		"ContextBlock_Creation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleURI
entryRuleURI returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getURIRule(), currentNode); } 
	 iv_ruleURI=ruleURI 
	 { $current=$iv_ruleURI.current.getText(); }  
	 EOF 
;

// Rule URI
ruleURI returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    createLeafNode(grammarAccess.getURIAccess().getSTRINGTerminalRuleCall(), null); 
    }

    ;





// Entry rule entryRuleConcern_Named
entryRuleConcern_Named returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConcern_NamedRule(), currentNode); }
	 iv_ruleConcern_Named=ruleConcern_Named 
	 { $current=$iv_ruleConcern_Named.current; } 
	 EOF 
;

// Rule Concern_Named
ruleConcern_Named returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getConcern_NamedAccess().getBConcernAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getConcern_NamedAccess().getBConcernAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_documentation_1_0=RULE_DOCUMENTATION
		{
			createLeafNode(grammarAccess.getConcern_NamedAccess().getDocumentationDOCUMENTATIONTerminalRuleCall_1_0(), "documentation"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConcern_NamedRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"documentation",
	        		lv_documentation_1_0, 
	        		"DOCUMENTATION", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?	'concern' 
    {
        createLeafNode(grammarAccess.getConcern_NamedAccess().getConcernKeyword_2(), null); 
    }
(
(
		lv_name_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getConcern_NamedAccess().getNameIDTerminalRuleCall_3_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConcern_NamedRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'extends' 
    {
        createLeafNode(grammarAccess.getConcern_NamedAccess().getExtendsKeyword_4_0(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getConcern_NamedRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getConcern_NamedAccess().getSuperConcernsBConcernCrossReference_4_1_0(), "superConcerns"); 
	}

)
)(	',' 
    {
        createLeafNode(grammarAccess.getConcern_NamedAccess().getCommaKeyword_4_2_0(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getConcern_NamedRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getConcern_NamedAccess().getSuperConcernsBConcernCrossReference_4_2_1_0(), "superConcerns"); 
	}

)
))*)?	'{' 
    {
        createLeafNode(grammarAccess.getConcern_NamedAccess().getLeftCurlyBracketKeyword_5(), null); 
    }
((	'properties' 
    {
        createLeafNode(grammarAccess.getConcern_NamedAccess().getPropertiesKeyword_6_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConcern_NamedAccess().getPropertySetsPropertySetParserRuleCall_6_0_1_0(), currentNode); 
	    }
		lv_propertySets_10_0=rulePropertySet		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConcern_NamedRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"propertySets",
	        		lv_propertySets_10_0, 
	        		"PropertySet", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConcern_NamedAccess().getFunctionsFunctionParserRuleCall_6_1_0(), currentNode); 
	    }
		lv_functions_11_0=ruleFunction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConcern_NamedRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"functions",
	        		lv_functions_11_0, 
	        		"Function", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConcern_NamedAccess().getFunctionsBuilderParserRuleCall_6_2_0(), currentNode); 
	    }
		lv_functions_12_0=ruleBuilder		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConcern_NamedRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"functions",
	        		lv_functions_12_0, 
	        		"Builder", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getConcern_NamedAccess().getRightCurlyBracketKeyword_7(), null); 
    }
)
;





// Entry rule entryRuleConcern_Anonymous
entryRuleConcern_Anonymous returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConcern_AnonymousRule(), currentNode); }
	 iv_ruleConcern_Anonymous=ruleConcern_Anonymous 
	 { $current=$iv_ruleConcern_Anonymous.current; } 
	 EOF 
;

// Rule Concern_Anonymous
ruleConcern_Anonymous returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getConcern_AnonymousAccess().getBConcernAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getConcern_AnonymousAccess().getBConcernAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'extends' 
    {
        createLeafNode(grammarAccess.getConcern_AnonymousAccess().getExtendsKeyword_1_0(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getConcern_AnonymousRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getConcern_AnonymousAccess().getSuperConcernsBConcernCrossReference_1_1_0(), "superConcerns"); 
	}

)
)(	',' 
    {
        createLeafNode(grammarAccess.getConcern_AnonymousAccess().getCommaKeyword_1_2_0(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getConcern_AnonymousRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getConcern_AnonymousAccess().getSuperConcernsBConcernCrossReference_1_2_1_0(), "superConcerns"); 
	}

)
))*)?	'{' 
    {
        createLeafNode(grammarAccess.getConcern_AnonymousAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
((	'properties' 
    {
        createLeafNode(grammarAccess.getConcern_AnonymousAccess().getPropertiesKeyword_3_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConcern_AnonymousAccess().getPropertySetsPropertySetParserRuleCall_3_0_1_0(), currentNode); 
	    }
		lv_propertySets_7_0=rulePropertySet		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConcern_AnonymousRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"propertySets",
	        		lv_propertySets_7_0, 
	        		"PropertySet", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConcern_AnonymousAccess().getFunctionsFunctionParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_functions_8_0=ruleFunction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConcern_AnonymousRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"functions",
	        		lv_functions_8_0, 
	        		"Function", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConcern_AnonymousAccess().getFunctionsBuilderParserRuleCall_3_2_0(), currentNode); 
	    }
		lv_functions_9_0=ruleBuilder		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConcern_AnonymousRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"functions",
	        		lv_functions_9_0, 
	        		"Builder", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getConcern_AnonymousAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFunctionRule(), currentNode); }
	 iv_ruleFunction=ruleFunction 
	 { $current=$iv_ruleFunction.current; } 
	 EOF 
;

// Rule Function
ruleFunction returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getFunctionAccess().getB3FunctionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getFunctionAccess().getB3FunctionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_documentation_1_0=RULE_DOCUMENTATION
		{
			createLeafNode(grammarAccess.getFunctionAccess().getDocumentationDOCUMENTATIONTerminalRuleCall_1_0(), "documentation"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"documentation",
	        		lv_documentation_1_0, 
	        		"DOCUMENTATION", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionAccess().getVisibilityVisibilityEnumRuleCall_2_0(), currentNode); 
	    }
		lv_visibility_2_0=ruleVisibility		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"visibility",
	        		lv_visibility_2_0, 
	        		"Visibility", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionAccess().getExecutionModeExecutionModeEnumRuleCall_3_0(), currentNode); 
	    }
		lv_executionMode_3_0=ruleExecutionMode		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"executionMode",
	        		lv_executionMode_3_0, 
	        		"ExecutionMode", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		lv_final_4_0=	'final' 
    {
        createLeafNode(grammarAccess.getFunctionAccess().getFinalFinalKeyword_4_0(), "final"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "final", true, "final", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?	'function' 
    {
        createLeafNode(grammarAccess.getFunctionAccess().getFunctionKeyword_5(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionAccess().getReturnTypeTypeRefParserRuleCall_6_0(), currentNode); 
	    }
		lv_returnType_6_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"returnType",
	        		lv_returnType_6_0, 
	        		"TypeRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		lv_name_7_0=RULE_ID
		{
			createLeafNode(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_7_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_7_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'(' 
    {
        createLeafNode(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_8_0(), null); 
    }
(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionAccess().getParametersParameterDeclarationParserRuleCall_8_1_0_0_0(), currentNode); 
	    }
		lv_parameters_9_0=ruleParameterDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_9_0, 
	        		"ParameterDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getFunctionAccess().getCommaKeyword_8_1_0_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionAccess().getParametersParameterDeclarationParserRuleCall_8_1_0_1_1_0(), currentNode); 
	    }
		lv_parameters_11_0=ruleParameterDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_11_0, 
	        		"ParameterDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*(	',' 
    {
        createLeafNode(grammarAccess.getFunctionAccess().getCommaKeyword_8_1_0_2_0(), null); 
    }
(
(
		lv_varArgs_13_0=	'...' 
    {
        createLeafNode(grammarAccess.getFunctionAccess().getVarArgsFullStopFullStopFullStopKeyword_8_1_0_2_1_0(), "varArgs"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "varArgs", true, "...", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionAccess().getParametersParameterDeclarationParserRuleCall_8_1_0_2_2_0(), currentNode); 
	    }
		lv_parameters_14_0=ruleParameterDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_14_0, 
	        		"ParameterDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
    |((
(
		lv_varArgs_15_0=	'...' 
    {
        createLeafNode(grammarAccess.getFunctionAccess().getVarArgsFullStopFullStopFullStopKeyword_8_1_1_0_0(), "varArgs"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "varArgs", true, "...", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionAccess().getParametersParameterDeclarationParserRuleCall_8_1_1_1_0(), currentNode); 
	    }
		lv_parameters_16_0=ruleParameterDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_16_0, 
	        		"ParameterDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))?	')' 
    {
        createLeafNode(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_8_2(), null); 
    }
)?((	':' 
    {
        createLeafNode(grammarAccess.getFunctionAccess().getColonKeyword_9_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionAccess().getFuncExprExpressionParserRuleCall_9_0_1_0(), currentNode); 
	    }
		lv_funcExpr_19_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"funcExpr",
	        		lv_funcExpr_19_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getFunctionAccess().getSemicolonKeyword_9_0_2(), null); 
    }
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionAccess().getFuncExprBlockExpressionParserRuleCall_9_1_0(), currentNode); 
	    }
		lv_funcExpr_21_0=ruleBlockExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"funcExpr",
	        		lv_funcExpr_21_0, 
	        		"BlockExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleAssignmentOperator
entryRuleAssignmentOperator returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAssignmentOperatorRule(), currentNode); } 
	 iv_ruleAssignmentOperator=ruleAssignmentOperator 
	 { $current=$iv_ruleAssignmentOperator.current.getText(); }  
	 EOF 
;

// Rule AssignmentOperator
ruleAssignmentOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_0(), null); 
    }

    |
	kw='+=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getPlusSignEqualsSignKeyword_1(), null); 
    }

    |
	kw='-=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getHyphenMinusEqualsSignKeyword_2(), null); 
    }

    |
	kw='*=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getAsteriskEqualsSignKeyword_3(), null); 
    }

    |
	kw='/=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getSolidusEqualsSignKeyword_4(), null); 
    }

    |
	kw='%=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getPercentSignEqualsSignKeyword_5(), null); 
    }
)
    ;





// Entry rule entryRuleRelationalOperator
entryRuleRelationalOperator returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRelationalOperatorRule(), currentNode); } 
	 iv_ruleRelationalOperator=ruleRelationalOperator 
	 { $current=$iv_ruleRelationalOperator.current.getText(); }  
	 EOF 
;

// Rule RelationalOperator
ruleRelationalOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='~=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getTildeEqualsSignKeyword_0(), null); 
    }

    |
	kw='==' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getEqualsSignEqualsSignKeyword_1(), null); 
    }

    |
	kw='===' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getEqualsSignEqualsSignEqualsSignKeyword_2(), null); 
    }

    |
	kw='!=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getExclamationMarkEqualsSignKeyword_3(), null); 
    }

    |
	kw='!==' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getExclamationMarkEqualsSignEqualsSignKeyword_4(), null); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_5(), null); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_6(), null); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_7(), null); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_8(), null); 
    }
)
    ;





// Entry rule entryRuleTopLevelExpression
entryRuleTopLevelExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTopLevelExpressionRule(), currentNode); }
	 iv_ruleTopLevelExpression=ruleTopLevelExpression 
	 { $current=$iv_ruleTopLevelExpression.current; } 
	 EOF 
;

// Rule TopLevelExpression
ruleTopLevelExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTopLevelExpressionAccess().getVarDeclarationParserRuleCall_0(), currentNode); 
    }
    this_VarDeclaration_0=ruleVarDeclaration
    { 
        $current = $this_VarDeclaration_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTopLevelExpressionAccess().getValDeclarationParserRuleCall_1(), currentNode); 
    }
    this_ValDeclaration_1=ruleValDeclaration
    { 
        $current = $this_ValDeclaration_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTopLevelExpressionAccess().getAssignmentExpressionParserRuleCall_2(), currentNode); 
    }
    this_AssignmentExpression_2=ruleAssignmentExpression
    { 
        $current = $this_AssignmentExpression_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall(), currentNode); 
    }
    this_AssignmentExpression_0=ruleAssignmentExpression
    { 
        $current = $this_AssignmentExpression_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRuleAssignmentExpression
entryRuleAssignmentExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAssignmentExpressionRule(), currentNode); }
	 iv_ruleAssignmentExpression=ruleAssignmentExpression 
	 { $current=$iv_ruleAssignmentExpression.current; } 
	 EOF 
;

// Rule AssignmentExpression
ruleAssignmentExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAssignmentExpressionAccess().getCachedExpressionParserRuleCall_0(), currentNode); 
    }
    this_CachedExpression_0=ruleCachedExpression
    { 
        $current = $this_CachedExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getAssignmentExpressionAccess().getBAssignmentExpressionLeftExprAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "leftExpr", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAssignmentExpressionAccess().getBAssignmentExpressionLeftExprAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAssignmentExpressionAccess().getFunctionNameAssignmentOperatorParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_functionName_2_0=ruleAssignmentOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"functionName",
	        		lv_functionName_2_0, 
	        		"AssignmentOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAssignmentExpressionAccess().getRightExprAssignmentExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_rightExpr_3_0=ruleAssignmentExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightExpr",
	        		lv_rightExpr_3_0, 
	        		"AssignmentExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleVarDeclaration
entryRuleVarDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVarDeclarationRule(), currentNode); }
	 iv_ruleVarDeclaration=ruleVarDeclaration 
	 { $current=$iv_ruleVarDeclaration.current; } 
	 EOF 
;

// Rule VarDeclaration
ruleVarDeclaration returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getVarDeclarationAccess().getBDefValueAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getVarDeclarationAccess().getBDefValueAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_final_1_0=	'final' 
    {
        createLeafNode(grammarAccess.getVarDeclarationAccess().getFinalFinalKeyword_1_0(), "final"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVarDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "final", true, "final", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?((	'var' 
    {
        createLeafNode(grammarAccess.getVarDeclarationAccess().getVarKeyword_2_0_0(), null); 
    }

    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVarDeclarationAccess().getTypeTypeRefParserRuleCall_2_0_1_0(), currentNode); 
	    }
		lv_type_3_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVarDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_3_0, 
	        		"TypeRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))(
(
		lv_name_4_0=RULE_ID
		{
			createLeafNode(grammarAccess.getVarDeclarationAccess().getNameIDTerminalRuleCall_2_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVarDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))(	'=' 
    {
        createLeafNode(grammarAccess.getVarDeclarationAccess().getEqualsSignKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVarDeclarationAccess().getValueExprExpressionParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_valueExpr_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVarDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"valueExpr",
	        		lv_valueExpr_6_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleValDeclaration
entryRuleValDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getValDeclarationRule(), currentNode); }
	 iv_ruleValDeclaration=ruleValDeclaration 
	 { $current=$iv_ruleValDeclaration.current; } 
	 EOF 
;

// Rule ValDeclaration
ruleValDeclaration returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getValDeclarationAccess().getBDefValueAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getValDeclarationAccess().getBDefValueAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_final_1_0=	'final' 
    {
        createLeafNode(grammarAccess.getValDeclarationAccess().getFinalFinalKeyword_1_0(), "final"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getValDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "final", true, "final", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		lv_immutable_2_0=	'val' 
    {
        createLeafNode(grammarAccess.getValDeclarationAccess().getImmutableValKeyword_2_0(), "immutable"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getValDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "immutable", true, "val", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getValDeclarationAccess().getTypeTypeRefParserRuleCall_3_0(), currentNode); 
	    }
		lv_type_3_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getValDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_3_0, 
	        		"TypeRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		lv_name_4_0=RULE_ID
		{
			createLeafNode(grammarAccess.getValDeclarationAccess().getNameIDTerminalRuleCall_4_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getValDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getValDeclarationAccess().getEqualsSignKeyword_5(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getValDeclarationAccess().getValueExprExpressionParserRuleCall_6_0(), currentNode); 
	    }
		lv_valueExpr_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getValDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"valueExpr",
	        		lv_valueExpr_6_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleTypeRef
entryRuleTypeRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeRefRule(), currentNode); }
	 iv_ruleTypeRef=ruleTypeRef 
	 { $current=$iv_ruleTypeRef.current; } 
	 EOF 
;

// Rule TypeRef
ruleTypeRef returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeRefAccess().getClosureTypeRefParserRuleCall_0(), currentNode); 
    }
    this_ClosureTypeRef_0=ruleClosureTypeRef
    { 
        $current = $this_ClosureTypeRef_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeRefAccess().getSimpleTypeRefParserRuleCall_1(), currentNode); 
    }
    this_SimpleTypeRef_1=ruleSimpleTypeRef
    { 
        $current = $this_SimpleTypeRef_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleSimpleTypeRef
entryRuleSimpleTypeRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSimpleTypeRefRule(), currentNode); }
	 iv_ruleSimpleTypeRef=ruleSimpleTypeRef 
	 { $current=$iv_ruleSimpleTypeRef.current; } 
	 EOF 
;

// Rule SimpleTypeRef
ruleSimpleTypeRef returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getSimpleTypeRefAccess().getB3ParameterizedTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSimpleTypeRefAccess().getB3ParameterizedTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleTypeRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getSimpleTypeRefAccess().getRawTypeB3JavaImportCrossReference_1_0(), "rawType"); 
	}

)
)(	'<' 
    {
        createLeafNode(grammarAccess.getSimpleTypeRefAccess().getLessThanSignKeyword_2_0(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleTypeRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getSimpleTypeRefAccess().getActualArgumentsListB3JavaImportCrossReference_2_1_0(), "actualArgumentsList"); 
	}

)
)(	',' 
    {
        createLeafNode(grammarAccess.getSimpleTypeRefAccess().getCommaKeyword_2_2_0(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleTypeRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getSimpleTypeRefAccess().getActualArgumentsListB3JavaImportCrossReference_2_2_1_0(), "actualArgumentsList"); 
	}

)
))*	'>' 
    {
        createLeafNode(grammarAccess.getSimpleTypeRefAccess().getGreaterThanSignKeyword_2_3(), null); 
    }
)?)
;





// Entry rule entryRuleClosureTypeRef
entryRuleClosureTypeRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getClosureTypeRefRule(), currentNode); }
	 iv_ruleClosureTypeRef=ruleClosureTypeRef 
	 { $current=$iv_ruleClosureTypeRef.current; } 
	 EOF 
;

// Rule ClosureTypeRef
ruleClosureTypeRef returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getClosureTypeRefAccess().getB3FunctionTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getClosureTypeRefAccess().getB3FunctionTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'(' 
    {
        createLeafNode(grammarAccess.getClosureTypeRefAccess().getLeftParenthesisKeyword_1_0(), null); 
    }
(((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getClosureTypeRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getClosureTypeRefAccess().getParameterTypesB3JavaImportCrossReference_1_1_0_0_0(), "parameterTypes"); 
	}

)
)(	',' 
    {
        createLeafNode(grammarAccess.getClosureTypeRefAccess().getCommaKeyword_1_1_0_1_0(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getClosureTypeRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getClosureTypeRefAccess().getParameterTypesB3JavaImportCrossReference_1_1_0_1_1_0(), "parameterTypes"); 
	}

)
))*(	',' 
    {
        createLeafNode(grammarAccess.getClosureTypeRefAccess().getCommaKeyword_1_1_0_2_0(), null); 
    }
(
(
		lv_varArgs_6_0=	'...' 
    {
        createLeafNode(grammarAccess.getClosureTypeRefAccess().getVarArgsFullStopFullStopFullStopKeyword_1_1_0_2_1_0(), "varArgs"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClosureTypeRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "varArgs", true, "...", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getClosureTypeRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getClosureTypeRefAccess().getParameterTypesB3JavaImportCrossReference_1_1_0_2_2_0(), "parameterTypes"); 
	}

)
))?)
    |((
(
		lv_varArgs_8_0=	'...' 
    {
        createLeafNode(grammarAccess.getClosureTypeRefAccess().getVarArgsFullStopFullStopFullStopKeyword_1_1_1_0_0(), "varArgs"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClosureTypeRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "varArgs", true, "...", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getClosureTypeRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getClosureTypeRefAccess().getParameterTypesB3JavaImportCrossReference_1_1_1_1_0(), "parameterTypes"); 
	}

)
)))?	')' 
    {
        createLeafNode(grammarAccess.getClosureTypeRefAccess().getRightParenthesisKeyword_1_2(), null); 
    }
	'=>' 
    {
        createLeafNode(grammarAccess.getClosureTypeRefAccess().getEqualsSignGreaterThanSignKeyword_1_3(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getClosureTypeRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getClosureTypeRefAccess().getReturnTypeB3JavaImportCrossReference_1_4_0(), "returnType"); 
	}

)
)))
;







// Entry rule entryRuleTypeRefParam
entryRuleTypeRefParam returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeRefParamRule(), currentNode); }
	 iv_ruleTypeRefParam=ruleTypeRefParam 
	 { $current=$iv_ruleTypeRefParam.current; } 
	 EOF 
;

// Rule TypeRefParam
ruleTypeRefParam returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeRefParamAccess().getTypeRefParserRuleCall(), currentNode); 
    }
    this_TypeRef_0=ruleTypeRef
    { 
        $current = $this_TypeRef_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRuleWildcardRefParam
entryRuleWildcardRefParam returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWildcardRefParamRule(), currentNode); }
	 iv_ruleWildcardRefParam=ruleWildcardRefParam 
	 { $current=$iv_ruleWildcardRefParam.current; } 
	 EOF 
;

// Rule WildcardRefParam
ruleWildcardRefParam returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getWildcardRefParamAccess().getB3WildcardTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getWildcardRefParamAccess().getB3WildcardTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'?' 
    {
        createLeafNode(grammarAccess.getWildcardRefParamAccess().getQuestionMarkKeyword_1(), null); 
    }
((	'extends' 
    {
        createLeafNode(grammarAccess.getWildcardRefParamAccess().getExtendsKeyword_2_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWildcardRefParamAccess().getUpperBoundsListTypeRefParserRuleCall_2_0_1_0(), currentNode); 
	    }
		lv_upperBoundsList_3_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWildcardRefParamRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"upperBoundsList",
	        		lv_upperBoundsList_3_0, 
	        		"TypeRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getWildcardRefParamAccess().getCommaKeyword_2_0_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWildcardRefParamAccess().getUpperBoundsListTypeRefParserRuleCall_2_0_2_1_0(), currentNode); 
	    }
		lv_upperBoundsList_5_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWildcardRefParamRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"upperBoundsList",
	        		lv_upperBoundsList_5_0, 
	        		"TypeRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
    |(	'super' 
    {
        createLeafNode(grammarAccess.getWildcardRefParamAccess().getSuperKeyword_2_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWildcardRefParamAccess().getLowerBoundsListTypeRefParserRuleCall_2_1_1_0(), currentNode); 
	    }
		lv_lowerBoundsList_7_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWildcardRefParamRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"lowerBoundsList",
	        		lv_lowerBoundsList_7_0, 
	        		"TypeRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))?)
;





// Entry rule entryRuleCachedExpression
entryRuleCachedExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCachedExpressionRule(), currentNode); }
	 iv_ruleCachedExpression=ruleCachedExpression 
	 { $current=$iv_ruleCachedExpression.current; } 
	 EOF 
;

// Rule CachedExpression
ruleCachedExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getCachedExpressionAccess().getBCachedExpressionAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getCachedExpressionAccess().getBCachedExpressionAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'cached' 
    {
        createLeafNode(grammarAccess.getCachedExpressionAccess().getCachedKeyword_0_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCachedExpressionAccess().getExprOrExpressionParserRuleCall_0_2_0(), currentNode); 
	    }
		lv_expr_2_0=ruleOrExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCachedExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_2_0, 
	        		"OrExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getCachedExpressionAccess().getOrExpressionParserRuleCall_1(), currentNode); 
    }
    this_OrExpression_3=ruleOrExpression
    { 
        $current = $this_OrExpression_3.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOrExpressionRule(), currentNode); }
	 iv_ruleOrExpression=ruleOrExpression 
	 { $current=$iv_ruleOrExpression.current; } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0(), currentNode); 
    }
    this_AndExpression_0=ruleAndExpression
    { 
        $current = $this_AndExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getOrExpressionAccess().getBOrExpressionLeftExprAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "leftExpr", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getOrExpressionAccess().getBOrExpressionLeftExprAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'||' 
    {
        createLeafNode(grammarAccess.getOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOrExpressionAccess().getRightExprAndExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_rightExpr_3_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightExpr",
	        		lv_rightExpr_3_0, 
	        		"AndExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAndExpressionRule(), currentNode); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAndExpressionAccess().getRelationalExpressionParserRuleCall_0(), currentNode); 
    }
    this_RelationalExpression_0=ruleRelationalExpression
    { 
        $current = $this_RelationalExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getAndExpressionAccess().getBAndExpressionLeftExprAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "leftExpr", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAndExpressionAccess().getBAndExpressionLeftExprAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'&&' 
    {
        createLeafNode(grammarAccess.getAndExpressionAccess().getAmpersandAmpersandKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAndExpressionAccess().getRightExprRelationalExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_rightExpr_3_0=ruleRelationalExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightExpr",
	        		lv_rightExpr_3_0, 
	        		"RelationalExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRelationalExpressionRule(), currentNode); }
	 iv_ruleRelationalExpression=ruleRelationalExpression 
	 { $current=$iv_ruleRelationalExpression.current; } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getInstanceOfExpressionParserRuleCall_0(), currentNode); 
    }
    this_InstanceOfExpression_0=ruleInstanceOfExpression
    { 
        $current = $this_InstanceOfExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getRelationalExpressionAccess().getBBinaryOpExpressionLeftExprAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "leftExpr", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getRelationalExpressionAccess().getBBinaryOpExpressionLeftExprAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getFunctionNameRelationalOperatorParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_functionName_2_0=ruleRelationalOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"functionName",
	        		lv_functionName_2_0, 
	        		"RelationalOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getRightExprInstanceOfExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_rightExpr_3_0=ruleInstanceOfExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightExpr",
	        		lv_rightExpr_3_0, 
	        		"InstanceOfExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleInstanceOfExpression
entryRuleInstanceOfExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInstanceOfExpressionRule(), currentNode); }
	 iv_ruleInstanceOfExpression=ruleInstanceOfExpression 
	 { $current=$iv_ruleInstanceOfExpression.current; } 
	 EOF 
;

// Rule InstanceOfExpression
ruleInstanceOfExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getInstanceOfExpressionAccess().getAdditiveExpressionParserRuleCall_0(), currentNode); 
    }
    this_AdditiveExpression_0=ruleAdditiveExpression
    { 
        $current = $this_AdditiveExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getInstanceOfExpressionAccess().getBBinaryOpExpressionLeftExprAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "leftExpr", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getInstanceOfExpressionAccess().getBBinaryOpExpressionLeftExprAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_functionName_2_0=	'instanceof' 
    {
        createLeafNode(grammarAccess.getInstanceOfExpressionAccess().getFunctionNameInstanceofKeyword_1_1_0(), "functionName"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInstanceOfExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "functionName", lv_functionName_2_0, "instanceof", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInstanceOfExpressionAccess().getRightExprLiteralTypeParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_rightExpr_3_0=ruleLiteralType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInstanceOfExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightExpr",
	        		lv_rightExpr_3_0, 
	        		"LiteralType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAdditiveExpressionRule(), currentNode); }
	 iv_ruleAdditiveExpression=ruleAdditiveExpression 
	 { $current=$iv_ruleAdditiveExpression.current; } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0(), currentNode); 
    }
    this_MultiplicativeExpression_0=ruleMultiplicativeExpression
    { 
        $current = $this_MultiplicativeExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getAdditiveExpressionAccess().getBBinaryOpExpressionLeftExprAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "leftExpr", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getBBinaryOpExpressionLeftExprAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_functionName_2_1=	'+' 
    {
        createLeafNode(grammarAccess.getAdditiveExpressionAccess().getFunctionNamePlusSignKeyword_1_1_0_0(), "functionName"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "functionName", lv_functionName_2_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_functionName_2_2=	'-' 
    {
        createLeafNode(grammarAccess.getAdditiveExpressionAccess().getFunctionNameHyphenMinusKeyword_1_1_0_1(), "functionName"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "functionName", lv_functionName_2_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRightExprMultiplicativeExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_rightExpr_3_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightExpr",
	        		lv_rightExpr_3_0, 
	        		"MultiplicativeExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMultiplicativeExpressionRule(), currentNode); }
	 iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression 
	 { $current=$iv_ruleMultiplicativeExpression.current; } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getSetExpressionParserRuleCall_0(), currentNode); 
    }
    this_SetExpression_0=ruleSetExpression
    { 
        $current = $this_SetExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getMultiplicativeExpressionAccess().getBBinaryOpExpressionLeftExprAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "leftExpr", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getBBinaryOpExpressionLeftExprAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_functionName_2_1=	'*' 
    {
        createLeafNode(grammarAccess.getMultiplicativeExpressionAccess().getFunctionNameAsteriskKeyword_1_1_0_0(), "functionName"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "functionName", lv_functionName_2_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_functionName_2_2=	'/' 
    {
        createLeafNode(grammarAccess.getMultiplicativeExpressionAccess().getFunctionNameSolidusKeyword_1_1_0_1(), "functionName"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "functionName", lv_functionName_2_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_functionName_2_3=	'%' 
    {
        createLeafNode(grammarAccess.getMultiplicativeExpressionAccess().getFunctionNamePercentSignKeyword_1_1_0_2(), "functionName"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "functionName", lv_functionName_2_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRightExprSetExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_rightExpr_3_0=ruleSetExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightExpr",
	        		lv_rightExpr_3_0, 
	        		"SetExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleSetExpression
entryRuleSetExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSetExpressionRule(), currentNode); }
	 iv_ruleSetExpression=ruleSetExpression 
	 { $current=$iv_ruleSetExpression.current; } 
	 EOF 
;

// Rule SetExpression
ruleSetExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSetExpressionAccess().getUnaryOrInfixExpressionParserRuleCall_0(), currentNode); 
    }
    this_UnaryOrInfixExpression_0=ruleUnaryOrInfixExpression
    { 
        $current = $this_UnaryOrInfixExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getSetExpressionAccess().getBBinaryOpExpressionLeftExprAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "leftExpr", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSetExpressionAccess().getBBinaryOpExpressionLeftExprAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_functionName_2_0=	'..' 
    {
        createLeafNode(grammarAccess.getSetExpressionAccess().getFunctionNameFullStopFullStopKeyword_1_1_0(), "functionName"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSetExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "functionName", lv_functionName_2_0, "..", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSetExpressionAccess().getRightExprUnaryOrInfixExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_rightExpr_3_0=ruleUnaryOrInfixExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSetExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightExpr",
	        		lv_rightExpr_3_0, 
	        		"UnaryOrInfixExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleUnaryOrInfixExpression
entryRuleUnaryOrInfixExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnaryOrInfixExpressionRule(), currentNode); }
	 iv_ruleUnaryOrInfixExpression=ruleUnaryOrInfixExpression 
	 { $current=$iv_ruleUnaryOrInfixExpression.current; } 
	 EOF 
;

// Rule UnaryOrInfixExpression
ruleUnaryOrInfixExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getUnaryOrInfixExpressionAccess().getPostopExpressionParserRuleCall_0(), currentNode); 
    }
    this_PostopExpression_0=rulePostopExpression
    { 
        $current = $this_PostopExpression_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getUnaryOrInfixExpressionAccess().getUnaryExpressionParserRuleCall_1(), currentNode); 
    }
    this_UnaryExpression_1=ruleUnaryExpression
    { 
        $current = $this_UnaryExpression_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getUnaryOrInfixExpressionAccess().getPreopExpressionParserRuleCall_2(), currentNode); 
    }
    this_PreopExpression_2=rulePreopExpression
    { 
        $current = $this_PreopExpression_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnaryExpressionRule(), currentNode); }
	 iv_ruleUnaryExpression=ruleUnaryExpression 
	 { $current=$iv_ruleUnaryExpression.current; } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getUnaryExpressionAccess().getBUnaryOpExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getUnaryExpressionAccess().getBUnaryOpExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_functionName_1_1=	'!' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getFunctionNameExclamationMarkKeyword_1_0_0(), "functionName"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "functionName", lv_functionName_1_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_functionName_1_2=	'-' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getFunctionNameHyphenMinusKeyword_1_0_1(), "functionName"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "functionName", lv_functionName_1_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getExprInfixExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_expr_2_0=ruleInfixExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_2_0, 
	        		"InfixExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulePreopExpression
entryRulePreopExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPreopExpressionRule(), currentNode); }
	 iv_rulePreopExpression=rulePreopExpression 
	 { $current=$iv_rulePreopExpression.current; } 
	 EOF 
;

// Rule PreopExpression
rulePreopExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getPreopExpressionAccess().getBUnaryPreOpExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPreopExpressionAccess().getBUnaryPreOpExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_functionName_1_1=	'++' 
    {
        createLeafNode(grammarAccess.getPreopExpressionAccess().getFunctionNamePlusSignPlusSignKeyword_1_0_0(), "functionName"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPreopExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "functionName", lv_functionName_1_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_functionName_1_2=	'--' 
    {
        createLeafNode(grammarAccess.getPreopExpressionAccess().getFunctionNameHyphenMinusHyphenMinusKeyword_1_0_1(), "functionName"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPreopExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "functionName", lv_functionName_1_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPreopExpressionAccess().getExprInfixExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_expr_2_0=ruleInfixExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPreopExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_2_0, 
	        		"InfixExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulePostopExpression
entryRulePostopExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPostopExpressionRule(), currentNode); }
	 iv_rulePostopExpression=rulePostopExpression 
	 { $current=$iv_rulePostopExpression.current; } 
	 EOF 
;

// Rule PostopExpression
rulePostopExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPostopExpressionAccess().getInfixExpressionParserRuleCall_0(), currentNode); 
    }
    this_InfixExpression_0=ruleInfixExpression
    { 
        $current = $this_InfixExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getPostopExpressionAccess().getBUnaryPostOpExpressionExprAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "expr", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPostopExpressionAccess().getBUnaryPostOpExpressionExprAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_functionName_2_1=	'--' 
    {
        createLeafNode(grammarAccess.getPostopExpressionAccess().getFunctionNameHyphenMinusHyphenMinusKeyword_1_1_0_0(), "functionName"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPostopExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "functionName", lv_functionName_2_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_functionName_2_2=	'++' 
    {
        createLeafNode(grammarAccess.getPostopExpressionAccess().getFunctionNamePlusSignPlusSignKeyword_1_1_0_1(), "functionName"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPostopExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "functionName", lv_functionName_2_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
))?)
;





// Entry rule entryRuleInfixExpression
entryRuleInfixExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInfixExpressionRule(), currentNode); }
	 iv_ruleInfixExpression=ruleInfixExpression 
	 { $current=$iv_ruleInfixExpression.current; } 
	 EOF 
;

// Rule InfixExpression
ruleInfixExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getInfixExpressionAccess().getCallExpressionParserRuleCall_0(), currentNode); 
    }
    this_CallExpression_0=ruleCallExpression
    { 
        $current = $this_CallExpression_0.current; 
        currentNode = currentNode.getParent();
    }
(((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getInfixExpressionAccess().getBCallExpressionFuncExprAction_1_0_0().getType().getClassifier());
        try {
        	factory.set(temp, "funcExpr", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getInfixExpressionAccess().getBCallExpressionFuncExprAction_1_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'.' 
    {
        createLeafNode(grammarAccess.getInfixExpressionAccess().getFullStopKeyword_1_0_1(), null); 
    }
(
(
		lv_name_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getInfixExpressionAccess().getNameIDTerminalRuleCall_1_0_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInfixExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getInfixExpressionAccess().getLeftParenthesisKeyword_1_0_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInfixExpressionAccess().getParameterListParameterListParserRuleCall_1_0_4_0(), currentNode); 
	    }
		lv_parameterList_5_0=ruleParameterList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInfixExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"parameterList",
	        		lv_parameterList_5_0, 
	        		"ParameterList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	')' 
    {
        createLeafNode(grammarAccess.getInfixExpressionAccess().getRightParenthesisKeyword_1_0_5(), null); 
    }
)
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getInfixExpressionAccess().getBAtExpressionObjExprAction_1_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "objExpr", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getInfixExpressionAccess().getBAtExpressionObjExprAction_1_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'[' 
    {
        createLeafNode(grammarAccess.getInfixExpressionAccess().getLeftSquareBracketKeyword_1_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInfixExpressionAccess().getIndexExprExpressionParserRuleCall_1_1_2_0(), currentNode); 
	    }
		lv_indexExpr_9_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInfixExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"indexExpr",
	        		lv_indexExpr_9_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	']' 
    {
        createLeafNode(grammarAccess.getInfixExpressionAccess().getRightSquareBracketKeyword_1_1_3(), null); 
    }
)
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getInfixExpressionAccess().getBFeatureExpressionObjExprAction_1_2_0().getType().getClassifier());
        try {
        	factory.set(temp, "objExpr", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getInfixExpressionAccess().getBFeatureExpressionObjExprAction_1_2_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'.' 
    {
        createLeafNode(grammarAccess.getInfixExpressionAccess().getFullStopKeyword_1_2_1(), null); 
    }
(
(
		lv_featureName_13_0=RULE_ID
		{
			createLeafNode(grammarAccess.getInfixExpressionAccess().getFeatureNameIDTerminalRuleCall_1_2_2_0(), "featureName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInfixExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"featureName",
	        		lv_featureName_13_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)))*)
;





// Entry rule entryRuleCallExpression
entryRuleCallExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCallExpressionRule(), currentNode); }
	 iv_ruleCallExpression=ruleCallExpression 
	 { $current=$iv_ruleCallExpression.current; } 
	 EOF 
;

// Rule CallExpression
ruleCallExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getCallExpressionAccess().getPrimaryExpressionParserRuleCall_0(), currentNode); 
    }
    this_PrimaryExpression_0=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getCallExpressionAccess().getBCallExpressionFuncExprAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "funcExpr", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getCallExpressionAccess().getBCallExpressionFuncExprAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'(' 
    {
        createLeafNode(grammarAccess.getCallExpressionAccess().getLeftParenthesisKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCallExpressionAccess().getParameterListParameterListParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_parameterList_3_0=ruleParameterList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCallExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"parameterList",
	        		lv_parameterList_3_0, 
	        		"ParameterList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	')' 
    {
        createLeafNode(grammarAccess.getCallExpressionAccess().getRightParenthesisKeyword_1_3(), null); 
    }
)*)
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimaryExpressionRule(), currentNode); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFeatureCallParserRuleCall_0(), currentNode); 
    }
    this_FeatureCall_0=ruleFeatureCall
    { 
        $current = $this_FeatureCall_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getConstructorCallExpressionParserRuleCall_1(), currentNode); 
    }
    this_ConstructorCallExpression_1=ruleConstructorCallExpression
    { 
        $current = $this_ConstructorCallExpression_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getVariableValueParserRuleCall_2(), currentNode); 
    }
    this_VariableValue_2=ruleVariableValue
    { 
        $current = $this_VariableValue_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_3(), currentNode); 
    }
    this_Literal_3=ruleLiteral
    { 
        $current = $this_Literal_3.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getPropertyValueParserRuleCall_4(), currentNode); 
    }
    this_PropertyValue_4=rulePropertyValue
    { 
        $current = $this_PropertyValue_4.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getKeywordVariablesParserRuleCall_5(), currentNode); 
    }
    this_KeywordVariables_5=ruleKeywordVariables
    { 
        $current = $this_KeywordVariables_5.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParanthesizedExpressionParserRuleCall_6(), currentNode); 
    }
    this_ParanthesizedExpression_6=ruleParanthesizedExpression
    { 
        $current = $this_ParanthesizedExpression_6.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIfExpressionParserRuleCall_7(), currentNode); 
    }
    this_IfExpression_7=ruleIfExpression
    { 
        $current = $this_IfExpression_7.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getBlockExpressionParserRuleCall_8(), currentNode); 
    }
    this_BlockExpression_8=ruleBlockExpression
    { 
        $current = $this_BlockExpression_8.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getSwitchExpressionParserRuleCall_9(), currentNode); 
    }
    this_SwitchExpression_9=ruleSwitchExpression
    { 
        $current = $this_SwitchExpression_9.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getThrowExpressionParserRuleCall_10(), currentNode); 
    }
    this_ThrowExpression_10=ruleThrowExpression
    { 
        $current = $this_ThrowExpression_10.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getTryCatchExpressionParserRuleCall_11(), currentNode); 
    }
    this_TryCatchExpression_11=ruleTryCatchExpression
    { 
        $current = $this_TryCatchExpression_11.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getWildcardExpressionParserRuleCall_12(), currentNode); 
    }
    this_WildcardExpression_12=ruleWildcardExpression
    { 
        $current = $this_WildcardExpression_12.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleWildcardExpression
entryRuleWildcardExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWildcardExpressionRule(), currentNode); }
	 iv_ruleWildcardExpression=ruleWildcardExpression 
	 { $current=$iv_ruleWildcardExpression.current; } 
	 EOF 
;

// Rule WildcardExpression
ruleWildcardExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getWildcardExpressionAccess().getBLiteralAnyAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getWildcardExpressionAccess().getBLiteralAnyAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'_' 
    {
        createLeafNode(grammarAccess.getWildcardExpressionAccess().get_Keyword_1(), null); 
    }
)
;





// Entry rule entryRuleThrowExpression
entryRuleThrowExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getThrowExpressionRule(), currentNode); }
	 iv_ruleThrowExpression=ruleThrowExpression 
	 { $current=$iv_ruleThrowExpression.current; } 
	 EOF 
;

// Rule ThrowExpression
ruleThrowExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getThrowExpressionAccess().getBThrowExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getThrowExpressionAccess().getBThrowExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'throw' 
    {
        createLeafNode(grammarAccess.getThrowExpressionAccess().getThrowKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getThrowExpressionAccess().getExprExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getThrowExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleTryCatchExpression
entryRuleTryCatchExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTryCatchExpressionRule(), currentNode); }
	 iv_ruleTryCatchExpression=ruleTryCatchExpression 
	 { $current=$iv_ruleTryCatchExpression.current; } 
	 EOF 
;

// Rule TryCatchExpression
ruleTryCatchExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getTryCatchExpressionAccess().getBTryExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTryCatchExpressionAccess().getBTryExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'try' 
    {
        createLeafNode(grammarAccess.getTryCatchExpressionAccess().getTryKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTryCatchExpressionAccess().getTryExprExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_tryExpr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTryCatchExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"tryExpr",
	        		lv_tryExpr_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTryCatchExpressionAccess().getCatchBlocksCatchBlockParserRuleCall_3_0(), currentNode); 
	    }
		lv_catchBlocks_3_0=ruleCatchBlock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTryCatchExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"catchBlocks",
	        		lv_catchBlocks_3_0, 
	        		"CatchBlock", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(	'finally' 
    {
        createLeafNode(grammarAccess.getTryCatchExpressionAccess().getFinallyKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTryCatchExpressionAccess().getFinallyExprExpressionParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_finallyExpr_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTryCatchExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"finallyExpr",
	        		lv_finallyExpr_5_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	'endtry' 
    {
        createLeafNode(grammarAccess.getTryCatchExpressionAccess().getEndtryKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleCatchBlock
entryRuleCatchBlock returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCatchBlockRule(), currentNode); }
	 iv_ruleCatchBlock=ruleCatchBlock 
	 { $current=$iv_ruleCatchBlock.current; } 
	 EOF 
;

// Rule CatchBlock
ruleCatchBlock returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getCatchBlockAccess().getBCatchAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getCatchBlockAccess().getBCatchAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'catch' 
    {
        createLeafNode(grammarAccess.getCatchBlockAccess().getCatchKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCatchBlockAccess().getExceptionTypeTypeRefParserRuleCall_2_0(), currentNode); 
	    }
		lv_exceptionType_2_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCatchBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exceptionType",
	        		lv_exceptionType_2_0, 
	        		"TypeRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_varname_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getCatchBlockAccess().getVarnameIDTerminalRuleCall_3_0(), "varname"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCatchBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"varname",
	        		lv_varname_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getCatchBlockAccess().getColonKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCatchBlockAccess().getCatchExprExpressionParserRuleCall_5_0(), currentNode); 
	    }
		lv_catchExpr_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCatchBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"catchExpr",
	        		lv_catchExpr_5_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleSwitchExpression
entryRuleSwitchExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSwitchExpressionRule(), currentNode); }
	 iv_ruleSwitchExpression=ruleSwitchExpression 
	 { $current=$iv_ruleSwitchExpression.current; } 
	 EOF 
;

// Rule SwitchExpression
ruleSwitchExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getSwitchExpressionAccess().getBSwitchExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSwitchExpressionAccess().getBSwitchExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'switch' 
    {
        createLeafNode(grammarAccess.getSwitchExpressionAccess().getSwitchKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSwitchExpressionAccess().getSwitchExpressionExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_switchExpression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSwitchExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"switchExpression",
	        		lv_switchExpression_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSwitchExpressionAccess().getCaseListCaseParserRuleCall_3_0(), currentNode); 
	    }
		lv_caseList_3_0=ruleCase		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSwitchExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"caseList",
	        		lv_caseList_3_0, 
	        		"Case", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+	'endswitch' 
    {
        createLeafNode(grammarAccess.getSwitchExpressionAccess().getEndswitchKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleCase
entryRuleCase returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCaseRule(), currentNode); }
	 iv_ruleCase=ruleCase 
	 { $current=$iv_ruleCase.current; } 
	 EOF 
;

// Rule Case
ruleCase returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getCaseAccess().getBCaseAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getCaseAccess().getBCaseAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'case' 
    {
        createLeafNode(grammarAccess.getCaseAccess().getCaseKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCaseAccess().getConditionExprExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_conditionExpr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"conditionExpr",
	        		lv_conditionExpr_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getCaseAccess().getColonKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCaseAccess().getThenExprExpressionParserRuleCall_4_0(), currentNode); 
	    }
		lv_thenExpr_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"thenExpr",
	        		lv_thenExpr_4_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleBlockExpression
entryRuleBlockExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBlockExpressionRule(), currentNode); }
	 iv_ruleBlockExpression=ruleBlockExpression 
	 { $current=$iv_ruleBlockExpression.current; } 
	 EOF 
;

// Rule BlockExpression
ruleBlockExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getBlockExpressionAccess().getBChainedExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBlockExpressionAccess().getBChainedExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'{' 
    {
        createLeafNode(grammarAccess.getBlockExpressionAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBlockExpressionAccess().getExpressionsTopLevelExpressionParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_expressions_2_0=ruleTopLevelExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBlockExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressions",
	        		lv_expressions_2_0, 
	        		"TopLevelExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getBlockExpressionAccess().getSemicolonKeyword_2_1(), null); 
    }
)*	'}' 
    {
        createLeafNode(grammarAccess.getBlockExpressionAccess().getRightCurlyBracketKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleIfExpression
entryRuleIfExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIfExpressionRule(), currentNode); }
	 iv_ruleIfExpression=ruleIfExpression 
	 { $current=$iv_ruleIfExpression.current; } 
	 EOF 
;

// Rule IfExpression
ruleIfExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getIfExpressionAccess().getBIfExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getIfExpressionAccess().getBIfExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'if' 
    {
        createLeafNode(grammarAccess.getIfExpressionAccess().getIfKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfExpressionAccess().getConditionExprExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_conditionExpr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"conditionExpr",
	        		lv_conditionExpr_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'then' 
    {
        createLeafNode(grammarAccess.getIfExpressionAccess().getThenKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfExpressionAccess().getThenExprExpressionParserRuleCall_4_0(), currentNode); 
	    }
		lv_thenExpr_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"thenExpr",
	        		lv_thenExpr_4_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfExpressionAccess().getElseExprElseIfExpressionParserRuleCall_5_0_0(), currentNode); 
	    }
		lv_elseExpr_5_0=ruleElseIfExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"elseExpr",
	        		lv_elseExpr_5_0, 
	        		"ElseIfExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(	'else' 
    {
        createLeafNode(grammarAccess.getIfExpressionAccess().getElseKeyword_5_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfExpressionAccess().getElseExprExpressionParserRuleCall_5_1_1_0(), currentNode); 
	    }
		lv_elseExpr_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"elseExpr",
	        		lv_elseExpr_7_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))?	'endif' 
    {
        createLeafNode(grammarAccess.getIfExpressionAccess().getEndifKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleElseIfExpression
entryRuleElseIfExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getElseIfExpressionRule(), currentNode); }
	 iv_ruleElseIfExpression=ruleElseIfExpression 
	 { $current=$iv_ruleElseIfExpression.current; } 
	 EOF 
;

// Rule ElseIfExpression
ruleElseIfExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getElseIfExpressionAccess().getBIfExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getElseIfExpressionAccess().getBIfExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'elseif' 
    {
        createLeafNode(grammarAccess.getElseIfExpressionAccess().getElseifKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getElseIfExpressionAccess().getConditionExprExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_conditionExpr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElseIfExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"conditionExpr",
	        		lv_conditionExpr_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'then' 
    {
        createLeafNode(grammarAccess.getElseIfExpressionAccess().getThenKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getElseIfExpressionAccess().getThenExprExpressionParserRuleCall_4_0(), currentNode); 
	    }
		lv_thenExpr_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElseIfExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"thenExpr",
	        		lv_thenExpr_4_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getElseIfExpressionAccess().getElseExprElseIfExpressionParserRuleCall_5_0_0(), currentNode); 
	    }
		lv_elseExpr_5_0=ruleElseIfExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElseIfExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"elseExpr",
	        		lv_elseExpr_5_0, 
	        		"ElseIfExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(	'else' 
    {
        createLeafNode(grammarAccess.getElseIfExpressionAccess().getElseKeyword_5_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getElseIfExpressionAccess().getElseExprExpressionParserRuleCall_5_1_1_0(), currentNode); 
	    }
		lv_elseExpr_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElseIfExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"elseExpr",
	        		lv_elseExpr_7_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))?)
;





// Entry rule entryRulePropertyValue
entryRulePropertyValue returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPropertyValueRule(), currentNode); }
	 iv_rulePropertyValue=rulePropertyValue 
	 { $current=$iv_rulePropertyValue.current; } 
	 EOF 
;

// Rule PropertyValue
rulePropertyValue returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getPropertyValueAccess().getBVariableExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPropertyValueAccess().getBVariableExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_name_1_0=RULE_PID
		{
			createLeafNode(grammarAccess.getPropertyValueAccess().getNamePIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"PID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleVariableValue
entryRuleVariableValue returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVariableValueRule(), currentNode); }
	 iv_ruleVariableValue=ruleVariableValue 
	 { $current=$iv_ruleVariableValue.current; } 
	 EOF 
;

// Rule VariableValue
ruleVariableValue returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getVariableValueAccess().getBVariableExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getVariableValueAccess().getBVariableExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getVariableValueAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleKeywordVariables
entryRuleKeywordVariables returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getKeywordVariablesRule(), currentNode); }
	 iv_ruleKeywordVariables=ruleKeywordVariables 
	 { $current=$iv_ruleKeywordVariables.current; } 
	 EOF 
;

// Rule KeywordVariables
ruleKeywordVariables returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getKeywordVariablesAccess().getBVariableExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getKeywordVariablesAccess().getBVariableExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_name_1_1=	'input' 
    {
        createLeafNode(grammarAccess.getKeywordVariablesAccess().getNameInputKeyword_1_0_0(), "name"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getKeywordVariablesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_name_1_2=	'output' 
    {
        createLeafNode(grammarAccess.getKeywordVariablesAccess().getNameOutputKeyword_1_0_1(), "name"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getKeywordVariablesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_name_1_3=	'properties' 
    {
        createLeafNode(grammarAccess.getKeywordVariablesAccess().getNamePropertiesKeyword_1_0_2(), "name"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getKeywordVariablesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_name_1_4=	'unit' 
    {
        createLeafNode(grammarAccess.getKeywordVariablesAccess().getNameUnitKeyword_1_0_3(), "name"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getKeywordVariablesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
))
;





// Entry rule entryRuleFeatureCall
entryRuleFeatureCall returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFeatureCallRule(), currentNode); }
	 iv_ruleFeatureCall=ruleFeatureCall 
	 { $current=$iv_ruleFeatureCall.current; } 
	 EOF 
;

// Rule FeatureCall
ruleFeatureCall returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getFeatureCallAccess().getOperationCallParserRuleCall(), currentNode); 
    }
    this_OperationCall_0=ruleOperationCall
    { 
        $current = $this_OperationCall_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRuleOperationCall
entryRuleOperationCall returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOperationCallRule(), currentNode); }
	 iv_ruleOperationCall=ruleOperationCall 
	 { $current=$iv_ruleOperationCall.current; } 
	 EOF 
;

// Rule OperationCall
ruleOperationCall returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getOperationCallAccess().getBCallExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getOperationCallAccess().getBCallExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_name_1_1=RULE_ID
		{
			createLeafNode(grammarAccess.getOperationCallAccess().getNameIDTerminalRuleCall_1_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_1, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_name_1_2=RULE_PID
		{
			createLeafNode(grammarAccess.getOperationCallAccess().getNamePIDTerminalRuleCall_1_0_1(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_2, 
	        		"PID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)	'(' 
    {
        createLeafNode(grammarAccess.getOperationCallAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCallAccess().getParameterListParameterListParserRuleCall_3_0(), currentNode); 
	    }
		lv_parameterList_3_0=ruleParameterList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"parameterList",
	        		lv_parameterList_3_0, 
	        		"ParameterList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	')' 
    {
        createLeafNode(grammarAccess.getOperationCallAccess().getRightParenthesisKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleConstructorCallExpression
entryRuleConstructorCallExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConstructorCallExpressionRule(), currentNode); }
	 iv_ruleConstructorCallExpression=ruleConstructorCallExpression 
	 { $current=$iv_ruleConstructorCallExpression.current; } 
	 EOF 
;

// Rule ConstructorCallExpression
ruleConstructorCallExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getConstructorCallExpressionAccess().getBCreateExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getConstructorCallExpressionAccess().getBCreateExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'new' 
    {
        createLeafNode(grammarAccess.getConstructorCallExpressionAccess().getNewKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConstructorCallExpressionAccess().getTypeExprLiteralTypeParserRuleCall_2_0(), currentNode); 
	    }
		lv_typeExpr_2_0=ruleLiteralType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructorCallExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"typeExpr",
	        		lv_typeExpr_2_0, 
	        		"LiteralType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'(' 
    {
        createLeafNode(grammarAccess.getConstructorCallExpressionAccess().getLeftParenthesisKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConstructorCallExpressionAccess().getParameterListParameterListParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_parameterList_4_0=ruleParameterList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructorCallExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"parameterList",
	        		lv_parameterList_4_0, 
	        		"ParameterList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	')' 
    {
        createLeafNode(grammarAccess.getConstructorCallExpressionAccess().getRightParenthesisKeyword_3_2(), null); 
    }
)?(	'as' 
    {
        createLeafNode(grammarAccess.getConstructorCallExpressionAccess().getAsKeyword_4_0(), null); 
    }
(
(
		lv_alias_7_0=RULE_ID
		{
			createLeafNode(grammarAccess.getConstructorCallExpressionAccess().getAliasIDTerminalRuleCall_4_1_0(), "alias"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructorCallExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"alias",
	        		lv_alias_7_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConstructorCallExpressionAccess().getContextBlockContextBlock_CreationParserRuleCall_5_0(), currentNode); 
	    }
		lv_contextBlock_8_0=ruleContextBlock_Creation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructorCallExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"contextBlock",
	        		lv_contextBlock_8_0, 
	        		"ContextBlock_Creation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;







// Entry rule entryRuleContextBlock_Creation
entryRuleContextBlock_Creation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getContextBlock_CreationRule(), currentNode); }
	 iv_ruleContextBlock_Creation=ruleContextBlock_Creation 
	 { $current=$iv_ruleContextBlock_Creation.current; } 
	 EOF 
;

// Rule ContextBlock_Creation
ruleContextBlock_Creation returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getContextBlock_CreationAccess().getBChainedExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getContextBlock_CreationAccess().getBChainedExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'{' 
    {
        createLeafNode(grammarAccess.getContextBlock_CreationAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getContextBlock_CreationAccess().getExpressionsTopLevelExpressionParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_expressions_2_0=ruleTopLevelExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getContextBlock_CreationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressions",
	        		lv_expressions_2_0, 
	        		"TopLevelExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getContextBlock_CreationAccess().getSemicolonKeyword_2_1(), null); 
    }
)*	'}' 
    {
        createLeafNode(grammarAccess.getContextBlock_CreationAccess().getRightCurlyBracketKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleFunctionDefinition
entryRuleFunctionDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFunctionDefinitionRule(), currentNode); }
	 iv_ruleFunctionDefinition=ruleFunctionDefinition 
	 { $current=$iv_ruleFunctionDefinition.current; } 
	 EOF 
;

// Rule FunctionDefinition
ruleFunctionDefinition returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getFunctionDefinitionAccess().getBDefFunctionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getFunctionDefinitionAccess().getBDefFunctionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionDefinitionAccess().getFunctionFunctionParserRuleCall_1_0(), currentNode); 
	    }
		lv_function_1_0=ruleFunction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"function",
	        		lv_function_1_0, 
	        		"Function", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLiteralRule(), currentNode); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getValueLiteralParserRuleCall_0(), currentNode); 
    }
    this_ValueLiteral_0=ruleValueLiteral
    { 
        $current = $this_ValueLiteral_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getRegexpLiteralParserRuleCall_1(), currentNode); 
    }
    this_RegexpLiteral_1=ruleRegexpLiteral
    { 
        $current = $this_RegexpLiteral_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getLiteralMapParserRuleCall_2(), currentNode); 
    }
    this_LiteralMap_2=ruleLiteralMap
    { 
        $current = $this_LiteralMap_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getLiteralListParserRuleCall_3(), currentNode); 
    }
    this_LiteralList_3=ruleLiteralList
    { 
        $current = $this_LiteralList_3.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getLiteralFunctionParserRuleCall_4(), currentNode); 
    }
    this_LiteralFunction_4=ruleLiteralFunction
    { 
        $current = $this_LiteralFunction_4.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleLiteralList
entryRuleLiteralList returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLiteralListRule(), currentNode); }
	 iv_ruleLiteralList=ruleLiteralList 
	 { $current=$iv_ruleLiteralList.current; } 
	 EOF 
;

// Rule LiteralList
ruleLiteralList returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getLiteralListAccess().getBLiteralListExpressionAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLiteralListAccess().getBLiteralListExpressionAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'[' 
    {
        createLeafNode(grammarAccess.getLiteralListAccess().getLeftSquareBracketKeyword_0_1(), null); 
    }
(	'<' 
    {
        createLeafNode(grammarAccess.getLiteralListAccess().getLessThanSignKeyword_0_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLiteralListAccess().getEntryTypeTypeRefParserRuleCall_0_2_1_0(), currentNode); 
	    }
		lv_entryType_3_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"entryType",
	        		lv_entryType_3_0, 
	        		"TypeRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'>' 
    {
        createLeafNode(grammarAccess.getLiteralListAccess().getGreaterThanSignKeyword_0_2_2(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLiteralListAccess().getEntriesExpressionParserRuleCall_0_3_0(), currentNode); 
	    }
		lv_entries_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"entries",
	        		lv_entries_5_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getLiteralListAccess().getCommaKeyword_0_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLiteralListAccess().getEntriesExpressionParserRuleCall_0_4_1_0(), currentNode); 
	    }
		lv_entries_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"entries",
	        		lv_entries_7_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	']' 
    {
        createLeafNode(grammarAccess.getLiteralListAccess().getRightSquareBracketKeyword_0_5(), null); 
    }
)
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getLiteralListAccess().getBLiteralListExpressionAction_1_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLiteralListAccess().getBLiteralListExpressionAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'[' 
    {
        createLeafNode(grammarAccess.getLiteralListAccess().getLeftSquareBracketKeyword_1_1(), null); 
    }
	'<' 
    {
        createLeafNode(grammarAccess.getLiteralListAccess().getLessThanSignKeyword_1_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLiteralListAccess().getEntryTypeTypeRefParserRuleCall_1_3_0(), currentNode); 
	    }
		lv_entryType_12_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"entryType",
	        		lv_entryType_12_0, 
	        		"TypeRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'>' 
    {
        createLeafNode(grammarAccess.getLiteralListAccess().getGreaterThanSignKeyword_1_4(), null); 
    }
	']' 
    {
        createLeafNode(grammarAccess.getLiteralListAccess().getRightSquareBracketKeyword_1_5(), null); 
    }
))
;





// Entry rule entryRuleLiteralMap
entryRuleLiteralMap returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLiteralMapRule(), currentNode); }
	 iv_ruleLiteralMap=ruleLiteralMap 
	 { $current=$iv_ruleLiteralMap.current; } 
	 EOF 
;

// Rule LiteralMap
ruleLiteralMap returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getLiteralMapAccess().getBLiteralMapExpressionAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLiteralMapAccess().getBLiteralMapExpressionAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'[' 
    {
        createLeafNode(grammarAccess.getLiteralMapAccess().getLeftSquareBracketKeyword_0_1(), null); 
    }
(	'<' 
    {
        createLeafNode(grammarAccess.getLiteralMapAccess().getLessThanSignKeyword_0_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLiteralMapAccess().getKeyTypeTypeRefParserRuleCall_0_2_1_0(), currentNode); 
	    }
		lv_keyType_3_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralMapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"keyType",
	        		lv_keyType_3_0, 
	        		"TypeRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	',' 
    {
        createLeafNode(grammarAccess.getLiteralMapAccess().getCommaKeyword_0_2_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLiteralMapAccess().getValueTypeTypeRefParserRuleCall_0_2_3_0(), currentNode); 
	    }
		lv_valueType_5_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralMapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"valueType",
	        		lv_valueType_5_0, 
	        		"TypeRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'>' 
    {
        createLeafNode(grammarAccess.getLiteralMapAccess().getGreaterThanSignKeyword_0_2_4(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLiteralMapAccess().getEntriesMapEntryParserRuleCall_0_3_0(), currentNode); 
	    }
		lv_entries_7_0=ruleMapEntry		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralMapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"entries",
	        		lv_entries_7_0, 
	        		"MapEntry", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getLiteralMapAccess().getCommaKeyword_0_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLiteralMapAccess().getEntriesMapEntryParserRuleCall_0_4_1_0(), currentNode); 
	    }
		lv_entries_9_0=ruleMapEntry		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralMapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"entries",
	        		lv_entries_9_0, 
	        		"MapEntry", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	']' 
    {
        createLeafNode(grammarAccess.getLiteralMapAccess().getRightSquareBracketKeyword_0_5(), null); 
    }
)
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getLiteralMapAccess().getBLiteralMapExpressionAction_1_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLiteralMapAccess().getBLiteralMapExpressionAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'[' 
    {
        createLeafNode(grammarAccess.getLiteralMapAccess().getLeftSquareBracketKeyword_1_1(), null); 
    }
	'<' 
    {
        createLeafNode(grammarAccess.getLiteralMapAccess().getLessThanSignKeyword_1_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLiteralMapAccess().getKeyTypeTypeRefParserRuleCall_1_3_0(), currentNode); 
	    }
		lv_keyType_14_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralMapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"keyType",
	        		lv_keyType_14_0, 
	        		"TypeRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	',' 
    {
        createLeafNode(grammarAccess.getLiteralMapAccess().getCommaKeyword_1_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLiteralMapAccess().getValueTypeTypeRefParserRuleCall_1_5_0(), currentNode); 
	    }
		lv_valueType_16_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralMapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"valueType",
	        		lv_valueType_16_0, 
	        		"TypeRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'>' 
    {
        createLeafNode(grammarAccess.getLiteralMapAccess().getGreaterThanSignKeyword_1_6(), null); 
    }
	']' 
    {
        createLeafNode(grammarAccess.getLiteralMapAccess().getRightSquareBracketKeyword_1_7(), null); 
    }
))
;





// Entry rule entryRuleLiteralFunction
entryRuleLiteralFunction returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLiteralFunctionRule(), currentNode); }
	 iv_ruleLiteralFunction=ruleLiteralFunction 
	 { $current=$iv_ruleLiteralFunction.current; } 
	 EOF 
;

// Rule LiteralFunction
ruleLiteralFunction returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'{' 
    {
        createLeafNode(grammarAccess.getLiteralFunctionAccess().getLeftCurlyBracketKeyword_0(), null); 
    }

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralFunctionAccess().getClosureExpressionParserRuleCall_1(), currentNode); 
    }
    this_ClosureExpression_1=ruleClosureExpression
    { 
        $current = $this_ClosureExpression_1.current; 
        currentNode = currentNode.getParent();
    }
	'}' 
    {
        createLeafNode(grammarAccess.getLiteralFunctionAccess().getRightCurlyBracketKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleClosureExpression
entryRuleClosureExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getClosureExpressionRule(), currentNode); }
	 iv_ruleClosureExpression=ruleClosureExpression 
	 { $current=$iv_ruleClosureExpression.current; } 
	 EOF 
;

// Rule ClosureExpression
ruleClosureExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getClosureExpressionAccess().getB3FunctionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getClosureExpressionAccess().getB3FunctionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'<' 
    {
        createLeafNode(grammarAccess.getClosureExpressionAccess().getLessThanSignKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClosureExpressionAccess().getReturnTypeTypeRefParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_returnType_2_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClosureExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"returnType",
	        		lv_returnType_2_0, 
	        		"TypeRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'>' 
    {
        createLeafNode(grammarAccess.getClosureExpressionAccess().getGreaterThanSignKeyword_1_2(), null); 
    }
)?(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClosureExpressionAccess().getParametersParameterDeclarationParserRuleCall_2_0_0_0(), currentNode); 
	    }
		lv_parameters_4_0=ruleParameterDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClosureExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_4_0, 
	        		"ParameterDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getClosureExpressionAccess().getCommaKeyword_2_0_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClosureExpressionAccess().getParametersParameterDeclarationParserRuleCall_2_0_1_1_0(), currentNode); 
	    }
		lv_parameters_6_0=ruleParameterDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClosureExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_6_0, 
	        		"ParameterDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*(	',' 
    {
        createLeafNode(grammarAccess.getClosureExpressionAccess().getCommaKeyword_2_0_2_0(), null); 
    }
(
(
		lv_varArgs_8_0=	'...' 
    {
        createLeafNode(grammarAccess.getClosureExpressionAccess().getVarArgsFullStopFullStopFullStopKeyword_2_0_2_1_0(), "varArgs"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClosureExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "varArgs", true, "...", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClosureExpressionAccess().getParametersParameterDeclarationParserRuleCall_2_0_2_2_0(), currentNode); 
	    }
		lv_parameters_9_0=ruleParameterDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClosureExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_9_0, 
	        		"ParameterDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
    |((
(
		lv_varArgs_10_0=	'...' 
    {
        createLeafNode(grammarAccess.getClosureExpressionAccess().getVarArgsFullStopFullStopFullStopKeyword_2_1_0_0(), "varArgs"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClosureExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "varArgs", true, "...", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClosureExpressionAccess().getParametersParameterDeclarationParserRuleCall_2_1_1_0(), currentNode); 
	    }
		lv_parameters_11_0=ruleParameterDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClosureExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_11_0, 
	        		"ParameterDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))?	'|' 
    {
        createLeafNode(grammarAccess.getClosureExpressionAccess().getVerticalLineKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClosureExpressionAccess().getFuncExprOneOrManyExpressionsParserRuleCall_4_0(), currentNode); 
	    }
		lv_funcExpr_13_0=ruleOneOrManyExpressions		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClosureExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"funcExpr",
	        		lv_funcExpr_13_0, 
	        		"OneOrManyExpressions", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleOneOrManyExpressions
entryRuleOneOrManyExpressions returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOneOrManyExpressionsRule(), currentNode); }
	 iv_ruleOneOrManyExpressions=ruleOneOrManyExpressions 
	 { $current=$iv_ruleOneOrManyExpressions.current; } 
	 EOF 
;

// Rule OneOrManyExpressions
ruleOneOrManyExpressions returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getOneOrManyExpressionsAccess().getBlockExpressionWithoutBracketsParserRuleCall_0(), currentNode); 
    }
    this_BlockExpressionWithoutBrackets_0=ruleBlockExpressionWithoutBrackets
    { 
        $current = $this_BlockExpressionWithoutBrackets_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getOneOrManyExpressionsAccess().getExpressionParserRuleCall_1(), currentNode); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleBlockExpressionWithoutBrackets
entryRuleBlockExpressionWithoutBrackets returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBlockExpressionWithoutBracketsRule(), currentNode); }
	 iv_ruleBlockExpressionWithoutBrackets=ruleBlockExpressionWithoutBrackets 
	 { $current=$iv_ruleBlockExpressionWithoutBrackets.current; } 
	 EOF 
;

// Rule BlockExpressionWithoutBrackets
ruleBlockExpressionWithoutBrackets returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getBlockExpressionWithoutBracketsAccess().getBChainedExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBlockExpressionWithoutBracketsAccess().getBChainedExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBlockExpressionWithoutBracketsAccess().getExpressionsTopLevelExpressionParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_expressions_1_0=ruleTopLevelExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBlockExpressionWithoutBracketsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressions",
	        		lv_expressions_1_0, 
	        		"TopLevelExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getBlockExpressionWithoutBracketsAccess().getSemicolonKeyword_1_1(), null); 
    }
)+)
;





// Entry rule entryRuleMapEntry
entryRuleMapEntry returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMapEntryRule(), currentNode); }
	 iv_ruleMapEntry=ruleMapEntry 
	 { $current=$iv_ruleMapEntry.current; } 
	 EOF 
;

// Rule MapEntry
ruleMapEntry returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getMapEntryAccess().getBMapEntryAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMapEntryAccess().getBMapEntryAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMapEntryAccess().getKeyKeyLiteralParserRuleCall_1_0(), currentNode); 
	    }
		lv_key_1_0=ruleKeyLiteral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMapEntryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"key",
	        		lv_key_1_0, 
	        		"KeyLiteral", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getMapEntryAccess().getColonKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMapEntryAccess().getValueExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_value_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMapEntryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_3_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleKeyLiteral
entryRuleKeyLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getKeyLiteralRule(), currentNode); }
	 iv_ruleKeyLiteral=ruleKeyLiteral 
	 { $current=$iv_ruleKeyLiteral.current; } 
	 EOF 
;

// Rule KeyLiteral
ruleKeyLiteral returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getKeyLiteralAccess().getBLiteralExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getKeyLiteralAccess().getBLiteralExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_value_1_1=RULE_ID
		{
			createLeafNode(grammarAccess.getKeyLiteralAccess().getValueIDTerminalRuleCall_1_0_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getKeyLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_1_1, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_value_1_2=RULE_PID
		{
			createLeafNode(grammarAccess.getKeyLiteralAccess().getValuePIDTerminalRuleCall_1_0_1(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getKeyLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_1_2, 
	        		"PID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_value_1_3=RULE_STRING
		{
			createLeafNode(grammarAccess.getKeyLiteralAccess().getValueSTRINGTerminalRuleCall_1_0_2(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getKeyLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_1_3, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
))
;





// Entry rule entryRuleLiteralType
entryRuleLiteralType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLiteralTypeRule(), currentNode); }
	 iv_ruleLiteralType=ruleLiteralType 
	 { $current=$iv_ruleLiteralType.current; } 
	 EOF 
;

// Rule LiteralType
ruleLiteralType returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getLiteralTypeAccess().getBLiteralTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLiteralTypeAccess().getBLiteralTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLiteralTypeAccess().getTypeTypeRefParserRuleCall_1_0(), currentNode); 
	    }
		lv_type_1_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_1_0, 
	        		"TypeRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleValueLiteral
entryRuleValueLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getValueLiteralRule(), currentNode); }
	 iv_ruleValueLiteral=ruleValueLiteral 
	 { $current=$iv_ruleValueLiteral.current; } 
	 EOF 
;

// Rule ValueLiteral
ruleValueLiteral returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getValueLiteralAccess().getBooleanLiteralParserRuleCall_0(), currentNode); 
    }
    this_BooleanLiteral_0=ruleBooleanLiteral
    { 
        $current = $this_BooleanLiteral_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getValueLiteralAccess().getRealLiteralParserRuleCall_1(), currentNode); 
    }
    this_RealLiteral_1=ruleRealLiteral
    { 
        $current = $this_RealLiteral_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getValueLiteralAccess().getIntegerLiteralParserRuleCall_2(), currentNode); 
    }
    this_IntegerLiteral_2=ruleIntegerLiteral
    { 
        $current = $this_IntegerLiteral_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getValueLiteralAccess().getNullLiteralParserRuleCall_3(), currentNode); 
    }
    this_NullLiteral_3=ruleNullLiteral
    { 
        $current = $this_NullLiteral_3.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getValueLiteralAccess().getStringLiteralParserRuleCall_4(), currentNode); 
    }
    this_StringLiteral_4=ruleStringLiteral
    { 
        $current = $this_StringLiteral_4.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getValueLiteralAccess().getUnitLiteralParserRuleCall_5(), currentNode); 
    }
    this_UnitLiteral_5=ruleUnitLiteral
    { 
        $current = $this_UnitLiteral_5.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBooleanLiteralRule(), currentNode); }
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current; } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getBooleanLiteralAccess().getBLiteralExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBooleanLiteralAccess().getBLiteralExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBooleanLiteralAccess().getValueBooleanValueParserRuleCall_1_0(), currentNode); 
	    }
		lv_value_1_0=ruleBooleanValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_1_0, 
	        		"BooleanValue", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIntegerLiteralRule(), currentNode); }
	 iv_ruleIntegerLiteral=ruleIntegerLiteral 
	 { $current=$iv_ruleIntegerLiteral.current; } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getIntegerLiteralAccess().getBLiteralExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getIntegerLiteralAccess().getBLiteralExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIntegerLiteralAccess().getValueIntValueParserRuleCall_1_0(), currentNode); 
	    }
		lv_value_1_0=ruleIntValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_1_0, 
	        		"IntValue", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleUnitLiteral
entryRuleUnitLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnitLiteralRule(), currentNode); }
	 iv_ruleUnitLiteral=ruleUnitLiteral 
	 { $current=$iv_ruleUnitLiteral.current; } 
	 EOF 
;

// Rule UnitLiteral
ruleUnitLiteral returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getUnitLiteralAccess().getBLiteralExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getUnitLiteralAccess().getBLiteralExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_value_1_0=	'unit' 
    {
        createLeafNode(grammarAccess.getUnitLiteralAccess().getValueUnitKeyword_1_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnitLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_1_0, "unit", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStringLiteralRule(), currentNode); }
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current; } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getStringLiteralAccess().getBLiteralExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getStringLiteralAccess().getBLiteralExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_value_1_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_1_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleRealLiteral
entryRuleRealLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRealLiteralRule(), currentNode); }
	 iv_ruleRealLiteral=ruleRealLiteral 
	 { $current=$iv_ruleRealLiteral.current; } 
	 EOF 
;

// Rule RealLiteral
ruleRealLiteral returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getRealLiteralAccess().getBLiteralExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getRealLiteralAccess().getBLiteralExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRealLiteralAccess().getValueRealValueParserRuleCall_1_0(), currentNode); 
	    }
		lv_value_1_0=ruleRealValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRealLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_1_0, 
	        		"RealValue", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleRegexpLiteral
entryRuleRegexpLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRegexpLiteralRule(), currentNode); }
	 iv_ruleRegexpLiteral=ruleRegexpLiteral 
	 { $current=$iv_ruleRegexpLiteral.current; } 
	 EOF 
;

// Rule RegexpLiteral
ruleRegexpLiteral returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getRegexpLiteralAccess().getBRegularExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getRegexpLiteralAccess().getBRegularExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_pattern_1_0=RULE_REGULAR_EXPR
		{
			createLeafNode(grammarAccess.getRegexpLiteralAccess().getPatternREGULAR_EXPRTerminalRuleCall_1_0(), "pattern"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRegexpLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"pattern",
	        		lv_pattern_1_0, 
	        		"REGULAR_EXPR", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleNullLiteral
entryRuleNullLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNullLiteralRule(), currentNode); }
	 iv_ruleNullLiteral=ruleNullLiteral 
	 { $current=$iv_ruleNullLiteral.current; } 
	 EOF 
;

// Rule NullLiteral
ruleNullLiteral returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getNullLiteralAccess().getBLiteralExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getNullLiteralAccess().getBLiteralExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'null' 
    {
        createLeafNode(grammarAccess.getNullLiteralAccess().getNullKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleBooleanValue
entryRuleBooleanValue returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBooleanValueRule(), currentNode); } 
	 iv_ruleBooleanValue=ruleBooleanValue 
	 { $current=$iv_ruleBooleanValue.current.getText(); }  
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='true' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getBooleanValueAccess().getTrueKeyword_0(), null); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getBooleanValueAccess().getFalseKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleRealValue
entryRuleRealValue returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRealValueRule(), currentNode); } 
	 iv_ruleRealValue=ruleRealValue 
	 { $current=$iv_ruleRealValue.current.getText(); }  
	 EOF 
;

// Rule RealValue
ruleRealValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getRealValueAccess().getREALParserRuleCall(), currentNode); 
    }
    this_REAL_0=ruleREAL    {
		$current.merge(this_REAL_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    ;





// Entry rule entryRuleIntValue
entryRuleIntValue returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIntValueRule(), currentNode); } 
	 iv_ruleIntValue=ruleIntValue 
	 { $current=$iv_ruleIntValue.current.getText(); }  
	 EOF 
;

// Rule IntValue
ruleIntValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(grammarAccess.getIntValueAccess().getINTTerminalRuleCall_0(), null); 
    }

    |    this_HEX_1=RULE_HEX    {
		$current.merge(this_HEX_1);
    }

    { 
    createLeafNode(grammarAccess.getIntValueAccess().getHEXTerminalRuleCall_1(), null); 
    }
)
    ;





// Entry rule entryRuleParanthesizedExpression
entryRuleParanthesizedExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParanthesizedExpressionRule(), currentNode); }
	 iv_ruleParanthesizedExpression=ruleParanthesizedExpression 
	 { $current=$iv_ruleParanthesizedExpression.current; } 
	 EOF 
;

// Rule ParanthesizedExpression
ruleParanthesizedExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'(' 
    {
        createLeafNode(grammarAccess.getParanthesizedExpressionAccess().getLeftParenthesisKeyword_0(), null); 
    }

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getParanthesizedExpressionAccess().getExpressionParserRuleCall_1(), currentNode); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        currentNode = currentNode.getParent();
    }
	')' 
    {
        createLeafNode(grammarAccess.getParanthesizedExpressionAccess().getRightParenthesisKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleVersionLiteral
entryRuleVersionLiteral returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVersionLiteralRule(), currentNode); } 
	 iv_ruleVersionLiteral=ruleVersionLiteral 
	 { $current=$iv_ruleVersionLiteral.current.getText(); }  
	 EOF 
;

// Rule VersionLiteral
ruleVersionLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    createLeafNode(grammarAccess.getVersionLiteralAccess().getSTRINGTerminalRuleCall_0(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getVersionLiteralAccess().getAlfanumSymParserRuleCall_1(), currentNode); 
    }
    this_AlfanumSym_1=ruleAlfanumSym    {
		$current.merge(this_AlfanumSym_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleVersionRangeLiteral
entryRuleVersionRangeLiteral returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVersionRangeLiteralRule(), currentNode); } 
	 iv_ruleVersionRangeLiteral=ruleVersionRangeLiteral 
	 { $current=$iv_ruleVersionRangeLiteral.current.getText(); }  
	 EOF 
;

// Rule VersionRangeLiteral
ruleVersionRangeLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(((
	kw='[' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getVersionRangeLiteralAccess().getLeftSquareBracketKeyword_0_0_0(), null); 
    }

    |
	kw='(' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getVersionRangeLiteralAccess().getLeftParenthesisKeyword_0_0_1(), null); 
    }
)(    this_STRING_2=RULE_STRING    {
		$current.merge(this_STRING_2);
    }

    { 
    createLeafNode(grammarAccess.getVersionRangeLiteralAccess().getSTRINGTerminalRuleCall_0_1_0(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getVersionRangeLiteralAccess().getAlfanumSymParserRuleCall_0_1_1(), currentNode); 
    }
    this_AlfanumSym_3=ruleAlfanumSym    {
		$current.merge(this_AlfanumSym_3);
    }

    { 
        currentNode = currentNode.getParent();
    }
)(
	kw=',' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getVersionRangeLiteralAccess().getCommaKeyword_0_2_0(), null); 
    }
(    this_STRING_5=RULE_STRING    {
		$current.merge(this_STRING_5);
    }

    { 
    createLeafNode(grammarAccess.getVersionRangeLiteralAccess().getSTRINGTerminalRuleCall_0_2_1_0(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getVersionRangeLiteralAccess().getAlfanumSymParserRuleCall_0_2_1_1(), currentNode); 
    }
    this_AlfanumSym_6=ruleAlfanumSym    {
		$current.merge(this_AlfanumSym_6);
    }

    { 
        currentNode = currentNode.getParent();
    }
))?(
	kw=']' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getVersionRangeLiteralAccess().getRightSquareBracketKeyword_0_3_0(), null); 
    }

    |
	kw=')' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getVersionRangeLiteralAccess().getRightParenthesisKeyword_0_3_1(), null); 
    }
))
    |(    this_STRING_9=RULE_STRING    {
		$current.merge(this_STRING_9);
    }

    { 
    createLeafNode(grammarAccess.getVersionRangeLiteralAccess().getSTRINGTerminalRuleCall_1_0(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getVersionRangeLiteralAccess().getAlfanumSymParserRuleCall_1_1(), currentNode); 
    }
    this_AlfanumSym_10=ruleAlfanumSym    {
		$current.merge(this_AlfanumSym_10);
    }

    { 
        currentNode = currentNode.getParent();
    }
))
    ;





// Entry rule entryRuleQIDREF
entryRuleQIDREF returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getQIDREFRule(), currentNode); } 
	 iv_ruleQIDREF=ruleQIDREF 
	 { $current=$iv_ruleQIDREF.current.getText(); }  
	 EOF 
;

// Rule QIDREF
ruleQIDREF returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(((
	kw='super' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getQIDREFAccess().getSuperKeyword_0_0_0(), null); 
    }

    |((
	kw='unit' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getQIDREFAccess().getUnitKeyword_0_0_1_0_0(), null); 
    }

    |
	kw='this' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getQIDREFAccess().getThisKeyword_0_0_1_0_1(), null); 
    }
)(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getQIDREFAccess().getFullStopKeyword_0_0_1_1_0(), null); 
    }

	kw='super' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getQIDREFAccess().getSuperKeyword_0_0_1_1_1(), null); 
    }
)?))(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getQIDREFAccess().getFullStopKeyword_0_1_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getQIDREFAccess().getQIDParserRuleCall_0_1_1(), currentNode); 
    }
    this_QID_6=ruleQID    {
		$current.merge(this_QID_6);
    }

    { 
        currentNode = currentNode.getParent();
    }
)?)
    |
    { 
        currentNode=createCompositeNode(grammarAccess.getQIDREFAccess().getQIDParserRuleCall_1(), currentNode); 
    }
    this_QID_7=ruleQID    {
		$current.merge(this_QID_7);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleQID
entryRuleQID returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getQIDRule(), currentNode); } 
	 iv_ruleQID=ruleQID 
	 { $current=$iv_ruleQID.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule QID
ruleQID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getQIDAccess().getIDTerminalRuleCall_0(), null); 
    }
(    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    createLeafNode(grammarAccess.getQIDAccess().getINTTerminalRuleCall_1_0(), null); 
    }

    |    this_HEX_2=RULE_HEX    {
		$current.merge(this_HEX_2);
    }

    { 
    createLeafNode(grammarAccess.getQIDAccess().getHEXTerminalRuleCall_1_1(), null); 
    }

    |    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    createLeafNode(grammarAccess.getQIDAccess().getIDTerminalRuleCall_1_2(), null); 
    }
)*(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getQIDAccess().getFullStopKeyword_2_0(), null); 
    }
    this_ID_5=RULE_ID    {
		$current.merge(this_ID_5);
    }

    { 
    createLeafNode(grammarAccess.getQIDAccess().getIDTerminalRuleCall_2_1(), null); 
    }
(    this_INT_6=RULE_INT    {
		$current.merge(this_INT_6);
    }

    { 
    createLeafNode(grammarAccess.getQIDAccess().getINTTerminalRuleCall_2_2_0(), null); 
    }

    |    this_HEX_7=RULE_HEX    {
		$current.merge(this_HEX_7);
    }

    { 
    createLeafNode(grammarAccess.getQIDAccess().getHEXTerminalRuleCall_2_2_1(), null); 
    }

    |    this_ID_8=RULE_ID    {
		$current.merge(this_ID_8);
    }

    { 
    createLeafNode(grammarAccess.getQIDAccess().getIDTerminalRuleCall_2_2_2(), null); 
    }
)*)*)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleEscapedQualifiedName
entryRuleEscapedQualifiedName returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEscapedQualifiedNameRule(), currentNode); } 
	 iv_ruleEscapedQualifiedName=ruleEscapedQualifiedName 
	 { $current=$iv_ruleEscapedQualifiedName.current.getText(); }  
	 EOF 
;

// Rule EscapedQualifiedName
ruleEscapedQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    createLeafNode(grammarAccess.getEscapedQualifiedNameAccess().getSTRINGTerminalRuleCall_0(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getEscapedQualifiedNameAccess().getQIDParserRuleCall_1(), currentNode); 
    }
    this_QID_1=ruleQID    {
		$current.merge(this_QID_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleInterfaceName
entryRuleInterfaceName returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInterfaceNameRule(), currentNode); } 
	 iv_ruleInterfaceName=ruleInterfaceName 
	 { $current=$iv_ruleInterfaceName.current.getText(); }  
	 EOF 
;

// Rule InterfaceName
ruleInterfaceName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getInterfaceNameAccess().getQIDParserRuleCall(), currentNode); 
    }
    this_QID_0=ruleQID    {
		$current.merge(this_QID_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    ;





// Entry rule entryRuleUnitName
entryRuleUnitName returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnitNameRule(), currentNode); } 
	 iv_ruleUnitName=ruleUnitName 
	 { $current=$iv_ruleUnitName.current.getText(); }  
	 EOF 
;

// Rule UnitName
ruleUnitName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getUnitNameAccess().getEscapedQualifiedNameParserRuleCall(), currentNode); 
    }
    this_EscapedQualifiedName_0=ruleEscapedQualifiedName    {
		$current.merge(this_EscapedQualifiedName_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    ;





// Entry rule entryRuleBuilderName
entryRuleBuilderName returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBuilderNameRule(), currentNode); } 
	 iv_ruleBuilderName=ruleBuilderName 
	 { $current=$iv_ruleBuilderName.current.getText(); }  
	 EOF 
;

// Rule BuilderName
ruleBuilderName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getBuilderNameAccess().getEscapedQualifiedNameParserRuleCall(), currentNode); 
    }
    this_EscapedQualifiedName_0=ruleEscapedQualifiedName    {
		$current.merge(this_EscapedQualifiedName_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    ;





// Entry rule entryRuleCapabilityName
entryRuleCapabilityName returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCapabilityNameRule(), currentNode); } 
	 iv_ruleCapabilityName=ruleCapabilityName 
	 { $current=$iv_ruleCapabilityName.current.getText(); }  
	 EOF 
;

// Rule CapabilityName
ruleCapabilityName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getCapabilityNameAccess().getEscapedQualifiedNameParserRuleCall(), currentNode); 
    }
    this_EscapedQualifiedName_0=ruleEscapedQualifiedName    {
		$current.merge(this_EscapedQualifiedName_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    ;





// Entry rule entryRuleSeparator
entryRuleSeparator returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSeparatorRule(), currentNode); } 
	 iv_ruleSeparator=ruleSeparator 
	 { $current=$iv_ruleSeparator.current.getText(); }  
	 EOF 
;

// Rule Separator
ruleSeparator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getFullStopKeyword_0(), null); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getHyphenMinusKeyword_1(), null); 
    }

    |
	kw='!' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getExclamationMarkKeyword_2(), null); 
    }

    |
	kw='@' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getCommercialAtKeyword_3(), null); 
    }

    |
	kw='$' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getDollarSignKeyword_4(), null); 
    }

    |
	kw='%' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getPercentSignKeyword_5(), null); 
    }

    |
	kw='&' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getAmpersandKeyword_6(), null); 
    }

    |
	kw='+' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getPlusSignKeyword_7(), null); 
    }

    |
	kw='=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getEqualsSignKeyword_8(), null); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getAsteriskKeyword_9(), null); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getLessThanSignKeyword_10(), null); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getGreaterThanSignKeyword_11(), null); 
    }

    |
	kw=':' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getColonKeyword_12(), null); 
    }

    |
	kw='?' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSeparatorAccess().getQuestionMarkKeyword_13(), null); 
    }
)
    ;





// Entry rule entryRuleAlfanumSym
entryRuleAlfanumSym returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAlfanumSymRule(), currentNode); } 
	 iv_ruleAlfanumSym=ruleAlfanumSym 
	 { $current=$iv_ruleAlfanumSym.current.getText(); }  
	 EOF 
;

// Rule AlfanumSym
ruleAlfanumSym returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
((    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getAlfanumSymAccess().getIDTerminalRuleCall_0_0(), null); 
    }

    |    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    createLeafNode(grammarAccess.getAlfanumSymAccess().getINTTerminalRuleCall_0_1(), null); 
    }

    |    this_HEX_2=RULE_HEX    {
		$current.merge(this_HEX_2);
    }

    { 
    createLeafNode(grammarAccess.getAlfanumSymAccess().getHEXTerminalRuleCall_0_2(), null); 
    }

    |    this_EXT_INT_3=RULE_EXT_INT    {
		$current.merge(this_EXT_INT_3);
    }

    { 
    createLeafNode(grammarAccess.getAlfanumSymAccess().getEXT_INTTerminalRuleCall_0_3(), null); 
    }
)(
    { 
        currentNode=createCompositeNode(grammarAccess.getAlfanumSymAccess().getSeparatorParserRuleCall_1_0(), currentNode); 
    }
    this_Separator_4=ruleSeparator    {
		$current.merge(this_Separator_4);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |    this_ID_5=RULE_ID    {
		$current.merge(this_ID_5);
    }

    { 
    createLeafNode(grammarAccess.getAlfanumSymAccess().getIDTerminalRuleCall_1_1(), null); 
    }

    |    this_INT_6=RULE_INT    {
		$current.merge(this_INT_6);
    }

    { 
    createLeafNode(grammarAccess.getAlfanumSymAccess().getINTTerminalRuleCall_1_2(), null); 
    }

    |    this_HEX_7=RULE_HEX    {
		$current.merge(this_HEX_7);
    }

    { 
    createLeafNode(grammarAccess.getAlfanumSymAccess().getHEXTerminalRuleCall_1_3(), null); 
    }

    |    this_EXT_INT_8=RULE_EXT_INT    {
		$current.merge(this_EXT_INT_8);
    }

    { 
    createLeafNode(grammarAccess.getAlfanumSymAccess().getEXT_INTTerminalRuleCall_1_4(), null); 
    }
)*)
    ;





// Entry rule entryRuleREAL
entryRuleREAL returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getREALRule(), currentNode); } 
	 iv_ruleREAL=ruleREAL 
	 { $current=$iv_ruleREAL.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule REAL
ruleREAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
((    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(grammarAccess.getREALAccess().getINTTerminalRuleCall_0(), null); 
    }
)?
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getREALAccess().getFullStopKeyword_1(), null); 
    }
(    this_EXT_INT_2=RULE_EXT_INT    {
		$current.merge(this_EXT_INT_2);
    }

    { 
    createLeafNode(grammarAccess.getREALAccess().getEXT_INTTerminalRuleCall_2_0(), null); 
    }

    |    this_INT_3=RULE_INT    {
		$current.merge(this_INT_3);
    }

    { 
    createLeafNode(grammarAccess.getREALAccess().getINTTerminalRuleCall_2_1(), null); 
    }
))
    ;
finally {
	myHiddenTokenState.restore();
}





// Rule Visibility
ruleVisibility returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'public' 
	{
        $current = grammarAccess.getVisibilityAccess().getPublicEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getVisibilityAccess().getPublicEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'private' 
	{
        $current = grammarAccess.getVisibilityAccess().getPrivateEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getVisibilityAccess().getPrivateEnumLiteralDeclaration_1(), null); 
    }
));



// Rule ExecutionMode
ruleExecutionMode returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'parallel' 
	{
        $current = grammarAccess.getExecutionModeAccess().getParallelEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getExecutionModeAccess().getParallelEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'sequential' 
	{
        $current = grammarAccess.getExecutionModeAccess().getSequentialEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getExecutionModeAccess().getSequentialEnumLiteralDeclaration_1(), null); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*;

RULE_PID : '$' RULE_ID ('.' RULE_ID)*;

RULE_REGULAR_EXPR : '~/' ('\\' ~(('\t'|'\r'|'\n'))|~(('\\'|'/'|' '|'\t'|'\r'|'\n')))* '/' ('u'|'m'|'i'|'c'|'d')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'x'|'0'|'"'|'\''|'\\')|~(('\\'|'"'|'\r'|'\n')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'x'|'0'|'"'|'\''|'\\')|~(('\\'|'\''|'\r'|'\n')))* '\'');

RULE_DOCUMENTATION : '/**' ( options {greedy=false;} : . )*'*/';

RULE_ML_COMMENT : '/*' ~('*') ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_HEX : '0' ('x'|'X') ('0'..'9'|'a'..'f'|'A'..'F')+;

RULE_INT : ('0'..'9')+;

RULE_EXT_INT : RULE_INT ('e'|'E') ('-'|'+') RULE_INT;

RULE_ANY_OTHER : .;


