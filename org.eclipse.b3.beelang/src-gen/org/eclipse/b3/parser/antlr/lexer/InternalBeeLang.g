
/*
* generated by Xtext
*/
lexer grammar InternalBeeLang;


@header {
package org.eclipse.b3.parser.antlr.lexer;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}




KEYWORD_128 : 'postinputcondition';

KEYWORD_127 : 'replace-modified';

KEYWORD_126 : 'merge-modified';

KEYWORD_121 : 'fail-modified';

KEYWORD_122 : 'keep-modified';

KEYWORD_123 : 'postcondition';

KEYWORD_124 : 'select-switch';

KEYWORD_125 : 'update-policy';

KEYWORD_115 : 'max-required';

KEYWORD_116 : 'min-required';

KEYWORD_117 : 'precondition';

KEYWORD_118 : 'requires-max';

KEYWORD_119 : 'requires-min';

KEYWORD_120 : 'select-first';

KEYWORD_113 : 'annotations';

KEYWORD_114 : 'select-best';

KEYWORD_105 : 'connection';

KEYWORD_106 : 'containers';

KEYWORD_107 : 'implements';

KEYWORD_108 : 'instanceof';

KEYWORD_109 : 'properties';

KEYWORD_110 : 'repository';

KEYWORD_111 : 'resolution';

KEYWORD_112 : 'sequential';

KEYWORD_101 : 'container';

KEYWORD_102 : 'endswitch';

KEYWORD_103 : 'no-update';

KEYWORD_104 : 'timestamp';

KEYWORD_94 : 'branches';

KEYWORD_95 : 'function';

KEYWORD_96 : 'parallel';

KEYWORD_97 : 'provides';

KEYWORD_98 : 'reexport';

KEYWORD_99 : 'requires';

KEYWORD_100 : 'revision';

KEYWORD_82 : 'builder';

KEYWORD_83 : 'concern';

KEYWORD_84 : 'context';

KEYWORD_85 : 'default';

KEYWORD_86 : 'exclude';

KEYWORD_87 : 'extends';

KEYWORD_88 : 'finally';

KEYWORD_89 : 'include';

KEYWORD_90 : 'mutable';

KEYWORD_91 : 'private';

KEYWORD_92 : 'proceed';

KEYWORD_93 : 'version';

KEYWORD_71 : 'branch';

KEYWORD_72 : 'cached';

KEYWORD_73 : 'elseif';

KEYWORD_74 : 'endtry';

KEYWORD_75 : 'greedy';

KEYWORD_76 : 'import';

KEYWORD_77 : 'latest';

KEYWORD_78 : 'output';

KEYWORD_79 : 'public';

KEYWORD_80 : 'source';

KEYWORD_81 : 'switch';

KEYWORD_63 : 'agent';

KEYWORD_64 : 'catch';

KEYWORD_65 : 'endif';

KEYWORD_66 : 'false';

KEYWORD_67 : 'final';

KEYWORD_68 : 'input';

KEYWORD_69 : 'super';

KEYWORD_70 : 'throw';

KEYWORD_54 : 'case';

KEYWORD_55 : 'else';

KEYWORD_56 : 'null';

KEYWORD_57 : 'then';

KEYWORD_58 : 'this';

KEYWORD_59 : 'true';

KEYWORD_60 : 'unit';

KEYWORD_61 : 'when';

KEYWORD_62 : 'with';

KEYWORD_45 : '!==';

KEYWORD_46 : '...';

KEYWORD_47 : '===';

KEYWORD_48 : 'env';

KEYWORD_49 : 'new';

KEYWORD_50 : 'tag';

KEYWORD_51 : 'try';

KEYWORD_52 : 'val';

KEYWORD_53 : 'var';

KEYWORD_27 : '!=';

KEYWORD_28 : '%=';

KEYWORD_29 : '&&';

KEYWORD_30 : '*=';

KEYWORD_31 : '++';

KEYWORD_32 : '+=';

KEYWORD_33 : '--';

KEYWORD_34 : '-=';

KEYWORD_35 : '..';

KEYWORD_36 : '/=';

KEYWORD_37 : '<=';

KEYWORD_38 : '==';

KEYWORD_39 : '=>';

KEYWORD_40 : '>=';

KEYWORD_41 : 'as';

KEYWORD_42 : 'if';

KEYWORD_43 : '||';

KEYWORD_44 : '~=';

KEYWORD_1 : '!';

KEYWORD_2 : '#';

KEYWORD_3 : '$';

KEYWORD_4 : '%';

KEYWORD_5 : '&';

KEYWORD_6 : '(';

KEYWORD_7 : ')';

KEYWORD_8 : '*';

KEYWORD_9 : '+';

KEYWORD_10 : ',';

KEYWORD_11 : '-';

KEYWORD_12 : '.';

KEYWORD_13 : '/';

KEYWORD_14 : ':';

KEYWORD_15 : ';';

KEYWORD_16 : '<';

KEYWORD_17 : '=';

KEYWORD_18 : '>';

KEYWORD_19 : '?';

KEYWORD_20 : '@';

KEYWORD_21 : '[';

KEYWORD_22 : ']';

KEYWORD_23 : '_';

KEYWORD_24 : '{';

KEYWORD_25 : '|';

KEYWORD_26 : '}';



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*;

RULE_PID : '$' RULE_ID ('.' RULE_ID)*;

RULE_REGULAR_EXPR : '~/' ('\\' ~(('\t'|'\r'|'\n'))|~(('\\'|'/'|' '|'\t'|'\r'|'\n')))* '/' ('u'|'m'|'i'|'c'|'d')*;

RULE_SIMPLE_PATTERN : '~' RULE_STRING;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'x'|'0'|'"'|'\''|'\\')|~(('\\'|'"'|'\r'|'\n')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'x'|'0'|'"'|'\''|'\\')|~(('\\'|'\''|'\r'|'\n')))* '\'');

RULE_DOCUMENTATION : '/**' ( options {greedy=false;} : . )*'*/';

RULE_ML_COMMENT : '/*' ~('*') ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_HEX : '0' ('x'|'X') ('0'..'9'|'a'..'f'|'A'..'F')+;

RULE_INT : ('0'..'9')+;

RULE_EXT_INT : RULE_INT ('e'|'E') ('-'|'+') RULE_INT;

RULE_ANY_OTHER : .;



