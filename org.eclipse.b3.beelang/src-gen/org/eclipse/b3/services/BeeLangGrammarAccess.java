/*
* generated by Xtext
*/

package org.eclipse.b3.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class BeeLangGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class BeeModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BeeModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBeeModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cFunctionsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cFunctionsFunctionParserRuleCall_2_0_0 = (RuleCall)cFunctionsAssignment_2_0.eContents().get(0);
		private final Assignment cConcernsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cConcernsConcern_NamedParserRuleCall_2_1_0 = (RuleCall)cConcernsAssignment_2_1.eContents().get(0);
		private final Assignment cPropertySetsAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cPropertySetsPropertySet_NamedParserRuleCall_2_2_0 = (RuleCall)cPropertySetsAssignment_2_2.eContents().get(0);
		private final Assignment cBuildUnitsAssignment_2_3 = (Assignment)cAlternatives_2.eContents().get(3);
		private final RuleCall cBuildUnitsBuildUnitParserRuleCall_2_3_0 = (RuleCall)cBuildUnitsAssignment_2_3.eContents().get(0);
		private final Assignment cProvidersAssignment_2_4 = (Assignment)cAlternatives_2.eContents().get(4);
		private final RuleCall cProvidersTopLevelUnitProviderParserRuleCall_2_4_0 = (RuleCall)cProvidersAssignment_2_4.eContents().get(0);
		private final Assignment cRepositoriesAssignment_2_5 = (Assignment)cAlternatives_2.eContents().get(5);
		private final RuleCall cRepositoriesRepositoryParserRuleCall_2_5_0 = (RuleCall)cRepositoriesAssignment_2_5.eContents().get(0);
		private final Assignment cDefaultPropertiesAssignment_2_6 = (Assignment)cAlternatives_2.eContents().get(6);
		private final RuleCall cDefaultPropertiesPropertySetDefaultParserRuleCall_2_6_0 = (RuleCall)cDefaultPropertiesAssignment_2_6.eContents().get(0);
		
		//// uncomments if things are needed that should not be in backend or build
		//// generate beeLang "http://www.eclipse.org/b3/BeeLang"
		//BeeModel returns build::BeeModel hidden(WS, SL_COMMENT, ML_COMMENT):
		//	{build::BeeModel} imports+=Import* (functions+=Function // * 
		//	// *
		//	// *
		//	// *
		//	//?
		//	// *
		//	//?
		//	| concerns+=Concern_Named | propertySets+=PropertySet_Named | buildUnits+=BuildUnit | providers+=TopLevelUnitProvider |
		//	repositories+=Repository | defaultProperties=PropertySetDefault)*;
		public ParserRule getRule() { return rule; }

		//{build::BeeModel} imports+=Import* (functions+=Function // * 
		//// *
		//// *
		//// *
		////?
		//// *
		////?
		//| concerns+=Concern_Named | propertySets+=PropertySet_Named | buildUnits+=BuildUnit | providers+=TopLevelUnitProvider |
		//repositories+=Repository | defaultProperties=PropertySetDefault)*
		public Group getGroup() { return cGroup; }

		//{build::BeeModel}
		public Action getBeeModelAction_0() { return cBeeModelAction_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//Import
		public RuleCall getImportsImportParserRuleCall_1_0() { return cImportsImportParserRuleCall_1_0; }

		//(functions+=Function // * 
		//// *
		//// *
		//// *
		////?
		//// *
		////?
		//| concerns+=Concern_Named | propertySets+=PropertySet_Named | buildUnits+=BuildUnit | providers+=TopLevelUnitProvider |
		//repositories+=Repository | defaultProperties=PropertySetDefault)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//functions+=Function
		public Assignment getFunctionsAssignment_2_0() { return cFunctionsAssignment_2_0; }

		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_2_0_0() { return cFunctionsFunctionParserRuleCall_2_0_0; }

		//concerns+=Concern_Named
		public Assignment getConcernsAssignment_2_1() { return cConcernsAssignment_2_1; }

		//Concern_Named
		public RuleCall getConcernsConcern_NamedParserRuleCall_2_1_0() { return cConcernsConcern_NamedParserRuleCall_2_1_0; }

		//propertySets+=PropertySet_Named
		public Assignment getPropertySetsAssignment_2_2() { return cPropertySetsAssignment_2_2; }

		//PropertySet_Named
		public RuleCall getPropertySetsPropertySet_NamedParserRuleCall_2_2_0() { return cPropertySetsPropertySet_NamedParserRuleCall_2_2_0; }

		//buildUnits+=BuildUnit
		public Assignment getBuildUnitsAssignment_2_3() { return cBuildUnitsAssignment_2_3; }

		//BuildUnit
		public RuleCall getBuildUnitsBuildUnitParserRuleCall_2_3_0() { return cBuildUnitsBuildUnitParserRuleCall_2_3_0; }

		//providers+=TopLevelUnitProvider
		public Assignment getProvidersAssignment_2_4() { return cProvidersAssignment_2_4; }

		//TopLevelUnitProvider
		public RuleCall getProvidersTopLevelUnitProviderParserRuleCall_2_4_0() { return cProvidersTopLevelUnitProviderParserRuleCall_2_4_0; }

		//repositories+=Repository
		public Assignment getRepositoriesAssignment_2_5() { return cRepositoriesAssignment_2_5; }

		//Repository
		public RuleCall getRepositoriesRepositoryParserRuleCall_2_5_0() { return cRepositoriesRepositoryParserRuleCall_2_5_0; }

		//defaultProperties=PropertySetDefault
		public Assignment getDefaultPropertiesAssignment_2_6() { return cDefaultPropertiesAssignment_2_6; }

		//PropertySetDefault
		public RuleCall getDefaultPropertiesPropertySetDefaultParserRuleCall_2_6_0() { return cDefaultPropertiesPropertySetDefaultParserRuleCall_2_6_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cB3JavaImportAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cReexportAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cReexportReexportKeyword_1_0 = (Keyword)cReexportAssignment_1.eContents().get(0);
		private final Keyword cUseKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cQualifiedNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cQualifiedNameQIDParserRuleCall_3_0 = (RuleCall)cQualifiedNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_4_1_0 = (RuleCall)cNameAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Import returns be::IType:
		//	{be::B3JavaImport} reexport?="reexport"? "use" qualifiedName=QID ("as" name=ID)? ";";
		public ParserRule getRule() { return rule; }

		//{be::B3JavaImport} reexport?="reexport"? "use" qualifiedName=QID ("as" name=ID)? ";"
		public Group getGroup() { return cGroup; }

		//{be::B3JavaImport}
		public Action getB3JavaImportAction_0() { return cB3JavaImportAction_0; }

		//reexport?="reexport"?
		public Assignment getReexportAssignment_1() { return cReexportAssignment_1; }

		//"reexport"
		public Keyword getReexportReexportKeyword_1_0() { return cReexportReexportKeyword_1_0; }

		//"use"
		public Keyword getUseKeyword_2() { return cUseKeyword_2; }

		//qualifiedName=QID
		public Assignment getQualifiedNameAssignment_3() { return cQualifiedNameAssignment_3; }

		//QID
		public RuleCall getQualifiedNameQIDParserRuleCall_3_0() { return cQualifiedNameQIDParserRuleCall_3_0; }

		//("as" name=ID)?
		public Group getGroup_4() { return cGroup_4; }

		//"as"
		public Keyword getAsKeyword_4_0() { return cAsKeyword_4_0; }

		//name=ID
		public Assignment getNameAssignment_4_1() { return cNameAssignment_4_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_1_0() { return cNameIDTerminalRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class BuildUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuildUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBuildUnitAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDocumentationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDocumentationDOCUMENTATIONParserRuleCall_1_0 = (RuleCall)cDocumentationAssignment_1.eContents().get(0);
		private final Assignment cExecutionModeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExecutionModeExecutionModeEnumRuleCall_2_0 = (RuleCall)cExecutionModeAssignment_2.eContents().get(0);
		private final Keyword cUnitKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameEscapedQualifiedNameParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cVersionKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cVersionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cVersionVersionLiteralParserRuleCall_5_1_0 = (RuleCall)cVersionAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cIsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cImplementsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cImplementsSimpleTypeRefParserRuleCall_6_1_0 = (RuleCall)cImplementsAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cImplementsAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cImplementsSimpleTypeRefParserRuleCall_6_2_1_0 = (RuleCall)cImplementsAssignment_6_2_1.eContents().get(0);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cAlternatives_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_0_0 = (Keyword)cGroup_7_0.eContents().get(0);
		private final Alternatives cAlternatives_7_0_1 = (Alternatives)cGroup_7_0.eContents().get(1);
		private final Group cGroup_7_0_1_0 = (Group)cAlternatives_7_0_1.eContents().get(0);
		private final Keyword cSourceKeyword_7_0_1_0_0 = (Keyword)cGroup_7_0_1_0.eContents().get(0);
		private final Keyword cColonKeyword_7_0_1_0_1 = (Keyword)cGroup_7_0_1_0.eContents().get(1);
		private final Assignment cSourceLocationAssignment_7_0_1_0_2 = (Assignment)cGroup_7_0_1_0.eContents().get(2);
		private final RuleCall cSourceLocationPathParserRuleCall_7_0_1_0_2_0 = (RuleCall)cSourceLocationAssignment_7_0_1_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_0_1_0_3 = (Keyword)cGroup_7_0_1_0.eContents().get(3);
		private final Group cGroup_7_0_1_1 = (Group)cAlternatives_7_0_1.eContents().get(1);
		private final Keyword cOutputKeyword_7_0_1_1_0 = (Keyword)cGroup_7_0_1_1.eContents().get(0);
		private final Keyword cColonKeyword_7_0_1_1_1 = (Keyword)cGroup_7_0_1_1.eContents().get(1);
		private final Assignment cOutputLocationAssignment_7_0_1_1_2 = (Assignment)cGroup_7_0_1_1.eContents().get(2);
		private final RuleCall cOutputLocationPathParserRuleCall_7_0_1_1_2_0 = (RuleCall)cOutputLocationAssignment_7_0_1_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_0_1_1_3 = (Keyword)cGroup_7_0_1_1.eContents().get(3);
		private final Group cGroup_7_0_1_2 = (Group)cAlternatives_7_0_1.eContents().get(2);
		private final Keyword cProvidesKeyword_7_0_1_2_0 = (Keyword)cGroup_7_0_1_2.eContents().get(0);
		private final Keyword cColonKeyword_7_0_1_2_1 = (Keyword)cGroup_7_0_1_2.eContents().get(1);
		private final Alternatives cAlternatives_7_0_1_2_2 = (Alternatives)cGroup_7_0_1_2.eContents().get(2);
		private final Group cGroup_7_0_1_2_2_0 = (Group)cAlternatives_7_0_1_2_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_7_0_1_2_2_0_0 = (Keyword)cGroup_7_0_1_2_2_0.eContents().get(0);
		private final Assignment cProvidedCapabilitiesAssignment_7_0_1_2_2_0_1 = (Assignment)cGroup_7_0_1_2_2_0.eContents().get(1);
		private final RuleCall cProvidedCapabilitiesProvidedCapabilityParserRuleCall_7_0_1_2_2_0_1_0 = (RuleCall)cProvidedCapabilitiesAssignment_7_0_1_2_2_0_1.eContents().get(0);
		private final Group cGroup_7_0_1_2_2_0_2 = (Group)cGroup_7_0_1_2_2_0.eContents().get(2);
		private final Keyword cCommaKeyword_7_0_1_2_2_0_2_0 = (Keyword)cGroup_7_0_1_2_2_0_2.eContents().get(0);
		private final Assignment cProvidedCapabilitiesAssignment_7_0_1_2_2_0_2_1 = (Assignment)cGroup_7_0_1_2_2_0_2.eContents().get(1);
		private final RuleCall cProvidedCapabilitiesProvidedCapabilityParserRuleCall_7_0_1_2_2_0_2_1_0 = (RuleCall)cProvidedCapabilitiesAssignment_7_0_1_2_2_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7_0_1_2_2_0_3 = (Keyword)cGroup_7_0_1_2_2_0.eContents().get(3);
		private final Assignment cProvidedCapabilitiesAssignment_7_0_1_2_2_1 = (Assignment)cAlternatives_7_0_1_2_2.eContents().get(1);
		private final RuleCall cProvidedCapabilitiesProvidedCapabilityParserRuleCall_7_0_1_2_2_1_0 = (RuleCall)cProvidedCapabilitiesAssignment_7_0_1_2_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_0_1_2_3 = (Keyword)cGroup_7_0_1_2.eContents().get(3);
		private final Group cGroup_7_0_1_3 = (Group)cAlternatives_7_0_1.eContents().get(3);
		private final Keyword cRequiresKeyword_7_0_1_3_0 = (Keyword)cGroup_7_0_1_3.eContents().get(0);
		private final Keyword cColonKeyword_7_0_1_3_1 = (Keyword)cGroup_7_0_1_3.eContents().get(1);
		private final Alternatives cAlternatives_7_0_1_3_2 = (Alternatives)cGroup_7_0_1_3.eContents().get(2);
		private final Group cGroup_7_0_1_3_2_0 = (Group)cAlternatives_7_0_1_3_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_7_0_1_3_2_0_0 = (Keyword)cGroup_7_0_1_3_2_0.eContents().get(0);
		private final Assignment cRequiredCapabilitiesAssignment_7_0_1_3_2_0_1 = (Assignment)cGroup_7_0_1_3_2_0.eContents().get(1);
		private final RuleCall cRequiredCapabilitiesAliasedRequiredCapabilityParserRuleCall_7_0_1_3_2_0_1_0 = (RuleCall)cRequiredCapabilitiesAssignment_7_0_1_3_2_0_1.eContents().get(0);
		private final Group cGroup_7_0_1_3_2_0_2 = (Group)cGroup_7_0_1_3_2_0.eContents().get(2);
		private final Keyword cCommaKeyword_7_0_1_3_2_0_2_0 = (Keyword)cGroup_7_0_1_3_2_0_2.eContents().get(0);
		private final Assignment cRequiredCapabilitiesAssignment_7_0_1_3_2_0_2_1 = (Assignment)cGroup_7_0_1_3_2_0_2.eContents().get(1);
		private final RuleCall cRequiredCapabilitiesAliasedRequiredCapabilityParserRuleCall_7_0_1_3_2_0_2_1_0 = (RuleCall)cRequiredCapabilitiesAssignment_7_0_1_3_2_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7_0_1_3_2_0_3 = (Keyword)cGroup_7_0_1_3_2_0.eContents().get(3);
		private final Assignment cRequiredCapabilitiesAssignment_7_0_1_3_2_1 = (Assignment)cAlternatives_7_0_1_3_2.eContents().get(1);
		private final RuleCall cRequiredCapabilitiesAliasedRequiredCapabilityParserRuleCall_7_0_1_3_2_1_0 = (RuleCall)cRequiredCapabilitiesAssignment_7_0_1_3_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_0_1_3_3 = (Keyword)cGroup_7_0_1_3.eContents().get(3);
		private final Group cGroup_7_0_1_4 = (Group)cAlternatives_7_0_1.eContents().get(4);
		private final Keyword cSelectRequiredKeyword_7_0_1_4_0 = (Keyword)cGroup_7_0_1_4.eContents().get(0);
		private final Keyword cColonKeyword_7_0_1_4_1 = (Keyword)cGroup_7_0_1_4.eContents().get(1);
		private final Alternatives cAlternatives_7_0_1_4_2 = (Alternatives)cGroup_7_0_1_4.eContents().get(2);
		private final Group cGroup_7_0_1_4_2_0 = (Group)cAlternatives_7_0_1_4_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_7_0_1_4_2_0_0 = (Keyword)cGroup_7_0_1_4_2_0.eContents().get(0);
		private final Assignment cRequiredPredicatesAssignment_7_0_1_4_2_0_1 = (Assignment)cGroup_7_0_1_4_2_0.eContents().get(1);
		private final RuleCall cRequiredPredicatesCapabilityPredicateParserRuleCall_7_0_1_4_2_0_1_0 = (RuleCall)cRequiredPredicatesAssignment_7_0_1_4_2_0_1.eContents().get(0);
		private final Group cGroup_7_0_1_4_2_0_2 = (Group)cGroup_7_0_1_4_2_0.eContents().get(2);
		private final Keyword cCommaKeyword_7_0_1_4_2_0_2_0 = (Keyword)cGroup_7_0_1_4_2_0_2.eContents().get(0);
		private final Assignment cRequiredPredicatesAssignment_7_0_1_4_2_0_2_1 = (Assignment)cGroup_7_0_1_4_2_0_2.eContents().get(1);
		private final RuleCall cRequiredPredicatesCapabilityPredicateParserRuleCall_7_0_1_4_2_0_2_1_0 = (RuleCall)cRequiredPredicatesAssignment_7_0_1_4_2_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7_0_1_4_2_0_3 = (Keyword)cGroup_7_0_1_4_2_0.eContents().get(3);
		private final Assignment cRequiredPredicatesAssignment_7_0_1_4_2_1 = (Assignment)cAlternatives_7_0_1_4_2.eContents().get(1);
		private final RuleCall cRequiredPredicatesCapabilityPredicateParserRuleCall_7_0_1_4_2_1_0 = (RuleCall)cRequiredPredicatesAssignment_7_0_1_4_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_0_1_4_3 = (Keyword)cGroup_7_0_1_4.eContents().get(3);
		private final Group cGroup_7_0_1_5 = (Group)cAlternatives_7_0_1.eContents().get(5);
		private final Keyword cRequiresKeyword_7_0_1_5_0 = (Keyword)cGroup_7_0_1_5.eContents().get(0);
		private final Keyword cEnvKeyword_7_0_1_5_1 = (Keyword)cGroup_7_0_1_5.eContents().get(1);
		private final Keyword cColonKeyword_7_0_1_5_2 = (Keyword)cGroup_7_0_1_5.eContents().get(2);
		private final Alternatives cAlternatives_7_0_1_5_3 = (Alternatives)cGroup_7_0_1_5.eContents().get(3);
		private final Group cGroup_7_0_1_5_3_0 = (Group)cAlternatives_7_0_1_5_3.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_7_0_1_5_3_0_0 = (Keyword)cGroup_7_0_1_5_3_0.eContents().get(0);
		private final Assignment cMetaRequiredCapabilitiesAssignment_7_0_1_5_3_0_1 = (Assignment)cGroup_7_0_1_5_3_0.eContents().get(1);
		private final RuleCall cMetaRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_0_1_5_3_0_1_0 = (RuleCall)cMetaRequiredCapabilitiesAssignment_7_0_1_5_3_0_1.eContents().get(0);
		private final Group cGroup_7_0_1_5_3_0_2 = (Group)cGroup_7_0_1_5_3_0.eContents().get(2);
		private final Keyword cCommaKeyword_7_0_1_5_3_0_2_0 = (Keyword)cGroup_7_0_1_5_3_0_2.eContents().get(0);
		private final Assignment cMetaRequiredCapabilitiesAssignment_7_0_1_5_3_0_2_1 = (Assignment)cGroup_7_0_1_5_3_0_2.eContents().get(1);
		private final RuleCall cMetaRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_0_1_5_3_0_2_1_0 = (RuleCall)cMetaRequiredCapabilitiesAssignment_7_0_1_5_3_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7_0_1_5_3_0_3 = (Keyword)cGroup_7_0_1_5_3_0.eContents().get(3);
		private final Assignment cMetaRequiredCapabilitiesAssignment_7_0_1_5_3_1 = (Assignment)cAlternatives_7_0_1_5_3.eContents().get(1);
		private final RuleCall cMetaRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_0_1_5_3_1_0 = (RuleCall)cMetaRequiredCapabilitiesAssignment_7_0_1_5_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_0_1_5_4 = (Keyword)cGroup_7_0_1_5.eContents().get(4);
		private final Alternatives cAlternatives_7_0_1_6 = (Alternatives)cAlternatives_7_0_1.eContents().get(6);
		private final Assignment cFunctionsAssignment_7_0_1_6_0 = (Assignment)cAlternatives_7_0_1_6.eContents().get(0);
		private final RuleCall cFunctionsBuilderParserRuleCall_7_0_1_6_0_0 = (RuleCall)cFunctionsAssignment_7_0_1_6_0.eContents().get(0);
		private final Assignment cFunctionsAssignment_7_0_1_6_1 = (Assignment)cAlternatives_7_0_1_6.eContents().get(1);
		private final RuleCall cFunctionsFunctionParserRuleCall_7_0_1_6_1_0 = (RuleCall)cFunctionsAssignment_7_0_1_6_1.eContents().get(0);
		private final Assignment cProvidersAssignment_7_0_1_7 = (Assignment)cAlternatives_7_0_1.eContents().get(7);
		private final RuleCall cProvidersTopLevelUnitProviderParserRuleCall_7_0_1_7_0 = (RuleCall)cProvidersAssignment_7_0_1_7.eContents().get(0);
		private final Assignment cConcernsAssignment_7_0_1_8 = (Assignment)cAlternatives_7_0_1.eContents().get(8);
		private final RuleCall cConcernsConcern_NamedParserRuleCall_7_0_1_8_0 = (RuleCall)cConcernsAssignment_7_0_1_8.eContents().get(0);
		private final Assignment cPropertySetsAssignment_7_0_1_9 = (Assignment)cAlternatives_7_0_1.eContents().get(9);
		private final RuleCall cPropertySetsPropertySet_NamedParserRuleCall_7_0_1_9_0 = (RuleCall)cPropertySetsAssignment_7_0_1_9.eContents().get(0);
		private final Group cGroup_7_0_1_10 = (Group)cAlternatives_7_0_1.eContents().get(10);
		private final Assignment cContainersAssignment_7_0_1_10_0 = (Assignment)cGroup_7_0_1_10.eContents().get(0);
		private final RuleCall cContainersContainerConfigurationParserRuleCall_7_0_1_10_0_0 = (RuleCall)cContainersAssignment_7_0_1_10_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_0_1_10_1 = (Keyword)cGroup_7_0_1_10.eContents().get(1);
		private final Assignment cSynchronizationsAssignment_7_0_1_11 = (Assignment)cAlternatives_7_0_1.eContents().get(11);
		private final RuleCall cSynchronizationsSynchronizationParserRuleCall_7_0_1_11_0 = (RuleCall)cSynchronizationsAssignment_7_0_1_11.eContents().get(0);
		private final Assignment cRepositoriesAssignment_7_0_1_12 = (Assignment)cAlternatives_7_0_1.eContents().get(12);
		private final RuleCall cRepositoriesRepositoryParserRuleCall_7_0_1_12_0 = (RuleCall)cRepositoriesAssignment_7_0_1_12.eContents().get(0);
		private final Assignment cDefaultPropertiesAssignment_7_0_1_13 = (Assignment)cAlternatives_7_0_1.eContents().get(13);
		private final RuleCall cDefaultPropertiesPropertySetDefaultParserRuleCall_7_0_1_13_0 = (RuleCall)cDefaultPropertiesAssignment_7_0_1_13.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_0_2 = (Keyword)cGroup_7_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_7_1 = (Keyword)cAlternatives_7.eContents().get(1);
		
		//// Wanted later 
		////Import : (reexport ?='reexport')? 
		////		'import' importer=(JavaImporter | NativeImporter) ("as" name=ID)? ';' 
		////	; 
		////JavaImporter 	: qualifiedName=QID ;
		////NativeImporter 	: uriString = STRING ;
		//BuildUnit returns build::BuildUnit hidden(WS, ML_COMMENT, SL_COMMENT):
		//	{build::BuildUnit} documentation=DOCUMENTATION? executionMode=ExecutionMode? "unit" name=EscapedQualifiedName?
		//	("version" version=VersionLiteral)? ("is" implements+=SimpleTypeRef ("," implements+=SimpleTypeRef)*)? ("{" ("source"
		//	":" sourceLocation=Path ";" //?
		//	//?
		//	//?
		//	//?
		//	//?
		//	//?
		//	// *
		//	// *
		//	// *
		//	// *
		//	// *
		//	//?
		//	| "output" ":" outputLocation=Path ";" | "provides" ":" ("[" providedCapabilities+=ProvidedCapability (","
		//	providedCapabilities+=ProvidedCapability)* "]" | providedCapabilities+=ProvidedCapability) ";" | "requires" ":" ("["
		//	requiredCapabilities+=AliasedRequiredCapability ("," requiredCapabilities+=AliasedRequiredCapability)* "]" |
		//	requiredCapabilities+=AliasedRequiredCapability) ";" | "select-required" ":" ("["
		//	requiredPredicates+=CapabilityPredicate ("," requiredPredicates+=CapabilityPredicate)* "]" |
		//	requiredPredicates+=CapabilityPredicate) ";" | "requires" "env" ":" ("[" metaRequiredCapabilities+=RequiredCapability
		//	("," metaRequiredCapabilities+=RequiredCapability)* "]" | metaRequiredCapabilities+=RequiredCapability) ";" |
		//	(functions+=Builder // *
		//	| functions+=Function) | providers+=TopLevelUnitProvider | concerns+=Concern_Named | propertySets+=PropertySet_Named |
		//	containers+=ContainerConfiguration ";" | synchronizations+=Synchronization | repositories+=Repository |
		//	defaultProperties=PropertySetDefault)* "}" | ";");
		public ParserRule getRule() { return rule; }

		//{build::BuildUnit} documentation=DOCUMENTATION? executionMode=ExecutionMode? "unit" name=EscapedQualifiedName?
		//("version" version=VersionLiteral)? ("is" implements+=SimpleTypeRef ("," implements+=SimpleTypeRef)*)? ("{" ("source"
		//":" sourceLocation=Path ";" //?
		////?
		////?
		////?
		////?
		////?
		//// *
		//// *
		//// *
		//// *
		//// *
		////?
		//| "output" ":" outputLocation=Path ";" | "provides" ":" ("[" providedCapabilities+=ProvidedCapability (","
		//providedCapabilities+=ProvidedCapability)* "]" | providedCapabilities+=ProvidedCapability) ";" | "requires" ":" ("["
		//requiredCapabilities+=AliasedRequiredCapability ("," requiredCapabilities+=AliasedRequiredCapability)* "]" |
		//requiredCapabilities+=AliasedRequiredCapability) ";" | "select-required" ":" ("["
		//requiredPredicates+=CapabilityPredicate ("," requiredPredicates+=CapabilityPredicate)* "]" |
		//requiredPredicates+=CapabilityPredicate) ";" | "requires" "env" ":" ("[" metaRequiredCapabilities+=RequiredCapability
		//("," metaRequiredCapabilities+=RequiredCapability)* "]" | metaRequiredCapabilities+=RequiredCapability) ";" |
		//(functions+=Builder // *
		//| functions+=Function) | providers+=TopLevelUnitProvider | concerns+=Concern_Named | propertySets+=PropertySet_Named |
		//containers+=ContainerConfiguration ";" | synchronizations+=Synchronization | repositories+=Repository |
		//defaultProperties=PropertySetDefault)* "}" | ";")
		public Group getGroup() { return cGroup; }

		//{build::BuildUnit}
		public Action getBuildUnitAction_0() { return cBuildUnitAction_0; }

		//documentation=DOCUMENTATION?
		public Assignment getDocumentationAssignment_1() { return cDocumentationAssignment_1; }

		//DOCUMENTATION
		public RuleCall getDocumentationDOCUMENTATIONParserRuleCall_1_0() { return cDocumentationDOCUMENTATIONParserRuleCall_1_0; }

		//executionMode=ExecutionMode?
		public Assignment getExecutionModeAssignment_2() { return cExecutionModeAssignment_2; }

		//ExecutionMode
		public RuleCall getExecutionModeExecutionModeEnumRuleCall_2_0() { return cExecutionModeExecutionModeEnumRuleCall_2_0; }

		//"unit"
		public Keyword getUnitKeyword_3() { return cUnitKeyword_3; }

		//name=EscapedQualifiedName?
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//EscapedQualifiedName
		public RuleCall getNameEscapedQualifiedNameParserRuleCall_4_0() { return cNameEscapedQualifiedNameParserRuleCall_4_0; }

		//("version" version=VersionLiteral)?
		public Group getGroup_5() { return cGroup_5; }

		//"version"
		public Keyword getVersionKeyword_5_0() { return cVersionKeyword_5_0; }

		//version=VersionLiteral
		public Assignment getVersionAssignment_5_1() { return cVersionAssignment_5_1; }

		//VersionLiteral
		public RuleCall getVersionVersionLiteralParserRuleCall_5_1_0() { return cVersionVersionLiteralParserRuleCall_5_1_0; }

		//("is" implements+=SimpleTypeRef ("," implements+=SimpleTypeRef)*)?
		public Group getGroup_6() { return cGroup_6; }

		//"is"
		public Keyword getIsKeyword_6_0() { return cIsKeyword_6_0; }

		//implements+=SimpleTypeRef
		public Assignment getImplementsAssignment_6_1() { return cImplementsAssignment_6_1; }

		//SimpleTypeRef
		public RuleCall getImplementsSimpleTypeRefParserRuleCall_6_1_0() { return cImplementsSimpleTypeRefParserRuleCall_6_1_0; }

		//("," implements+=SimpleTypeRef)*
		public Group getGroup_6_2() { return cGroup_6_2; }

		//","
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }

		//implements+=SimpleTypeRef
		public Assignment getImplementsAssignment_6_2_1() { return cImplementsAssignment_6_2_1; }

		//SimpleTypeRef
		public RuleCall getImplementsSimpleTypeRefParserRuleCall_6_2_1_0() { return cImplementsSimpleTypeRefParserRuleCall_6_2_1_0; }

		//"{" ("source" ":" sourceLocation=Path ";" //?
		////?
		////?
		////?
		////?
		////?
		//// *
		//// *
		//// *
		//// *
		//// *
		////?
		//| "output" ":" outputLocation=Path ";" | "provides" ":" ("[" providedCapabilities+=ProvidedCapability (","
		//providedCapabilities+=ProvidedCapability)* "]" | providedCapabilities+=ProvidedCapability) ";" | "requires" ":" ("["
		//requiredCapabilities+=AliasedRequiredCapability ("," requiredCapabilities+=AliasedRequiredCapability)* "]" |
		//requiredCapabilities+=AliasedRequiredCapability) ";" | "select-required" ":" ("["
		//requiredPredicates+=CapabilityPredicate ("," requiredPredicates+=CapabilityPredicate)* "]" |
		//requiredPredicates+=CapabilityPredicate) ";" | "requires" "env" ":" ("[" metaRequiredCapabilities+=RequiredCapability
		//("," metaRequiredCapabilities+=RequiredCapability)* "]" | metaRequiredCapabilities+=RequiredCapability) ";" |
		//(functions+=Builder // *
		//| functions+=Function) | providers+=TopLevelUnitProvider | concerns+=Concern_Named | propertySets+=PropertySet_Named |
		//containers+=ContainerConfiguration ";" | synchronizations+=Synchronization | repositories+=Repository |
		//defaultProperties=PropertySetDefault)* "}" | ";"
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//"{" ("source" ":" sourceLocation=Path ";" //?
		////?
		////?
		////?
		////?
		////?
		//// *
		//// *
		//// *
		//// *
		//// *
		////?
		//| "output" ":" outputLocation=Path ";" | "provides" ":" ("[" providedCapabilities+=ProvidedCapability (","
		//providedCapabilities+=ProvidedCapability)* "]" | providedCapabilities+=ProvidedCapability) ";" | "requires" ":" ("["
		//requiredCapabilities+=AliasedRequiredCapability ("," requiredCapabilities+=AliasedRequiredCapability)* "]" |
		//requiredCapabilities+=AliasedRequiredCapability) ";" | "select-required" ":" ("["
		//requiredPredicates+=CapabilityPredicate ("," requiredPredicates+=CapabilityPredicate)* "]" |
		//requiredPredicates+=CapabilityPredicate) ";" | "requires" "env" ":" ("[" metaRequiredCapabilities+=RequiredCapability
		//("," metaRequiredCapabilities+=RequiredCapability)* "]" | metaRequiredCapabilities+=RequiredCapability) ";" |
		//(functions+=Builder // *
		//| functions+=Function) | providers+=TopLevelUnitProvider | concerns+=Concern_Named | propertySets+=PropertySet_Named |
		//containers+=ContainerConfiguration ";" | synchronizations+=Synchronization | repositories+=Repository |
		//defaultProperties=PropertySetDefault)* "}"
		public Group getGroup_7_0() { return cGroup_7_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_0_0() { return cLeftCurlyBracketKeyword_7_0_0; }

		//("source" ":" sourceLocation=Path ";" //?
		////?
		////?
		////?
		////?
		////?
		//// *
		//// *
		//// *
		//// *
		//// *
		////?
		//| "output" ":" outputLocation=Path ";" | "provides" ":" ("[" providedCapabilities+=ProvidedCapability (","
		//providedCapabilities+=ProvidedCapability)* "]" | providedCapabilities+=ProvidedCapability) ";" | "requires" ":" ("["
		//requiredCapabilities+=AliasedRequiredCapability ("," requiredCapabilities+=AliasedRequiredCapability)* "]" |
		//requiredCapabilities+=AliasedRequiredCapability) ";" | "select-required" ":" ("["
		//requiredPredicates+=CapabilityPredicate ("," requiredPredicates+=CapabilityPredicate)* "]" |
		//requiredPredicates+=CapabilityPredicate) ";" | "requires" "env" ":" ("[" metaRequiredCapabilities+=RequiredCapability
		//("," metaRequiredCapabilities+=RequiredCapability)* "]" | metaRequiredCapabilities+=RequiredCapability) ";" |
		//(functions+=Builder // *
		//| functions+=Function) | providers+=TopLevelUnitProvider | concerns+=Concern_Named | propertySets+=PropertySet_Named |
		//containers+=ContainerConfiguration ";" | synchronizations+=Synchronization | repositories+=Repository |
		//defaultProperties=PropertySetDefault)*
		public Alternatives getAlternatives_7_0_1() { return cAlternatives_7_0_1; }

		//"source" ":" sourceLocation=Path ";"
		public Group getGroup_7_0_1_0() { return cGroup_7_0_1_0; }

		//"source"
		public Keyword getSourceKeyword_7_0_1_0_0() { return cSourceKeyword_7_0_1_0_0; }

		//":"
		public Keyword getColonKeyword_7_0_1_0_1() { return cColonKeyword_7_0_1_0_1; }

		//sourceLocation=Path
		public Assignment getSourceLocationAssignment_7_0_1_0_2() { return cSourceLocationAssignment_7_0_1_0_2; }

		//Path
		public RuleCall getSourceLocationPathParserRuleCall_7_0_1_0_2_0() { return cSourceLocationPathParserRuleCall_7_0_1_0_2_0; }

		//";"
		public Keyword getSemicolonKeyword_7_0_1_0_3() { return cSemicolonKeyword_7_0_1_0_3; }

		//"output" ":" outputLocation=Path ";"
		public Group getGroup_7_0_1_1() { return cGroup_7_0_1_1; }

		//"output"
		public Keyword getOutputKeyword_7_0_1_1_0() { return cOutputKeyword_7_0_1_1_0; }

		//":"
		public Keyword getColonKeyword_7_0_1_1_1() { return cColonKeyword_7_0_1_1_1; }

		//outputLocation=Path
		public Assignment getOutputLocationAssignment_7_0_1_1_2() { return cOutputLocationAssignment_7_0_1_1_2; }

		//Path
		public RuleCall getOutputLocationPathParserRuleCall_7_0_1_1_2_0() { return cOutputLocationPathParserRuleCall_7_0_1_1_2_0; }

		//";"
		public Keyword getSemicolonKeyword_7_0_1_1_3() { return cSemicolonKeyword_7_0_1_1_3; }

		//"provides" ":" ("[" providedCapabilities+=ProvidedCapability ("," providedCapabilities+=ProvidedCapability)* "]" |
		//providedCapabilities+=ProvidedCapability) ";"
		public Group getGroup_7_0_1_2() { return cGroup_7_0_1_2; }

		//"provides"
		public Keyword getProvidesKeyword_7_0_1_2_0() { return cProvidesKeyword_7_0_1_2_0; }

		//":"
		public Keyword getColonKeyword_7_0_1_2_1() { return cColonKeyword_7_0_1_2_1; }

		//"[" providedCapabilities+=ProvidedCapability ("," providedCapabilities+=ProvidedCapability)* "]" |
		//providedCapabilities+=ProvidedCapability
		public Alternatives getAlternatives_7_0_1_2_2() { return cAlternatives_7_0_1_2_2; }

		//"[" providedCapabilities+=ProvidedCapability ("," providedCapabilities+=ProvidedCapability)* "]"
		public Group getGroup_7_0_1_2_2_0() { return cGroup_7_0_1_2_2_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_7_0_1_2_2_0_0() { return cLeftSquareBracketKeyword_7_0_1_2_2_0_0; }

		//providedCapabilities+=ProvidedCapability
		public Assignment getProvidedCapabilitiesAssignment_7_0_1_2_2_0_1() { return cProvidedCapabilitiesAssignment_7_0_1_2_2_0_1; }

		//ProvidedCapability
		public RuleCall getProvidedCapabilitiesProvidedCapabilityParserRuleCall_7_0_1_2_2_0_1_0() { return cProvidedCapabilitiesProvidedCapabilityParserRuleCall_7_0_1_2_2_0_1_0; }

		//("," providedCapabilities+=ProvidedCapability)*
		public Group getGroup_7_0_1_2_2_0_2() { return cGroup_7_0_1_2_2_0_2; }

		//","
		public Keyword getCommaKeyword_7_0_1_2_2_0_2_0() { return cCommaKeyword_7_0_1_2_2_0_2_0; }

		//providedCapabilities+=ProvidedCapability
		public Assignment getProvidedCapabilitiesAssignment_7_0_1_2_2_0_2_1() { return cProvidedCapabilitiesAssignment_7_0_1_2_2_0_2_1; }

		//ProvidedCapability
		public RuleCall getProvidedCapabilitiesProvidedCapabilityParserRuleCall_7_0_1_2_2_0_2_1_0() { return cProvidedCapabilitiesProvidedCapabilityParserRuleCall_7_0_1_2_2_0_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_7_0_1_2_2_0_3() { return cRightSquareBracketKeyword_7_0_1_2_2_0_3; }

		//providedCapabilities+=ProvidedCapability
		public Assignment getProvidedCapabilitiesAssignment_7_0_1_2_2_1() { return cProvidedCapabilitiesAssignment_7_0_1_2_2_1; }

		//ProvidedCapability
		public RuleCall getProvidedCapabilitiesProvidedCapabilityParserRuleCall_7_0_1_2_2_1_0() { return cProvidedCapabilitiesProvidedCapabilityParserRuleCall_7_0_1_2_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_7_0_1_2_3() { return cSemicolonKeyword_7_0_1_2_3; }

		//"requires" ":" ("[" requiredCapabilities+=AliasedRequiredCapability (","
		//requiredCapabilities+=AliasedRequiredCapability)* "]" | requiredCapabilities+=AliasedRequiredCapability) ";"
		public Group getGroup_7_0_1_3() { return cGroup_7_0_1_3; }

		//"requires"
		public Keyword getRequiresKeyword_7_0_1_3_0() { return cRequiresKeyword_7_0_1_3_0; }

		//":"
		public Keyword getColonKeyword_7_0_1_3_1() { return cColonKeyword_7_0_1_3_1; }

		//"[" requiredCapabilities+=AliasedRequiredCapability ("," requiredCapabilities+=AliasedRequiredCapability)* "]" |
		//requiredCapabilities+=AliasedRequiredCapability
		public Alternatives getAlternatives_7_0_1_3_2() { return cAlternatives_7_0_1_3_2; }

		//"[" requiredCapabilities+=AliasedRequiredCapability ("," requiredCapabilities+=AliasedRequiredCapability)* "]"
		public Group getGroup_7_0_1_3_2_0() { return cGroup_7_0_1_3_2_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_7_0_1_3_2_0_0() { return cLeftSquareBracketKeyword_7_0_1_3_2_0_0; }

		//requiredCapabilities+=AliasedRequiredCapability
		public Assignment getRequiredCapabilitiesAssignment_7_0_1_3_2_0_1() { return cRequiredCapabilitiesAssignment_7_0_1_3_2_0_1; }

		//AliasedRequiredCapability
		public RuleCall getRequiredCapabilitiesAliasedRequiredCapabilityParserRuleCall_7_0_1_3_2_0_1_0() { return cRequiredCapabilitiesAliasedRequiredCapabilityParserRuleCall_7_0_1_3_2_0_1_0; }

		//("," requiredCapabilities+=AliasedRequiredCapability)*
		public Group getGroup_7_0_1_3_2_0_2() { return cGroup_7_0_1_3_2_0_2; }

		//","
		public Keyword getCommaKeyword_7_0_1_3_2_0_2_0() { return cCommaKeyword_7_0_1_3_2_0_2_0; }

		//requiredCapabilities+=AliasedRequiredCapability
		public Assignment getRequiredCapabilitiesAssignment_7_0_1_3_2_0_2_1() { return cRequiredCapabilitiesAssignment_7_0_1_3_2_0_2_1; }

		//AliasedRequiredCapability
		public RuleCall getRequiredCapabilitiesAliasedRequiredCapabilityParserRuleCall_7_0_1_3_2_0_2_1_0() { return cRequiredCapabilitiesAliasedRequiredCapabilityParserRuleCall_7_0_1_3_2_0_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_7_0_1_3_2_0_3() { return cRightSquareBracketKeyword_7_0_1_3_2_0_3; }

		//requiredCapabilities+=AliasedRequiredCapability
		public Assignment getRequiredCapabilitiesAssignment_7_0_1_3_2_1() { return cRequiredCapabilitiesAssignment_7_0_1_3_2_1; }

		//AliasedRequiredCapability
		public RuleCall getRequiredCapabilitiesAliasedRequiredCapabilityParserRuleCall_7_0_1_3_2_1_0() { return cRequiredCapabilitiesAliasedRequiredCapabilityParserRuleCall_7_0_1_3_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_7_0_1_3_3() { return cSemicolonKeyword_7_0_1_3_3; }

		//"select-required" ":" ("[" requiredPredicates+=CapabilityPredicate ("," requiredPredicates+=CapabilityPredicate)* "]" |
		//requiredPredicates+=CapabilityPredicate) ";"
		public Group getGroup_7_0_1_4() { return cGroup_7_0_1_4; }

		//"select-required"
		public Keyword getSelectRequiredKeyword_7_0_1_4_0() { return cSelectRequiredKeyword_7_0_1_4_0; }

		//":"
		public Keyword getColonKeyword_7_0_1_4_1() { return cColonKeyword_7_0_1_4_1; }

		//"[" requiredPredicates+=CapabilityPredicate ("," requiredPredicates+=CapabilityPredicate)* "]" |
		//requiredPredicates+=CapabilityPredicate
		public Alternatives getAlternatives_7_0_1_4_2() { return cAlternatives_7_0_1_4_2; }

		//"[" requiredPredicates+=CapabilityPredicate ("," requiredPredicates+=CapabilityPredicate)* "]"
		public Group getGroup_7_0_1_4_2_0() { return cGroup_7_0_1_4_2_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_7_0_1_4_2_0_0() { return cLeftSquareBracketKeyword_7_0_1_4_2_0_0; }

		//requiredPredicates+=CapabilityPredicate
		public Assignment getRequiredPredicatesAssignment_7_0_1_4_2_0_1() { return cRequiredPredicatesAssignment_7_0_1_4_2_0_1; }

		//CapabilityPredicate
		public RuleCall getRequiredPredicatesCapabilityPredicateParserRuleCall_7_0_1_4_2_0_1_0() { return cRequiredPredicatesCapabilityPredicateParserRuleCall_7_0_1_4_2_0_1_0; }

		//("," requiredPredicates+=CapabilityPredicate)*
		public Group getGroup_7_0_1_4_2_0_2() { return cGroup_7_0_1_4_2_0_2; }

		//","
		public Keyword getCommaKeyword_7_0_1_4_2_0_2_0() { return cCommaKeyword_7_0_1_4_2_0_2_0; }

		//requiredPredicates+=CapabilityPredicate
		public Assignment getRequiredPredicatesAssignment_7_0_1_4_2_0_2_1() { return cRequiredPredicatesAssignment_7_0_1_4_2_0_2_1; }

		//CapabilityPredicate
		public RuleCall getRequiredPredicatesCapabilityPredicateParserRuleCall_7_0_1_4_2_0_2_1_0() { return cRequiredPredicatesCapabilityPredicateParserRuleCall_7_0_1_4_2_0_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_7_0_1_4_2_0_3() { return cRightSquareBracketKeyword_7_0_1_4_2_0_3; }

		//requiredPredicates+=CapabilityPredicate
		public Assignment getRequiredPredicatesAssignment_7_0_1_4_2_1() { return cRequiredPredicatesAssignment_7_0_1_4_2_1; }

		//CapabilityPredicate
		public RuleCall getRequiredPredicatesCapabilityPredicateParserRuleCall_7_0_1_4_2_1_0() { return cRequiredPredicatesCapabilityPredicateParserRuleCall_7_0_1_4_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_7_0_1_4_3() { return cSemicolonKeyword_7_0_1_4_3; }

		//"requires" "env" ":" ("[" metaRequiredCapabilities+=RequiredCapability (","
		//metaRequiredCapabilities+=RequiredCapability)* "]" | metaRequiredCapabilities+=RequiredCapability) ";"
		public Group getGroup_7_0_1_5() { return cGroup_7_0_1_5; }

		//"requires"
		public Keyword getRequiresKeyword_7_0_1_5_0() { return cRequiresKeyword_7_0_1_5_0; }

		//"env"
		public Keyword getEnvKeyword_7_0_1_5_1() { return cEnvKeyword_7_0_1_5_1; }

		//":"
		public Keyword getColonKeyword_7_0_1_5_2() { return cColonKeyword_7_0_1_5_2; }

		//"[" metaRequiredCapabilities+=RequiredCapability ("," metaRequiredCapabilities+=RequiredCapability)* "]" |
		//metaRequiredCapabilities+=RequiredCapability
		public Alternatives getAlternatives_7_0_1_5_3() { return cAlternatives_7_0_1_5_3; }

		//"[" metaRequiredCapabilities+=RequiredCapability ("," metaRequiredCapabilities+=RequiredCapability)* "]"
		public Group getGroup_7_0_1_5_3_0() { return cGroup_7_0_1_5_3_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_7_0_1_5_3_0_0() { return cLeftSquareBracketKeyword_7_0_1_5_3_0_0; }

		//metaRequiredCapabilities+=RequiredCapability
		public Assignment getMetaRequiredCapabilitiesAssignment_7_0_1_5_3_0_1() { return cMetaRequiredCapabilitiesAssignment_7_0_1_5_3_0_1; }

		//RequiredCapability
		public RuleCall getMetaRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_0_1_5_3_0_1_0() { return cMetaRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_0_1_5_3_0_1_0; }

		//("," metaRequiredCapabilities+=RequiredCapability)*
		public Group getGroup_7_0_1_5_3_0_2() { return cGroup_7_0_1_5_3_0_2; }

		//","
		public Keyword getCommaKeyword_7_0_1_5_3_0_2_0() { return cCommaKeyword_7_0_1_5_3_0_2_0; }

		//metaRequiredCapabilities+=RequiredCapability
		public Assignment getMetaRequiredCapabilitiesAssignment_7_0_1_5_3_0_2_1() { return cMetaRequiredCapabilitiesAssignment_7_0_1_5_3_0_2_1; }

		//RequiredCapability
		public RuleCall getMetaRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_0_1_5_3_0_2_1_0() { return cMetaRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_0_1_5_3_0_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_7_0_1_5_3_0_3() { return cRightSquareBracketKeyword_7_0_1_5_3_0_3; }

		//metaRequiredCapabilities+=RequiredCapability
		public Assignment getMetaRequiredCapabilitiesAssignment_7_0_1_5_3_1() { return cMetaRequiredCapabilitiesAssignment_7_0_1_5_3_1; }

		//RequiredCapability
		public RuleCall getMetaRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_0_1_5_3_1_0() { return cMetaRequiredCapabilitiesRequiredCapabilityParserRuleCall_7_0_1_5_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_7_0_1_5_4() { return cSemicolonKeyword_7_0_1_5_4; }

		//functions+=Builder // *
		//| functions+=Function
		public Alternatives getAlternatives_7_0_1_6() { return cAlternatives_7_0_1_6; }

		//functions+=Builder
		public Assignment getFunctionsAssignment_7_0_1_6_0() { return cFunctionsAssignment_7_0_1_6_0; }

		//Builder
		public RuleCall getFunctionsBuilderParserRuleCall_7_0_1_6_0_0() { return cFunctionsBuilderParserRuleCall_7_0_1_6_0_0; }

		//functions+=Function
		public Assignment getFunctionsAssignment_7_0_1_6_1() { return cFunctionsAssignment_7_0_1_6_1; }

		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_7_0_1_6_1_0() { return cFunctionsFunctionParserRuleCall_7_0_1_6_1_0; }

		//providers+=TopLevelUnitProvider
		public Assignment getProvidersAssignment_7_0_1_7() { return cProvidersAssignment_7_0_1_7; }

		//TopLevelUnitProvider
		public RuleCall getProvidersTopLevelUnitProviderParserRuleCall_7_0_1_7_0() { return cProvidersTopLevelUnitProviderParserRuleCall_7_0_1_7_0; }

		//concerns+=Concern_Named
		public Assignment getConcernsAssignment_7_0_1_8() { return cConcernsAssignment_7_0_1_8; }

		//Concern_Named
		public RuleCall getConcernsConcern_NamedParserRuleCall_7_0_1_8_0() { return cConcernsConcern_NamedParserRuleCall_7_0_1_8_0; }

		//propertySets+=PropertySet_Named
		public Assignment getPropertySetsAssignment_7_0_1_9() { return cPropertySetsAssignment_7_0_1_9; }

		//PropertySet_Named
		public RuleCall getPropertySetsPropertySet_NamedParserRuleCall_7_0_1_9_0() { return cPropertySetsPropertySet_NamedParserRuleCall_7_0_1_9_0; }

		//containers+=ContainerConfiguration ";"
		public Group getGroup_7_0_1_10() { return cGroup_7_0_1_10; }

		//containers+=ContainerConfiguration
		public Assignment getContainersAssignment_7_0_1_10_0() { return cContainersAssignment_7_0_1_10_0; }

		//ContainerConfiguration
		public RuleCall getContainersContainerConfigurationParserRuleCall_7_0_1_10_0_0() { return cContainersContainerConfigurationParserRuleCall_7_0_1_10_0_0; }

		//";"
		public Keyword getSemicolonKeyword_7_0_1_10_1() { return cSemicolonKeyword_7_0_1_10_1; }

		//synchronizations+=Synchronization
		public Assignment getSynchronizationsAssignment_7_0_1_11() { return cSynchronizationsAssignment_7_0_1_11; }

		//Synchronization
		public RuleCall getSynchronizationsSynchronizationParserRuleCall_7_0_1_11_0() { return cSynchronizationsSynchronizationParserRuleCall_7_0_1_11_0; }

		//repositories+=Repository
		public Assignment getRepositoriesAssignment_7_0_1_12() { return cRepositoriesAssignment_7_0_1_12; }

		//Repository
		public RuleCall getRepositoriesRepositoryParserRuleCall_7_0_1_12_0() { return cRepositoriesRepositoryParserRuleCall_7_0_1_12_0; }

		//defaultProperties=PropertySetDefault
		public Assignment getDefaultPropertiesAssignment_7_0_1_13() { return cDefaultPropertiesAssignment_7_0_1_13; }

		//PropertySetDefault
		public RuleCall getDefaultPropertiesPropertySetDefaultParserRuleCall_7_0_1_13_0() { return cDefaultPropertiesPropertySetDefaultParserRuleCall_7_0_1_13_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_0_2() { return cRightCurlyBracketKeyword_7_0_2; }

		//";"
		public Keyword getSemicolonKeyword_7_1() { return cSemicolonKeyword_7_1; }
	}

	public class ProvidedCapabilityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProvidedCapability");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVersionedCapabilityAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cUnitKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cCapabilityKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2_1 = (UnorderedGroup)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cUnorderedGroup_2_1.eContents().get(0);
		private final Keyword cWhenKeyword_2_1_0_0 = (Keyword)cGroup_2_1_0.eContents().get(0);
		private final Keyword cColonKeyword_2_1_0_1 = (Keyword)cGroup_2_1_0.eContents().get(1);
		private final Assignment cCondExprAssignment_2_1_0_2 = (Assignment)cGroup_2_1_0.eContents().get(2);
		private final RuleCall cCondExprExpressionParserRuleCall_2_1_0_2_0 = (RuleCall)cCondExprAssignment_2_1_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_0_3 = (Keyword)cGroup_2_1_0.eContents().get(3);
		private final Group cGroup_2_1_1 = (Group)cUnorderedGroup_2_1.eContents().get(1);
		private final Keyword cNameKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2_1_1_1 = (Keyword)cGroup_2_1_1.eContents().get(1);
		private final Assignment cNameAssignment_2_1_1_2 = (Assignment)cGroup_2_1_1.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_1_1_2_0 = (RuleCall)cNameAssignment_2_1_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_3 = (Keyword)cGroup_2_1_1.eContents().get(3);
		private final Group cGroup_2_1_2 = (Group)cUnorderedGroup_2_1.eContents().get(2);
		private final Keyword cNameSpaceKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1_2_1 = (Keyword)cGroup_2_1_2.eContents().get(1);
		private final Assignment cNameSpaceAssignment_2_1_2_2 = (Assignment)cGroup_2_1_2.eContents().get(2);
		private final RuleCall cNameSpaceCapabilityInterfaceParserRuleCall_2_1_2_2_0 = (RuleCall)cNameSpaceAssignment_2_1_2_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_2_3 = (Keyword)cGroup_2_1_2.eContents().get(3);
		private final Group cGroup_2_1_3 = (Group)cUnorderedGroup_2_1.eContents().get(3);
		private final Keyword cVersionKeyword_2_1_3_0 = (Keyword)cGroup_2_1_3.eContents().get(0);
		private final Keyword cColonKeyword_2_1_3_1 = (Keyword)cGroup_2_1_3.eContents().get(1);
		private final Assignment cVersionAssignment_2_1_3_2 = (Assignment)cGroup_2_1_3.eContents().get(2);
		private final RuleCall cVersionVersionLiteralParserRuleCall_2_1_3_2_0 = (RuleCall)cVersionAssignment_2_1_3_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_3_3 = (Keyword)cGroup_2_1_3.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//ProvidedCapability returns build::VersionedCapability:
		//	{build::VersionedCapability} ("unit" | "capability") ("{" (("when" ":" condExpr=Expression ";")? & ("name" ":"
		//	name=STRING ";")? & ("name-space" ":" nameSpace=CapabilityInterface ";")? & ("version" ":" version=VersionLiteral
		//	";")?) "}");
		public ParserRule getRule() { return rule; }

		//{build::VersionedCapability} ("unit" | "capability") ("{" (("when" ":" condExpr=Expression ";")? & ("name" ":"
		//name=STRING ";")? & ("name-space" ":" nameSpace=CapabilityInterface ";")? & ("version" ":" version=VersionLiteral
		//";")?) "}")
		public Group getGroup() { return cGroup; }

		//{build::VersionedCapability}
		public Action getVersionedCapabilityAction_0() { return cVersionedCapabilityAction_0; }

		//"unit" | "capability"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"unit"
		public Keyword getUnitKeyword_1_0() { return cUnitKeyword_1_0; }

		//"capability"
		public Keyword getCapabilityKeyword_1_1() { return cCapabilityKeyword_1_1; }

		//"{" (("when" ":" condExpr=Expression ";")? & ("name" ":" name=STRING ";")? & ("name-space" ":"
		//nameSpace=CapabilityInterface ";")? & ("version" ":" version=VersionLiteral ";")?) "}"
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//("when" ":" condExpr=Expression ";")? & ("name" ":" name=STRING ";")? & ("name-space" ":" nameSpace=CapabilityInterface
		//";")? & ("version" ":" version=VersionLiteral ";")?
		public UnorderedGroup getUnorderedGroup_2_1() { return cUnorderedGroup_2_1; }

		//("when" ":" condExpr=Expression ";")?
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }

		//"when"
		public Keyword getWhenKeyword_2_1_0_0() { return cWhenKeyword_2_1_0_0; }

		//":"
		public Keyword getColonKeyword_2_1_0_1() { return cColonKeyword_2_1_0_1; }

		//condExpr=Expression
		public Assignment getCondExprAssignment_2_1_0_2() { return cCondExprAssignment_2_1_0_2; }

		//Expression
		public RuleCall getCondExprExpressionParserRuleCall_2_1_0_2_0() { return cCondExprExpressionParserRuleCall_2_1_0_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_0_3() { return cSemicolonKeyword_2_1_0_3; }

		//("name" ":" name=STRING ";")?
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//"name"
		public Keyword getNameKeyword_2_1_1_0() { return cNameKeyword_2_1_1_0; }

		//":"
		public Keyword getColonKeyword_2_1_1_1() { return cColonKeyword_2_1_1_1; }

		//name=STRING
		public Assignment getNameAssignment_2_1_1_2() { return cNameAssignment_2_1_1_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_1_1_2_0() { return cNameSTRINGTerminalRuleCall_2_1_1_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_3() { return cSemicolonKeyword_2_1_1_3; }

		//("name-space" ":" nameSpace=CapabilityInterface ";")?
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//"name-space"
		public Keyword getNameSpaceKeyword_2_1_2_0() { return cNameSpaceKeyword_2_1_2_0; }

		//":"
		public Keyword getColonKeyword_2_1_2_1() { return cColonKeyword_2_1_2_1; }

		//nameSpace=CapabilityInterface
		public Assignment getNameSpaceAssignment_2_1_2_2() { return cNameSpaceAssignment_2_1_2_2; }

		//CapabilityInterface
		public RuleCall getNameSpaceCapabilityInterfaceParserRuleCall_2_1_2_2_0() { return cNameSpaceCapabilityInterfaceParserRuleCall_2_1_2_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_2_3() { return cSemicolonKeyword_2_1_2_3; }

		//("version" ":" version=VersionLiteral ";")?
		public Group getGroup_2_1_3() { return cGroup_2_1_3; }

		//"version"
		public Keyword getVersionKeyword_2_1_3_0() { return cVersionKeyword_2_1_3_0; }

		//":"
		public Keyword getColonKeyword_2_1_3_1() { return cColonKeyword_2_1_3_1; }

		//version=VersionLiteral
		public Assignment getVersionAssignment_2_1_3_2() { return cVersionAssignment_2_1_3_2; }

		//VersionLiteral
		public RuleCall getVersionVersionLiteralParserRuleCall_2_1_3_2_0() { return cVersionVersionLiteralParserRuleCall_2_1_3_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_3_3() { return cSemicolonKeyword_2_1_3_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class AliasedRequiredCapabilityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AliasedRequiredCapability");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAliasedRequiredCapabilityAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cUnitKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cCapabilityKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2_1 = (UnorderedGroup)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cUnorderedGroup_2_1.eContents().get(0);
		private final Keyword cWhenKeyword_2_1_0_0 = (Keyword)cGroup_2_1_0.eContents().get(0);
		private final Keyword cColonKeyword_2_1_0_1 = (Keyword)cGroup_2_1_0.eContents().get(1);
		private final Assignment cCondExprAssignment_2_1_0_2 = (Assignment)cGroup_2_1_0.eContents().get(2);
		private final RuleCall cCondExprExpressionParserRuleCall_2_1_0_2_0 = (RuleCall)cCondExprAssignment_2_1_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_0_3 = (Keyword)cGroup_2_1_0.eContents().get(3);
		private final Group cGroup_2_1_1 = (Group)cUnorderedGroup_2_1.eContents().get(1);
		private final Keyword cNameKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2_1_1_1 = (Keyword)cGroup_2_1_1.eContents().get(1);
		private final Assignment cNameAssignment_2_1_1_2 = (Assignment)cGroup_2_1_1.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_1_1_2_0 = (RuleCall)cNameAssignment_2_1_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_3 = (Keyword)cGroup_2_1_1.eContents().get(3);
		private final Group cGroup_2_1_2 = (Group)cUnorderedGroup_2_1.eContents().get(2);
		private final Keyword cNameSpaceKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1_2_1 = (Keyword)cGroup_2_1_2.eContents().get(1);
		private final Assignment cNameSpaceAssignment_2_1_2_2 = (Assignment)cGroup_2_1_2.eContents().get(2);
		private final RuleCall cNameSpaceCapabilityInterfaceParserRuleCall_2_1_2_2_0 = (RuleCall)cNameSpaceAssignment_2_1_2_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_2_3 = (Keyword)cGroup_2_1_2.eContents().get(3);
		private final Group cGroup_2_1_3 = (Group)cUnorderedGroup_2_1.eContents().get(3);
		private final Assignment cGreedyAssignment_2_1_3_0 = (Assignment)cGroup_2_1_3.eContents().get(0);
		private final Keyword cGreedyGreedyKeyword_2_1_3_0_0 = (Keyword)cGreedyAssignment_2_1_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_3_1 = (Keyword)cGroup_2_1_3.eContents().get(1);
		private final Group cGroup_2_1_4 = (Group)cUnorderedGroup_2_1.eContents().get(4);
		private final Keyword cRequiresMinKeyword_2_1_4_0 = (Keyword)cGroup_2_1_4.eContents().get(0);
		private final Keyword cColonKeyword_2_1_4_1 = (Keyword)cGroup_2_1_4.eContents().get(1);
		private final Assignment cMinAssignment_2_1_4_2 = (Assignment)cGroup_2_1_4.eContents().get(2);
		private final RuleCall cMinIntValueParserRuleCall_2_1_4_2_0 = (RuleCall)cMinAssignment_2_1_4_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_4_3 = (Keyword)cGroup_2_1_4.eContents().get(3);
		private final Group cGroup_2_1_5 = (Group)cUnorderedGroup_2_1.eContents().get(5);
		private final Keyword cRequiresMaxKeyword_2_1_5_0 = (Keyword)cGroup_2_1_5.eContents().get(0);
		private final Keyword cColonKeyword_2_1_5_1 = (Keyword)cGroup_2_1_5.eContents().get(1);
		private final Assignment cMaxAssignment_2_1_5_2 = (Assignment)cGroup_2_1_5.eContents().get(2);
		private final RuleCall cMaxIntValueParserRuleCall_2_1_5_2_0 = (RuleCall)cMaxAssignment_2_1_5_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_5_3 = (Keyword)cGroup_2_1_5.eContents().get(3);
		private final Group cGroup_2_1_6 = (Group)cUnorderedGroup_2_1.eContents().get(6);
		private final Keyword cVersionKeyword_2_1_6_0 = (Keyword)cGroup_2_1_6.eContents().get(0);
		private final Keyword cColonKeyword_2_1_6_1 = (Keyword)cGroup_2_1_6.eContents().get(1);
		private final Assignment cVersionRangeAssignment_2_1_6_2 = (Assignment)cGroup_2_1_6.eContents().get(2);
		private final RuleCall cVersionRangeVersionRangeLiteralParserRuleCall_2_1_6_2_0 = (RuleCall)cVersionRangeAssignment_2_1_6_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_6_3 = (Keyword)cGroup_2_1_6.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAliasAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_3_1_0 = (RuleCall)cAliasAssignment_3_1.eContents().get(0);
		
		//// Capability required by a unit - always refers to capabilities with at least ns/name
		//// or the keyword "unit" instead of the namespace for buildunits
		//AliasedRequiredCapability returns build::RequiredCapability:
		//	{build::AliasedRequiredCapability} ("unit" | "capability") ("{" (("when" ":" condExpr=Expression ";")? & ("name" ":"
		//	name=STRING ";")? & ("name-space" ":" nameSpace=CapabilityInterface ";")? & (greedy?="greedy" ";")? & ("requires-min"
		//	":" min=IntValue ";")? & ("requires-max" ":" max=IntValue ";")? & ("version" ":" versionRange=VersionRangeLiteral
		//	";")?) "}") ("as" alias=ID)?;
		public ParserRule getRule() { return rule; }

		//{build::AliasedRequiredCapability} ("unit" | "capability") ("{" (("when" ":" condExpr=Expression ";")? & ("name" ":"
		//name=STRING ";")? & ("name-space" ":" nameSpace=CapabilityInterface ";")? & (greedy?="greedy" ";")? & ("requires-min"
		//":" min=IntValue ";")? & ("requires-max" ":" max=IntValue ";")? & ("version" ":" versionRange=VersionRangeLiteral
		//";")?) "}") ("as" alias=ID)?
		public Group getGroup() { return cGroup; }

		//{build::AliasedRequiredCapability}
		public Action getAliasedRequiredCapabilityAction_0() { return cAliasedRequiredCapabilityAction_0; }

		//"unit" | "capability"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"unit"
		public Keyword getUnitKeyword_1_0() { return cUnitKeyword_1_0; }

		//"capability"
		public Keyword getCapabilityKeyword_1_1() { return cCapabilityKeyword_1_1; }

		//"{" (("when" ":" condExpr=Expression ";")? & ("name" ":" name=STRING ";")? & ("name-space" ":"
		//nameSpace=CapabilityInterface ";")? & (greedy?="greedy" ";")? & ("requires-min" ":" min=IntValue ";")? &
		//("requires-max" ":" max=IntValue ";")? & ("version" ":" versionRange=VersionRangeLiteral ";")?) "}"
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//("when" ":" condExpr=Expression ";")? & ("name" ":" name=STRING ";")? & ("name-space" ":" nameSpace=CapabilityInterface
		//";")? & (greedy?="greedy" ";")? & ("requires-min" ":" min=IntValue ";")? & ("requires-max" ":" max=IntValue ";")? &
		//("version" ":" versionRange=VersionRangeLiteral ";")?
		public UnorderedGroup getUnorderedGroup_2_1() { return cUnorderedGroup_2_1; }

		//("when" ":" condExpr=Expression ";")?
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }

		//"when"
		public Keyword getWhenKeyword_2_1_0_0() { return cWhenKeyword_2_1_0_0; }

		//":"
		public Keyword getColonKeyword_2_1_0_1() { return cColonKeyword_2_1_0_1; }

		//condExpr=Expression
		public Assignment getCondExprAssignment_2_1_0_2() { return cCondExprAssignment_2_1_0_2; }

		//Expression
		public RuleCall getCondExprExpressionParserRuleCall_2_1_0_2_0() { return cCondExprExpressionParserRuleCall_2_1_0_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_0_3() { return cSemicolonKeyword_2_1_0_3; }

		//("name" ":" name=STRING ";")?
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//"name"
		public Keyword getNameKeyword_2_1_1_0() { return cNameKeyword_2_1_1_0; }

		//":"
		public Keyword getColonKeyword_2_1_1_1() { return cColonKeyword_2_1_1_1; }

		//name=STRING
		public Assignment getNameAssignment_2_1_1_2() { return cNameAssignment_2_1_1_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_1_1_2_0() { return cNameSTRINGTerminalRuleCall_2_1_1_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_3() { return cSemicolonKeyword_2_1_1_3; }

		//("name-space" ":" nameSpace=CapabilityInterface ";")?
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//"name-space"
		public Keyword getNameSpaceKeyword_2_1_2_0() { return cNameSpaceKeyword_2_1_2_0; }

		//":"
		public Keyword getColonKeyword_2_1_2_1() { return cColonKeyword_2_1_2_1; }

		//nameSpace=CapabilityInterface
		public Assignment getNameSpaceAssignment_2_1_2_2() { return cNameSpaceAssignment_2_1_2_2; }

		//CapabilityInterface
		public RuleCall getNameSpaceCapabilityInterfaceParserRuleCall_2_1_2_2_0() { return cNameSpaceCapabilityInterfaceParserRuleCall_2_1_2_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_2_3() { return cSemicolonKeyword_2_1_2_3; }

		//(greedy?="greedy" ";")?
		public Group getGroup_2_1_3() { return cGroup_2_1_3; }

		//greedy?="greedy"
		public Assignment getGreedyAssignment_2_1_3_0() { return cGreedyAssignment_2_1_3_0; }

		//"greedy"
		public Keyword getGreedyGreedyKeyword_2_1_3_0_0() { return cGreedyGreedyKeyword_2_1_3_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_3_1() { return cSemicolonKeyword_2_1_3_1; }

		//("requires-min" ":" min=IntValue ";")?
		public Group getGroup_2_1_4() { return cGroup_2_1_4; }

		//"requires-min"
		public Keyword getRequiresMinKeyword_2_1_4_0() { return cRequiresMinKeyword_2_1_4_0; }

		//":"
		public Keyword getColonKeyword_2_1_4_1() { return cColonKeyword_2_1_4_1; }

		//min=IntValue
		public Assignment getMinAssignment_2_1_4_2() { return cMinAssignment_2_1_4_2; }

		//IntValue
		public RuleCall getMinIntValueParserRuleCall_2_1_4_2_0() { return cMinIntValueParserRuleCall_2_1_4_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_4_3() { return cSemicolonKeyword_2_1_4_3; }

		//("requires-max" ":" max=IntValue ";")?
		public Group getGroup_2_1_5() { return cGroup_2_1_5; }

		//"requires-max"
		public Keyword getRequiresMaxKeyword_2_1_5_0() { return cRequiresMaxKeyword_2_1_5_0; }

		//":"
		public Keyword getColonKeyword_2_1_5_1() { return cColonKeyword_2_1_5_1; }

		//max=IntValue
		public Assignment getMaxAssignment_2_1_5_2() { return cMaxAssignment_2_1_5_2; }

		//IntValue
		public RuleCall getMaxIntValueParserRuleCall_2_1_5_2_0() { return cMaxIntValueParserRuleCall_2_1_5_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_5_3() { return cSemicolonKeyword_2_1_5_3; }

		//("version" ":" versionRange=VersionRangeLiteral ";")?
		public Group getGroup_2_1_6() { return cGroup_2_1_6; }

		//"version"
		public Keyword getVersionKeyword_2_1_6_0() { return cVersionKeyword_2_1_6_0; }

		//":"
		public Keyword getColonKeyword_2_1_6_1() { return cColonKeyword_2_1_6_1; }

		//versionRange=VersionRangeLiteral
		public Assignment getVersionRangeAssignment_2_1_6_2() { return cVersionRangeAssignment_2_1_6_2; }

		//VersionRangeLiteral
		public RuleCall getVersionRangeVersionRangeLiteralParserRuleCall_2_1_6_2_0() { return cVersionRangeVersionRangeLiteralParserRuleCall_2_1_6_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_6_3() { return cSemicolonKeyword_2_1_6_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }

		//("as" alias=ID)?
		public Group getGroup_3() { return cGroup_3; }

		//"as"
		public Keyword getAsKeyword_3_0() { return cAsKeyword_3_0; }

		//alias=ID
		public Assignment getAliasAssignment_3_1() { return cAliasAssignment_3_1; }

		//ID
		public RuleCall getAliasIDTerminalRuleCall_3_1_0() { return cAliasIDTerminalRuleCall_3_1_0; }
	}

	public class RequiredCapabilityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequiredCapability");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRequiredCapabilityAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cUnitKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cCapabilityKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2_1 = (UnorderedGroup)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cUnorderedGroup_2_1.eContents().get(0);
		private final Keyword cWhenKeyword_2_1_0_0 = (Keyword)cGroup_2_1_0.eContents().get(0);
		private final Keyword cColonKeyword_2_1_0_1 = (Keyword)cGroup_2_1_0.eContents().get(1);
		private final Assignment cCondExprAssignment_2_1_0_2 = (Assignment)cGroup_2_1_0.eContents().get(2);
		private final RuleCall cCondExprExpressionParserRuleCall_2_1_0_2_0 = (RuleCall)cCondExprAssignment_2_1_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_0_3 = (Keyword)cGroup_2_1_0.eContents().get(3);
		private final Group cGroup_2_1_1 = (Group)cUnorderedGroup_2_1.eContents().get(1);
		private final Keyword cNameKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2_1_1_1 = (Keyword)cGroup_2_1_1.eContents().get(1);
		private final Assignment cNameAssignment_2_1_1_2 = (Assignment)cGroup_2_1_1.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_1_1_2_0 = (RuleCall)cNameAssignment_2_1_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_3 = (Keyword)cGroup_2_1_1.eContents().get(3);
		private final Group cGroup_2_1_2 = (Group)cUnorderedGroup_2_1.eContents().get(2);
		private final Keyword cNameSpaceKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1_2_1 = (Keyword)cGroup_2_1_2.eContents().get(1);
		private final Assignment cNameSpaceAssignment_2_1_2_2 = (Assignment)cGroup_2_1_2.eContents().get(2);
		private final RuleCall cNameSpaceCapabilityInterfaceParserRuleCall_2_1_2_2_0 = (RuleCall)cNameSpaceAssignment_2_1_2_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_2_3 = (Keyword)cGroup_2_1_2.eContents().get(3);
		private final Group cGroup_2_1_3 = (Group)cUnorderedGroup_2_1.eContents().get(3);
		private final Assignment cGreedyAssignment_2_1_3_0 = (Assignment)cGroup_2_1_3.eContents().get(0);
		private final Keyword cGreedyGreedyKeyword_2_1_3_0_0 = (Keyword)cGreedyAssignment_2_1_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_3_1 = (Keyword)cGroup_2_1_3.eContents().get(1);
		private final Group cGroup_2_1_4 = (Group)cUnorderedGroup_2_1.eContents().get(4);
		private final Keyword cRequiresMinKeyword_2_1_4_0 = (Keyword)cGroup_2_1_4.eContents().get(0);
		private final Keyword cColonKeyword_2_1_4_1 = (Keyword)cGroup_2_1_4.eContents().get(1);
		private final Assignment cMinAssignment_2_1_4_2 = (Assignment)cGroup_2_1_4.eContents().get(2);
		private final RuleCall cMinIntValueParserRuleCall_2_1_4_2_0 = (RuleCall)cMinAssignment_2_1_4_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_4_3 = (Keyword)cGroup_2_1_4.eContents().get(3);
		private final Group cGroup_2_1_5 = (Group)cUnorderedGroup_2_1.eContents().get(5);
		private final Keyword cRequiresMaxKeyword_2_1_5_0 = (Keyword)cGroup_2_1_5.eContents().get(0);
		private final Keyword cColonKeyword_2_1_5_1 = (Keyword)cGroup_2_1_5.eContents().get(1);
		private final Assignment cMaxAssignment_2_1_5_2 = (Assignment)cGroup_2_1_5.eContents().get(2);
		private final RuleCall cMaxIntValueParserRuleCall_2_1_5_2_0 = (RuleCall)cMaxAssignment_2_1_5_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_5_3 = (Keyword)cGroup_2_1_5.eContents().get(3);
		private final Group cGroup_2_1_6 = (Group)cUnorderedGroup_2_1.eContents().get(6);
		private final Keyword cVersionKeyword_2_1_6_0 = (Keyword)cGroup_2_1_6.eContents().get(0);
		private final Keyword cColonKeyword_2_1_6_1 = (Keyword)cGroup_2_1_6.eContents().get(1);
		private final Assignment cVersionRangeAssignment_2_1_6_2 = (Assignment)cGroup_2_1_6.eContents().get(2);
		private final RuleCall cVersionRangeVersionRangeLiteralParserRuleCall_2_1_6_2_0 = (RuleCall)cVersionRangeAssignment_2_1_6_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_6_3 = (Keyword)cGroup_2_1_6.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//// Capability required by a unit - always refers to capabilities with at least ns/name
		//// or the keyword "unit" instead of the namespace for buildunits
		//RequiredCapability returns build::RequiredCapability:
		//	{build::RequiredCapability} ("unit" | "capability") ("{" (("when" ":" condExpr=Expression ";")? & ("name" ":"
		//	name=STRING ";")? & ("name-space" ":" nameSpace=CapabilityInterface ";")? & (greedy?="greedy" ";")? & ("requires-min"
		//	":" min=IntValue ";")? & ("requires-max" ":" max=IntValue ";")? & ("version" ":" versionRange=VersionRangeLiteral
		//	";")?) "}");
		public ParserRule getRule() { return rule; }

		//{build::RequiredCapability} ("unit" | "capability") ("{" (("when" ":" condExpr=Expression ";")? & ("name" ":"
		//name=STRING ";")? & ("name-space" ":" nameSpace=CapabilityInterface ";")? & (greedy?="greedy" ";")? & ("requires-min"
		//":" min=IntValue ";")? & ("requires-max" ":" max=IntValue ";")? & ("version" ":" versionRange=VersionRangeLiteral
		//";")?) "}")
		public Group getGroup() { return cGroup; }

		//{build::RequiredCapability}
		public Action getRequiredCapabilityAction_0() { return cRequiredCapabilityAction_0; }

		//"unit" | "capability"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"unit"
		public Keyword getUnitKeyword_1_0() { return cUnitKeyword_1_0; }

		//"capability"
		public Keyword getCapabilityKeyword_1_1() { return cCapabilityKeyword_1_1; }

		//"{" (("when" ":" condExpr=Expression ";")? & ("name" ":" name=STRING ";")? & ("name-space" ":"
		//nameSpace=CapabilityInterface ";")? & (greedy?="greedy" ";")? & ("requires-min" ":" min=IntValue ";")? &
		//("requires-max" ":" max=IntValue ";")? & ("version" ":" versionRange=VersionRangeLiteral ";")?) "}"
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//("when" ":" condExpr=Expression ";")? & ("name" ":" name=STRING ";")? & ("name-space" ":" nameSpace=CapabilityInterface
		//";")? & (greedy?="greedy" ";")? & ("requires-min" ":" min=IntValue ";")? & ("requires-max" ":" max=IntValue ";")? &
		//("version" ":" versionRange=VersionRangeLiteral ";")?
		public UnorderedGroup getUnorderedGroup_2_1() { return cUnorderedGroup_2_1; }

		//("when" ":" condExpr=Expression ";")?
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }

		//"when"
		public Keyword getWhenKeyword_2_1_0_0() { return cWhenKeyword_2_1_0_0; }

		//":"
		public Keyword getColonKeyword_2_1_0_1() { return cColonKeyword_2_1_0_1; }

		//condExpr=Expression
		public Assignment getCondExprAssignment_2_1_0_2() { return cCondExprAssignment_2_1_0_2; }

		//Expression
		public RuleCall getCondExprExpressionParserRuleCall_2_1_0_2_0() { return cCondExprExpressionParserRuleCall_2_1_0_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_0_3() { return cSemicolonKeyword_2_1_0_3; }

		//("name" ":" name=STRING ";")?
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//"name"
		public Keyword getNameKeyword_2_1_1_0() { return cNameKeyword_2_1_1_0; }

		//":"
		public Keyword getColonKeyword_2_1_1_1() { return cColonKeyword_2_1_1_1; }

		//name=STRING
		public Assignment getNameAssignment_2_1_1_2() { return cNameAssignment_2_1_1_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_1_1_2_0() { return cNameSTRINGTerminalRuleCall_2_1_1_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_3() { return cSemicolonKeyword_2_1_1_3; }

		//("name-space" ":" nameSpace=CapabilityInterface ";")?
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//"name-space"
		public Keyword getNameSpaceKeyword_2_1_2_0() { return cNameSpaceKeyword_2_1_2_0; }

		//":"
		public Keyword getColonKeyword_2_1_2_1() { return cColonKeyword_2_1_2_1; }

		//nameSpace=CapabilityInterface
		public Assignment getNameSpaceAssignment_2_1_2_2() { return cNameSpaceAssignment_2_1_2_2; }

		//CapabilityInterface
		public RuleCall getNameSpaceCapabilityInterfaceParserRuleCall_2_1_2_2_0() { return cNameSpaceCapabilityInterfaceParserRuleCall_2_1_2_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_2_3() { return cSemicolonKeyword_2_1_2_3; }

		//(greedy?="greedy" ";")?
		public Group getGroup_2_1_3() { return cGroup_2_1_3; }

		//greedy?="greedy"
		public Assignment getGreedyAssignment_2_1_3_0() { return cGreedyAssignment_2_1_3_0; }

		//"greedy"
		public Keyword getGreedyGreedyKeyword_2_1_3_0_0() { return cGreedyGreedyKeyword_2_1_3_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_3_1() { return cSemicolonKeyword_2_1_3_1; }

		//("requires-min" ":" min=IntValue ";")?
		public Group getGroup_2_1_4() { return cGroup_2_1_4; }

		//"requires-min"
		public Keyword getRequiresMinKeyword_2_1_4_0() { return cRequiresMinKeyword_2_1_4_0; }

		//":"
		public Keyword getColonKeyword_2_1_4_1() { return cColonKeyword_2_1_4_1; }

		//min=IntValue
		public Assignment getMinAssignment_2_1_4_2() { return cMinAssignment_2_1_4_2; }

		//IntValue
		public RuleCall getMinIntValueParserRuleCall_2_1_4_2_0() { return cMinIntValueParserRuleCall_2_1_4_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_4_3() { return cSemicolonKeyword_2_1_4_3; }

		//("requires-max" ":" max=IntValue ";")?
		public Group getGroup_2_1_5() { return cGroup_2_1_5; }

		//"requires-max"
		public Keyword getRequiresMaxKeyword_2_1_5_0() { return cRequiresMaxKeyword_2_1_5_0; }

		//":"
		public Keyword getColonKeyword_2_1_5_1() { return cColonKeyword_2_1_5_1; }

		//max=IntValue
		public Assignment getMaxAssignment_2_1_5_2() { return cMaxAssignment_2_1_5_2; }

		//IntValue
		public RuleCall getMaxIntValueParserRuleCall_2_1_5_2_0() { return cMaxIntValueParserRuleCall_2_1_5_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_5_3() { return cSemicolonKeyword_2_1_5_3; }

		//("version" ":" versionRange=VersionRangeLiteral ";")?
		public Group getGroup_2_1_6() { return cGroup_2_1_6; }

		//"version"
		public Keyword getVersionKeyword_2_1_6_0() { return cVersionKeyword_2_1_6_0; }

		//":"
		public Keyword getColonKeyword_2_1_6_1() { return cColonKeyword_2_1_6_1; }

		//versionRange=VersionRangeLiteral
		public Assignment getVersionRangeAssignment_2_1_6_2() { return cVersionRangeAssignment_2_1_6_2; }

		//VersionRangeLiteral
		public RuleCall getVersionRangeVersionRangeLiteralParserRuleCall_2_1_6_2_0() { return cVersionRangeVersionRangeLiteralParserRuleCall_2_1_6_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_6_3() { return cSemicolonKeyword_2_1_6_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class RequiredCapability_UnfilteredElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequiredCapability_Unfiltered");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRequiredCapabilityAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cUnitKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cCapabilityKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2_1 = (UnorderedGroup)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cUnorderedGroup_2_1.eContents().get(0);
		private final Assignment cGreedyAssignment_2_1_0_0 = (Assignment)cGroup_2_1_0.eContents().get(0);
		private final Keyword cGreedyGreedyKeyword_2_1_0_0_0 = (Keyword)cGreedyAssignment_2_1_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_0_1 = (Keyword)cGroup_2_1_0.eContents().get(1);
		private final Group cGroup_2_1_1 = (Group)cUnorderedGroup_2_1.eContents().get(1);
		private final Keyword cNameKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2_1_1_1 = (Keyword)cGroup_2_1_1.eContents().get(1);
		private final Assignment cNameAssignment_2_1_1_2 = (Assignment)cGroup_2_1_1.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_1_1_2_0 = (RuleCall)cNameAssignment_2_1_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_3 = (Keyword)cGroup_2_1_1.eContents().get(3);
		private final Group cGroup_2_1_2 = (Group)cUnorderedGroup_2_1.eContents().get(2);
		private final Keyword cNameSpaceKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1_2_1 = (Keyword)cGroup_2_1_2.eContents().get(1);
		private final Assignment cNameSpaceAssignment_2_1_2_2 = (Assignment)cGroup_2_1_2.eContents().get(2);
		private final RuleCall cNameSpaceCapabilityInterfaceParserRuleCall_2_1_2_2_0 = (RuleCall)cNameSpaceAssignment_2_1_2_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_2_3 = (Keyword)cGroup_2_1_2.eContents().get(3);
		private final Group cGroup_2_1_3 = (Group)cUnorderedGroup_2_1.eContents().get(3);
		private final Keyword cRequiresMinKeyword_2_1_3_0 = (Keyword)cGroup_2_1_3.eContents().get(0);
		private final Keyword cColonKeyword_2_1_3_1 = (Keyword)cGroup_2_1_3.eContents().get(1);
		private final Assignment cMinAssignment_2_1_3_2 = (Assignment)cGroup_2_1_3.eContents().get(2);
		private final RuleCall cMinIntValueParserRuleCall_2_1_3_2_0 = (RuleCall)cMinAssignment_2_1_3_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_3_3 = (Keyword)cGroup_2_1_3.eContents().get(3);
		private final Group cGroup_2_1_4 = (Group)cUnorderedGroup_2_1.eContents().get(4);
		private final Keyword cRequiresMaxKeyword_2_1_4_0 = (Keyword)cGroup_2_1_4.eContents().get(0);
		private final Keyword cColonKeyword_2_1_4_1 = (Keyword)cGroup_2_1_4.eContents().get(1);
		private final Assignment cMaxAssignment_2_1_4_2 = (Assignment)cGroup_2_1_4.eContents().get(2);
		private final RuleCall cMaxIntValueParserRuleCall_2_1_4_2_0 = (RuleCall)cMaxAssignment_2_1_4_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_4_3 = (Keyword)cGroup_2_1_4.eContents().get(3);
		private final Group cGroup_2_1_5 = (Group)cUnorderedGroup_2_1.eContents().get(5);
		private final Keyword cVersionKeyword_2_1_5_0 = (Keyword)cGroup_2_1_5.eContents().get(0);
		private final Keyword cColonKeyword_2_1_5_1 = (Keyword)cGroup_2_1_5.eContents().get(1);
		private final Assignment cVersionRangeAssignment_2_1_5_2 = (Assignment)cGroup_2_1_5.eContents().get(2);
		private final RuleCall cVersionRangeVersionRangeLiteralParserRuleCall_2_1_5_2_0 = (RuleCall)cVersionRangeAssignment_2_1_5_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_5_3 = (Keyword)cGroup_2_1_5.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//// Capability required by a unit - always refers to capabilities with at least ns/name
		//// (can not refer to "unit")
		//// TODO: Interface should be a proper java interface
		//RequiredCapability_Unfiltered returns build::RequiredCapability:
		//	{build::RequiredCapability} ("unit" | "capability") ("{" ((greedy?="greedy" ";")? & ("name" ":" name=STRING ";")? &
		//	("name-space" ":" nameSpace=CapabilityInterface ";")? & ("requires-min" ":" min=IntValue ";")? & ("requires-max" ":"
		//	max=IntValue ";")? & ("version" ":" versionRange=VersionRangeLiteral ";")?) "}");
		public ParserRule getRule() { return rule; }

		//{build::RequiredCapability} ("unit" | "capability") ("{" ((greedy?="greedy" ";")? & ("name" ":" name=STRING ";")? &
		//("name-space" ":" nameSpace=CapabilityInterface ";")? & ("requires-min" ":" min=IntValue ";")? & ("requires-max" ":"
		//max=IntValue ";")? & ("version" ":" versionRange=VersionRangeLiteral ";")?) "}")
		public Group getGroup() { return cGroup; }

		//{build::RequiredCapability}
		public Action getRequiredCapabilityAction_0() { return cRequiredCapabilityAction_0; }

		//"unit" | "capability"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"unit"
		public Keyword getUnitKeyword_1_0() { return cUnitKeyword_1_0; }

		//"capability"
		public Keyword getCapabilityKeyword_1_1() { return cCapabilityKeyword_1_1; }

		//"{" ((greedy?="greedy" ";")? & ("name" ":" name=STRING ";")? & ("name-space" ":" nameSpace=CapabilityInterface ";")? &
		//("requires-min" ":" min=IntValue ";")? & ("requires-max" ":" max=IntValue ";")? & ("version" ":"
		//versionRange=VersionRangeLiteral ";")?) "}"
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//(greedy?="greedy" ";")? & ("name" ":" name=STRING ";")? & ("name-space" ":" nameSpace=CapabilityInterface ";")? &
		//("requires-min" ":" min=IntValue ";")? & ("requires-max" ":" max=IntValue ";")? & ("version" ":"
		//versionRange=VersionRangeLiteral ";")?
		public UnorderedGroup getUnorderedGroup_2_1() { return cUnorderedGroup_2_1; }

		//(greedy?="greedy" ";")?
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }

		//greedy?="greedy"
		public Assignment getGreedyAssignment_2_1_0_0() { return cGreedyAssignment_2_1_0_0; }

		//"greedy"
		public Keyword getGreedyGreedyKeyword_2_1_0_0_0() { return cGreedyGreedyKeyword_2_1_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_0_1() { return cSemicolonKeyword_2_1_0_1; }

		//("name" ":" name=STRING ";")?
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//"name"
		public Keyword getNameKeyword_2_1_1_0() { return cNameKeyword_2_1_1_0; }

		//":"
		public Keyword getColonKeyword_2_1_1_1() { return cColonKeyword_2_1_1_1; }

		//name=STRING
		public Assignment getNameAssignment_2_1_1_2() { return cNameAssignment_2_1_1_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_1_1_2_0() { return cNameSTRINGTerminalRuleCall_2_1_1_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_3() { return cSemicolonKeyword_2_1_1_3; }

		//("name-space" ":" nameSpace=CapabilityInterface ";")?
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//"name-space"
		public Keyword getNameSpaceKeyword_2_1_2_0() { return cNameSpaceKeyword_2_1_2_0; }

		//":"
		public Keyword getColonKeyword_2_1_2_1() { return cColonKeyword_2_1_2_1; }

		//nameSpace=CapabilityInterface
		public Assignment getNameSpaceAssignment_2_1_2_2() { return cNameSpaceAssignment_2_1_2_2; }

		//CapabilityInterface
		public RuleCall getNameSpaceCapabilityInterfaceParserRuleCall_2_1_2_2_0() { return cNameSpaceCapabilityInterfaceParserRuleCall_2_1_2_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_2_3() { return cSemicolonKeyword_2_1_2_3; }

		//("requires-min" ":" min=IntValue ";")?
		public Group getGroup_2_1_3() { return cGroup_2_1_3; }

		//"requires-min"
		public Keyword getRequiresMinKeyword_2_1_3_0() { return cRequiresMinKeyword_2_1_3_0; }

		//":"
		public Keyword getColonKeyword_2_1_3_1() { return cColonKeyword_2_1_3_1; }

		//min=IntValue
		public Assignment getMinAssignment_2_1_3_2() { return cMinAssignment_2_1_3_2; }

		//IntValue
		public RuleCall getMinIntValueParserRuleCall_2_1_3_2_0() { return cMinIntValueParserRuleCall_2_1_3_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_3_3() { return cSemicolonKeyword_2_1_3_3; }

		//("requires-max" ":" max=IntValue ";")?
		public Group getGroup_2_1_4() { return cGroup_2_1_4; }

		//"requires-max"
		public Keyword getRequiresMaxKeyword_2_1_4_0() { return cRequiresMaxKeyword_2_1_4_0; }

		//":"
		public Keyword getColonKeyword_2_1_4_1() { return cColonKeyword_2_1_4_1; }

		//max=IntValue
		public Assignment getMaxAssignment_2_1_4_2() { return cMaxAssignment_2_1_4_2; }

		//IntValue
		public RuleCall getMaxIntValueParserRuleCall_2_1_4_2_0() { return cMaxIntValueParserRuleCall_2_1_4_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_4_3() { return cSemicolonKeyword_2_1_4_3; }

		//("version" ":" versionRange=VersionRangeLiteral ";")?
		public Group getGroup_2_1_5() { return cGroup_2_1_5; }

		//"version"
		public Keyword getVersionKeyword_2_1_5_0() { return cVersionKeyword_2_1_5_0; }

		//":"
		public Keyword getColonKeyword_2_1_5_1() { return cColonKeyword_2_1_5_1; }

		//versionRange=VersionRangeLiteral
		public Assignment getVersionRangeAssignment_2_1_5_2() { return cVersionRangeAssignment_2_1_5_2; }

		//VersionRangeLiteral
		public RuleCall getVersionRangeVersionRangeLiteralParserRuleCall_2_1_5_2_0() { return cVersionRangeVersionRangeLiteralParserRuleCall_2_1_5_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_5_3() { return cSemicolonKeyword_2_1_5_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class PropertySet_NamedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertySet_Named");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBPropertySetAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDocumentationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDocumentationDOCUMENTATIONParserRuleCall_1_0 = (RuleCall)cDocumentationAssignment_1.eContents().get(0);
		private final Keyword cPropertiesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cExtendsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExtendsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cExtendsBPropertySetCrossReference_4_1_0 = (CrossReference)cExtendsAssignment_4_1.eContents().get(0);
		private final RuleCall cExtendsBPropertySetQIDREFParserRuleCall_4_1_0_1 = (RuleCall)cExtendsBPropertySetCrossReference_4_1_0.eContents().get(1);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cOperationsAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cOperationsPropertyOperationParserRuleCall_5_0_1_0 = (RuleCall)cOperationsAssignment_5_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_0_2 = (Keyword)cGroup_5_0.eContents().get(2);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cColonKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Keyword cLoadFromKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Keyword cColonKeyword_5_1_2 = (Keyword)cGroup_5_1.eContents().get(2);
		private final Assignment cPropertiesFileAssignment_5_1_3 = (Assignment)cGroup_5_1.eContents().get(3);
		private final RuleCall cPropertiesFileURIParserRuleCall_5_1_3_0 = (RuleCall)cPropertiesFileAssignment_5_1_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1_4 = (Keyword)cGroup_5_1.eContents().get(4);
		
		//// A named sequence of property statements
		//PropertySet_Named returns be::BPropertySet:
		//	{be::BPropertySet} documentation=DOCUMENTATION? "properties" name=ID ("extends" extends=[be::BPropertySet|QIDREF])?
		//	("{" operations+=PropertyOperation* "}" | ":" "load-from" ":" propertiesFile=URI ";");
		public ParserRule getRule() { return rule; }

		//{be::BPropertySet} documentation=DOCUMENTATION? "properties" name=ID ("extends" extends=[be::BPropertySet|QIDREF])? ("{"
		//operations+=PropertyOperation* "}" | ":" "load-from" ":" propertiesFile=URI ";")
		public Group getGroup() { return cGroup; }

		//{be::BPropertySet}
		public Action getBPropertySetAction_0() { return cBPropertySetAction_0; }

		//documentation=DOCUMENTATION?
		public Assignment getDocumentationAssignment_1() { return cDocumentationAssignment_1; }

		//DOCUMENTATION
		public RuleCall getDocumentationDOCUMENTATIONParserRuleCall_1_0() { return cDocumentationDOCUMENTATIONParserRuleCall_1_0; }

		//"properties"
		public Keyword getPropertiesKeyword_2() { return cPropertiesKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//("extends" extends=[be::BPropertySet|QIDREF])?
		public Group getGroup_4() { return cGroup_4; }

		//"extends"
		public Keyword getExtendsKeyword_4_0() { return cExtendsKeyword_4_0; }

		//extends=[be::BPropertySet|QIDREF]
		public Assignment getExtendsAssignment_4_1() { return cExtendsAssignment_4_1; }

		//[be::BPropertySet|QIDREF]
		public CrossReference getExtendsBPropertySetCrossReference_4_1_0() { return cExtendsBPropertySetCrossReference_4_1_0; }

		//QIDREF
		public RuleCall getExtendsBPropertySetQIDREFParserRuleCall_4_1_0_1() { return cExtendsBPropertySetQIDREFParserRuleCall_4_1_0_1; }

		//"{" operations+=PropertyOperation* "}" | ":" "load-from" ":" propertiesFile=URI ";"
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"{" operations+=PropertyOperation* "}"
		public Group getGroup_5_0() { return cGroup_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_0_0() { return cLeftCurlyBracketKeyword_5_0_0; }

		//operations+=PropertyOperation*
		public Assignment getOperationsAssignment_5_0_1() { return cOperationsAssignment_5_0_1; }

		//PropertyOperation
		public RuleCall getOperationsPropertyOperationParserRuleCall_5_0_1_0() { return cOperationsPropertyOperationParserRuleCall_5_0_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_0_2() { return cRightCurlyBracketKeyword_5_0_2; }

		//":" "load-from" ":" propertiesFile=URI ";"
		public Group getGroup_5_1() { return cGroup_5_1; }

		//":"
		public Keyword getColonKeyword_5_1_0() { return cColonKeyword_5_1_0; }

		//"load-from"
		public Keyword getLoadFromKeyword_5_1_1() { return cLoadFromKeyword_5_1_1; }

		//":"
		public Keyword getColonKeyword_5_1_2() { return cColonKeyword_5_1_2; }

		//propertiesFile=URI
		public Assignment getPropertiesFileAssignment_5_1_3() { return cPropertiesFileAssignment_5_1_3; }

		//URI
		public RuleCall getPropertiesFileURIParserRuleCall_5_1_3_0() { return cPropertiesFileURIParserRuleCall_5_1_3_0; }

		//";"
		public Keyword getSemicolonKeyword_5_1_4() { return cSemicolonKeyword_5_1_4; }
	}

	public class PropertySetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertySet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBPropertySetAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDocumentationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDocumentationDOCUMENTATIONParserRuleCall_1_0 = (RuleCall)cDocumentationAssignment_1.eContents().get(0);
		private final Keyword cPropertiesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExtendsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cExtendsBPropertySetCrossReference_3_1_0 = (CrossReference)cExtendsAssignment_3_1.eContents().get(0);
		private final RuleCall cExtendsBPropertySetQIDREFParserRuleCall_3_1_0_1 = (RuleCall)cExtendsBPropertySetCrossReference_3_1_0.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cOperationsAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cOperationsPropertyOperationParserRuleCall_4_0_1_0 = (RuleCall)cOperationsAssignment_4_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_0_2 = (Keyword)cGroup_4_0.eContents().get(2);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cColonKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Keyword cLoadFromKeyword_4_1_1 = (Keyword)cGroup_4_1.eContents().get(1);
		private final Keyword cColonKeyword_4_1_2 = (Keyword)cGroup_4_1.eContents().get(2);
		private final Assignment cPropertiesFileAssignment_4_1_3 = (Assignment)cGroup_4_1.eContents().get(3);
		private final RuleCall cPropertiesFileURIParserRuleCall_4_1_3_0 = (RuleCall)cPropertiesFileAssignment_4_1_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1_4 = (Keyword)cGroup_4_1.eContents().get(4);
		
		//// Sequence of possibly filtered property statements
		//PropertySet returns be::BPropertySet:
		//	{be::BPropertySet} documentation=DOCUMENTATION? "properties" ("extends" extends=[be::BPropertySet|QIDREF])? ("{"
		//	operations+=PropertyOperation* "}" | ":" "load-from" ":" propertiesFile=URI ";");
		public ParserRule getRule() { return rule; }

		//{be::BPropertySet} documentation=DOCUMENTATION? "properties" ("extends" extends=[be::BPropertySet|QIDREF])? ("{"
		//operations+=PropertyOperation* "}" | ":" "load-from" ":" propertiesFile=URI ";")
		public Group getGroup() { return cGroup; }

		//{be::BPropertySet}
		public Action getBPropertySetAction_0() { return cBPropertySetAction_0; }

		//documentation=DOCUMENTATION?
		public Assignment getDocumentationAssignment_1() { return cDocumentationAssignment_1; }

		//DOCUMENTATION
		public RuleCall getDocumentationDOCUMENTATIONParserRuleCall_1_0() { return cDocumentationDOCUMENTATIONParserRuleCall_1_0; }

		//"properties"
		public Keyword getPropertiesKeyword_2() { return cPropertiesKeyword_2; }

		//("extends" extends=[be::BPropertySet|QIDREF])?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//extends=[be::BPropertySet|QIDREF]
		public Assignment getExtendsAssignment_3_1() { return cExtendsAssignment_3_1; }

		//[be::BPropertySet|QIDREF]
		public CrossReference getExtendsBPropertySetCrossReference_3_1_0() { return cExtendsBPropertySetCrossReference_3_1_0; }

		//QIDREF
		public RuleCall getExtendsBPropertySetQIDREFParserRuleCall_3_1_0_1() { return cExtendsBPropertySetQIDREFParserRuleCall_3_1_0_1; }

		//"{" operations+=PropertyOperation* "}" | ":" "load-from" ":" propertiesFile=URI ";"
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"{" operations+=PropertyOperation* "}"
		public Group getGroup_4_0() { return cGroup_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_0_0() { return cLeftCurlyBracketKeyword_4_0_0; }

		//operations+=PropertyOperation*
		public Assignment getOperationsAssignment_4_0_1() { return cOperationsAssignment_4_0_1; }

		//PropertyOperation
		public RuleCall getOperationsPropertyOperationParserRuleCall_4_0_1_0() { return cOperationsPropertyOperationParserRuleCall_4_0_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_0_2() { return cRightCurlyBracketKeyword_4_0_2; }

		//":" "load-from" ":" propertiesFile=URI ";"
		public Group getGroup_4_1() { return cGroup_4_1; }

		//":"
		public Keyword getColonKeyword_4_1_0() { return cColonKeyword_4_1_0; }

		//"load-from"
		public Keyword getLoadFromKeyword_4_1_1() { return cLoadFromKeyword_4_1_1; }

		//":"
		public Keyword getColonKeyword_4_1_2() { return cColonKeyword_4_1_2; }

		//propertiesFile=URI
		public Assignment getPropertiesFileAssignment_4_1_3() { return cPropertiesFileAssignment_4_1_3; }

		//URI
		public RuleCall getPropertiesFileURIParserRuleCall_4_1_3_0() { return cPropertiesFileURIParserRuleCall_4_1_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4_1_4() { return cSemicolonKeyword_4_1_4; }
	}

	public class AnnotationSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationSet");
		private final RuleCall cPropertySet_noKwParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AnnotationSet returns be::BPropertySet:
		//	PropertySet_noKw;
		public ParserRule getRule() { return rule; }

		//PropertySet_noKw
		public RuleCall getPropertySet_noKwParserRuleCall() { return cPropertySet_noKwParserRuleCall; }
	}

	public class PropertySet_noKwElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertySet_noKw");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBPropertySetAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cExtendsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExtendsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cExtendsBPropertySetCrossReference_1_1_0 = (CrossReference)cExtendsAssignment_1_1.eContents().get(0);
		private final RuleCall cExtendsBPropertySetQIDREFParserRuleCall_1_1_0_1 = (RuleCall)cExtendsBPropertySetCrossReference_1_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cOperationsAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cOperationsPropertyOperationParserRuleCall_2_0_1_0 = (RuleCall)cOperationsAssignment_2_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cColonKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Keyword cLoadFromKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Keyword cColonKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Assignment cPropertiesFileAssignment_2_1_3 = (Assignment)cGroup_2_1.eContents().get(3);
		private final RuleCall cPropertiesFileURIParserRuleCall_2_1_3_0 = (RuleCall)cPropertiesFileAssignment_2_1_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_4 = (Keyword)cGroup_2_1.eContents().get(4);
		
		//// Sequence of possibly filtered property statements (same as property set but withput kw)
		//PropertySet_noKw returns be::BPropertySet:
		//	{be::BPropertySet} ("extends" extends=[be::BPropertySet|QIDREF])? ("{" operations+=PropertyOperation* "}" | ":"
		//	"load-from" ":" propertiesFile=URI ";");
		public ParserRule getRule() { return rule; }

		//{be::BPropertySet} ("extends" extends=[be::BPropertySet|QIDREF])? ("{" operations+=PropertyOperation* "}" | ":"
		//"load-from" ":" propertiesFile=URI ";")
		public Group getGroup() { return cGroup; }

		//{be::BPropertySet}
		public Action getBPropertySetAction_0() { return cBPropertySetAction_0; }

		//("extends" extends=[be::BPropertySet|QIDREF])?
		public Group getGroup_1() { return cGroup_1; }

		//"extends"
		public Keyword getExtendsKeyword_1_0() { return cExtendsKeyword_1_0; }

		//extends=[be::BPropertySet|QIDREF]
		public Assignment getExtendsAssignment_1_1() { return cExtendsAssignment_1_1; }

		//[be::BPropertySet|QIDREF]
		public CrossReference getExtendsBPropertySetCrossReference_1_1_0() { return cExtendsBPropertySetCrossReference_1_1_0; }

		//QIDREF
		public RuleCall getExtendsBPropertySetQIDREFParserRuleCall_1_1_0_1() { return cExtendsBPropertySetQIDREFParserRuleCall_1_1_0_1; }

		//"{" operations+=PropertyOperation* "}" | ":" "load-from" ":" propertiesFile=URI ";"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"{" operations+=PropertyOperation* "}"
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0_0() { return cLeftCurlyBracketKeyword_2_0_0; }

		//operations+=PropertyOperation*
		public Assignment getOperationsAssignment_2_0_1() { return cOperationsAssignment_2_0_1; }

		//PropertyOperation
		public RuleCall getOperationsPropertyOperationParserRuleCall_2_0_1_0() { return cOperationsPropertyOperationParserRuleCall_2_0_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_0_2() { return cRightCurlyBracketKeyword_2_0_2; }

		//":" "load-from" ":" propertiesFile=URI ";"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//":"
		public Keyword getColonKeyword_2_1_0() { return cColonKeyword_2_1_0; }

		//"load-from"
		public Keyword getLoadFromKeyword_2_1_1() { return cLoadFromKeyword_2_1_1; }

		//":"
		public Keyword getColonKeyword_2_1_2() { return cColonKeyword_2_1_2; }

		//propertiesFile=URI
		public Assignment getPropertiesFileAssignment_2_1_3() { return cPropertiesFileAssignment_2_1_3; }

		//URI
		public RuleCall getPropertiesFileURIParserRuleCall_2_1_3_0() { return cPropertiesFileURIParserRuleCall_2_1_3_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_4() { return cSemicolonKeyword_2_1_4; }
	}

	public class PropertySetDefaultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertySetDefault");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBDefaultPropertySetAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDocumentationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDocumentationDOCUMENTATIONParserRuleCall_1_0 = (RuleCall)cDocumentationAssignment_1.eContents().get(0);
		private final Keyword cDefaultPropertiesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExtendsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cExtendsBPropertySetCrossReference_3_1_0 = (CrossReference)cExtendsAssignment_3_1.eContents().get(0);
		private final RuleCall cExtendsBPropertySetQIDREFParserRuleCall_3_1_0_1 = (RuleCall)cExtendsBPropertySetCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOperationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOperationsPropertyOperationDefaultParserRuleCall_5_0 = (RuleCall)cOperationsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// Sequence of possibly filtered property statements (with default semantics)	
		//// - no loading from file = meaningsless as only declared properties can be references,
		//// they would need  to be in a different default set, or declared (in which case defaults are not
		//// really needed
		//// - only extension of other default sets
		//// - default sets can not have conditional declaration of properties
		//// TODO: only allowed to extend another default property set
		//PropertySetDefault returns be::BPropertySet:
		//	{be::BDefaultPropertySet} documentation=DOCUMENTATION? "default-properties" ("extends"
		//	extends=[be::BPropertySet|QIDREF])? "{" operations+=PropertyOperationDefault* "}";
		public ParserRule getRule() { return rule; }

		//{be::BDefaultPropertySet} documentation=DOCUMENTATION? "default-properties" ("extends"
		//extends=[be::BPropertySet|QIDREF])? "{" operations+=PropertyOperationDefault* "}"
		public Group getGroup() { return cGroup; }

		//{be::BDefaultPropertySet}
		public Action getBDefaultPropertySetAction_0() { return cBDefaultPropertySetAction_0; }

		//documentation=DOCUMENTATION?
		public Assignment getDocumentationAssignment_1() { return cDocumentationAssignment_1; }

		//DOCUMENTATION
		public RuleCall getDocumentationDOCUMENTATIONParserRuleCall_1_0() { return cDocumentationDOCUMENTATIONParserRuleCall_1_0; }

		//"default-properties"
		public Keyword getDefaultPropertiesKeyword_2() { return cDefaultPropertiesKeyword_2; }

		//("extends" extends=[be::BPropertySet|QIDREF])?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//extends=[be::BPropertySet|QIDREF]
		public Assignment getExtendsAssignment_3_1() { return cExtendsAssignment_3_1; }

		//[be::BPropertySet|QIDREF]
		public CrossReference getExtendsBPropertySetCrossReference_3_1_0() { return cExtendsBPropertySetCrossReference_3_1_0; }

		//QIDREF
		public RuleCall getExtendsBPropertySetQIDREFParserRuleCall_3_1_0_1() { return cExtendsBPropertySetQIDREFParserRuleCall_3_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//operations+=PropertyOperationDefault*
		public Assignment getOperationsAssignment_5() { return cOperationsAssignment_5; }

		//PropertyOperationDefault
		public RuleCall getOperationsPropertyOperationDefaultParserRuleCall_5_0() { return cOperationsPropertyOperationDefaultParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class PropertySetDefault_noKwElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertySetDefault_noKw");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBPropertySetAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cExtendsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExtendsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cExtendsBPropertySetCrossReference_1_1_0 = (CrossReference)cExtendsAssignment_1_1.eContents().get(0);
		private final RuleCall cExtendsBPropertySetQIDREFParserRuleCall_1_1_0_1 = (RuleCall)cExtendsBPropertySetCrossReference_1_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperationsPropertyOperationParserRuleCall_3_0 = (RuleCall)cOperationsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// TODO: only allowed to extend another default property set
		//PropertySetDefault_noKw returns be::BPropertySet:
		//	{be::BPropertySet} ("extends" extends=[be::BPropertySet|QIDREF])? "{" operations+=PropertyOperation* "}";
		public ParserRule getRule() { return rule; }

		//{be::BPropertySet} ("extends" extends=[be::BPropertySet|QIDREF])? "{" operations+=PropertyOperation* "}"
		public Group getGroup() { return cGroup; }

		//{be::BPropertySet}
		public Action getBPropertySetAction_0() { return cBPropertySetAction_0; }

		//("extends" extends=[be::BPropertySet|QIDREF])?
		public Group getGroup_1() { return cGroup_1; }

		//"extends"
		public Keyword getExtendsKeyword_1_0() { return cExtendsKeyword_1_0; }

		//extends=[be::BPropertySet|QIDREF]
		public Assignment getExtendsAssignment_1_1() { return cExtendsAssignment_1_1; }

		//[be::BPropertySet|QIDREF]
		public CrossReference getExtendsBPropertySetCrossReference_1_1_0() { return cExtendsBPropertySetCrossReference_1_1_0; }

		//QIDREF
		public RuleCall getExtendsBPropertySetQIDREFParserRuleCall_1_1_0_1() { return cExtendsBPropertySetQIDREFParserRuleCall_1_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//operations+=PropertyOperation*
		public Assignment getOperationsAssignment_3() { return cOperationsAssignment_3; }

		//PropertyOperation
		public RuleCall getOperationsPropertyOperationParserRuleCall_3_0() { return cOperationsPropertyOperationParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class PropertyOperationDefaultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyOperationDefault");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPropertyDefinitionOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPropertySetOperationDefaultParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PropertyOperationDefault returns be::BPropertyOperation:
		//	PropertyDefinitionOperation | PropertySetOperationDefault;
		public ParserRule getRule() { return rule; }

		//PropertyDefinitionOperation | PropertySetOperationDefault
		public Alternatives getAlternatives() { return cAlternatives; }

		//PropertyDefinitionOperation
		public RuleCall getPropertyDefinitionOperationParserRuleCall_0() { return cPropertyDefinitionOperationParserRuleCall_0; }

		//PropertySetOperationDefault
		public RuleCall getPropertySetOperationDefaultParserRuleCall_1() { return cPropertySetOperationDefaultParserRuleCall_1; }
	}

	public class PropertyOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConditionalPropertyOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPropertyDefinitionOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPropertySetOperationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//PropertyOperation returns be::BPropertyOperation:
		//	ConditionalPropertyOperation | PropertyDefinitionOperation | PropertySetOperation;
		public ParserRule getRule() { return rule; }

		//ConditionalPropertyOperation | PropertyDefinitionOperation | PropertySetOperation
		public Alternatives getAlternatives() { return cAlternatives; }

		//ConditionalPropertyOperation
		public RuleCall getConditionalPropertyOperationParserRuleCall_0() { return cConditionalPropertyOperationParserRuleCall_0; }

		//PropertyDefinitionOperation
		public RuleCall getPropertyDefinitionOperationParserRuleCall_1() { return cPropertyDefinitionOperationParserRuleCall_1; }

		//PropertySetOperation
		public RuleCall getPropertySetOperationParserRuleCall_2() { return cPropertySetOperationParserRuleCall_2; }
	}

	public class ConditionalPropertyOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalPropertyOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBConditionalPropertyOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCondExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCondExprExpressionParserRuleCall_3_0 = (RuleCall)cCondExprAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cBodyPropertyDefinitionOperationParserRuleCall_5_0_0 = (RuleCall)cBodyAssignment_5_0.eContents().get(0);
		private final Assignment cBodyAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cBodyPropertySetOperationParserRuleCall_5_1_0 = (RuleCall)cBodyAssignment_5_1.eContents().get(0);
		
		//ConditionalPropertyOperation returns be::BPropertyOperation:
		//	{be::BConditionalPropertyOperation} "when" "(" condExpr=Expression ")" (body=PropertyDefinitionOperation |
		//	body=PropertySetOperation);
		public ParserRule getRule() { return rule; }

		//{be::BConditionalPropertyOperation} "when" "(" condExpr=Expression ")" (body=PropertyDefinitionOperation |
		//body=PropertySetOperation)
		public Group getGroup() { return cGroup; }

		//{be::BConditionalPropertyOperation}
		public Action getBConditionalPropertyOperationAction_0() { return cBConditionalPropertyOperationAction_0; }

		//"when"
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//condExpr=Expression
		public Assignment getCondExprAssignment_3() { return cCondExprAssignment_3; }

		//Expression
		public RuleCall getCondExprExpressionParserRuleCall_3_0() { return cCondExprExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//body=PropertyDefinitionOperation | body=PropertySetOperation
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//body=PropertyDefinitionOperation
		public Assignment getBodyAssignment_5_0() { return cBodyAssignment_5_0; }

		//PropertyDefinitionOperation
		public RuleCall getBodyPropertyDefinitionOperationParserRuleCall_5_0_0() { return cBodyPropertyDefinitionOperationParserRuleCall_5_0_0; }

		//body=PropertySetOperation
		public Assignment getBodyAssignment_5_1() { return cBodyAssignment_5_1; }

		//PropertySetOperation
		public RuleCall getBodyPropertySetOperationParserRuleCall_5_1_0() { return cBodyPropertySetOperationParserRuleCall_5_1_0; }
	}

	public class PropertyDefinitionOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyDefinitionOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBPropertyDefinitionOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cDefinitionAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cDefinitionPropertyValDeclarationParserRuleCall_1_0_0 = (RuleCall)cDefinitionAssignment_1_0.eContents().get(0);
		private final Assignment cDefinitionAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cDefinitionPropertyVarDeclarationParserRuleCall_1_1_0 = (RuleCall)cDefinitionAssignment_1_1.eContents().get(0);
		
		//PropertyDefinitionOperation returns be::BPropertyOperation:
		//	{be::BPropertyDefinitionOperation} (definition=PropertyValDeclaration | definition=PropertyVarDeclaration);
		public ParserRule getRule() { return rule; }

		//{be::BPropertyDefinitionOperation} (definition=PropertyValDeclaration | definition=PropertyVarDeclaration)
		public Group getGroup() { return cGroup; }

		//{be::BPropertyDefinitionOperation}
		public Action getBPropertyDefinitionOperationAction_0() { return cBPropertyDefinitionOperationAction_0; }

		//definition=PropertyValDeclaration | definition=PropertyVarDeclaration
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//definition=PropertyValDeclaration
		public Assignment getDefinitionAssignment_1_0() { return cDefinitionAssignment_1_0; }

		//PropertyValDeclaration
		public RuleCall getDefinitionPropertyValDeclarationParserRuleCall_1_0_0() { return cDefinitionPropertyValDeclarationParserRuleCall_1_0_0; }

		//definition=PropertyVarDeclaration
		public Assignment getDefinitionAssignment_1_1() { return cDefinitionAssignment_1_1; }

		//PropertyVarDeclaration
		public RuleCall getDefinitionPropertyVarDeclarationParserRuleCall_1_1_0() { return cDefinitionPropertyVarDeclarationParserRuleCall_1_1_0; }
	}

	public class PropertyValDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyValDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBDefPropertyAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFinalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cFinalFinalKeyword_1_0 = (Keyword)cFinalAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeRefParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNamePIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueExprAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueExprExpressionParserRuleCall_5_0 = (RuleCall)cValueExprAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// property values, must be assigned (but can be assigned null).
		//PropertyValDeclaration returns be::BDefProperty:
		//	{be::BDefProperty} final?="final"? type=TypeRef? name=PID "=" valueExpr=Expression ";";
		public ParserRule getRule() { return rule; }

		//{be::BDefProperty} final?="final"? type=TypeRef? name=PID "=" valueExpr=Expression ";"
		public Group getGroup() { return cGroup; }

		//{be::BDefProperty}
		public Action getBDefPropertyAction_0() { return cBDefPropertyAction_0; }

		//final?="final"?
		public Assignment getFinalAssignment_1() { return cFinalAssignment_1; }

		//"final"
		public Keyword getFinalFinalKeyword_1_0() { return cFinalFinalKeyword_1_0; }

		//type=TypeRef?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_2_0() { return cTypeTypeRefParserRuleCall_2_0; }

		//name=PID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//PID
		public RuleCall getNamePIDTerminalRuleCall_3_0() { return cNamePIDTerminalRuleCall_3_0; }

		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//valueExpr=Expression
		public Assignment getValueExprAssignment_5() { return cValueExprAssignment_5; }

		//Expression
		public RuleCall getValueExprExpressionParserRuleCall_5_0() { return cValueExprExpressionParserRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class PropertyVarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyVarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBDefPropertyAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFinalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cFinalFinalKeyword_1_0 = (Keyword)cFinalAssignment_1.eContents().get(0);
		private final Assignment cMutableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cMutableMutableKeyword_2_0 = (Keyword)cMutableAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeRefParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNamePIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cValueExprAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValueExprExpressionParserRuleCall_5_1_0 = (RuleCall)cValueExprAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// property variables, value optionally assigned
		//PropertyVarDeclaration returns be::BDefProperty:
		//	{be::BDefProperty} final?="final"? mutable?="mutable" type=TypeRef? name=PID ("=" valueExpr=Expression)? ";";
		public ParserRule getRule() { return rule; }

		//{be::BDefProperty} final?="final"? mutable?="mutable" type=TypeRef? name=PID ("=" valueExpr=Expression)? ";"
		public Group getGroup() { return cGroup; }

		//{be::BDefProperty}
		public Action getBDefPropertyAction_0() { return cBDefPropertyAction_0; }

		//final?="final"?
		public Assignment getFinalAssignment_1() { return cFinalAssignment_1; }

		//"final"
		public Keyword getFinalFinalKeyword_1_0() { return cFinalFinalKeyword_1_0; }

		//mutable?="mutable"
		public Assignment getMutableAssignment_2() { return cMutableAssignment_2; }

		//"mutable"
		public Keyword getMutableMutableKeyword_2_0() { return cMutableMutableKeyword_2_0; }

		//type=TypeRef?
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_3_0() { return cTypeTypeRefParserRuleCall_3_0; }

		//name=PID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//PID
		public RuleCall getNamePIDTerminalRuleCall_4_0() { return cNamePIDTerminalRuleCall_4_0; }

		//("=" valueExpr=Expression)?
		public Group getGroup_5() { return cGroup_5; }

		//"="
		public Keyword getEqualsSignKeyword_5_0() { return cEqualsSignKeyword_5_0; }

		//valueExpr=Expression
		public Assignment getValueExprAssignment_5_1() { return cValueExprAssignment_5_1; }

		//Expression
		public RuleCall getValueExprExpressionParserRuleCall_5_1_0() { return cValueExprExpressionParserRuleCall_5_1_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class PropertySetOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertySetOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBPropertySetOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPropertySetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertySetPropertySet_noKwParserRuleCall_1_0 = (RuleCall)cPropertySetAssignment_1.eContents().get(0);
		
		//PropertySetOperation returns be::BPropertyOperation:
		//	{be::BPropertySetOperation} propertySet=PropertySet_noKw;
		public ParserRule getRule() { return rule; }

		//{be::BPropertySetOperation} propertySet=PropertySet_noKw
		public Group getGroup() { return cGroup; }

		//{be::BPropertySetOperation}
		public Action getBPropertySetOperationAction_0() { return cBPropertySetOperationAction_0; }

		//propertySet=PropertySet_noKw
		public Assignment getPropertySetAssignment_1() { return cPropertySetAssignment_1; }

		//PropertySet_noKw
		public RuleCall getPropertySetPropertySet_noKwParserRuleCall_1_0() { return cPropertySetPropertySet_noKwParserRuleCall_1_0; }
	}

	public class PropertySetOperationDefaultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertySetOperationDefault");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBPropertySetOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPropertySetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertySetPropertySetDefault_noKwParserRuleCall_1_0 = (RuleCall)cPropertySetAssignment_1.eContents().get(0);
		
		//PropertySetOperationDefault returns be::BPropertyOperation:
		//	{be::BPropertySetOperation} propertySet=PropertySetDefault_noKw;
		public ParserRule getRule() { return rule; }

		//{be::BPropertySetOperation} propertySet=PropertySetDefault_noKw
		public Group getGroup() { return cGroup; }

		//{be::BPropertySetOperation}
		public Action getBPropertySetOperationAction_0() { return cBPropertySetOperationAction_0; }

		//propertySet=PropertySetDefault_noKw
		public Assignment getPropertySetAssignment_1() { return cPropertySetAssignment_1; }

		//PropertySetDefault_noKw
		public RuleCall getPropertySetPropertySetDefault_noKwParserRuleCall_1_0() { return cPropertySetPropertySetDefault_noKwParserRuleCall_1_0; }
	}

	public class SynchronizationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Synchronization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSynchronizationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSequentialKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBuilderQueriesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBuilderQueriesBuilderQueryParserRuleCall_4_0 = (RuleCall)cBuilderQueriesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cBuilderQueriesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cBuilderQueriesBuilderQueryParserRuleCall_5_1_0 = (RuleCall)cBuilderQueriesAssignment_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Synchronization returns build::Synchronization:
		//	{build::Synchronization} "sequential" ":" "[" builderQueries+=BuilderQuery ("," builderQueries+=BuilderQuery)* "]"
		//	";";
		public ParserRule getRule() { return rule; }

		//{build::Synchronization} "sequential" ":" "[" builderQueries+=BuilderQuery ("," builderQueries+=BuilderQuery)* "]" ";"
		public Group getGroup() { return cGroup; }

		//{build::Synchronization}
		public Action getSynchronizationAction_0() { return cSynchronizationAction_0; }

		//"sequential"
		public Keyword getSequentialKeyword_1() { return cSequentialKeyword_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }

		//builderQueries+=BuilderQuery
		public Assignment getBuilderQueriesAssignment_4() { return cBuilderQueriesAssignment_4; }

		//BuilderQuery
		public RuleCall getBuilderQueriesBuilderQueryParserRuleCall_4_0() { return cBuilderQueriesBuilderQueryParserRuleCall_4_0; }

		//("," builderQueries+=BuilderQuery)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//builderQueries+=BuilderQuery
		public Assignment getBuilderQueriesAssignment_5_1() { return cBuilderQueriesAssignment_5_1; }

		//BuilderQuery
		public RuleCall getBuilderQueriesBuilderQueryParserRuleCall_5_1_0() { return cBuilderQueriesBuilderQueryParserRuleCall_5_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class BuilderQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuilderQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBuilderQueryAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cUnitKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cUnitQueryAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUnitQueryUnitOrExpressionParserRuleCall_1_1_0 = (RuleCall)cUnitQueryAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cBuilderKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cBuilderQueriesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cBuilderQueriesBuilderOrExpressionParserRuleCall_2_1_0 = (RuleCall)cBuilderQueriesAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cBuilderQueriesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cBuilderQueriesBuilderOrExpressionParserRuleCall_3_1_0 = (RuleCall)cBuilderQueriesAssignment_3_1.eContents().get(0);
		
		//BuilderQuery returns build::BuilderQuery:
		//	{build::BuilderQuery} ("unit" unitQuery=UnitOrExpression)? ("builder" builderQueries+=BuilderOrExpression) (","
		//	builderQueries+=BuilderOrExpression)*;
		public ParserRule getRule() { return rule; }

		//{build::BuilderQuery} ("unit" unitQuery=UnitOrExpression)? ("builder" builderQueries+=BuilderOrExpression) (","
		//builderQueries+=BuilderOrExpression)*
		public Group getGroup() { return cGroup; }

		//{build::BuilderQuery}
		public Action getBuilderQueryAction_0() { return cBuilderQueryAction_0; }

		//("unit" unitQuery=UnitOrExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//"unit"
		public Keyword getUnitKeyword_1_0() { return cUnitKeyword_1_0; }

		//unitQuery=UnitOrExpression
		public Assignment getUnitQueryAssignment_1_1() { return cUnitQueryAssignment_1_1; }

		//UnitOrExpression
		public RuleCall getUnitQueryUnitOrExpressionParserRuleCall_1_1_0() { return cUnitQueryUnitOrExpressionParserRuleCall_1_1_0; }

		//"builder" builderQueries+=BuilderOrExpression
		public Group getGroup_2() { return cGroup_2; }

		//"builder"
		public Keyword getBuilderKeyword_2_0() { return cBuilderKeyword_2_0; }

		//builderQueries+=BuilderOrExpression
		public Assignment getBuilderQueriesAssignment_2_1() { return cBuilderQueriesAssignment_2_1; }

		//BuilderOrExpression
		public RuleCall getBuilderQueriesBuilderOrExpressionParserRuleCall_2_1_0() { return cBuilderQueriesBuilderOrExpressionParserRuleCall_2_1_0; }

		//("," builderQueries+=BuilderOrExpression)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//builderQueries+=BuilderOrExpression
		public Assignment getBuilderQueriesAssignment_3_1() { return cBuilderQueriesAssignment_3_1; }

		//BuilderOrExpression
		public RuleCall getBuilderQueriesBuilderOrExpressionParserRuleCall_3_1_0() { return cBuilderQueriesBuilderOrExpressionParserRuleCall_3_1_0; }
	}

	public class PathGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PathGroup");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPathGroupAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cGroup_0_1.eContents().get(1);
		private final Assignment cPathVectorsAssignment_0_1_1_0 = (Assignment)cGroup_0_1_1.eContents().get(0);
		private final RuleCall cPathVectorsConditionalPathVectorParserRuleCall_0_1_1_0_0 = (RuleCall)cPathVectorsAssignment_0_1_1_0.eContents().get(0);
		private final Group cGroup_0_1_1_1 = (Group)cGroup_0_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_1_1_0 = (Keyword)cGroup_0_1_1_1.eContents().get(0);
		private final Assignment cPathVectorsAssignment_0_1_1_1_1 = (Assignment)cGroup_0_1_1_1.eContents().get(1);
		private final RuleCall cPathVectorsConditionalPathVectorParserRuleCall_0_1_1_1_1_0 = (RuleCall)cPathVectorsAssignment_0_1_1_1_1.eContents().get(0);
		private final Group cGroup_0_1_2 = (Group)cGroup_0_1.eContents().get(2);
		private final Keyword cAnnotationsKeyword_0_1_2_0 = (Keyword)cGroup_0_1_2.eContents().get(0);
		private final Assignment cAnnotationsAssignment_0_1_2_1 = (Assignment)cGroup_0_1_2.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationSetParserRuleCall_0_1_2_1_0 = (RuleCall)cAnnotationsAssignment_0_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1_3 = (Keyword)cGroup_0_1.eContents().get(3);
		private final Assignment cPathVectorsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPathVectorsConditionalPathVectorParserRuleCall_1_0 = (RuleCall)cPathVectorsAssignment_1.eContents().get(0);
		
		//// one path vector, or [ , separated list of path vectors + annotation ]	
		//PathGroup returns build::PathGroup:
		//	{build::PathGroup} ("[" (pathVectors+=ConditionalPathVector ("," pathVectors+=ConditionalPathVector)*)? ("annotations"
		//	annotations=AnnotationSet)? "]") | pathVectors+=ConditionalPathVector;
		public ParserRule getRule() { return rule; }

		//{build::PathGroup} ("[" (pathVectors+=ConditionalPathVector ("," pathVectors+=ConditionalPathVector)*)? ("annotations"
		//annotations=AnnotationSet)? "]") | pathVectors+=ConditionalPathVector
		public Alternatives getAlternatives() { return cAlternatives; }

		//{build::PathGroup} ("[" (pathVectors+=ConditionalPathVector ("," pathVectors+=ConditionalPathVector)*)? ("annotations"
		//annotations=AnnotationSet)? "]")
		public Group getGroup_0() { return cGroup_0; }

		//{build::PathGroup}
		public Action getPathGroupAction_0_0() { return cPathGroupAction_0_0; }

		//"[" (pathVectors+=ConditionalPathVector ("," pathVectors+=ConditionalPathVector)*)? ("annotations"
		//annotations=AnnotationSet)? "]"
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_1_0() { return cLeftSquareBracketKeyword_0_1_0; }

		//(pathVectors+=ConditionalPathVector ("," pathVectors+=ConditionalPathVector)*)?
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }

		//pathVectors+=ConditionalPathVector
		public Assignment getPathVectorsAssignment_0_1_1_0() { return cPathVectorsAssignment_0_1_1_0; }

		//ConditionalPathVector
		public RuleCall getPathVectorsConditionalPathVectorParserRuleCall_0_1_1_0_0() { return cPathVectorsConditionalPathVectorParserRuleCall_0_1_1_0_0; }

		//("," pathVectors+=ConditionalPathVector)*
		public Group getGroup_0_1_1_1() { return cGroup_0_1_1_1; }

		//","
		public Keyword getCommaKeyword_0_1_1_1_0() { return cCommaKeyword_0_1_1_1_0; }

		//pathVectors+=ConditionalPathVector
		public Assignment getPathVectorsAssignment_0_1_1_1_1() { return cPathVectorsAssignment_0_1_1_1_1; }

		//ConditionalPathVector
		public RuleCall getPathVectorsConditionalPathVectorParserRuleCall_0_1_1_1_1_0() { return cPathVectorsConditionalPathVectorParserRuleCall_0_1_1_1_1_0; }

		//("annotations" annotations=AnnotationSet)?
		public Group getGroup_0_1_2() { return cGroup_0_1_2; }

		//"annotations"
		public Keyword getAnnotationsKeyword_0_1_2_0() { return cAnnotationsKeyword_0_1_2_0; }

		//annotations=AnnotationSet
		public Assignment getAnnotationsAssignment_0_1_2_1() { return cAnnotationsAssignment_0_1_2_1; }

		//AnnotationSet
		public RuleCall getAnnotationsAnnotationSetParserRuleCall_0_1_2_1_0() { return cAnnotationsAnnotationSetParserRuleCall_0_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_1_3() { return cRightSquareBracketKeyword_0_1_3; }

		//pathVectors+=ConditionalPathVector
		public Assignment getPathVectorsAssignment_1() { return cPathVectorsAssignment_1; }

		//ConditionalPathVector
		public RuleCall getPathVectorsConditionalPathVectorParserRuleCall_1_0() { return cPathVectorsConditionalPathVectorParserRuleCall_1_0; }
	}

	public class PathVectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PathVector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasePathVectorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnbasedPathVectorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PathVector returns build::PathVector:
		//	BasePathVector | UnbasedPathVector;
		public ParserRule getRule() { return rule; }

		//BasePathVector | UnbasedPathVector
		public Alternatives getAlternatives() { return cAlternatives; }

		//BasePathVector
		public RuleCall getBasePathVectorParserRuleCall_0() { return cBasePathVectorParserRuleCall_0; }

		//UnbasedPathVector
		public RuleCall getUnbasedPathVectorParserRuleCall_1() { return cUnbasedPathVectorParserRuleCall_1; }
	}

	public class BasePathVectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasePathVector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPathVectorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cBasePathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBasePathPathParserRuleCall_1_0 = (RuleCall)cBasePathAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cPathsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cPathsPathParserRuleCall_3_0_0 = (RuleCall)cPathsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cPathsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cPathsPathParserRuleCall_3_1_1_0 = (RuleCall)cPathsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BasePathVector returns build::PathVector:
		//	{build::PathVector} basePath=Path "[" (paths+=Path ("," paths+=Path)*)? //';'
		//	"]";
		public ParserRule getRule() { return rule; }

		//{build::PathVector} basePath=Path "[" (paths+=Path ("," paths+=Path)*)? //';'
		//"]"
		public Group getGroup() { return cGroup; }

		//{build::PathVector}
		public Action getPathVectorAction_0() { return cPathVectorAction_0; }

		//basePath=Path
		public Assignment getBasePathAssignment_1() { return cBasePathAssignment_1; }

		//Path
		public RuleCall getBasePathPathParserRuleCall_1_0() { return cBasePathPathParserRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//(paths+=Path ("," paths+=Path)*)?
		public Group getGroup_3() { return cGroup_3; }

		//paths+=Path
		public Assignment getPathsAssignment_3_0() { return cPathsAssignment_3_0; }

		//Path
		public RuleCall getPathsPathParserRuleCall_3_0_0() { return cPathsPathParserRuleCall_3_0_0; }

		//("," paths+=Path)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//paths+=Path
		public Assignment getPathsAssignment_3_1_1() { return cPathsAssignment_3_1_1; }

		//Path
		public RuleCall getPathsPathParserRuleCall_3_1_1_0() { return cPathsPathParserRuleCall_3_1_1_0; }

		////';'
		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class UnbasedPathVectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnbasedPathVector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPathVectorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPathsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathsPathParserRuleCall_1_0 = (RuleCall)cPathsAssignment_1.eContents().get(0);
		
		//UnbasedPathVector returns build::PathVector:
		//	{build::PathVector} paths+= // (',' paths+=Path)* ';'
		//	Path;
		public ParserRule getRule() { return rule; }

		//{build::PathVector} paths+= // (',' paths+=Path)* ';'
		//Path
		public Group getGroup() { return cGroup; }

		//{build::PathVector}
		public Action getPathVectorAction_0() { return cPathVectorAction_0; }

		//paths+= // (',' paths+=Path)* ';'
		//Path
		public Assignment getPathsAssignment_1() { return cPathsAssignment_1; }

		//// (',' paths+=Path)* ';'
		//Path
		public RuleCall getPathsPathParserRuleCall_1_0() { return cPathsPathParserRuleCall_1_0; }
	}

	public class ConditionalPathVectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalPathVector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cConditionalPathVectorAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cWhenKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cCondExprAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cCondExprExpressionParserRuleCall_0_1_2_0 = (RuleCall)cCondExprAssignment_0_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_3 = (Keyword)cGroup_0_1.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_0_1_4 = (Keyword)cGroup_0_1.eContents().get(4);
		private final Assignment cPathVectorsAssignment_0_1_5 = (Assignment)cGroup_0_1.eContents().get(5);
		private final RuleCall cPathVectorsPathVectorParserRuleCall_0_1_5_0 = (RuleCall)cPathVectorsAssignment_0_1_5.eContents().get(0);
		private final Group cGroup_0_1_6 = (Group)cGroup_0_1.eContents().get(6);
		private final Keyword cCommaKeyword_0_1_6_0 = (Keyword)cGroup_0_1_6.eContents().get(0);
		private final Assignment cPathVectorsAssignment_0_1_6_1 = (Assignment)cGroup_0_1_6.eContents().get(1);
		private final RuleCall cPathVectorsPathVectorParserRuleCall_0_1_6_1_0 = (RuleCall)cPathVectorsAssignment_0_1_6_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1_7 = (Keyword)cGroup_0_1.eContents().get(7);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cWhenKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cCondExprAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cCondExprExpressionParserRuleCall_1_0_2_0 = (RuleCall)cCondExprAssignment_1_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Assignment cPathVectorsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPathVectorsPathVectorParserRuleCall_1_1_0 = (RuleCall)cPathVectorsAssignment_1_1.eContents().get(0);
		
		//ConditionalPathVector returns build::ConditionalPathVector:
		//	{build::ConditionalPathVector} ("when" "(" condExpr=Expression ")" "[" pathVectors+=PathVector (","
		//	pathVectors+=PathVector)* "]") | ("when" "(" condExpr=Expression ")")? pathVectors+=PathVector;
		public ParserRule getRule() { return rule; }

		//{build::ConditionalPathVector} ("when" "(" condExpr=Expression ")" "[" pathVectors+=PathVector (","
		//pathVectors+=PathVector)* "]") | ("when" "(" condExpr=Expression ")")? pathVectors+=PathVector
		public Alternatives getAlternatives() { return cAlternatives; }

		//{build::ConditionalPathVector} ("when" "(" condExpr=Expression ")" "[" pathVectors+=PathVector (","
		//pathVectors+=PathVector)* "]")
		public Group getGroup_0() { return cGroup_0; }

		//{build::ConditionalPathVector}
		public Action getConditionalPathVectorAction_0_0() { return cConditionalPathVectorAction_0_0; }

		//"when" "(" condExpr=Expression ")" "[" pathVectors+=PathVector ("," pathVectors+=PathVector)* "]"
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"when"
		public Keyword getWhenKeyword_0_1_0() { return cWhenKeyword_0_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1_1() { return cLeftParenthesisKeyword_0_1_1; }

		//condExpr=Expression
		public Assignment getCondExprAssignment_0_1_2() { return cCondExprAssignment_0_1_2; }

		//Expression
		public RuleCall getCondExprExpressionParserRuleCall_0_1_2_0() { return cCondExprExpressionParserRuleCall_0_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_1_3() { return cRightParenthesisKeyword_0_1_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_1_4() { return cLeftSquareBracketKeyword_0_1_4; }

		//pathVectors+=PathVector
		public Assignment getPathVectorsAssignment_0_1_5() { return cPathVectorsAssignment_0_1_5; }

		//PathVector
		public RuleCall getPathVectorsPathVectorParserRuleCall_0_1_5_0() { return cPathVectorsPathVectorParserRuleCall_0_1_5_0; }

		//("," pathVectors+=PathVector)*
		public Group getGroup_0_1_6() { return cGroup_0_1_6; }

		//","
		public Keyword getCommaKeyword_0_1_6_0() { return cCommaKeyword_0_1_6_0; }

		//pathVectors+=PathVector
		public Assignment getPathVectorsAssignment_0_1_6_1() { return cPathVectorsAssignment_0_1_6_1; }

		//PathVector
		public RuleCall getPathVectorsPathVectorParserRuleCall_0_1_6_1_0() { return cPathVectorsPathVectorParserRuleCall_0_1_6_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_1_7() { return cRightSquareBracketKeyword_0_1_7; }

		//("when" "(" condExpr=Expression ")")? pathVectors+=PathVector
		public Group getGroup_1() { return cGroup_1; }

		//("when" "(" condExpr=Expression ")")?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"when"
		public Keyword getWhenKeyword_1_0_0() { return cWhenKeyword_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_1() { return cLeftParenthesisKeyword_1_0_1; }

		//condExpr=Expression
		public Assignment getCondExprAssignment_1_0_2() { return cCondExprAssignment_1_0_2; }

		//Expression
		public RuleCall getCondExprExpressionParserRuleCall_1_0_2_0() { return cCondExprExpressionParserRuleCall_1_0_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_3() { return cRightParenthesisKeyword_1_0_3; }

		//pathVectors+=PathVector
		public Assignment getPathVectorsAssignment_1_1() { return cPathVectorsAssignment_1_1; }

		//PathVector
		public RuleCall getPathVectorsPathVectorParserRuleCall_1_1_0() { return cPathVectorsPathVectorParserRuleCall_1_1_0; }
	}

	public class PathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Path");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cQIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cSolidusKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final RuleCall cQIDParserRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		private final Keyword cSolidusKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		////// a path as a string (i.e. ID, QID, "..." or /QID/..
		////PathString 
		////	: STRING
		////	| ('/')? QID ('/' QID)* ('/')? 
		////	;
		//// A path can be written without quotes if it consists of safe chars 
		//Path returns be::URI hidden():
		//	STRING | "/"? QID ("/" QID)* "/"?;
		public ParserRule getRule() { return rule; }

		//STRING | "/"? QID ("/" QID)* "/"?
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//"/"? QID ("/" QID)* "/"?
		public Group getGroup_1() { return cGroup_1; }

		//"/"?
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }

		//QID
		public RuleCall getQIDParserRuleCall_1_1() { return cQIDParserRuleCall_1_1; }

		//("/" QID)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"/"
		public Keyword getSolidusKeyword_1_2_0() { return cSolidusKeyword_1_2_0; }

		//QID
		public RuleCall getQIDParserRuleCall_1_2_1() { return cQIDParserRuleCall_1_2_1; }

		//"/"?
		public Keyword getSolidusKeyword_1_3() { return cSolidusKeyword_1_3; }
	}

	public class BuilderInputConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuilderInputCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBuilderInputConditionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCondExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCondExprExpressionParserRuleCall_3_0 = (RuleCall)cCondExprAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBuilderInputAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBuilderInputBuilderInputUnnamedParserRuleCall_5_0 = (RuleCall)cBuilderInputAssignment_5.eContents().get(0);
		
		//BuilderInputCondition returns build::BuilderInput:
		//	{build::BuilderInputCondition} "when" "(" condExpr=Expression ")" builderInput+=BuilderInputUnnamed;
		public ParserRule getRule() { return rule; }

		//{build::BuilderInputCondition} "when" "(" condExpr=Expression ")" builderInput+=BuilderInputUnnamed
		public Group getGroup() { return cGroup; }

		//{build::BuilderInputCondition}
		public Action getBuilderInputConditionAction_0() { return cBuilderInputConditionAction_0; }

		//"when"
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//condExpr=Expression
		public Assignment getCondExprAssignment_3() { return cCondExprAssignment_3; }

		//Expression
		public RuleCall getCondExprExpressionParserRuleCall_3_0() { return cCondExprExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//builderInput+=BuilderInputUnnamed
		public Assignment getBuilderInputAssignment_5() { return cBuilderInputAssignment_5; }

		//BuilderInputUnnamed
		public RuleCall getBuilderInputBuilderInputUnnamedParserRuleCall_5_0() { return cBuilderInputBuilderInputUnnamedParserRuleCall_5_0; }
	}

	public class BuilderInputContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuilderInputContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBuilderInputContextDecoratorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cWithExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWithExprWithClauseParserRuleCall_1_0 = (RuleCall)cWithExprAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBuilderInputAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBuilderInputBuilderInputUnnamedParserRuleCall_3_0 = (RuleCall)cBuilderInputAssignment_3.eContents().get(0);
		
		//BuilderInputContext returns build::BuilderInput:
		//	{build::BuilderInputContextDecorator} withExpr=WithClause ":" builderInput+=BuilderInputUnnamed;
		public ParserRule getRule() { return rule; }

		//{build::BuilderInputContextDecorator} withExpr=WithClause ":" builderInput+=BuilderInputUnnamed
		public Group getGroup() { return cGroup; }

		//{build::BuilderInputContextDecorator}
		public Action getBuilderInputContextDecoratorAction_0() { return cBuilderInputContextDecoratorAction_0; }

		//withExpr=WithClause
		public Assignment getWithExprAssignment_1() { return cWithExprAssignment_1; }

		//WithClause
		public RuleCall getWithExprWithClauseParserRuleCall_1_0() { return cWithExprWithClauseParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//builderInput+=BuilderInputUnnamed
		public Assignment getBuilderInputAssignment_3() { return cBuilderInputAssignment_3; }

		//BuilderInputUnnamed
		public RuleCall getBuilderInputBuilderInputUnnamedParserRuleCall_3_0() { return cBuilderInputBuilderInputUnnamedParserRuleCall_3_0; }
	}

	public class BuilderInputNamedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuilderInputNamed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBuilderInputUnnamedParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBuilderInputNameDecoratorBuilderInputAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAsKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		
		//BuilderInputNamed returns build::BuilderInput:
		//	BuilderInputUnnamed ({build::BuilderInputNameDecorator.builderInput+=current} "as" name=ID)?;
		public ParserRule getRule() { return rule; }

		//BuilderInputUnnamed ({build::BuilderInputNameDecorator.builderInput+=current} "as" name=ID)?
		public Group getGroup() { return cGroup; }

		//BuilderInputUnnamed
		public RuleCall getBuilderInputUnnamedParserRuleCall_0() { return cBuilderInputUnnamedParserRuleCall_0; }

		//({build::BuilderInputNameDecorator.builderInput+=current} "as" name=ID)?
		public Group getGroup_1() { return cGroup_1; }

		//{build::BuilderInputNameDecorator.builderInput+=current}
		public Action getBuilderInputNameDecoratorBuilderInputAction_1_0() { return cBuilderInputNameDecoratorBuilderInputAction_1_0; }

		//"as"
		public Keyword getAsKeyword_1_1() { return cAsKeyword_1_1; }

		//name=ID
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_2_0() { return cNameIDTerminalRuleCall_1_2_0; }
	}

	public class WithClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WithClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBWithExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cReferencedAdviceAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cReferencedAdviceBAdviceCrossReference_2_0_0 = (CrossReference)cReferencedAdviceAssignment_2_0.eContents().get(0);
		private final RuleCall cReferencedAdviceBAdviceIDTerminalRuleCall_2_0_0_1 = (RuleCall)cReferencedAdviceBAdviceCrossReference_2_0_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cReferencedAdviceAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final CrossReference cReferencedAdviceBAdviceCrossReference_2_1_1_0 = (CrossReference)cReferencedAdviceAssignment_2_1_1.eContents().get(0);
		private final RuleCall cReferencedAdviceBAdviceIDTerminalRuleCall_2_1_1_0_1 = (RuleCall)cReferencedAdviceBAdviceCrossReference_2_1_1_0.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cPropertySetsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cPropertySetsPropertySetParserRuleCall_3_0_0 = (RuleCall)cPropertySetsAssignment_3_0.eContents().get(0);
		private final Assignment cPropertySetsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cPropertySetsPropertySetDefaultParserRuleCall_3_1_0 = (RuleCall)cPropertySetsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cAlternatives_3.eContents().get(2);
		private final Keyword cConcernKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cConcernsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cConcernsConcern_AnonymousParserRuleCall_3_2_1_0 = (RuleCall)cConcernsAssignment_3_2_1.eContents().get(0);
		
		////Prerequisite returns build::Prerequisite : {build::Prerequisite} 
		////	('when' '(' condExpr=Expression ')' )?
		////	(withExpr = WithClause ':')?
		////	buildResult=BuilderInputUnnamed
		////	("as" name=ID)? // ';'
		////	;
		//// Validation checks that there is at least one of references, properties or concern.
		//WithClause returns be::BWithExpression:
		//	{be::BWithExpression} "with" (referencedAdvice+=[be::BAdvice] ("," referencedAdvice+=[be::BAdvice])*)?
		//	(propertySets+=PropertySet | propertySets+=PropertySetDefault | "concern" concerns+=Concern_Anonymous)*;
		public ParserRule getRule() { return rule; }

		//{be::BWithExpression} "with" (referencedAdvice+=[be::BAdvice] ("," referencedAdvice+=[be::BAdvice])*)?
		//(propertySets+=PropertySet | propertySets+=PropertySetDefault | "concern" concerns+=Concern_Anonymous)*
		public Group getGroup() { return cGroup; }

		//{be::BWithExpression}
		public Action getBWithExpressionAction_0() { return cBWithExpressionAction_0; }

		//"with"
		public Keyword getWithKeyword_1() { return cWithKeyword_1; }

		//(referencedAdvice+=[be::BAdvice] ("," referencedAdvice+=[be::BAdvice])*)?
		public Group getGroup_2() { return cGroup_2; }

		//referencedAdvice+=[be::BAdvice]
		public Assignment getReferencedAdviceAssignment_2_0() { return cReferencedAdviceAssignment_2_0; }

		//[be::BAdvice]
		public CrossReference getReferencedAdviceBAdviceCrossReference_2_0_0() { return cReferencedAdviceBAdviceCrossReference_2_0_0; }

		//ID
		public RuleCall getReferencedAdviceBAdviceIDTerminalRuleCall_2_0_0_1() { return cReferencedAdviceBAdviceIDTerminalRuleCall_2_0_0_1; }

		//("," referencedAdvice+=[be::BAdvice])*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//referencedAdvice+=[be::BAdvice]
		public Assignment getReferencedAdviceAssignment_2_1_1() { return cReferencedAdviceAssignment_2_1_1; }

		//[be::BAdvice]
		public CrossReference getReferencedAdviceBAdviceCrossReference_2_1_1_0() { return cReferencedAdviceBAdviceCrossReference_2_1_1_0; }

		//ID
		public RuleCall getReferencedAdviceBAdviceIDTerminalRuleCall_2_1_1_0_1() { return cReferencedAdviceBAdviceIDTerminalRuleCall_2_1_1_0_1; }

		//(propertySets+=PropertySet | propertySets+=PropertySetDefault | "concern" concerns+=Concern_Anonymous)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//propertySets+=PropertySet
		public Assignment getPropertySetsAssignment_3_0() { return cPropertySetsAssignment_3_0; }

		//PropertySet
		public RuleCall getPropertySetsPropertySetParserRuleCall_3_0_0() { return cPropertySetsPropertySetParserRuleCall_3_0_0; }

		//propertySets+=PropertySetDefault
		public Assignment getPropertySetsAssignment_3_1() { return cPropertySetsAssignment_3_1; }

		//PropertySetDefault
		public RuleCall getPropertySetsPropertySetDefaultParserRuleCall_3_1_0() { return cPropertySetsPropertySetDefaultParserRuleCall_3_1_0; }

		//"concern" concerns+=Concern_Anonymous
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"concern"
		public Keyword getConcernKeyword_3_2_0() { return cConcernKeyword_3_2_0; }

		//concerns+=Concern_Anonymous
		public Assignment getConcernsAssignment_3_2_1() { return cConcernsAssignment_3_2_1; }

		//Concern_Anonymous
		public RuleCall getConcernsConcern_AnonymousParserRuleCall_3_2_1_0() { return cConcernsConcern_AnonymousParserRuleCall_3_2_1_0; }
	}

	public class BuilderInputUnnamedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuilderInputUnnamed");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBuilderInputConditionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBuilderInputContextParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBuildCallOnUnitRequirementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBuildCallOnCapabilityRequirementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBuildCallOnReferencedRequirementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBuildCallOnSelectedRequirementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cBuilderInputGroupParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//BuilderInputUnnamed returns build::BuilderInput:
		//	BuilderInputCondition | BuilderInputContext | BuildCallOnUnitRequirement | BuildCallOnCapabilityRequirement |
		//	BuildCallOnReferencedRequirement | BuildCallOnSelectedRequirement | BuilderInputGroup;
		public ParserRule getRule() { return rule; }

		//BuilderInputCondition | BuilderInputContext | BuildCallOnUnitRequirement | BuildCallOnCapabilityRequirement |
		//BuildCallOnReferencedRequirement | BuildCallOnSelectedRequirement | BuilderInputGroup
		public Alternatives getAlternatives() { return cAlternatives; }

		//BuilderInputCondition
		public RuleCall getBuilderInputConditionParserRuleCall_0() { return cBuilderInputConditionParserRuleCall_0; }

		//BuilderInputContext
		public RuleCall getBuilderInputContextParserRuleCall_1() { return cBuilderInputContextParserRuleCall_1; }

		//BuildCallOnUnitRequirement
		public RuleCall getBuildCallOnUnitRequirementParserRuleCall_2() { return cBuildCallOnUnitRequirementParserRuleCall_2; }

		//BuildCallOnCapabilityRequirement
		public RuleCall getBuildCallOnCapabilityRequirementParserRuleCall_3() { return cBuildCallOnCapabilityRequirementParserRuleCall_3; }

		//BuildCallOnReferencedRequirement
		public RuleCall getBuildCallOnReferencedRequirementParserRuleCall_4() { return cBuildCallOnReferencedRequirementParserRuleCall_4; }

		//BuildCallOnSelectedRequirement
		public RuleCall getBuildCallOnSelectedRequirementParserRuleCall_5() { return cBuildCallOnSelectedRequirementParserRuleCall_5; }

		//BuilderInputGroup
		public RuleCall getBuilderInputGroupParserRuleCall_6() { return cBuilderInputGroupParserRuleCall_6; }
	}

	public class BuildCallOnUnitRequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuildCallOnUnitRequirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBuildCallOnDeclaredRequirementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUnitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBuilderNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBuilderNameEscapedQualifiedNameParserRuleCall_3_0 = (RuleCall)cBuilderNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParametersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParametersParameterListParserRuleCall_4_1_0 = (RuleCall)cParametersAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//// A reference to a builder in the same unit
		//BuildCallOnUnitRequirement returns build::BuilderInput:
		//	{build::BuildCallOnDeclaredRequirement} "unit" "." builderName=EscapedQualifiedName ("(" parameters=ParameterList?
		//	")");
		public ParserRule getRule() { return rule; }

		//{build::BuildCallOnDeclaredRequirement} "unit" "." builderName=EscapedQualifiedName ("(" parameters=ParameterList? ")")
		public Group getGroup() { return cGroup; }

		//{build::BuildCallOnDeclaredRequirement}
		public Action getBuildCallOnDeclaredRequirementAction_0() { return cBuildCallOnDeclaredRequirementAction_0; }

		//"unit"
		public Keyword getUnitKeyword_1() { return cUnitKeyword_1; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//builderName=EscapedQualifiedName
		public Assignment getBuilderNameAssignment_3() { return cBuilderNameAssignment_3; }

		//EscapedQualifiedName
		public RuleCall getBuilderNameEscapedQualifiedNameParserRuleCall_3_0() { return cBuilderNameEscapedQualifiedNameParserRuleCall_3_0; }

		//"(" parameters=ParameterList? ")"
		public Group getGroup_4() { return cGroup_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//parameters=ParameterList?
		public Assignment getParametersAssignment_4_1() { return cParametersAssignment_4_1; }

		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_4_1_0() { return cParametersParameterListParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
	}

	public class BuildCallOnCapabilityRequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuildCallOnCapabilityRequirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBuildCallOnDeclaredRequirementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRequiredCapabilityDeclarationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRequiredCapabilityDeclarationRequiredCapability_UnfilteredParserRuleCall_1_0 = (RuleCall)cRequiredCapabilityDeclarationAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cBuilderNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cBuilderNameEscapedQualifiedNameParserRuleCall_2_1_0 = (RuleCall)cBuilderNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParametersParameterListParserRuleCall_3_1_0 = (RuleCall)cParametersAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// A reference to a builder in a unit providing a capability (or if build name is omitted to the
		//// builder that provides the capability in that unit).
		//BuildCallOnCapabilityRequirement returns build::BuilderInput:
		//	{build::BuildCallOnDeclaredRequirement} requiredCapabilityDeclaration=RequiredCapability_Unfiltered ("."
		//	builderName=EscapedQualifiedName)? ("(" parameters=ParameterList? ")");
		public ParserRule getRule() { return rule; }

		//{build::BuildCallOnDeclaredRequirement} requiredCapabilityDeclaration=RequiredCapability_Unfiltered ("."
		//builderName=EscapedQualifiedName)? ("(" parameters=ParameterList? ")")
		public Group getGroup() { return cGroup; }

		//{build::BuildCallOnDeclaredRequirement}
		public Action getBuildCallOnDeclaredRequirementAction_0() { return cBuildCallOnDeclaredRequirementAction_0; }

		//requiredCapabilityDeclaration=RequiredCapability_Unfiltered
		public Assignment getRequiredCapabilityDeclarationAssignment_1() { return cRequiredCapabilityDeclarationAssignment_1; }

		//RequiredCapability_Unfiltered
		public RuleCall getRequiredCapabilityDeclarationRequiredCapability_UnfilteredParserRuleCall_1_0() { return cRequiredCapabilityDeclarationRequiredCapability_UnfilteredParserRuleCall_1_0; }

		//("." builderName=EscapedQualifiedName)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//builderName=EscapedQualifiedName
		public Assignment getBuilderNameAssignment_2_1() { return cBuilderNameAssignment_2_1; }

		//EscapedQualifiedName
		public RuleCall getBuilderNameEscapedQualifiedNameParserRuleCall_2_1_0() { return cBuilderNameEscapedQualifiedNameParserRuleCall_2_1_0; }

		//"(" parameters=ParameterList? ")"
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//parameters=ParameterList?
		public Assignment getParametersAssignment_3_1() { return cParametersAssignment_3_1; }

		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_3_1_0() { return cParametersParameterListParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}

	public class BuildCallOnReferencedRequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuildCallOnReferencedRequirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBuildCallOnReferencedRequirementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRequiredCapabilityReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRequiredCapabilityReferenceAliasedRequiredCapabilityCrossReference_1_0 = (CrossReference)cRequiredCapabilityReferenceAssignment_1.eContents().get(0);
		private final RuleCall cRequiredCapabilityReferenceAliasedRequiredCapabilityIDTerminalRuleCall_1_0_1 = (RuleCall)cRequiredCapabilityReferenceAliasedRequiredCapabilityCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cBuilderNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cBuilderNameEscapedQualifiedNameParserRuleCall_2_1_0 = (RuleCall)cBuilderNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParametersParameterListParserRuleCall_3_1_0 = (RuleCall)cParametersAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// A reference to a builder in a unit providing a referenced capability (or if build name is omitted to the
		//// builder that provides the capability in that unit).
		//// TODO: validate that a referenced capability of unit has builderName set
		//BuildCallOnReferencedRequirement returns build::BuilderInput:
		//	{build::BuildCallOnReferencedRequirement} requiredCapabilityReference=[build::AliasedRequiredCapability] ("."
		//	builderName=EscapedQualifiedName)? ("(" parameters=ParameterList? ")");
		public ParserRule getRule() { return rule; }

		//{build::BuildCallOnReferencedRequirement} requiredCapabilityReference=[build::AliasedRequiredCapability] ("."
		//builderName=EscapedQualifiedName)? ("(" parameters=ParameterList? ")")
		public Group getGroup() { return cGroup; }

		//{build::BuildCallOnReferencedRequirement}
		public Action getBuildCallOnReferencedRequirementAction_0() { return cBuildCallOnReferencedRequirementAction_0; }

		//requiredCapabilityReference=[build::AliasedRequiredCapability]
		public Assignment getRequiredCapabilityReferenceAssignment_1() { return cRequiredCapabilityReferenceAssignment_1; }

		//[build::AliasedRequiredCapability]
		public CrossReference getRequiredCapabilityReferenceAliasedRequiredCapabilityCrossReference_1_0() { return cRequiredCapabilityReferenceAliasedRequiredCapabilityCrossReference_1_0; }

		//ID
		public RuleCall getRequiredCapabilityReferenceAliasedRequiredCapabilityIDTerminalRuleCall_1_0_1() { return cRequiredCapabilityReferenceAliasedRequiredCapabilityIDTerminalRuleCall_1_0_1; }

		//("." builderName=EscapedQualifiedName)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//builderName=EscapedQualifiedName
		public Assignment getBuilderNameAssignment_2_1() { return cBuilderNameAssignment_2_1; }

		//EscapedQualifiedName
		public RuleCall getBuilderNameEscapedQualifiedNameParserRuleCall_2_1_0() { return cBuilderNameEscapedQualifiedNameParserRuleCall_2_1_0; }

		//"(" parameters=ParameterList? ")"
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//parameters=ParameterList?
		public Assignment getParametersAssignment_3_1() { return cParametersAssignment_3_1; }

		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_3_1_0() { return cParametersParameterListParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}

	public class BuildCallOnSelectedRequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuildCallOnSelectedRequirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBuildCallOnSelectedRequirementsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSelectRequiredKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRequiredPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRequiredPredicateCapabilityPredicateParserRuleCall_2_0 = (RuleCall)cRequiredPredicateAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFullStopKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cBuilderNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cBuilderNameEscapedQualifiedNameParserRuleCall_3_1_0 = (RuleCall)cBuilderNameAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParametersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParametersParameterListParserRuleCall_4_1_0 = (RuleCall)cParametersAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//BuildCallOnSelectedRequirement returns build::BuilderInput:
		//	{build::BuildCallOnSelectedRequirements} "select-required" requiredPredicate=CapabilityPredicate ("."
		//	builderName=EscapedQualifiedName)? ("(" parameters=ParameterList? ")");
		public ParserRule getRule() { return rule; }

		//{build::BuildCallOnSelectedRequirements} "select-required" requiredPredicate=CapabilityPredicate ("."
		//builderName=EscapedQualifiedName)? ("(" parameters=ParameterList? ")")
		public Group getGroup() { return cGroup; }

		//{build::BuildCallOnSelectedRequirements}
		public Action getBuildCallOnSelectedRequirementsAction_0() { return cBuildCallOnSelectedRequirementsAction_0; }

		//"select-required"
		public Keyword getSelectRequiredKeyword_1() { return cSelectRequiredKeyword_1; }

		//requiredPredicate=CapabilityPredicate
		public Assignment getRequiredPredicateAssignment_2() { return cRequiredPredicateAssignment_2; }

		//CapabilityPredicate
		public RuleCall getRequiredPredicateCapabilityPredicateParserRuleCall_2_0() { return cRequiredPredicateCapabilityPredicateParserRuleCall_2_0; }

		//("." builderName=EscapedQualifiedName)?
		public Group getGroup_3() { return cGroup_3; }

		//"."
		public Keyword getFullStopKeyword_3_0() { return cFullStopKeyword_3_0; }

		//builderName=EscapedQualifiedName
		public Assignment getBuilderNameAssignment_3_1() { return cBuilderNameAssignment_3_1; }

		//EscapedQualifiedName
		public RuleCall getBuilderNameEscapedQualifiedNameParserRuleCall_3_1_0() { return cBuilderNameEscapedQualifiedNameParserRuleCall_3_1_0; }

		//"(" parameters=ParameterList? ")"
		public Group getGroup_4() { return cGroup_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//parameters=ParameterList?
		public Assignment getParametersAssignment_4_1() { return cParametersAssignment_4_1; }

		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_4_1_0() { return cParametersParameterListParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
	}

	public class BuilderInputGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuilderInputGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBuilderInputGroupAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cBuilderInputAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cBuilderInputBuilderInputParserRuleCall_2_0_0 = (RuleCall)cBuilderInputAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cBuilderInputAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cBuilderInputBuilderInputParserRuleCall_2_1_1_0 = (RuleCall)cBuilderInputAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BuilderInputGroup returns build::BuilderInput:
		//	{build::BuilderInputGroup} "[" (builderInput+=BuilderInput ("," builderInput+=BuilderInput)*)? "]";
		public ParserRule getRule() { return rule; }

		//{build::BuilderInputGroup} "[" (builderInput+=BuilderInput ("," builderInput+=BuilderInput)*)? "]"
		public Group getGroup() { return cGroup; }

		//{build::BuilderInputGroup}
		public Action getBuilderInputGroupAction_0() { return cBuilderInputGroupAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//(builderInput+=BuilderInput ("," builderInput+=BuilderInput)*)?
		public Group getGroup_2() { return cGroup_2; }

		//builderInput+=BuilderInput
		public Assignment getBuilderInputAssignment_2_0() { return cBuilderInputAssignment_2_0; }

		//BuilderInput
		public RuleCall getBuilderInputBuilderInputParserRuleCall_2_0_0() { return cBuilderInputBuilderInputParserRuleCall_2_0_0; }

		//("," builderInput+=BuilderInput)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//builderInput+=BuilderInput
		public Assignment getBuilderInputAssignment_2_1_1() { return cBuilderInputAssignment_2_1_1; }

		//BuilderInput
		public RuleCall getBuilderInputBuilderInputParserRuleCall_2_1_1_0() { return cBuilderInputBuilderInputParserRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class BuilderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Builder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBuilderAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDocumentationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDocumentationDOCUMENTATIONParserRuleCall_1_0 = (RuleCall)cDocumentationAssignment_1.eContents().get(0);
		private final Assignment cVisibilityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_2_0 = (RuleCall)cVisibilityAssignment_2.eContents().get(0);
		private final Assignment cExecutionModeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExecutionModeExecutionModeEnumRuleCall_3_0 = (RuleCall)cExecutionModeAssignment_3.eContents().get(0);
		private final Assignment cFinalAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cFinalFinalKeyword_4_0 = (Keyword)cFinalAssignment_4.eContents().get(0);
		private final Keyword cBuilderKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameEscapedQualifiedNameParserRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Alternatives cAlternatives_7_1 = (Alternatives)cGroup_7.eContents().get(1);
		private final Group cGroup_7_1_0 = (Group)cAlternatives_7_1.eContents().get(0);
		private final Alternatives cAlternatives_7_1_0_0 = (Alternatives)cGroup_7_1_0.eContents().get(0);
		private final Assignment cExplicitUnitTypeAssignment_7_1_0_0_0 = (Assignment)cAlternatives_7_1_0_0.eContents().get(0);
		private final RuleCall cExplicitUnitTypeParameterDeclarationUnitParserRuleCall_7_1_0_0_0_0 = (RuleCall)cExplicitUnitTypeAssignment_7_1_0_0_0.eContents().get(0);
		private final Assignment cParametersAssignment_7_1_0_0_1 = (Assignment)cAlternatives_7_1_0_0.eContents().get(1);
		private final RuleCall cParametersParameterDeclarationNotUnitParserRuleCall_7_1_0_0_1_0 = (RuleCall)cParametersAssignment_7_1_0_0_1.eContents().get(0);
		private final Group cGroup_7_1_0_1 = (Group)cGroup_7_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_7_1_0_1_0 = (Keyword)cGroup_7_1_0_1.eContents().get(0);
		private final Assignment cParametersAssignment_7_1_0_1_1 = (Assignment)cGroup_7_1_0_1.eContents().get(1);
		private final RuleCall cParametersParameterDeclarationNotUnitParserRuleCall_7_1_0_1_1_0 = (RuleCall)cParametersAssignment_7_1_0_1_1.eContents().get(0);
		private final Group cGroup_7_1_0_2 = (Group)cGroup_7_1_0.eContents().get(2);
		private final Keyword cCommaKeyword_7_1_0_2_0 = (Keyword)cGroup_7_1_0_2.eContents().get(0);
		private final Assignment cVarArgsAssignment_7_1_0_2_1 = (Assignment)cGroup_7_1_0_2.eContents().get(1);
		private final Keyword cVarArgsFullStopFullStopFullStopKeyword_7_1_0_2_1_0 = (Keyword)cVarArgsAssignment_7_1_0_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_7_1_0_2_2 = (Assignment)cGroup_7_1_0_2.eContents().get(2);
		private final RuleCall cParametersParameterDeclarationNotUnitParserRuleCall_7_1_0_2_2_0 = (RuleCall)cParametersAssignment_7_1_0_2_2.eContents().get(0);
		private final Group cGroup_7_1_1 = (Group)cAlternatives_7_1.eContents().get(1);
		private final Assignment cVarArgsAssignment_7_1_1_0 = (Assignment)cGroup_7_1_1.eContents().get(0);
		private final Keyword cVarArgsFullStopFullStopFullStopKeyword_7_1_1_0_0 = (Keyword)cVarArgsAssignment_7_1_1_0.eContents().get(0);
		private final Assignment cParametersAssignment_7_1_1_1 = (Assignment)cGroup_7_1_1.eContents().get(1);
		private final RuleCall cParametersParameterDeclarationNotUnitParserRuleCall_7_1_1_1_0 = (RuleCall)cParametersAssignment_7_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cPrecondExprAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cPrecondExprPreConditionParserRuleCall_8_0 = (RuleCall)cPrecondExprAssignment_8.eContents().get(0);
		private final Assignment cPostcondExprAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cPostcondExprPostConditionParserRuleCall_9_0 = (RuleCall)cPostcondExprAssignment_9.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final UnorderedGroup cUnorderedGroup_11 = (UnorderedGroup)cGroup.eContents().get(11);
		private final Group cGroup_11_0 = (Group)cUnorderedGroup_11.eContents().get(0);
		private final Keyword cProvidesKeyword_11_0_0 = (Keyword)cGroup_11_0.eContents().get(0);
		private final Keyword cColonKeyword_11_0_1 = (Keyword)cGroup_11_0.eContents().get(1);
		private final Alternatives cAlternatives_11_0_2 = (Alternatives)cGroup_11_0.eContents().get(2);
		private final Group cGroup_11_0_2_0 = (Group)cAlternatives_11_0_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_11_0_2_0_0 = (Keyword)cGroup_11_0_2_0.eContents().get(0);
		private final Assignment cProvidedCapabilitiesAssignment_11_0_2_0_1 = (Assignment)cGroup_11_0_2_0.eContents().get(1);
		private final RuleCall cProvidedCapabilitiesProvidedCapabilityParserRuleCall_11_0_2_0_1_0 = (RuleCall)cProvidedCapabilitiesAssignment_11_0_2_0_1.eContents().get(0);
		private final Group cGroup_11_0_2_0_2 = (Group)cGroup_11_0_2_0.eContents().get(2);
		private final Keyword cCommaKeyword_11_0_2_0_2_0 = (Keyword)cGroup_11_0_2_0_2.eContents().get(0);
		private final Assignment cProvidedCapabilitiesAssignment_11_0_2_0_2_1 = (Assignment)cGroup_11_0_2_0_2.eContents().get(1);
		private final RuleCall cProvidedCapabilitiesProvidedCapabilityParserRuleCall_11_0_2_0_2_1_0 = (RuleCall)cProvidedCapabilitiesAssignment_11_0_2_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_11_0_2_0_3 = (Keyword)cGroup_11_0_2_0.eContents().get(3);
		private final Assignment cProvidedCapabilitiesAssignment_11_0_2_1 = (Assignment)cAlternatives_11_0_2.eContents().get(1);
		private final RuleCall cProvidedCapabilitiesProvidedCapabilityParserRuleCall_11_0_2_1_0 = (RuleCall)cProvidedCapabilitiesAssignment_11_0_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_11_0_3 = (Keyword)cGroup_11_0.eContents().get(3);
		private final Assignment cDefaultPropertiesAssignment_11_1 = (Assignment)cUnorderedGroup_11.eContents().get(1);
		private final RuleCall cDefaultPropertiesPropertySetDefaultParserRuleCall_11_1_0 = (RuleCall)cDefaultPropertiesAssignment_11_1.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cInputKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Keyword cColonKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Assignment cInputAssignment_12_2 = (Assignment)cGroup_12.eContents().get(2);
		private final RuleCall cInputBuilderInputGroupParserRuleCall_12_2_0 = (RuleCall)cInputAssignment_12_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_12_3 = (Keyword)cGroup_12.eContents().get(3);
		private final Assignment cPostinputcondExprAssignment_12_4 = (Assignment)cGroup_12.eContents().get(4);
		private final RuleCall cPostinputcondExprPostInputConditionParserRuleCall_12_4_0 = (RuleCall)cPostinputcondExprAssignment_12_4.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cSourceKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Keyword cColonKeyword_13_1 = (Keyword)cGroup_13.eContents().get(1);
		private final Assignment cSourceAssignment_13_2 = (Assignment)cGroup_13.eContents().get(2);
		private final RuleCall cSourcePathGroupParserRuleCall_13_2_0 = (RuleCall)cSourceAssignment_13_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_13_3 = (Keyword)cGroup_13.eContents().get(3);
		private final Group cGroup_14 = (Group)cGroup.eContents().get(14);
		private final Keyword cOutputKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final Keyword cColonKeyword_14_1 = (Keyword)cGroup_14.eContents().get(1);
		private final Assignment cOutputAssignment_14_2 = (Assignment)cGroup_14.eContents().get(2);
		private final RuleCall cOutputPathGroupParserRuleCall_14_2_0 = (RuleCall)cOutputAssignment_14_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_14_3 = (Keyword)cGroup_14.eContents().get(3);
		private final Group cGroup_15 = (Group)cGroup.eContents().get(15);
		private final Keyword cResultKeyword_15_0 = (Keyword)cGroup_15.eContents().get(0);
		private final Keyword cColonKeyword_15_1 = (Keyword)cGroup_15.eContents().get(1);
		private final Assignment cFuncExprAssignment_15_2 = (Assignment)cGroup_15.eContents().get(2);
		private final RuleCall cFuncExprExpressionParserRuleCall_15_2_0 = (RuleCall)cFuncExprAssignment_15_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_15_3 = (Keyword)cGroup_15.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_16 = (Keyword)cGroup.eContents().get(16);
		
		//Builder returns build::Builder:
		//	{build::Builder} documentation=DOCUMENTATION? visibility=Visibility? executionMode=ExecutionMode? final?="final"?
		//	"builder" name=EscapedQualifiedName ("(" ((explicitUnitType=ParameterDeclarationUnit |
		//	parameters+=ParameterDeclarationNotUnit) ("," parameters+=ParameterDeclarationNotUnit)* ("," varArgs?="..."
		//	parameters+=ParameterDeclarationNotUnit)? // first parameter is always "unit", but is implied to "this unit" if builder is specified in
		//	// a build unit
		//	// TODO: validation and relevant content proposal
		//	| varArgs?="..." parameters+=ParameterDeclarationNotUnit)? ")")? //	(guard = GuardExpression)?
		//	precondExpr=PreCondition? postcondExpr=PostCondition? "{" (("provides" ":" ("["
		//	providedCapabilities+=ProvidedCapability ("," providedCapabilities+=ProvidedCapability)* "]" |
		//	providedCapabilities+=ProvidedCapability) ";")? & defaultProperties=PropertySetDefault?)? ("input" ":"
		//	input=BuilderInputGroup ";" postinputcondExpr=PostInputCondition?)? ("source" ":" source=PathGroup ";")? ("output" ":"
		//	output=PathGroup ";")? ("result" ":" funcExpr=Expression ";")? "}";
		public ParserRule getRule() { return rule; }

		//{build::Builder} documentation=DOCUMENTATION? visibility=Visibility? executionMode=ExecutionMode? final?="final"?
		//"builder" name=EscapedQualifiedName ("(" ((explicitUnitType=ParameterDeclarationUnit |
		//parameters+=ParameterDeclarationNotUnit) ("," parameters+=ParameterDeclarationNotUnit)* ("," varArgs?="..."
		//parameters+=ParameterDeclarationNotUnit)? // first parameter is always "unit", but is implied to "this unit" if builder is specified in
		//// a build unit
		//// TODO: validation and relevant content proposal
		//| varArgs?="..." parameters+=ParameterDeclarationNotUnit)? ")")? //	(guard = GuardExpression)?
		//precondExpr=PreCondition? postcondExpr=PostCondition? "{" (("provides" ":" ("[" providedCapabilities+=ProvidedCapability
		//("," providedCapabilities+=ProvidedCapability)* "]" | providedCapabilities+=ProvidedCapability) ";")? &
		//defaultProperties=PropertySetDefault?)? ("input" ":" input=BuilderInputGroup ";"
		//postinputcondExpr=PostInputCondition?)? ("source" ":" source=PathGroup ";")? ("output" ":" output=PathGroup ";")?
		//("result" ":" funcExpr=Expression ";")? "}"
		public Group getGroup() { return cGroup; }

		//{build::Builder}
		public Action getBuilderAction_0() { return cBuilderAction_0; }

		//documentation=DOCUMENTATION?
		public Assignment getDocumentationAssignment_1() { return cDocumentationAssignment_1; }

		//DOCUMENTATION
		public RuleCall getDocumentationDOCUMENTATIONParserRuleCall_1_0() { return cDocumentationDOCUMENTATIONParserRuleCall_1_0; }

		//visibility=Visibility?
		public Assignment getVisibilityAssignment_2() { return cVisibilityAssignment_2; }

		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_2_0() { return cVisibilityVisibilityEnumRuleCall_2_0; }

		//executionMode=ExecutionMode?
		public Assignment getExecutionModeAssignment_3() { return cExecutionModeAssignment_3; }

		//ExecutionMode
		public RuleCall getExecutionModeExecutionModeEnumRuleCall_3_0() { return cExecutionModeExecutionModeEnumRuleCall_3_0; }

		//final?="final"?
		public Assignment getFinalAssignment_4() { return cFinalAssignment_4; }

		//"final"
		public Keyword getFinalFinalKeyword_4_0() { return cFinalFinalKeyword_4_0; }

		//"builder"
		public Keyword getBuilderKeyword_5() { return cBuilderKeyword_5; }

		//name=EscapedQualifiedName
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }

		//EscapedQualifiedName
		public RuleCall getNameEscapedQualifiedNameParserRuleCall_6_0() { return cNameEscapedQualifiedNameParserRuleCall_6_0; }

		//("(" ((explicitUnitType=ParameterDeclarationUnit | parameters+=ParameterDeclarationNotUnit) (","
		//parameters+=ParameterDeclarationNotUnit)* ("," varArgs?="..." parameters+=ParameterDeclarationNotUnit)? // first parameter is always "unit", but is implied to "this unit" if builder is specified in
		//// a build unit
		//// TODO: validation and relevant content proposal
		//| varArgs?="..." parameters+=ParameterDeclarationNotUnit)? ")")?
		public Group getGroup_7() { return cGroup_7; }

		//"("
		public Keyword getLeftParenthesisKeyword_7_0() { return cLeftParenthesisKeyword_7_0; }

		//((explicitUnitType=ParameterDeclarationUnit | parameters+=ParameterDeclarationNotUnit) (","
		//parameters+=ParameterDeclarationNotUnit)* ("," varArgs?="..." parameters+=ParameterDeclarationNotUnit)? // first parameter is always "unit", but is implied to "this unit" if builder is specified in
		//// a build unit
		//// TODO: validation and relevant content proposal
		//| varArgs?="..." parameters+=ParameterDeclarationNotUnit)?
		public Alternatives getAlternatives_7_1() { return cAlternatives_7_1; }

		//(explicitUnitType=ParameterDeclarationUnit | parameters+=ParameterDeclarationNotUnit) (","
		//parameters+=ParameterDeclarationNotUnit)* ("," varArgs?="..." parameters+=ParameterDeclarationNotUnit)?
		public Group getGroup_7_1_0() { return cGroup_7_1_0; }

		//explicitUnitType=ParameterDeclarationUnit | parameters+=ParameterDeclarationNotUnit
		public Alternatives getAlternatives_7_1_0_0() { return cAlternatives_7_1_0_0; }

		//explicitUnitType=ParameterDeclarationUnit
		public Assignment getExplicitUnitTypeAssignment_7_1_0_0_0() { return cExplicitUnitTypeAssignment_7_1_0_0_0; }

		//ParameterDeclarationUnit
		public RuleCall getExplicitUnitTypeParameterDeclarationUnitParserRuleCall_7_1_0_0_0_0() { return cExplicitUnitTypeParameterDeclarationUnitParserRuleCall_7_1_0_0_0_0; }

		//parameters+=ParameterDeclarationNotUnit
		public Assignment getParametersAssignment_7_1_0_0_1() { return cParametersAssignment_7_1_0_0_1; }

		//ParameterDeclarationNotUnit
		public RuleCall getParametersParameterDeclarationNotUnitParserRuleCall_7_1_0_0_1_0() { return cParametersParameterDeclarationNotUnitParserRuleCall_7_1_0_0_1_0; }

		//("," parameters+=ParameterDeclarationNotUnit)*
		public Group getGroup_7_1_0_1() { return cGroup_7_1_0_1; }

		//","
		public Keyword getCommaKeyword_7_1_0_1_0() { return cCommaKeyword_7_1_0_1_0; }

		//parameters+=ParameterDeclarationNotUnit
		public Assignment getParametersAssignment_7_1_0_1_1() { return cParametersAssignment_7_1_0_1_1; }

		//ParameterDeclarationNotUnit
		public RuleCall getParametersParameterDeclarationNotUnitParserRuleCall_7_1_0_1_1_0() { return cParametersParameterDeclarationNotUnitParserRuleCall_7_1_0_1_1_0; }

		//("," varArgs?="..." parameters+=ParameterDeclarationNotUnit)?
		public Group getGroup_7_1_0_2() { return cGroup_7_1_0_2; }

		//","
		public Keyword getCommaKeyword_7_1_0_2_0() { return cCommaKeyword_7_1_0_2_0; }

		//varArgs?="..."
		public Assignment getVarArgsAssignment_7_1_0_2_1() { return cVarArgsAssignment_7_1_0_2_1; }

		//"..."
		public Keyword getVarArgsFullStopFullStopFullStopKeyword_7_1_0_2_1_0() { return cVarArgsFullStopFullStopFullStopKeyword_7_1_0_2_1_0; }

		//parameters+=ParameterDeclarationNotUnit
		public Assignment getParametersAssignment_7_1_0_2_2() { return cParametersAssignment_7_1_0_2_2; }

		//ParameterDeclarationNotUnit
		public RuleCall getParametersParameterDeclarationNotUnitParserRuleCall_7_1_0_2_2_0() { return cParametersParameterDeclarationNotUnitParserRuleCall_7_1_0_2_2_0; }

		//varArgs?="..." parameters+=ParameterDeclarationNotUnit
		public Group getGroup_7_1_1() { return cGroup_7_1_1; }

		//varArgs?="..."
		public Assignment getVarArgsAssignment_7_1_1_0() { return cVarArgsAssignment_7_1_1_0; }

		//"..."
		public Keyword getVarArgsFullStopFullStopFullStopKeyword_7_1_1_0_0() { return cVarArgsFullStopFullStopFullStopKeyword_7_1_1_0_0; }

		//parameters+=ParameterDeclarationNotUnit
		public Assignment getParametersAssignment_7_1_1_1() { return cParametersAssignment_7_1_1_1; }

		//ParameterDeclarationNotUnit
		public RuleCall getParametersParameterDeclarationNotUnitParserRuleCall_7_1_1_1_0() { return cParametersParameterDeclarationNotUnitParserRuleCall_7_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7_2() { return cRightParenthesisKeyword_7_2; }

		//precondExpr=PreCondition?
		public Assignment getPrecondExprAssignment_8() { return cPrecondExprAssignment_8; }

		//PreCondition
		public RuleCall getPrecondExprPreConditionParserRuleCall_8_0() { return cPrecondExprPreConditionParserRuleCall_8_0; }

		//postcondExpr=PostCondition?
		public Assignment getPostcondExprAssignment_9() { return cPostcondExprAssignment_9; }

		//PostCondition
		public RuleCall getPostcondExprPostConditionParserRuleCall_9_0() { return cPostcondExprPostConditionParserRuleCall_9_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_10() { return cLeftCurlyBracketKeyword_10; }

		//(("provides" ":" ("[" providedCapabilities+=ProvidedCapability ("," providedCapabilities+=ProvidedCapability)* "]" |
		//providedCapabilities+=ProvidedCapability) ";")? & defaultProperties=PropertySetDefault?)?
		public UnorderedGroup getUnorderedGroup_11() { return cUnorderedGroup_11; }

		//("provides" ":" ("[" providedCapabilities+=ProvidedCapability ("," providedCapabilities+=ProvidedCapability)* "]" |
		//providedCapabilities+=ProvidedCapability) ";")?
		public Group getGroup_11_0() { return cGroup_11_0; }

		//"provides"
		public Keyword getProvidesKeyword_11_0_0() { return cProvidesKeyword_11_0_0; }

		//":"
		public Keyword getColonKeyword_11_0_1() { return cColonKeyword_11_0_1; }

		//"[" providedCapabilities+=ProvidedCapability ("," providedCapabilities+=ProvidedCapability)* "]" |
		//providedCapabilities+=ProvidedCapability
		public Alternatives getAlternatives_11_0_2() { return cAlternatives_11_0_2; }

		//"[" providedCapabilities+=ProvidedCapability ("," providedCapabilities+=ProvidedCapability)* "]"
		public Group getGroup_11_0_2_0() { return cGroup_11_0_2_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_11_0_2_0_0() { return cLeftSquareBracketKeyword_11_0_2_0_0; }

		//providedCapabilities+=ProvidedCapability
		public Assignment getProvidedCapabilitiesAssignment_11_0_2_0_1() { return cProvidedCapabilitiesAssignment_11_0_2_0_1; }

		//ProvidedCapability
		public RuleCall getProvidedCapabilitiesProvidedCapabilityParserRuleCall_11_0_2_0_1_0() { return cProvidedCapabilitiesProvidedCapabilityParserRuleCall_11_0_2_0_1_0; }

		//("," providedCapabilities+=ProvidedCapability)*
		public Group getGroup_11_0_2_0_2() { return cGroup_11_0_2_0_2; }

		//","
		public Keyword getCommaKeyword_11_0_2_0_2_0() { return cCommaKeyword_11_0_2_0_2_0; }

		//providedCapabilities+=ProvidedCapability
		public Assignment getProvidedCapabilitiesAssignment_11_0_2_0_2_1() { return cProvidedCapabilitiesAssignment_11_0_2_0_2_1; }

		//ProvidedCapability
		public RuleCall getProvidedCapabilitiesProvidedCapabilityParserRuleCall_11_0_2_0_2_1_0() { return cProvidedCapabilitiesProvidedCapabilityParserRuleCall_11_0_2_0_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_11_0_2_0_3() { return cRightSquareBracketKeyword_11_0_2_0_3; }

		//providedCapabilities+=ProvidedCapability
		public Assignment getProvidedCapabilitiesAssignment_11_0_2_1() { return cProvidedCapabilitiesAssignment_11_0_2_1; }

		//ProvidedCapability
		public RuleCall getProvidedCapabilitiesProvidedCapabilityParserRuleCall_11_0_2_1_0() { return cProvidedCapabilitiesProvidedCapabilityParserRuleCall_11_0_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_11_0_3() { return cSemicolonKeyword_11_0_3; }

		//defaultProperties=PropertySetDefault?
		public Assignment getDefaultPropertiesAssignment_11_1() { return cDefaultPropertiesAssignment_11_1; }

		//PropertySetDefault
		public RuleCall getDefaultPropertiesPropertySetDefaultParserRuleCall_11_1_0() { return cDefaultPropertiesPropertySetDefaultParserRuleCall_11_1_0; }

		//("input" ":" input=BuilderInputGroup ";" postinputcondExpr=PostInputCondition?)?
		public Group getGroup_12() { return cGroup_12; }

		//"input"
		public Keyword getInputKeyword_12_0() { return cInputKeyword_12_0; }

		//":"
		public Keyword getColonKeyword_12_1() { return cColonKeyword_12_1; }

		//input=BuilderInputGroup
		public Assignment getInputAssignment_12_2() { return cInputAssignment_12_2; }

		//BuilderInputGroup
		public RuleCall getInputBuilderInputGroupParserRuleCall_12_2_0() { return cInputBuilderInputGroupParserRuleCall_12_2_0; }

		//";"
		public Keyword getSemicolonKeyword_12_3() { return cSemicolonKeyword_12_3; }

		//postinputcondExpr=PostInputCondition?
		public Assignment getPostinputcondExprAssignment_12_4() { return cPostinputcondExprAssignment_12_4; }

		//PostInputCondition
		public RuleCall getPostinputcondExprPostInputConditionParserRuleCall_12_4_0() { return cPostinputcondExprPostInputConditionParserRuleCall_12_4_0; }

		//("source" ":" source=PathGroup ";")?
		public Group getGroup_13() { return cGroup_13; }

		//"source"
		public Keyword getSourceKeyword_13_0() { return cSourceKeyword_13_0; }

		//":"
		public Keyword getColonKeyword_13_1() { return cColonKeyword_13_1; }

		//source=PathGroup
		public Assignment getSourceAssignment_13_2() { return cSourceAssignment_13_2; }

		//PathGroup
		public RuleCall getSourcePathGroupParserRuleCall_13_2_0() { return cSourcePathGroupParserRuleCall_13_2_0; }

		//";"
		public Keyword getSemicolonKeyword_13_3() { return cSemicolonKeyword_13_3; }

		//("output" ":" output=PathGroup ";")?
		public Group getGroup_14() { return cGroup_14; }

		//"output"
		public Keyword getOutputKeyword_14_0() { return cOutputKeyword_14_0; }

		//":"
		public Keyword getColonKeyword_14_1() { return cColonKeyword_14_1; }

		//output=PathGroup
		public Assignment getOutputAssignment_14_2() { return cOutputAssignment_14_2; }

		//PathGroup
		public RuleCall getOutputPathGroupParserRuleCall_14_2_0() { return cOutputPathGroupParserRuleCall_14_2_0; }

		//";"
		public Keyword getSemicolonKeyword_14_3() { return cSemicolonKeyword_14_3; }

		//("result" ":" funcExpr=Expression ";")?
		public Group getGroup_15() { return cGroup_15; }

		//"result"
		public Keyword getResultKeyword_15_0() { return cResultKeyword_15_0; }

		//":"
		public Keyword getColonKeyword_15_1() { return cColonKeyword_15_1; }

		//funcExpr=Expression
		public Assignment getFuncExprAssignment_15_2() { return cFuncExprAssignment_15_2; }

		//Expression
		public RuleCall getFuncExprExpressionParserRuleCall_15_2_0() { return cFuncExprExpressionParserRuleCall_15_2_0; }

		//";"
		public Keyword getSemicolonKeyword_15_3() { return cSemicolonKeyword_15_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_16() { return cRightCurlyBracketKeyword_16; }
	}

	public class PreConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PreCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPreconditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PreCondition returns be::BExpression:
		//	"@precondition" ":" Expression ";";
		public ParserRule getRule() { return rule; }

		//"@precondition" ":" Expression ";"
		public Group getGroup() { return cGroup; }

		//"@precondition"
		public Keyword getPreconditionKeyword_0() { return cPreconditionKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//Expression
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class PostConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PostCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPostconditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PostCondition returns be::BExpression:
		//	"@postcondition" ":" Expression ";";
		public ParserRule getRule() { return rule; }

		//"@postcondition" ":" Expression ";"
		public Group getGroup() { return cGroup; }

		//"@postcondition"
		public Keyword getPostconditionKeyword_0() { return cPostconditionKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//Expression
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class PostInputConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PostInputCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPostinputconditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PostInputCondition returns be::BExpression:
		//	"@postinputcondition" ":" Expression ";";
		public ParserRule getRule() { return rule; }

		//"@postinputcondition" ":" Expression ";"
		public Group getGroup() { return cGroup; }

		//"@postinputcondition"
		public Keyword getPostinputconditionKeyword_0() { return cPostinputconditionKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//Expression
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBParameterListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cParametersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParametersParameterOrClosureParserRuleCall_1_0 = (RuleCall)cParametersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersParameterOrClosureParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		
		//ParameterList returns be::BParameterList:
		//	{be::BParameterList} parameters+=ParameterOrClosure ("," parameters+=ParameterOrClosure)*;
		public ParserRule getRule() { return rule; }

		//{be::BParameterList} parameters+=ParameterOrClosure ("," parameters+=ParameterOrClosure)*
		public Group getGroup() { return cGroup; }

		//{be::BParameterList}
		public Action getBParameterListAction_0() { return cBParameterListAction_0; }

		//parameters+=ParameterOrClosure
		public Assignment getParametersAssignment_1() { return cParametersAssignment_1; }

		//ParameterOrClosure
		public RuleCall getParametersParameterOrClosureParserRuleCall_1_0() { return cParametersParameterOrClosureParserRuleCall_1_0; }

		//("," parameters+=ParameterOrClosure)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//parameters+=ParameterOrClosure
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }

		//ParameterOrClosure
		public RuleCall getParametersParameterOrClosureParserRuleCall_2_1_0() { return cParametersParameterOrClosureParserRuleCall_2_1_0; }
	}

	public class ParameterOrClosureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterOrClosure");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClosureParameterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ParameterOrClosure returns be::BParameter:
		//	ClosureParameter | Parameter;
		public ParserRule getRule() { return rule; }

		//ClosureParameter | Parameter
		public Alternatives getAlternatives() { return cAlternatives; }

		//ClosureParameter
		public RuleCall getClosureParameterParserRuleCall_0() { return cClosureParameterParserRuleCall_0; }

		//Parameter
		public RuleCall getParameterParserRuleCall_1() { return cParameterParserRuleCall_1; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//Parameter returns be::BParameter:
		//	{be::BParameter} expr=Expression;
		public ParserRule getRule() { return rule; }

		//{be::BParameter} expr=Expression
		public Group getGroup() { return cGroup; }

		//{be::BParameter}
		public Action getBParameterAction_0() { return cBParameterAction_0; }

		//expr=Expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }
	}

	public class ClosureParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClosureParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprClosureExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//ClosureParameter returns be::BParameter:
		//	{be::BParameter} expr=ClosureExpression;
		public ParserRule getRule() { return rule; }

		//{be::BParameter} expr=ClosureExpression
		public Group getGroup() { return cGroup; }

		//{be::BParameter}
		public Action getBParameterAction_0() { return cBParameterAction_0; }

		//expr=ClosureExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//ClosureExpression
		public RuleCall getExprClosureExpressionParserRuleCall_1_0() { return cExprClosureExpressionParserRuleCall_1_0; }
	}

	public class ParameterDeclarationOptTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterDeclarationOptType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBParameterDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTypeTypeRefParserRuleCall_1_0_0 = (RuleCall)cTypeAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameID_or_KWParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		
		//ParameterDeclarationOptType returns be::BParameterDeclaration:
		//	{be::BParameterDeclaration} (type=TypeRef? name=ID_or_KW);
		public ParserRule getRule() { return rule; }

		//{be::BParameterDeclaration} (type=TypeRef? name=ID_or_KW)
		public Group getGroup() { return cGroup; }

		//{be::BParameterDeclaration}
		public Action getBParameterDeclarationAction_0() { return cBParameterDeclarationAction_0; }

		//type=TypeRef? name=ID_or_KW
		public Group getGroup_1() { return cGroup_1; }

		//type=TypeRef?
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }

		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_1_0_0() { return cTypeTypeRefParserRuleCall_1_0_0; }

		//name=ID_or_KW
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID_or_KW
		public RuleCall getNameID_or_KWParserRuleCall_1_1_0() { return cNameID_or_KWParserRuleCall_1_1_0; }
	}

	public class ParameterDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBParameterDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeRefParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameID_or_KWParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ParameterDeclaration returns be::BParameterDeclaration:
		//	{be::BParameterDeclaration} type=TypeRef name=ID_or_KW;
		public ParserRule getRule() { return rule; }

		//{be::BParameterDeclaration} type=TypeRef name=ID_or_KW
		public Group getGroup() { return cGroup; }

		//{be::BParameterDeclaration}
		public Action getBParameterDeclarationAction_0() { return cBParameterDeclarationAction_0; }

		//type=TypeRef
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_1_0() { return cTypeTypeRefParserRuleCall_1_0; }

		//name=ID_or_KW
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID_or_KW
		public RuleCall getNameID_or_KWParserRuleCall_2_0() { return cNameID_or_KWParserRuleCall_2_0; }
	}

	public class ParameterDeclarationUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterDeclarationUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBParameterDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeRefParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNameUnitKeyword_2_0 = (Keyword)cNameAssignment_2.eContents().get(0);
		
		//ParameterDeclarationUnit returns be::BParameterDeclaration:
		//	{be::BParameterDeclaration} type=TypeRef name="unit";
		public ParserRule getRule() { return rule; }

		//{be::BParameterDeclaration} type=TypeRef name="unit"
		public Group getGroup() { return cGroup; }

		//{be::BParameterDeclaration}
		public Action getBParameterDeclarationAction_0() { return cBParameterDeclarationAction_0; }

		//type=TypeRef
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_1_0() { return cTypeTypeRefParserRuleCall_1_0; }

		//name="unit"
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//"unit"
		public Keyword getNameUnitKeyword_2_0() { return cNameUnitKeyword_2_0; }
	}

	public class ParameterDeclarationNotUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterDeclarationNotUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBParameterDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeRefParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameID_or_KW_NO_UNITParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//// Used in Builder where the first paramter can be called unit, but not others	
		//ParameterDeclarationNotUnit returns be::BParameterDeclaration:
		//	{be::BParameterDeclaration} type=TypeRef name=ID_or_KW_NO_UNIT;
		public ParserRule getRule() { return rule; }

		//{be::BParameterDeclaration} type=TypeRef name=ID_or_KW_NO_UNIT
		public Group getGroup() { return cGroup; }

		//{be::BParameterDeclaration}
		public Action getBParameterDeclarationAction_0() { return cBParameterDeclarationAction_0; }

		//type=TypeRef
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_1_0() { return cTypeTypeRefParserRuleCall_1_0; }

		//name=ID_or_KW_NO_UNIT
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID_or_KW_NO_UNIT
		public RuleCall getNameID_or_KW_NO_UNITParserRuleCall_2_0() { return cNameID_or_KW_NO_UNITParserRuleCall_2_0; }
	}

	public class BuilderInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuilderInput");
		private final RuleCall cBuilderInputNamedParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//BuilderInput returns build::BuilderInput:
		//	BuilderInputNamed;
		public ParserRule getRule() { return rule; }

		//BuilderInputNamed
		public RuleCall getBuilderInputNamedParserRuleCall() { return cBuilderInputNamedParserRuleCall; }
	}

	public class RepositoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Repository");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRepositoryAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDocumentationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDocumentationDOCUMENTATIONParserRuleCall_1_0 = (RuleCall)cDocumentationAssignment_1.eContents().get(0);
		private final Keyword cRepositoryKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cHandlerTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHandlerTypeIDTerminalRuleCall_3_0 = (RuleCall)cHandlerTypeAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cColonKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Keyword cConnectionKeyword_5_0_1 = (Keyword)cGroup_5_0.eContents().get(1);
		private final Keyword cColonKeyword_5_0_2 = (Keyword)cGroup_5_0.eContents().get(2);
		private final Assignment cAddressAssignment_5_0_3 = (Assignment)cGroup_5_0.eContents().get(3);
		private final RuleCall cAddressExpressionParserRuleCall_5_0_3_0 = (RuleCall)cAddressAssignment_5_0_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_0_4 = (Keyword)cGroup_5_0.eContents().get(4);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Group cGroup_5_1_1 = (Group)cGroup_5_1.eContents().get(1);
		private final Keyword cConnectionKeyword_5_1_1_0 = (Keyword)cGroup_5_1_1.eContents().get(0);
		private final Keyword cColonKeyword_5_1_1_1 = (Keyword)cGroup_5_1_1.eContents().get(1);
		private final Assignment cAddressAssignment_5_1_1_2 = (Assignment)cGroup_5_1_1.eContents().get(2);
		private final RuleCall cAddressExpressionParserRuleCall_5_1_1_2_0 = (RuleCall)cAddressAssignment_5_1_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1_1_3 = (Keyword)cGroup_5_1_1.eContents().get(3);
		private final Assignment cOptionsAssignment_5_1_2 = (Assignment)cGroup_5_1.eContents().get(2);
		private final RuleCall cOptionsRepoOptionParserRuleCall_5_1_2_0 = (RuleCall)cOptionsAssignment_5_1_2.eContents().get(0);
		private final Group cGroup_5_1_3 = (Group)cGroup_5_1.eContents().get(3);
		private final Keyword cBranchesKeyword_5_1_3_0 = (Keyword)cGroup_5_1_3.eContents().get(0);
		private final Keyword cColonKeyword_5_1_3_1 = (Keyword)cGroup_5_1_3.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_5_1_3_2 = (Keyword)cGroup_5_1_3.eContents().get(2);
		private final Assignment cBranchesAssignment_5_1_3_3 = (Assignment)cGroup_5_1_3.eContents().get(3);
		private final RuleCall cBranchesBranchParserRuleCall_5_1_3_3_0 = (RuleCall)cBranchesAssignment_5_1_3_3.eContents().get(0);
		private final Group cGroup_5_1_3_4 = (Group)cGroup_5_1_3.eContents().get(4);
		private final Keyword cCommaKeyword_5_1_3_4_0 = (Keyword)cGroup_5_1_3_4.eContents().get(0);
		private final Assignment cBranchesAssignment_5_1_3_4_1 = (Assignment)cGroup_5_1_3_4.eContents().get(1);
		private final RuleCall cBranchesBranchParserRuleCall_5_1_3_4_1_0 = (RuleCall)cBranchesAssignment_5_1_3_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_1_3_5 = (Keyword)cGroup_5_1_3.eContents().get(5);
		private final Keyword cSemicolonKeyword_5_1_3_6 = (Keyword)cGroup_5_1_3.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_5_1_4 = (Keyword)cGroup_5_1.eContents().get(4);
		
		////	prerequisites += Prerequisite (',' prerequisites += Prerequisite)*
		////	;
		//Repository returns build::Repository:
		//	{build::Repository} documentation=DOCUMENTATION? "repository" handlerType=ID name=ID (":" "connection" ":"
		//	address=Expression ";" | "{" ("connection" ":" address=Expression ";")? options+=RepoOption* ("branches" ":" "["
		//	branches+=Branch ("," branches+=Branch)* "]" ";")? "}");
		public ParserRule getRule() { return rule; }

		//{build::Repository} documentation=DOCUMENTATION? "repository" handlerType=ID name=ID (":" "connection" ":"
		//address=Expression ";" | "{" ("connection" ":" address=Expression ";")? options+=RepoOption* ("branches" ":" "["
		//branches+=Branch ("," branches+=Branch)* "]" ";")? "}")
		public Group getGroup() { return cGroup; }

		//{build::Repository}
		public Action getRepositoryAction_0() { return cRepositoryAction_0; }

		//documentation=DOCUMENTATION?
		public Assignment getDocumentationAssignment_1() { return cDocumentationAssignment_1; }

		//DOCUMENTATION
		public RuleCall getDocumentationDOCUMENTATIONParserRuleCall_1_0() { return cDocumentationDOCUMENTATIONParserRuleCall_1_0; }

		//"repository"
		public Keyword getRepositoryKeyword_2() { return cRepositoryKeyword_2; }

		//handlerType=ID
		public Assignment getHandlerTypeAssignment_3() { return cHandlerTypeAssignment_3; }

		//ID
		public RuleCall getHandlerTypeIDTerminalRuleCall_3_0() { return cHandlerTypeIDTerminalRuleCall_3_0; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }

		//":" "connection" ":" address=Expression ";" | "{" ("connection" ":" address=Expression ";")? options+=RepoOption*
		//("branches" ":" "[" branches+=Branch ("," branches+=Branch)* "]" ";")? "}"
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//":" "connection" ":" address=Expression ";"
		public Group getGroup_5_0() { return cGroup_5_0; }

		//":"
		public Keyword getColonKeyword_5_0_0() { return cColonKeyword_5_0_0; }

		//"connection"
		public Keyword getConnectionKeyword_5_0_1() { return cConnectionKeyword_5_0_1; }

		//":"
		public Keyword getColonKeyword_5_0_2() { return cColonKeyword_5_0_2; }

		//address=Expression
		public Assignment getAddressAssignment_5_0_3() { return cAddressAssignment_5_0_3; }

		//Expression
		public RuleCall getAddressExpressionParserRuleCall_5_0_3_0() { return cAddressExpressionParserRuleCall_5_0_3_0; }

		//";"
		public Keyword getSemicolonKeyword_5_0_4() { return cSemicolonKeyword_5_0_4; }

		//"{" ("connection" ":" address=Expression ";")? options+=RepoOption* ("branches" ":" "[" branches+=Branch (","
		//branches+=Branch)* "]" ";")? "}"
		public Group getGroup_5_1() { return cGroup_5_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_1_0() { return cLeftCurlyBracketKeyword_5_1_0; }

		//("connection" ":" address=Expression ";")?
		public Group getGroup_5_1_1() { return cGroup_5_1_1; }

		//"connection"
		public Keyword getConnectionKeyword_5_1_1_0() { return cConnectionKeyword_5_1_1_0; }

		//":"
		public Keyword getColonKeyword_5_1_1_1() { return cColonKeyword_5_1_1_1; }

		//address=Expression
		public Assignment getAddressAssignment_5_1_1_2() { return cAddressAssignment_5_1_1_2; }

		//Expression
		public RuleCall getAddressExpressionParserRuleCall_5_1_1_2_0() { return cAddressExpressionParserRuleCall_5_1_1_2_0; }

		//";"
		public Keyword getSemicolonKeyword_5_1_1_3() { return cSemicolonKeyword_5_1_1_3; }

		//options+=RepoOption*
		public Assignment getOptionsAssignment_5_1_2() { return cOptionsAssignment_5_1_2; }

		//RepoOption
		public RuleCall getOptionsRepoOptionParserRuleCall_5_1_2_0() { return cOptionsRepoOptionParserRuleCall_5_1_2_0; }

		//("branches" ":" "[" branches+=Branch ("," branches+=Branch)* "]" ";")?
		public Group getGroup_5_1_3() { return cGroup_5_1_3; }

		//"branches"
		public Keyword getBranchesKeyword_5_1_3_0() { return cBranchesKeyword_5_1_3_0; }

		//":"
		public Keyword getColonKeyword_5_1_3_1() { return cColonKeyword_5_1_3_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_5_1_3_2() { return cLeftSquareBracketKeyword_5_1_3_2; }

		//branches+=Branch
		public Assignment getBranchesAssignment_5_1_3_3() { return cBranchesAssignment_5_1_3_3; }

		//Branch
		public RuleCall getBranchesBranchParserRuleCall_5_1_3_3_0() { return cBranchesBranchParserRuleCall_5_1_3_3_0; }

		//("," branches+=Branch)*
		public Group getGroup_5_1_3_4() { return cGroup_5_1_3_4; }

		//","
		public Keyword getCommaKeyword_5_1_3_4_0() { return cCommaKeyword_5_1_3_4_0; }

		//branches+=Branch
		public Assignment getBranchesAssignment_5_1_3_4_1() { return cBranchesAssignment_5_1_3_4_1; }

		//Branch
		public RuleCall getBranchesBranchParserRuleCall_5_1_3_4_1_0() { return cBranchesBranchParserRuleCall_5_1_3_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5_1_3_5() { return cRightSquareBracketKeyword_5_1_3_5; }

		//";"
		public Keyword getSemicolonKeyword_5_1_3_6() { return cSemicolonKeyword_5_1_3_6; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_1_4() { return cRightCurlyBracketKeyword_5_1_4; }
	}

	public class MergeStrategyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MergeStrategy");
		private final RuleCall cID_or_KWParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////enum BranchPointTypeTs returns build::BranchPointType : Timestamp="timestamp" ;
		////enum
		//MergeStrategy returns build::MergeConflictStrategy:
		//	ID_or_KW;
		public ParserRule getRule() { return rule; }

		//ID_or_KW
		public RuleCall getID_or_KWParserRuleCall() { return cID_or_KWParserRuleCall; }
	}

	public class TriStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TriState");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDefaultKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//TriState returns build::TriState:
		//	"true" | "false" | "default";
		public ParserRule getRule() { return rule; }

		//"true" | "false" | "default"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }

		//"default"
		public Keyword getDefaultKeyword_2() { return cDefaultKeyword_2; }
	}

	public class BranchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Branch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBranchAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDocumentationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDocumentationDOCUMENTATIONParserRuleCall_1_0 = (RuleCall)cDocumentationAssignment_1.eContents().get(0);
		private final Keyword cBranchKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEscapedQualifiedNameParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final UnorderedGroup cUnorderedGroup_5 = (UnorderedGroup)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_5_0 = (Alternatives)cUnorderedGroup_5.eContents().get(0);
		private final Group cGroup_5_0_0 = (Group)cAlternatives_5_0.eContents().get(0);
		private final Assignment cBranchPointTypeAssignment_5_0_0_0 = (Assignment)cGroup_5_0_0.eContents().get(0);
		private final RuleCall cBranchPointTypeBranchPointTypeLatestEnumRuleCall_5_0_0_0_0 = (RuleCall)cBranchPointTypeAssignment_5_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_0_0_1 = (Keyword)cGroup_5_0_0.eContents().get(1);
		private final Group cGroup_5_0_1 = (Group)cAlternatives_5_0.eContents().get(1);
		private final Assignment cBranchPointTypeAssignment_5_0_1_0 = (Assignment)cGroup_5_0_1.eContents().get(0);
		private final RuleCall cBranchPointTypeBranchPointTypeOtherEnumRuleCall_5_0_1_0_0 = (RuleCall)cBranchPointTypeAssignment_5_0_1_0.eContents().get(0);
		private final Keyword cColonKeyword_5_0_1_1 = (Keyword)cGroup_5_0_1.eContents().get(1);
		private final Assignment cBranchPointAssignment_5_0_1_2 = (Assignment)cGroup_5_0_1.eContents().get(2);
		private final RuleCall cBranchPointExpressionParserRuleCall_5_0_1_2_0 = (RuleCall)cBranchPointAssignment_5_0_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_0_1_3 = (Keyword)cGroup_5_0_1.eContents().get(3);
		private final Group cGroup_5_1 = (Group)cUnorderedGroup_5.eContents().get(1);
		private final Keyword cPolicyKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Keyword cColonKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5_1_2 = (Keyword)cGroup_5_1.eContents().get(2);
		private final Group cGroup_5_1_3 = (Group)cGroup_5_1.eContents().get(3);
		private final Group cGroup_5_1_3_0 = (Group)cGroup_5_1_3.eContents().get(0);
		private final Keyword cCheckoutContentKeyword_5_1_3_0_0 = (Keyword)cGroup_5_1_3_0.eContents().get(0);
		private final Keyword cColonKeyword_5_1_3_0_1 = (Keyword)cGroup_5_1_3_0.eContents().get(1);
		private final Assignment cCheckoutAssignment_5_1_3_0_2 = (Assignment)cGroup_5_1_3_0.eContents().get(2);
		private final RuleCall cCheckoutTriStateParserRuleCall_5_1_3_0_2_0 = (RuleCall)cCheckoutAssignment_5_1_3_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1_3_0_3 = (Keyword)cGroup_5_1_3_0.eContents().get(3);
		private final Alternatives cAlternatives_5_1_3_1 = (Alternatives)cGroup_5_1_3.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_5_1_3_1_0 = (UnorderedGroup)cAlternatives_5_1_3_1.eContents().get(0);
		private final Group cGroup_5_1_3_1_0_0 = (Group)cUnorderedGroup_5_1_3_1_0.eContents().get(0);
		private final Keyword cAcceptDirtyKeyword_5_1_3_1_0_0_0 = (Keyword)cGroup_5_1_3_1_0_0.eContents().get(0);
		private final Keyword cColonKeyword_5_1_3_1_0_0_1 = (Keyword)cGroup_5_1_3_1_0_0.eContents().get(1);
		private final Assignment cAcceptDirtyAssignment_5_1_3_1_0_0_2 = (Assignment)cGroup_5_1_3_1_0_0.eContents().get(2);
		private final RuleCall cAcceptDirtyTriStateParserRuleCall_5_1_3_1_0_0_2_0 = (RuleCall)cAcceptDirtyAssignment_5_1_3_1_0_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1_3_1_0_0_3 = (Keyword)cGroup_5_1_3_1_0_0.eContents().get(3);
		private final Group cGroup_5_1_3_1_0_1 = (Group)cUnorderedGroup_5_1_3_1_0.eContents().get(1);
		private final Keyword cUpdateContentKeyword_5_1_3_1_0_1_0 = (Keyword)cGroup_5_1_3_1_0_1.eContents().get(0);
		private final Keyword cColonKeyword_5_1_3_1_0_1_1 = (Keyword)cGroup_5_1_3_1_0_1.eContents().get(1);
		private final Assignment cUpdateAssignment_5_1_3_1_0_1_2 = (Assignment)cGroup_5_1_3_1_0_1.eContents().get(2);
		private final RuleCall cUpdateTriStateParserRuleCall_5_1_3_1_0_1_2_0 = (RuleCall)cUpdateAssignment_5_1_3_1_0_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1_3_1_0_1_3 = (Keyword)cGroup_5_1_3_1_0_1.eContents().get(3);
		private final Group cGroup_5_1_3_1_0_2 = (Group)cUnorderedGroup_5_1_3_1_0.eContents().get(2);
		private final Keyword cOnMergeConflictKeyword_5_1_3_1_0_2_0 = (Keyword)cGroup_5_1_3_1_0_2.eContents().get(0);
		private final Keyword cColonKeyword_5_1_3_1_0_2_1 = (Keyword)cGroup_5_1_3_1_0_2.eContents().get(1);
		private final Assignment cMergeStrategyAssignment_5_1_3_1_0_2_2 = (Assignment)cGroup_5_1_3_1_0_2.eContents().get(2);
		private final RuleCall cMergeStrategyMergeStrategyParserRuleCall_5_1_3_1_0_2_2_0 = (RuleCall)cMergeStrategyAssignment_5_1_3_1_0_2_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1_3_1_0_2_3 = (Keyword)cGroup_5_1_3_1_0_2.eContents().get(3);
		private final Group cGroup_5_1_3_1_1 = (Group)cAlternatives_5_1_3_1.eContents().get(1);
		private final Keyword cReplaceContentKeyword_5_1_3_1_1_0 = (Keyword)cGroup_5_1_3_1_1.eContents().get(0);
		private final Keyword cColonKeyword_5_1_3_1_1_1 = (Keyword)cGroup_5_1_3_1_1.eContents().get(1);
		private final Assignment cReplaceAssignment_5_1_3_1_1_2 = (Assignment)cGroup_5_1_3_1_1.eContents().get(2);
		private final RuleCall cReplaceTriStateParserRuleCall_5_1_3_1_1_2_0 = (RuleCall)cReplaceAssignment_5_1_3_1_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1_3_1_1_3 = (Keyword)cGroup_5_1_3_1_1.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_5_1_4 = (Keyword)cGroup_5_1.eContents().get(4);
		private final Keyword cSemicolonKeyword_5_1_5 = (Keyword)cGroup_5_1.eContents().get(5);
		private final Group cGroup_5_2 = (Group)cUnorderedGroup_5.eContents().get(2);
		private final Keyword cExcludeKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Keyword cColonKeyword_5_2_1 = (Keyword)cGroup_5_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_5_2_2 = (Keyword)cGroup_5_2.eContents().get(2);
		private final Assignment cExcludeAssignment_5_2_3 = (Assignment)cGroup_5_2.eContents().get(3);
		private final RuleCall cExcludeNamePredicateParserRuleCall_5_2_3_0 = (RuleCall)cExcludeAssignment_5_2_3.eContents().get(0);
		private final Group cGroup_5_2_4 = (Group)cGroup_5_2.eContents().get(4);
		private final Keyword cCommaKeyword_5_2_4_0 = (Keyword)cGroup_5_2_4.eContents().get(0);
		private final Assignment cExcludeAssignment_5_2_4_1 = (Assignment)cGroup_5_2_4.eContents().get(1);
		private final RuleCall cExcludeNamePredicateParserRuleCall_5_2_4_1_0 = (RuleCall)cExcludeAssignment_5_2_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_2_5 = (Keyword)cGroup_5_2.eContents().get(5);
		private final Keyword cSemicolonKeyword_5_2_6 = (Keyword)cGroup_5_2.eContents().get(6);
		private final Group cGroup_5_3 = (Group)cUnorderedGroup_5.eContents().get(3);
		private final Keyword cIncludeKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Keyword cColonKeyword_5_3_1 = (Keyword)cGroup_5_3.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_5_3_2 = (Keyword)cGroup_5_3.eContents().get(2);
		private final Assignment cIncludeAssignment_5_3_3 = (Assignment)cGroup_5_3.eContents().get(3);
		private final RuleCall cIncludeNamePredicateParserRuleCall_5_3_3_0 = (RuleCall)cIncludeAssignment_5_3_3.eContents().get(0);
		private final Group cGroup_5_3_4 = (Group)cGroup_5_3.eContents().get(4);
		private final Keyword cCommaKeyword_5_3_4_0 = (Keyword)cGroup_5_3_4.eContents().get(0);
		private final Assignment cIncludeAssignment_5_3_4_1 = (Assignment)cGroup_5_3_4.eContents().get(1);
		private final RuleCall cIncludeNamePredicateParserRuleCall_5_3_4_1_0 = (RuleCall)cIncludeAssignment_5_3_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_3_5 = (Keyword)cGroup_5_3.eContents().get(5);
		private final Keyword cSemicolonKeyword_5_3_6 = (Keyword)cGroup_5_3.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////	  FailModified = "fail-modified"
		////	| KeepModified = "keep-modified"
		////	| Merge = "merge-modified"
		////	| NoUpdate = "no-update"
		////	| ReplaceModified = "replace-modified"
		////	| BranchPointDefault = "default"
		////;
		////		  | (branchPointType = BranchPointTypeTs branchPointTs = TIMESTAMP ';') 
		//Branch returns build::Branch:
		//	{build::Branch} documentation=DOCUMENTATION? "branch" name=EscapedQualifiedName "{"
		//	((branchPointType=BranchPointTypeLatest ";" | branchPointType=BranchPointTypeOther ":" branchPoint=Expression ";")? &
		//	("policy" ":" "{" (("checkout-content" ":" checkout=TriState ";")? (("accept-dirty" ":" acceptDirty=TriState ";")? &
		//	("update-content" ":" update=TriState ";")? & ("on-merge-conflict" ":" mergeStrategy=MergeStrategy ";")? |
		//	"replace-content" ":" replace=TriState ";"))? "}" ";")? & ("exclude" ":" "[" exclude+=NamePredicate (","
		//	exclude+=NamePredicate)* "]" ";")? & ("include" ":" "[" include+=NamePredicate ("," include+=NamePredicate)* "]"
		//	";")?) "}";
		public ParserRule getRule() { return rule; }

		//{build::Branch} documentation=DOCUMENTATION? "branch" name=EscapedQualifiedName "{"
		//((branchPointType=BranchPointTypeLatest ";" | branchPointType=BranchPointTypeOther ":" branchPoint=Expression ";")? &
		//("policy" ":" "{" (("checkout-content" ":" checkout=TriState ";")? (("accept-dirty" ":" acceptDirty=TriState ";")? &
		//("update-content" ":" update=TriState ";")? & ("on-merge-conflict" ":" mergeStrategy=MergeStrategy ";")? |
		//"replace-content" ":" replace=TriState ";"))? "}" ";")? & ("exclude" ":" "[" exclude+=NamePredicate (","
		//exclude+=NamePredicate)* "]" ";")? & ("include" ":" "[" include+=NamePredicate ("," include+=NamePredicate)* "]" ";")?)
		//"}"
		public Group getGroup() { return cGroup; }

		//{build::Branch}
		public Action getBranchAction_0() { return cBranchAction_0; }

		//documentation=DOCUMENTATION?
		public Assignment getDocumentationAssignment_1() { return cDocumentationAssignment_1; }

		//DOCUMENTATION
		public RuleCall getDocumentationDOCUMENTATIONParserRuleCall_1_0() { return cDocumentationDOCUMENTATIONParserRuleCall_1_0; }

		//"branch"
		public Keyword getBranchKeyword_2() { return cBranchKeyword_2; }

		//name=EscapedQualifiedName
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//EscapedQualifiedName
		public RuleCall getNameEscapedQualifiedNameParserRuleCall_3_0() { return cNameEscapedQualifiedNameParserRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//(branchPointType=BranchPointTypeLatest ";" | branchPointType=BranchPointTypeOther ":" branchPoint=Expression ";")? &
		//("policy" ":" "{" (("checkout-content" ":" checkout=TriState ";")? (("accept-dirty" ":" acceptDirty=TriState ";")? &
		//("update-content" ":" update=TriState ";")? & ("on-merge-conflict" ":" mergeStrategy=MergeStrategy ";")? |
		//"replace-content" ":" replace=TriState ";"))? "}" ";")? & ("exclude" ":" "[" exclude+=NamePredicate (","
		//exclude+=NamePredicate)* "]" ";")? & ("include" ":" "[" include+=NamePredicate ("," include+=NamePredicate)* "]" ";")?
		public UnorderedGroup getUnorderedGroup_5() { return cUnorderedGroup_5; }

		//(branchPointType=BranchPointTypeLatest ";" | branchPointType=BranchPointTypeOther ":" branchPoint=Expression ";")?
		public Alternatives getAlternatives_5_0() { return cAlternatives_5_0; }

		//branchPointType=BranchPointTypeLatest ";"
		public Group getGroup_5_0_0() { return cGroup_5_0_0; }

		//branchPointType=BranchPointTypeLatest
		public Assignment getBranchPointTypeAssignment_5_0_0_0() { return cBranchPointTypeAssignment_5_0_0_0; }

		//BranchPointTypeLatest
		public RuleCall getBranchPointTypeBranchPointTypeLatestEnumRuleCall_5_0_0_0_0() { return cBranchPointTypeBranchPointTypeLatestEnumRuleCall_5_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_5_0_0_1() { return cSemicolonKeyword_5_0_0_1; }

		//branchPointType=BranchPointTypeOther ":" branchPoint=Expression ";"
		public Group getGroup_5_0_1() { return cGroup_5_0_1; }

		//branchPointType=BranchPointTypeOther
		public Assignment getBranchPointTypeAssignment_5_0_1_0() { return cBranchPointTypeAssignment_5_0_1_0; }

		//BranchPointTypeOther
		public RuleCall getBranchPointTypeBranchPointTypeOtherEnumRuleCall_5_0_1_0_0() { return cBranchPointTypeBranchPointTypeOtherEnumRuleCall_5_0_1_0_0; }

		//":"
		public Keyword getColonKeyword_5_0_1_1() { return cColonKeyword_5_0_1_1; }

		//branchPoint=Expression
		public Assignment getBranchPointAssignment_5_0_1_2() { return cBranchPointAssignment_5_0_1_2; }

		//Expression
		public RuleCall getBranchPointExpressionParserRuleCall_5_0_1_2_0() { return cBranchPointExpressionParserRuleCall_5_0_1_2_0; }

		//";"
		public Keyword getSemicolonKeyword_5_0_1_3() { return cSemicolonKeyword_5_0_1_3; }

		//("policy" ":" "{" (("checkout-content" ":" checkout=TriState ";")? (("accept-dirty" ":" acceptDirty=TriState ";")? &
		//("update-content" ":" update=TriState ";")? & ("on-merge-conflict" ":" mergeStrategy=MergeStrategy ";")? |
		//"replace-content" ":" replace=TriState ";"))? "}" ";")?
		public Group getGroup_5_1() { return cGroup_5_1; }

		//"policy"
		public Keyword getPolicyKeyword_5_1_0() { return cPolicyKeyword_5_1_0; }

		//":"
		public Keyword getColonKeyword_5_1_1() { return cColonKeyword_5_1_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_1_2() { return cLeftCurlyBracketKeyword_5_1_2; }

		//(("checkout-content" ":" checkout=TriState ";")? (("accept-dirty" ":" acceptDirty=TriState ";")? & ("update-content" ":"
		//update=TriState ";")? & ("on-merge-conflict" ":" mergeStrategy=MergeStrategy ";")? | "replace-content" ":"
		//replace=TriState ";"))?
		public Group getGroup_5_1_3() { return cGroup_5_1_3; }

		//("checkout-content" ":" checkout=TriState ";")?
		public Group getGroup_5_1_3_0() { return cGroup_5_1_3_0; }

		//"checkout-content"
		public Keyword getCheckoutContentKeyword_5_1_3_0_0() { return cCheckoutContentKeyword_5_1_3_0_0; }

		//":"
		public Keyword getColonKeyword_5_1_3_0_1() { return cColonKeyword_5_1_3_0_1; }

		//checkout=TriState
		public Assignment getCheckoutAssignment_5_1_3_0_2() { return cCheckoutAssignment_5_1_3_0_2; }

		//TriState
		public RuleCall getCheckoutTriStateParserRuleCall_5_1_3_0_2_0() { return cCheckoutTriStateParserRuleCall_5_1_3_0_2_0; }

		//";"
		public Keyword getSemicolonKeyword_5_1_3_0_3() { return cSemicolonKeyword_5_1_3_0_3; }

		//("accept-dirty" ":" acceptDirty=TriState ";")? & ("update-content" ":" update=TriState ";")? & ("on-merge-conflict" ":"
		//mergeStrategy=MergeStrategy ";")? | "replace-content" ":" replace=TriState ";"
		public Alternatives getAlternatives_5_1_3_1() { return cAlternatives_5_1_3_1; }

		//("accept-dirty" ":" acceptDirty=TriState ";")? & ("update-content" ":" update=TriState ";")? & ("on-merge-conflict" ":"
		//mergeStrategy=MergeStrategy ";")?
		public UnorderedGroup getUnorderedGroup_5_1_3_1_0() { return cUnorderedGroup_5_1_3_1_0; }

		//("accept-dirty" ":" acceptDirty=TriState ";")?
		public Group getGroup_5_1_3_1_0_0() { return cGroup_5_1_3_1_0_0; }

		//"accept-dirty"
		public Keyword getAcceptDirtyKeyword_5_1_3_1_0_0_0() { return cAcceptDirtyKeyword_5_1_3_1_0_0_0; }

		//":"
		public Keyword getColonKeyword_5_1_3_1_0_0_1() { return cColonKeyword_5_1_3_1_0_0_1; }

		//acceptDirty=TriState
		public Assignment getAcceptDirtyAssignment_5_1_3_1_0_0_2() { return cAcceptDirtyAssignment_5_1_3_1_0_0_2; }

		//TriState
		public RuleCall getAcceptDirtyTriStateParserRuleCall_5_1_3_1_0_0_2_0() { return cAcceptDirtyTriStateParserRuleCall_5_1_3_1_0_0_2_0; }

		//";"
		public Keyword getSemicolonKeyword_5_1_3_1_0_0_3() { return cSemicolonKeyword_5_1_3_1_0_0_3; }

		//("update-content" ":" update=TriState ";")?
		public Group getGroup_5_1_3_1_0_1() { return cGroup_5_1_3_1_0_1; }

		//"update-content"
		public Keyword getUpdateContentKeyword_5_1_3_1_0_1_0() { return cUpdateContentKeyword_5_1_3_1_0_1_0; }

		//":"
		public Keyword getColonKeyword_5_1_3_1_0_1_1() { return cColonKeyword_5_1_3_1_0_1_1; }

		//update=TriState
		public Assignment getUpdateAssignment_5_1_3_1_0_1_2() { return cUpdateAssignment_5_1_3_1_0_1_2; }

		//TriState
		public RuleCall getUpdateTriStateParserRuleCall_5_1_3_1_0_1_2_0() { return cUpdateTriStateParserRuleCall_5_1_3_1_0_1_2_0; }

		//";"
		public Keyword getSemicolonKeyword_5_1_3_1_0_1_3() { return cSemicolonKeyword_5_1_3_1_0_1_3; }

		//("on-merge-conflict" ":" mergeStrategy=MergeStrategy ";")?
		public Group getGroup_5_1_3_1_0_2() { return cGroup_5_1_3_1_0_2; }

		//"on-merge-conflict"
		public Keyword getOnMergeConflictKeyword_5_1_3_1_0_2_0() { return cOnMergeConflictKeyword_5_1_3_1_0_2_0; }

		//":"
		public Keyword getColonKeyword_5_1_3_1_0_2_1() { return cColonKeyword_5_1_3_1_0_2_1; }

		//mergeStrategy=MergeStrategy
		public Assignment getMergeStrategyAssignment_5_1_3_1_0_2_2() { return cMergeStrategyAssignment_5_1_3_1_0_2_2; }

		//MergeStrategy
		public RuleCall getMergeStrategyMergeStrategyParserRuleCall_5_1_3_1_0_2_2_0() { return cMergeStrategyMergeStrategyParserRuleCall_5_1_3_1_0_2_2_0; }

		//";"
		public Keyword getSemicolonKeyword_5_1_3_1_0_2_3() { return cSemicolonKeyword_5_1_3_1_0_2_3; }

		//"replace-content" ":" replace=TriState ";"
		public Group getGroup_5_1_3_1_1() { return cGroup_5_1_3_1_1; }

		//"replace-content"
		public Keyword getReplaceContentKeyword_5_1_3_1_1_0() { return cReplaceContentKeyword_5_1_3_1_1_0; }

		//":"
		public Keyword getColonKeyword_5_1_3_1_1_1() { return cColonKeyword_5_1_3_1_1_1; }

		//replace=TriState
		public Assignment getReplaceAssignment_5_1_3_1_1_2() { return cReplaceAssignment_5_1_3_1_1_2; }

		//TriState
		public RuleCall getReplaceTriStateParserRuleCall_5_1_3_1_1_2_0() { return cReplaceTriStateParserRuleCall_5_1_3_1_1_2_0; }

		//";"
		public Keyword getSemicolonKeyword_5_1_3_1_1_3() { return cSemicolonKeyword_5_1_3_1_1_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_1_4() { return cRightCurlyBracketKeyword_5_1_4; }

		//";"
		public Keyword getSemicolonKeyword_5_1_5() { return cSemicolonKeyword_5_1_5; }

		//("exclude" ":" "[" exclude+=NamePredicate ("," exclude+=NamePredicate)* "]" ";")?
		public Group getGroup_5_2() { return cGroup_5_2; }

		//"exclude"
		public Keyword getExcludeKeyword_5_2_0() { return cExcludeKeyword_5_2_0; }

		//":"
		public Keyword getColonKeyword_5_2_1() { return cColonKeyword_5_2_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_5_2_2() { return cLeftSquareBracketKeyword_5_2_2; }

		//exclude+=NamePredicate
		public Assignment getExcludeAssignment_5_2_3() { return cExcludeAssignment_5_2_3; }

		//NamePredicate
		public RuleCall getExcludeNamePredicateParserRuleCall_5_2_3_0() { return cExcludeNamePredicateParserRuleCall_5_2_3_0; }

		//("," exclude+=NamePredicate)*
		public Group getGroup_5_2_4() { return cGroup_5_2_4; }

		//","
		public Keyword getCommaKeyword_5_2_4_0() { return cCommaKeyword_5_2_4_0; }

		//exclude+=NamePredicate
		public Assignment getExcludeAssignment_5_2_4_1() { return cExcludeAssignment_5_2_4_1; }

		//NamePredicate
		public RuleCall getExcludeNamePredicateParserRuleCall_5_2_4_1_0() { return cExcludeNamePredicateParserRuleCall_5_2_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5_2_5() { return cRightSquareBracketKeyword_5_2_5; }

		//";"
		public Keyword getSemicolonKeyword_5_2_6() { return cSemicolonKeyword_5_2_6; }

		//("include" ":" "[" include+=NamePredicate ("," include+=NamePredicate)* "]" ";")?
		public Group getGroup_5_3() { return cGroup_5_3; }

		//"include"
		public Keyword getIncludeKeyword_5_3_0() { return cIncludeKeyword_5_3_0; }

		//":"
		public Keyword getColonKeyword_5_3_1() { return cColonKeyword_5_3_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_5_3_2() { return cLeftSquareBracketKeyword_5_3_2; }

		//include+=NamePredicate
		public Assignment getIncludeAssignment_5_3_3() { return cIncludeAssignment_5_3_3; }

		//NamePredicate
		public RuleCall getIncludeNamePredicateParserRuleCall_5_3_3_0() { return cIncludeNamePredicateParserRuleCall_5_3_3_0; }

		//("," include+=NamePredicate)*
		public Group getGroup_5_3_4() { return cGroup_5_3_4; }

		//","
		public Keyword getCommaKeyword_5_3_4_0() { return cCommaKeyword_5_3_4_0; }

		//include+=NamePredicate
		public Assignment getIncludeAssignment_5_3_4_1() { return cIncludeAssignment_5_3_4_1; }

		//NamePredicate
		public RuleCall getIncludeNamePredicateParserRuleCall_5_3_4_1_0() { return cIncludeNamePredicateParserRuleCall_5_3_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5_3_5() { return cRightSquareBracketKeyword_5_3_5; }

		//";"
		public Keyword getSemicolonKeyword_5_3_6() { return cSemicolonKeyword_5_3_6; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class BranchPointStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BranchPointString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEscapedQualifiedNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHEXTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// Branches and revisions have string form (they can be very long), and can be a string or INT/HEX
		//// The physical type of a revision is determined by a repository type.
		//BranchPointString returns ecore::EString:
		//	EscapedQualifiedName | INT | HEX;
		public ParserRule getRule() { return rule; }

		//EscapedQualifiedName | INT | HEX
		public Alternatives getAlternatives() { return cAlternatives; }

		//EscapedQualifiedName
		public RuleCall getEscapedQualifiedNameParserRuleCall_0() { return cEscapedQualifiedNameParserRuleCall_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//HEX
		public RuleCall getHEXTerminalRuleCall_2() { return cHEXTerminalRuleCall_2; }
	}

	public class UnitProviderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitProvider");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFirstFoundUnitProviderParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBestFoundUnitProviderParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSwitchUnitProviderParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRepositoryUnitProviderParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//UnitProvider returns build::UnitProvider:
		//	FirstFoundUnitProvider | BestFoundUnitProvider | SwitchUnitProvider | RepositoryUnitProvider;
		public ParserRule getRule() { return rule; }

		//FirstFoundUnitProvider | BestFoundUnitProvider | SwitchUnitProvider | RepositoryUnitProvider
		public Alternatives getAlternatives() { return cAlternatives; }

		//FirstFoundUnitProvider
		public RuleCall getFirstFoundUnitProviderParserRuleCall_0() { return cFirstFoundUnitProviderParserRuleCall_0; }

		//BestFoundUnitProvider
		public RuleCall getBestFoundUnitProviderParserRuleCall_1() { return cBestFoundUnitProviderParserRuleCall_1; }

		//SwitchUnitProvider
		public RuleCall getSwitchUnitProviderParserRuleCall_2() { return cSwitchUnitProviderParserRuleCall_2; }

		//RepositoryUnitProvider
		public RuleCall getRepositoryUnitProviderParserRuleCall_3() { return cRepositoryUnitProviderParserRuleCall_3; }
	}

	public class RepositoryUnitProviderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RepositoryUnitProvider");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRepositoryUnitProviderAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDocumentationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDocumentationDOCUMENTATIONParserRuleCall_1_0 = (RuleCall)cDocumentationAssignment_1.eContents().get(0);
		private final Keyword cRepositoryKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRepositoryAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRepositoryRepositoryCrossReference_3_0 = (CrossReference)cRepositoryAssignment_3.eContents().get(0);
		private final RuleCall cRepositoryRepositoryIDTerminalRuleCall_3_0_1 = (RuleCall)cRepositoryRepositoryCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOptionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOptionsRepoOptionParserRuleCall_4_1_0 = (RuleCall)cOptionsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//RepositoryUnitProvider returns build::RepositoryUnitProvider:
		//	{build::RepositoryUnitProvider} documentation=DOCUMENTATION? "repository" repository=[build::Repository] ("{"
		//	options+=RepoOption* "}")?;
		public ParserRule getRule() { return rule; }

		//{build::RepositoryUnitProvider} documentation=DOCUMENTATION? "repository" repository=[build::Repository] ("{"
		//options+=RepoOption* "}")?
		public Group getGroup() { return cGroup; }

		//{build::RepositoryUnitProvider}
		public Action getRepositoryUnitProviderAction_0() { return cRepositoryUnitProviderAction_0; }

		//documentation=DOCUMENTATION?
		public Assignment getDocumentationAssignment_1() { return cDocumentationAssignment_1; }

		//DOCUMENTATION
		public RuleCall getDocumentationDOCUMENTATIONParserRuleCall_1_0() { return cDocumentationDOCUMENTATIONParserRuleCall_1_0; }

		//"repository"
		public Keyword getRepositoryKeyword_2() { return cRepositoryKeyword_2; }

		//repository=[build::Repository]
		public Assignment getRepositoryAssignment_3() { return cRepositoryAssignment_3; }

		//[build::Repository]
		public CrossReference getRepositoryRepositoryCrossReference_3_0() { return cRepositoryRepositoryCrossReference_3_0; }

		//ID
		public RuleCall getRepositoryRepositoryIDTerminalRuleCall_3_0_1() { return cRepositoryRepositoryIDTerminalRuleCall_3_0_1; }

		//("{" options+=RepoOption* "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }

		//options+=RepoOption*
		public Assignment getOptionsAssignment_4_1() { return cOptionsAssignment_4_1; }

		//RepoOption
		public RuleCall getOptionsRepoOptionParserRuleCall_4_1_0() { return cOptionsRepoOptionParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
	}

	public class RepoOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RepoOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRepoOptionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprExpressionParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RepoOption returns build::RepoOption:
		//	{build::RepoOption} name=ID ":" expr=Expression ";";
		public ParserRule getRule() { return rule; }

		//{build::RepoOption} name=ID ":" expr=Expression ";"
		public Group getGroup() { return cGroup; }

		//{build::RepoOption}
		public Action getRepoOptionAction_0() { return cRepoOptionAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//expr=Expression
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_3_0() { return cExprExpressionParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class TopLevelUnitProviderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TopLevelUnitProvider");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFirstFoundUnitProviderAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDocumentationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDocumentationDOCUMENTATIONParserRuleCall_1_0 = (RuleCall)cDocumentationAssignment_1.eContents().get(0);
		private final Keyword cResolutionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cProvidersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cProvidersUnitProviderParserRuleCall_5_0 = (RuleCall)cProvidersAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cProvidersAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cProvidersUnitProviderParserRuleCall_6_1_0 = (RuleCall)cProvidersAssignment_6_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//TopLevelUnitProvider returns build::FirstFoundUnitProvider:
		//	{build::FirstFoundUnitProvider} documentation=DOCUMENTATION? "resolution" ":" "[" providers+=UnitProvider (","
		//	providers+=UnitProvider)* "]" ";";
		public ParserRule getRule() { return rule; }

		//{build::FirstFoundUnitProvider} documentation=DOCUMENTATION? "resolution" ":" "[" providers+=UnitProvider (","
		//providers+=UnitProvider)* "]" ";"
		public Group getGroup() { return cGroup; }

		//{build::FirstFoundUnitProvider}
		public Action getFirstFoundUnitProviderAction_0() { return cFirstFoundUnitProviderAction_0; }

		//documentation=DOCUMENTATION?
		public Assignment getDocumentationAssignment_1() { return cDocumentationAssignment_1; }

		//DOCUMENTATION
		public RuleCall getDocumentationDOCUMENTATIONParserRuleCall_1_0() { return cDocumentationDOCUMENTATIONParserRuleCall_1_0; }

		//"resolution"
		public Keyword getResolutionKeyword_2() { return cResolutionKeyword_2; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }

		//providers+=UnitProvider
		public Assignment getProvidersAssignment_5() { return cProvidersAssignment_5; }

		//UnitProvider
		public RuleCall getProvidersUnitProviderParserRuleCall_5_0() { return cProvidersUnitProviderParserRuleCall_5_0; }

		//("," providers+=UnitProvider)*
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//providers+=UnitProvider
		public Assignment getProvidersAssignment_6_1() { return cProvidersAssignment_6_1; }

		//UnitProvider
		public RuleCall getProvidersUnitProviderParserRuleCall_6_1_0() { return cProvidersUnitProviderParserRuleCall_6_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }

		//";"
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}

	public class FirstFoundUnitProviderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FirstFoundUnitProvider");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFirstFoundUnitProviderAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDocumentationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDocumentationDOCUMENTATIONParserRuleCall_1_0 = (RuleCall)cDocumentationAssignment_1.eContents().get(0);
		private final Keyword cSelectFirstKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cProvidersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cProvidersUnitProviderParserRuleCall_5_0 = (RuleCall)cProvidersAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cProvidersAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cProvidersUnitProviderParserRuleCall_6_1_0 = (RuleCall)cProvidersAssignment_6_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//FirstFoundUnitProvider returns build::FirstFoundUnitProvider:
		//	{build::FirstFoundUnitProvider} documentation=DOCUMENTATION? "select-first" ":" "[" providers+=UnitProvider (","
		//	providers+=UnitProvider)* "]";
		public ParserRule getRule() { return rule; }

		//{build::FirstFoundUnitProvider} documentation=DOCUMENTATION? "select-first" ":" "[" providers+=UnitProvider (","
		//providers+=UnitProvider)* "]"
		public Group getGroup() { return cGroup; }

		//{build::FirstFoundUnitProvider}
		public Action getFirstFoundUnitProviderAction_0() { return cFirstFoundUnitProviderAction_0; }

		//documentation=DOCUMENTATION?
		public Assignment getDocumentationAssignment_1() { return cDocumentationAssignment_1; }

		//DOCUMENTATION
		public RuleCall getDocumentationDOCUMENTATIONParserRuleCall_1_0() { return cDocumentationDOCUMENTATIONParserRuleCall_1_0; }

		//"select-first"
		public Keyword getSelectFirstKeyword_2() { return cSelectFirstKeyword_2; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }

		//providers+=UnitProvider
		public Assignment getProvidersAssignment_5() { return cProvidersAssignment_5; }

		//UnitProvider
		public RuleCall getProvidersUnitProviderParserRuleCall_5_0() { return cProvidersUnitProviderParserRuleCall_5_0; }

		//("," providers+=UnitProvider)*
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//providers+=UnitProvider
		public Assignment getProvidersAssignment_6_1() { return cProvidersAssignment_6_1; }

		//UnitProvider
		public RuleCall getProvidersUnitProviderParserRuleCall_6_1_0() { return cProvidersUnitProviderParserRuleCall_6_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
	}

	public class BestFoundUnitProviderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BestFoundUnitProvider");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBestFoundUnitProviderAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDocumentationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDocumentationDOCUMENTATIONParserRuleCall_1_0 = (RuleCall)cDocumentationAssignment_1.eContents().get(0);
		private final Keyword cSelectBestKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cProvidersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cProvidersUnitProviderParserRuleCall_5_0 = (RuleCall)cProvidersAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cProvidersAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cProvidersUnitProviderParserRuleCall_6_1_0 = (RuleCall)cProvidersAssignment_6_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//BestFoundUnitProvider returns build::BestFoundUnitProvider:
		//	{build::BestFoundUnitProvider} documentation=DOCUMENTATION? "select-best" ":" "[" providers+=UnitProvider (","
		//	providers+=UnitProvider)* "]";
		public ParserRule getRule() { return rule; }

		//{build::BestFoundUnitProvider} documentation=DOCUMENTATION? "select-best" ":" "[" providers+=UnitProvider (","
		//providers+=UnitProvider)* "]"
		public Group getGroup() { return cGroup; }

		//{build::BestFoundUnitProvider}
		public Action getBestFoundUnitProviderAction_0() { return cBestFoundUnitProviderAction_0; }

		//documentation=DOCUMENTATION?
		public Assignment getDocumentationAssignment_1() { return cDocumentationAssignment_1; }

		//DOCUMENTATION
		public RuleCall getDocumentationDOCUMENTATIONParserRuleCall_1_0() { return cDocumentationDOCUMENTATIONParserRuleCall_1_0; }

		//"select-best"
		public Keyword getSelectBestKeyword_2() { return cSelectBestKeyword_2; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }

		//providers+=UnitProvider
		public Assignment getProvidersAssignment_5() { return cProvidersAssignment_5; }

		//UnitProvider
		public RuleCall getProvidersUnitProviderParserRuleCall_5_0() { return cProvidersUnitProviderParserRuleCall_5_0; }

		//("," providers+=UnitProvider)*
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//providers+=UnitProvider
		public Assignment getProvidersAssignment_6_1() { return cProvidersAssignment_6_1; }

		//UnitProvider
		public RuleCall getProvidersUnitProviderParserRuleCall_6_1_0() { return cProvidersUnitProviderParserRuleCall_6_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
	}

	public class SwitchUnitProviderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SwitchUnitProvider");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSwitchUnitProviderAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDocumentationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDocumentationDOCUMENTATIONParserRuleCall_1_0 = (RuleCall)cDocumentationAssignment_1.eContents().get(0);
		private final Keyword cSelectSwitchKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRepoSwitchAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRepoSwitchSelectSwitchExpressionParserRuleCall_3_0 = (RuleCall)cRepoSwitchAssignment_3.eContents().get(0);
		
		//SwitchUnitProvider returns build::SwitchUnitProvider:
		//	{build::SwitchUnitProvider} documentation=DOCUMENTATION? "select-switch" repoSwitch=SelectSwitchExpression;
		public ParserRule getRule() { return rule; }

		//{build::SwitchUnitProvider} documentation=DOCUMENTATION? "select-switch" repoSwitch=SelectSwitchExpression
		public Group getGroup() { return cGroup; }

		//{build::SwitchUnitProvider}
		public Action getSwitchUnitProviderAction_0() { return cSwitchUnitProviderAction_0; }

		//documentation=DOCUMENTATION?
		public Assignment getDocumentationAssignment_1() { return cDocumentationAssignment_1; }

		//DOCUMENTATION
		public RuleCall getDocumentationDOCUMENTATIONParserRuleCall_1_0() { return cDocumentationDOCUMENTATIONParserRuleCall_1_0; }

		//"select-switch"
		public Keyword getSelectSwitchKeyword_2() { return cSelectSwitchKeyword_2; }

		//repoSwitch=SelectSwitchExpression
		public Assignment getRepoSwitchAssignment_3() { return cRepoSwitchAssignment_3; }

		//SelectSwitchExpression
		public RuleCall getRepoSwitchSelectSwitchExpressionParserRuleCall_3_0() { return cRepoSwitchSelectSwitchExpressionParserRuleCall_3_0; }
	}

	public class SelectSwitchExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectSwitchExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBSwitchExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSwitchExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSwitchExpressionExpressionParserRuleCall_1_0 = (RuleCall)cSwitchExpressionAssignment_1.eContents().get(0);
		private final Assignment cCaseListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCaseListRepositorySelectCaseParserRuleCall_2_0 = (RuleCall)cCaseListAssignment_2.eContents().get(0);
		private final Keyword cEndswitchKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SelectSwitchExpression returns be::BSwitchExpression:
		//	{be::BSwitchExpression} switchExpression=Expression? caseList+=RepositorySelectCase+ "endswitch";
		public ParserRule getRule() { return rule; }

		//{be::BSwitchExpression} switchExpression=Expression? caseList+=RepositorySelectCase+ "endswitch"
		public Group getGroup() { return cGroup; }

		//{be::BSwitchExpression}
		public Action getBSwitchExpressionAction_0() { return cBSwitchExpressionAction_0; }

		//switchExpression=Expression?
		public Assignment getSwitchExpressionAssignment_1() { return cSwitchExpressionAssignment_1; }

		//Expression
		public RuleCall getSwitchExpressionExpressionParserRuleCall_1_0() { return cSwitchExpressionExpressionParserRuleCall_1_0; }

		//caseList+=RepositorySelectCase+
		public Assignment getCaseListAssignment_2() { return cCaseListAssignment_2; }

		//RepositorySelectCase
		public RuleCall getCaseListRepositorySelectCaseParserRuleCall_2_0() { return cCaseListRepositorySelectCaseParserRuleCall_2_0; }

		//"endswitch"
		public Keyword getEndswitchKeyword_3() { return cEndswitchKeyword_3; }
	}

	public class RepositorySelectCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RepositorySelectCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBCaseAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cCaseKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cConditionExprAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cConditionExprExpressionParserRuleCall_1_0_1_0 = (RuleCall)cConditionExprAssignment_1_0_1.eContents().get(0);
		private final Keyword cDefaultKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenExprUnitProviderParserRuleCall_3_0 = (RuleCall)cThenExprAssignment_3.eContents().get(0);
		
		//RepositorySelectCase returns be::BCase:
		//	{be::BCase} ("case" conditionExpr=Expression | "default") ":" thenExpr=UnitProvider;
		public ParserRule getRule() { return rule; }

		//{be::BCase} ("case" conditionExpr=Expression | "default") ":" thenExpr=UnitProvider
		public Group getGroup() { return cGroup; }

		//{be::BCase}
		public Action getBCaseAction_0() { return cBCaseAction_0; }

		//"case" conditionExpr=Expression | "default"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"case" conditionExpr=Expression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"case"
		public Keyword getCaseKeyword_1_0_0() { return cCaseKeyword_1_0_0; }

		//conditionExpr=Expression
		public Assignment getConditionExprAssignment_1_0_1() { return cConditionExprAssignment_1_0_1; }

		//Expression
		public RuleCall getConditionExprExpressionParserRuleCall_1_0_1_0() { return cConditionExprExpressionParserRuleCall_1_0_1_0; }

		//"default"
		public Keyword getDefaultKeyword_1_1() { return cDefaultKeyword_1_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//thenExpr=UnitProvider
		public Assignment getThenExprAssignment_3() { return cThenExprAssignment_3; }

		//UnitProvider
		public RuleCall getThenExprUnitProviderParserRuleCall_3_0() { return cThenExprUnitProviderParserRuleCall_3_0; }
	}

	public class ContainerConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContainerConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContainerConfigurationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDocumentationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDocumentationDOCUMENTATIONParserRuleCall_1_0 = (RuleCall)cDocumentationAssignment_1.eContents().get(0);
		private final Keyword cContainerKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAgentTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAgentTypeTypeRefParserRuleCall_3_0 = (RuleCall)cAgentTypeAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cContextBlockAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cContextBlockBlockExpressionParserRuleCall_5_0_0 = (RuleCall)cContextBlockAssignment_5_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		
		//ContainerConfiguration returns build::ContainerConfiguration:
		//	{build::ContainerConfiguration} documentation=DOCUMENTATION? "container" agentType=TypeRef name=ID
		//	(contextBlock=BlockExpression | ";");
		public ParserRule getRule() { return rule; }

		//{build::ContainerConfiguration} documentation=DOCUMENTATION? "container" agentType=TypeRef name=ID
		//(contextBlock=BlockExpression | ";")
		public Group getGroup() { return cGroup; }

		//{build::ContainerConfiguration}
		public Action getContainerConfigurationAction_0() { return cContainerConfigurationAction_0; }

		//documentation=DOCUMENTATION?
		public Assignment getDocumentationAssignment_1() { return cDocumentationAssignment_1; }

		//DOCUMENTATION
		public RuleCall getDocumentationDOCUMENTATIONParserRuleCall_1_0() { return cDocumentationDOCUMENTATIONParserRuleCall_1_0; }

		//"container"
		public Keyword getContainerKeyword_2() { return cContainerKeyword_2; }

		//agentType=TypeRef
		public Assignment getAgentTypeAssignment_3() { return cAgentTypeAssignment_3; }

		//TypeRef
		public RuleCall getAgentTypeTypeRefParserRuleCall_3_0() { return cAgentTypeTypeRefParserRuleCall_3_0; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }

		//contextBlock=BlockExpression | ";"
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//contextBlock=BlockExpression
		public Assignment getContextBlockAssignment_5_0() { return cContextBlockAssignment_5_0; }

		//BlockExpression
		public RuleCall getContextBlockBlockExpressionParserRuleCall_5_0_0() { return cContextBlockBlockExpressionParserRuleCall_5_0_0; }

		//";"
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }
	}

	public class URIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "URI");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//URI returns be::URI:
		//	STRING;
		public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class Concern_NamedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Concern_Named");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBConcernAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDocumentationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDocumentationDOCUMENTATIONParserRuleCall_1_0 = (RuleCall)cDocumentationAssignment_1.eContents().get(0);
		private final Keyword cConcernKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cExtendsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSuperConcernsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cSuperConcernsBConcernCrossReference_4_1_0 = (CrossReference)cSuperConcernsAssignment_4_1.eContents().get(0);
		private final RuleCall cSuperConcernsBConcernIDTerminalRuleCall_4_1_0_1 = (RuleCall)cSuperConcernsBConcernCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cSuperConcernsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cSuperConcernsBConcernCrossReference_4_2_1_0 = (CrossReference)cSuperConcernsAssignment_4_2_1.eContents().get(0);
		private final RuleCall cSuperConcernsBConcernIDTerminalRuleCall_4_2_1_0_1 = (RuleCall)cSuperConcernsBConcernCrossReference_4_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cPropertySetsAssignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final RuleCall cPropertySetsPropertySetParserRuleCall_6_0_0 = (RuleCall)cPropertySetsAssignment_6_0.eContents().get(0);
		private final Assignment cPropertySetsAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final RuleCall cPropertySetsPropertySetDefaultParserRuleCall_6_1_0 = (RuleCall)cPropertySetsAssignment_6_1.eContents().get(0);
		private final Assignment cFunctionsAssignment_6_2 = (Assignment)cAlternatives_6.eContents().get(2);
		private final RuleCall cFunctionsFunctionParserRuleCall_6_2_0 = (RuleCall)cFunctionsAssignment_6_2.eContents().get(0);
		private final Assignment cFunctionsAssignment_6_3 = (Assignment)cAlternatives_6.eContents().get(3);
		private final RuleCall cFunctionsBuilderParserRuleCall_6_3_0 = (RuleCall)cFunctionsAssignment_6_3.eContents().get(0);
		private final Assignment cContextsAssignment_6_4 = (Assignment)cAlternatives_6.eContents().get(4);
		private final RuleCall cContextsBuildConcernContextParserRuleCall_6_4_0 = (RuleCall)cContextsAssignment_6_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Concern_Named returns be::BConcern:
		//	{be::BConcern} documentation=DOCUMENTATION? "concern" name=ID ("extends" superConcerns+=[be::BConcern] (","
		//	superConcerns+=[be::BConcern])*)? "{" (propertySets+=PropertySet | propertySets+=PropertySetDefault |
		//	functions+=Function | functions+=Builder | contexts+=BuildConcernContext)* "}";
		public ParserRule getRule() { return rule; }

		//{be::BConcern} documentation=DOCUMENTATION? "concern" name=ID ("extends" superConcerns+=[be::BConcern] (","
		//superConcerns+=[be::BConcern])*)? "{" (propertySets+=PropertySet | propertySets+=PropertySetDefault |
		//functions+=Function | functions+=Builder | contexts+=BuildConcernContext)* "}"
		public Group getGroup() { return cGroup; }

		//{be::BConcern}
		public Action getBConcernAction_0() { return cBConcernAction_0; }

		//documentation=DOCUMENTATION?
		public Assignment getDocumentationAssignment_1() { return cDocumentationAssignment_1; }

		//DOCUMENTATION
		public RuleCall getDocumentationDOCUMENTATIONParserRuleCall_1_0() { return cDocumentationDOCUMENTATIONParserRuleCall_1_0; }

		//"concern"
		public Keyword getConcernKeyword_2() { return cConcernKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//("extends" superConcerns+=[be::BConcern] ("," superConcerns+=[be::BConcern])*)?
		public Group getGroup_4() { return cGroup_4; }

		//"extends"
		public Keyword getExtendsKeyword_4_0() { return cExtendsKeyword_4_0; }

		//superConcerns+=[be::BConcern]
		public Assignment getSuperConcernsAssignment_4_1() { return cSuperConcernsAssignment_4_1; }

		//[be::BConcern]
		public CrossReference getSuperConcernsBConcernCrossReference_4_1_0() { return cSuperConcernsBConcernCrossReference_4_1_0; }

		//ID
		public RuleCall getSuperConcernsBConcernIDTerminalRuleCall_4_1_0_1() { return cSuperConcernsBConcernIDTerminalRuleCall_4_1_0_1; }

		//("," superConcerns+=[be::BConcern])*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//superConcerns+=[be::BConcern]
		public Assignment getSuperConcernsAssignment_4_2_1() { return cSuperConcernsAssignment_4_2_1; }

		//[be::BConcern]
		public CrossReference getSuperConcernsBConcernCrossReference_4_2_1_0() { return cSuperConcernsBConcernCrossReference_4_2_1_0; }

		//ID
		public RuleCall getSuperConcernsBConcernIDTerminalRuleCall_4_2_1_0_1() { return cSuperConcernsBConcernIDTerminalRuleCall_4_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//(propertySets+=PropertySet | propertySets+=PropertySetDefault | functions+=Function | functions+=Builder |
		//contexts+=BuildConcernContext)*
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//propertySets+=PropertySet
		public Assignment getPropertySetsAssignment_6_0() { return cPropertySetsAssignment_6_0; }

		//PropertySet
		public RuleCall getPropertySetsPropertySetParserRuleCall_6_0_0() { return cPropertySetsPropertySetParserRuleCall_6_0_0; }

		//propertySets+=PropertySetDefault
		public Assignment getPropertySetsAssignment_6_1() { return cPropertySetsAssignment_6_1; }

		//PropertySetDefault
		public RuleCall getPropertySetsPropertySetDefaultParserRuleCall_6_1_0() { return cPropertySetsPropertySetDefaultParserRuleCall_6_1_0; }

		//functions+=Function
		public Assignment getFunctionsAssignment_6_2() { return cFunctionsAssignment_6_2; }

		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_6_2_0() { return cFunctionsFunctionParserRuleCall_6_2_0; }

		//functions+=Builder
		public Assignment getFunctionsAssignment_6_3() { return cFunctionsAssignment_6_3; }

		//Builder
		public RuleCall getFunctionsBuilderParserRuleCall_6_3_0() { return cFunctionsBuilderParserRuleCall_6_3_0; }

		//contexts+=BuildConcernContext
		public Assignment getContextsAssignment_6_4() { return cContextsAssignment_6_4; }

		//BuildConcernContext
		public RuleCall getContextsBuildConcernContextParserRuleCall_6_4_0() { return cContextsBuildConcernContextParserRuleCall_6_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class Concern_AnonymousElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Concern_Anonymous");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBConcernAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cExtendsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSuperConcernsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cSuperConcernsBConcernCrossReference_1_1_0 = (CrossReference)cSuperConcernsAssignment_1_1.eContents().get(0);
		private final RuleCall cSuperConcernsBConcernIDTerminalRuleCall_1_1_0_1 = (RuleCall)cSuperConcernsBConcernCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cSuperConcernsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final CrossReference cSuperConcernsBConcernCrossReference_1_2_1_0 = (CrossReference)cSuperConcernsAssignment_1_2_1.eContents().get(0);
		private final RuleCall cSuperConcernsBConcernIDTerminalRuleCall_1_2_1_0_1 = (RuleCall)cSuperConcernsBConcernCrossReference_1_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cPropertySetsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cPropertySetsPropertySetParserRuleCall_3_0_0 = (RuleCall)cPropertySetsAssignment_3_0.eContents().get(0);
		private final Assignment cPropertySetsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cPropertySetsPropertySetDefaultParserRuleCall_3_1_0 = (RuleCall)cPropertySetsAssignment_3_1.eContents().get(0);
		private final Assignment cFunctionsAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cFunctionsFunctionParserRuleCall_3_2_0 = (RuleCall)cFunctionsAssignment_3_2.eContents().get(0);
		private final Assignment cFunctionsAssignment_3_3 = (Assignment)cAlternatives_3.eContents().get(3);
		private final RuleCall cFunctionsBuilderParserRuleCall_3_3_0 = (RuleCall)cFunctionsAssignment_3_3.eContents().get(0);
		private final Assignment cContextsAssignment_3_4 = (Assignment)cAlternatives_3.eContents().get(4);
		private final RuleCall cContextsBuildConcernContextParserRuleCall_3_4_0 = (RuleCall)cContextsAssignment_3_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Concern_Anonymous returns be::BConcern:
		//	{be::BConcern} ("extends" superConcerns+=[be::BConcern] ("," superConcerns+=[be::BConcern])*)? "{"
		//	(propertySets+=PropertySet | propertySets+=PropertySetDefault | functions+=Function | functions+=Builder |
		//	contexts+=BuildConcernContext)* "}";
		public ParserRule getRule() { return rule; }

		//{be::BConcern} ("extends" superConcerns+=[be::BConcern] ("," superConcerns+=[be::BConcern])*)? "{"
		//(propertySets+=PropertySet | propertySets+=PropertySetDefault | functions+=Function | functions+=Builder |
		//contexts+=BuildConcernContext)* "}"
		public Group getGroup() { return cGroup; }

		//{be::BConcern}
		public Action getBConcernAction_0() { return cBConcernAction_0; }

		//("extends" superConcerns+=[be::BConcern] ("," superConcerns+=[be::BConcern])*)?
		public Group getGroup_1() { return cGroup_1; }

		//"extends"
		public Keyword getExtendsKeyword_1_0() { return cExtendsKeyword_1_0; }

		//superConcerns+=[be::BConcern]
		public Assignment getSuperConcernsAssignment_1_1() { return cSuperConcernsAssignment_1_1; }

		//[be::BConcern]
		public CrossReference getSuperConcernsBConcernCrossReference_1_1_0() { return cSuperConcernsBConcernCrossReference_1_1_0; }

		//ID
		public RuleCall getSuperConcernsBConcernIDTerminalRuleCall_1_1_0_1() { return cSuperConcernsBConcernIDTerminalRuleCall_1_1_0_1; }

		//("," superConcerns+=[be::BConcern])*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//superConcerns+=[be::BConcern]
		public Assignment getSuperConcernsAssignment_1_2_1() { return cSuperConcernsAssignment_1_2_1; }

		//[be::BConcern]
		public CrossReference getSuperConcernsBConcernCrossReference_1_2_1_0() { return cSuperConcernsBConcernCrossReference_1_2_1_0; }

		//ID
		public RuleCall getSuperConcernsBConcernIDTerminalRuleCall_1_2_1_0_1() { return cSuperConcernsBConcernIDTerminalRuleCall_1_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(propertySets+=PropertySet | propertySets+=PropertySetDefault | functions+=Function | functions+=Builder |
		//contexts+=BuildConcernContext)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//propertySets+=PropertySet
		public Assignment getPropertySetsAssignment_3_0() { return cPropertySetsAssignment_3_0; }

		//PropertySet
		public RuleCall getPropertySetsPropertySetParserRuleCall_3_0_0() { return cPropertySetsPropertySetParserRuleCall_3_0_0; }

		//propertySets+=PropertySetDefault
		public Assignment getPropertySetsAssignment_3_1() { return cPropertySetsAssignment_3_1; }

		//PropertySetDefault
		public RuleCall getPropertySetsPropertySetDefaultParserRuleCall_3_1_0() { return cPropertySetsPropertySetDefaultParserRuleCall_3_1_0; }

		//functions+=Function
		public Assignment getFunctionsAssignment_3_2() { return cFunctionsAssignment_3_2; }

		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_3_2_0() { return cFunctionsFunctionParserRuleCall_3_2_0; }

		//functions+=Builder
		public Assignment getFunctionsAssignment_3_3() { return cFunctionsAssignment_3_3; }

		//Builder
		public RuleCall getFunctionsBuilderParserRuleCall_3_3_0() { return cFunctionsBuilderParserRuleCall_3_3_0; }

		//contexts+=BuildConcernContext
		public Assignment getContextsAssignment_3_4() { return cContextsAssignment_3_4; }

		//BuildConcernContext
		public RuleCall getContextsBuildConcernContextParserRuleCall_3_4_0() { return cContextsBuildConcernContextParserRuleCall_3_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cB3FunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDocumentationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDocumentationDOCUMENTATIONParserRuleCall_1_0 = (RuleCall)cDocumentationAssignment_1.eContents().get(0);
		private final Assignment cVisibilityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_2_0 = (RuleCall)cVisibilityAssignment_2.eContents().get(0);
		private final Assignment cFinalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cFinalFinalKeyword_3_0 = (Keyword)cFinalAssignment_3.eContents().get(0);
		private final Keyword cFunctionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cReturnTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cReturnTypeTypeRefParserRuleCall_5_0 = (RuleCall)cReturnTypeAssignment_5.eContents().get(0);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameIDTerminalRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Alternatives cAlternatives_7_1 = (Alternatives)cGroup_7.eContents().get(1);
		private final Group cGroup_7_1_0 = (Group)cAlternatives_7_1.eContents().get(0);
		private final Assignment cParametersAssignment_7_1_0_0 = (Assignment)cGroup_7_1_0.eContents().get(0);
		private final RuleCall cParametersParameterDeclarationParserRuleCall_7_1_0_0_0 = (RuleCall)cParametersAssignment_7_1_0_0.eContents().get(0);
		private final Group cGroup_7_1_0_1 = (Group)cGroup_7_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_7_1_0_1_0 = (Keyword)cGroup_7_1_0_1.eContents().get(0);
		private final Assignment cParametersAssignment_7_1_0_1_1 = (Assignment)cGroup_7_1_0_1.eContents().get(1);
		private final RuleCall cParametersParameterDeclarationParserRuleCall_7_1_0_1_1_0 = (RuleCall)cParametersAssignment_7_1_0_1_1.eContents().get(0);
		private final Group cGroup_7_1_0_2 = (Group)cGroup_7_1_0.eContents().get(2);
		private final Keyword cCommaKeyword_7_1_0_2_0 = (Keyword)cGroup_7_1_0_2.eContents().get(0);
		private final Assignment cVarArgsAssignment_7_1_0_2_1 = (Assignment)cGroup_7_1_0_2.eContents().get(1);
		private final Keyword cVarArgsFullStopFullStopFullStopKeyword_7_1_0_2_1_0 = (Keyword)cVarArgsAssignment_7_1_0_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_7_1_0_2_2 = (Assignment)cGroup_7_1_0_2.eContents().get(2);
		private final RuleCall cParametersParameterDeclarationParserRuleCall_7_1_0_2_2_0 = (RuleCall)cParametersAssignment_7_1_0_2_2.eContents().get(0);
		private final Group cGroup_7_1_1 = (Group)cAlternatives_7_1.eContents().get(1);
		private final Assignment cVarArgsAssignment_7_1_1_0 = (Assignment)cGroup_7_1_1.eContents().get(0);
		private final Keyword cVarArgsFullStopFullStopFullStopKeyword_7_1_1_0_0 = (Keyword)cVarArgsAssignment_7_1_1_0.eContents().get(0);
		private final Assignment cParametersAssignment_7_1_1_1 = (Assignment)cGroup_7_1_1.eContents().get(1);
		private final RuleCall cParametersParameterDeclarationParserRuleCall_7_1_1_1_0 = (RuleCall)cParametersAssignment_7_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Group cGroup_8_0 = (Group)cAlternatives_8.eContents().get(0);
		private final Keyword cColonKeyword_8_0_0 = (Keyword)cGroup_8_0.eContents().get(0);
		private final Assignment cFuncExprAssignment_8_0_1 = (Assignment)cGroup_8_0.eContents().get(1);
		private final RuleCall cFuncExprExpressionParserRuleCall_8_0_1_0 = (RuleCall)cFuncExprAssignment_8_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_8_0_2 = (Keyword)cGroup_8_0.eContents().get(2);
		private final Assignment cFuncExprAssignment_8_1 = (Assignment)cAlternatives_8.eContents().get(1);
		private final RuleCall cFuncExprBlockExpressionParserRuleCall_8_1_0 = (RuleCall)cFuncExprAssignment_8_1.eContents().get(0);
		
		//Function returns be::B3Function:
		//	{be::B3Function} documentation=DOCUMENTATION? visibility=Visibility? //    (executionMode = ExecutionMode)?	   	
		//	final?="final"? "function" returnType=TypeRef? name=ID //   	( '<' typeParams+= TypeParamDeclaration (',' typeParams+=TypeParamDeclaration)* '>')? // TODO: add support for this in the model
		//	("(" (parameters+=ParameterDeclaration ("," parameters+=ParameterDeclaration)* ("," varArgs?="..."
		//	parameters+=ParameterDeclaration)? | varArgs?="..." parameters+=ParameterDeclaration)? ")")? (":" funcExpr=Expression
		//	";" //   	(guard = GuardExpression)?
		//	| funcExpr=BlockExpression);
		public ParserRule getRule() { return rule; }

		//{be::B3Function} documentation=DOCUMENTATION? visibility=Visibility? //    (executionMode = ExecutionMode)?	   	
		//final?="final"? "function" returnType=TypeRef? name=ID //   	( '<' typeParams+= TypeParamDeclaration (',' typeParams+=TypeParamDeclaration)* '>')? // TODO: add support for this in the model
		//("(" (parameters+=ParameterDeclaration ("," parameters+=ParameterDeclaration)* ("," varArgs?="..."
		//parameters+=ParameterDeclaration)? | varArgs?="..." parameters+=ParameterDeclaration)? ")")? (":" funcExpr=Expression
		//";" //   	(guard = GuardExpression)?
		//| funcExpr=BlockExpression)
		public Group getGroup() { return cGroup; }

		//{be::B3Function}
		public Action getB3FunctionAction_0() { return cB3FunctionAction_0; }

		//documentation=DOCUMENTATION?
		public Assignment getDocumentationAssignment_1() { return cDocumentationAssignment_1; }

		//DOCUMENTATION
		public RuleCall getDocumentationDOCUMENTATIONParserRuleCall_1_0() { return cDocumentationDOCUMENTATIONParserRuleCall_1_0; }

		//visibility=Visibility?
		public Assignment getVisibilityAssignment_2() { return cVisibilityAssignment_2; }

		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_2_0() { return cVisibilityVisibilityEnumRuleCall_2_0; }

		//final?="final"?
		public Assignment getFinalAssignment_3() { return cFinalAssignment_3; }

		//"final"
		public Keyword getFinalFinalKeyword_3_0() { return cFinalFinalKeyword_3_0; }

		//"function"
		public Keyword getFunctionKeyword_4() { return cFunctionKeyword_4; }

		//returnType=TypeRef?
		public Assignment getReturnTypeAssignment_5() { return cReturnTypeAssignment_5; }

		//TypeRef
		public RuleCall getReturnTypeTypeRefParserRuleCall_5_0() { return cReturnTypeTypeRefParserRuleCall_5_0; }

		//name=ID
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_6_0() { return cNameIDTerminalRuleCall_6_0; }

		//("(" (parameters+=ParameterDeclaration ("," parameters+=ParameterDeclaration)* ("," varArgs?="..."
		//parameters+=ParameterDeclaration)? | varArgs?="..." parameters+=ParameterDeclaration)? ")")?
		public Group getGroup_7() { return cGroup_7; }

		//"("
		public Keyword getLeftParenthesisKeyword_7_0() { return cLeftParenthesisKeyword_7_0; }

		//(parameters+=ParameterDeclaration ("," parameters+=ParameterDeclaration)* ("," varArgs?="..."
		//parameters+=ParameterDeclaration)? | varArgs?="..." parameters+=ParameterDeclaration)?
		public Alternatives getAlternatives_7_1() { return cAlternatives_7_1; }

		//parameters+=ParameterDeclaration ("," parameters+=ParameterDeclaration)* ("," varArgs?="..."
		//parameters+=ParameterDeclaration)?
		public Group getGroup_7_1_0() { return cGroup_7_1_0; }

		//parameters+=ParameterDeclaration
		public Assignment getParametersAssignment_7_1_0_0() { return cParametersAssignment_7_1_0_0; }

		//ParameterDeclaration
		public RuleCall getParametersParameterDeclarationParserRuleCall_7_1_0_0_0() { return cParametersParameterDeclarationParserRuleCall_7_1_0_0_0; }

		//("," parameters+=ParameterDeclaration)*
		public Group getGroup_7_1_0_1() { return cGroup_7_1_0_1; }

		//","
		public Keyword getCommaKeyword_7_1_0_1_0() { return cCommaKeyword_7_1_0_1_0; }

		//parameters+=ParameterDeclaration
		public Assignment getParametersAssignment_7_1_0_1_1() { return cParametersAssignment_7_1_0_1_1; }

		//ParameterDeclaration
		public RuleCall getParametersParameterDeclarationParserRuleCall_7_1_0_1_1_0() { return cParametersParameterDeclarationParserRuleCall_7_1_0_1_1_0; }

		//("," varArgs?="..." parameters+=ParameterDeclaration)?
		public Group getGroup_7_1_0_2() { return cGroup_7_1_0_2; }

		//","
		public Keyword getCommaKeyword_7_1_0_2_0() { return cCommaKeyword_7_1_0_2_0; }

		//varArgs?="..."
		public Assignment getVarArgsAssignment_7_1_0_2_1() { return cVarArgsAssignment_7_1_0_2_1; }

		//"..."
		public Keyword getVarArgsFullStopFullStopFullStopKeyword_7_1_0_2_1_0() { return cVarArgsFullStopFullStopFullStopKeyword_7_1_0_2_1_0; }

		//parameters+=ParameterDeclaration
		public Assignment getParametersAssignment_7_1_0_2_2() { return cParametersAssignment_7_1_0_2_2; }

		//ParameterDeclaration
		public RuleCall getParametersParameterDeclarationParserRuleCall_7_1_0_2_2_0() { return cParametersParameterDeclarationParserRuleCall_7_1_0_2_2_0; }

		//varArgs?="..." parameters+=ParameterDeclaration
		public Group getGroup_7_1_1() { return cGroup_7_1_1; }

		//varArgs?="..."
		public Assignment getVarArgsAssignment_7_1_1_0() { return cVarArgsAssignment_7_1_1_0; }

		//"..."
		public Keyword getVarArgsFullStopFullStopFullStopKeyword_7_1_1_0_0() { return cVarArgsFullStopFullStopFullStopKeyword_7_1_1_0_0; }

		//parameters+=ParameterDeclaration
		public Assignment getParametersAssignment_7_1_1_1() { return cParametersAssignment_7_1_1_1; }

		//ParameterDeclaration
		public RuleCall getParametersParameterDeclarationParserRuleCall_7_1_1_1_0() { return cParametersParameterDeclarationParserRuleCall_7_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7_2() { return cRightParenthesisKeyword_7_2; }

		//":" funcExpr=Expression ";" //   	(guard = GuardExpression)?
		//| funcExpr=BlockExpression
		public Alternatives getAlternatives_8() { return cAlternatives_8; }

		//":" funcExpr=Expression ";"
		public Group getGroup_8_0() { return cGroup_8_0; }

		//":"
		public Keyword getColonKeyword_8_0_0() { return cColonKeyword_8_0_0; }

		//funcExpr=Expression
		public Assignment getFuncExprAssignment_8_0_1() { return cFuncExprAssignment_8_0_1; }

		//Expression
		public RuleCall getFuncExprExpressionParserRuleCall_8_0_1_0() { return cFuncExprExpressionParserRuleCall_8_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_8_0_2() { return cSemicolonKeyword_8_0_2; }

		//funcExpr=BlockExpression
		public Assignment getFuncExprAssignment_8_1() { return cFuncExprAssignment_8_1; }

		//BlockExpression
		public RuleCall getFuncExprBlockExpressionParserRuleCall_8_1_0() { return cFuncExprBlockExpressionParserRuleCall_8_1_0; }
	}

	public class AssignmentOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignmentOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAsteriskEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cSolidusEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cPercentSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//// TODO: redesign into "static calculation"
		////GuardExpression returns be::BGuardExpression : {be::BGuardExpression} 
		////	"@callguard" ':' guardExpr = Expression ';' ;
		////TypeParamDeclaration 
		////	: ID ( ("extends" type+= TypeRef ('&' type+=TypeRef)*) | ("super" superType=TypeRef))?
		////	;
		/// * EXPRESSIONS * / // bitwise assignment deprecated, but available in backend if backend is used for some other grammar		
		////	| "&=" 	| "^=" | "|=" | "<<=" | ">>=" | ">>>=" 
		//AssignmentOperator returns ecore::EString:
		//	"=" | "+=" | "-=" | "*=" | "/=" | "%=";
		public ParserRule getRule() { return rule; }

		//"=" | "+=" | "-=" | "*=" | "/=" | "%="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//"+="
		public Keyword getPlusSignEqualsSignKeyword_1() { return cPlusSignEqualsSignKeyword_1; }

		//"-="
		public Keyword getHyphenMinusEqualsSignKeyword_2() { return cHyphenMinusEqualsSignKeyword_2; }

		//"*="
		public Keyword getAsteriskEqualsSignKeyword_3() { return cAsteriskEqualsSignKeyword_3; }

		//"/="
		public Keyword getSolidusEqualsSignKeyword_4() { return cSolidusEqualsSignKeyword_4; }

		//"%="
		public Keyword getPercentSignEqualsSignKeyword_5() { return cPercentSignEqualsSignKeyword_5; }
	}

	public class RelationalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTildeEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cExclamationMarkEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cExclamationMarkEqualsSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cGreaterThanSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLessThanSignEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cGreaterThanSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cLessThanSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//RelationalOperator returns ecore::EString:
		//	"~=" | "==" | "===" | "!=" | "!==" | ">=" | "<=" | ">" | "<";
		public ParserRule getRule() { return rule; }

		//"~=" | "==" | "===" | "!=" | "!==" | ">=" | "<=" | ">" | "<"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"~="
		public Keyword getTildeEqualsSignKeyword_0() { return cTildeEqualsSignKeyword_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1() { return cEqualsSignEqualsSignKeyword_1; }

		//"==="
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignEqualsSignKeyword_2; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_3() { return cExclamationMarkEqualsSignKeyword_3; }

		//"!=="
		public Keyword getExclamationMarkEqualsSignEqualsSignKeyword_4() { return cExclamationMarkEqualsSignEqualsSignKeyword_4; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_5() { return cGreaterThanSignEqualsSignKeyword_5; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_6() { return cLessThanSignEqualsSignKeyword_6; }

		//">"
		public Keyword getGreaterThanSignKeyword_7() { return cGreaterThanSignKeyword_7; }

		//"<"
		public Keyword getLessThanSignKeyword_8() { return cLessThanSignKeyword_8; }
	}

	public class TopLevelExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TopLevelExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAssignmentExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// All expressions, including variable and value definitions. Note: order of rules is significant.
		//TopLevelExpression returns be::BExpression:
		//	VarDeclaration | ValDeclaration | AssignmentExpression;
		public ParserRule getRule() { return rule; }

		//VarDeclaration | ValDeclaration | AssignmentExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//VarDeclaration
		public RuleCall getVarDeclarationParserRuleCall_0() { return cVarDeclarationParserRuleCall_0; }

		//ValDeclaration
		public RuleCall getValDeclarationParserRuleCall_1() { return cValDeclarationParserRuleCall_1; }

		//AssignmentExpression
		public RuleCall getAssignmentExpressionParserRuleCall_2() { return cAssignmentExpressionParserRuleCall_2; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cAssignmentExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// All expressions except variable and value definitions	 
		//Expression returns be::BExpression:
		//	AssignmentExpression;
		public ParserRule getRule() { return rule; }

		//AssignmentExpression
		public RuleCall getAssignmentExpressionParserRuleCall() { return cAssignmentExpressionParserRuleCall; }
	}

	public class AssignmentExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignmentExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCachedExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBAssignmentExpressionLeftExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cFunctionNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFunctionNameAssignmentOperatorParserRuleCall_1_1_0 = (RuleCall)cFunctionNameAssignment_1_1.eContents().get(0);
		private final Assignment cRightExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprAssignmentExpressionParserRuleCall_1_2_0 = (RuleCall)cRightExprAssignment_1_2.eContents().get(0);
		
		//AssignmentExpression returns be::BExpression:
		//	CachedExpression ({be::BAssignmentExpression.leftExpr=current} functionName=AssignmentOperator
		//	rightExpr=AssignmentExpression)?;
		public ParserRule getRule() { return rule; }

		//CachedExpression ({be::BAssignmentExpression.leftExpr=current} functionName=AssignmentOperator
		//rightExpr=AssignmentExpression)?
		public Group getGroup() { return cGroup; }

		//CachedExpression
		public RuleCall getCachedExpressionParserRuleCall_0() { return cCachedExpressionParserRuleCall_0; }

		//({be::BAssignmentExpression.leftExpr=current} functionName=AssignmentOperator rightExpr=AssignmentExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{be::BAssignmentExpression.leftExpr=current}
		public Action getBAssignmentExpressionLeftExprAction_1_0() { return cBAssignmentExpressionLeftExprAction_1_0; }

		//functionName=AssignmentOperator
		public Assignment getFunctionNameAssignment_1_1() { return cFunctionNameAssignment_1_1; }

		//AssignmentOperator
		public RuleCall getFunctionNameAssignmentOperatorParserRuleCall_1_1_0() { return cFunctionNameAssignmentOperatorParserRuleCall_1_1_0; }

		//rightExpr=AssignmentExpression
		public Assignment getRightExprAssignment_1_2() { return cRightExprAssignment_1_2; }

		//AssignmentExpression
		public RuleCall getRightExprAssignmentExpressionParserRuleCall_1_2_0() { return cRightExprAssignmentExpressionParserRuleCall_1_2_0; }
	}

	public class VarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBDefValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFinalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cFinalFinalKeyword_1_0 = (Keyword)cFinalAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Keyword cVarKeyword_2_0_0 = (Keyword)cAlternatives_2_0.eContents().get(0);
		private final Assignment cTypeAssignment_2_0_1 = (Assignment)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cTypeTypeRefParserRuleCall_2_0_1_0 = (RuleCall)cTypeAssignment_2_0_1.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueExprAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueExprExpressionParserRuleCall_3_1_0 = (RuleCall)cValueExprAssignment_3_1.eContents().get(0);
		
		//VarDeclaration returns be::BExpression:
		//	{be::BDefValue} final?="final"? (("var" | type=TypeRef) name=ID) ("=" valueExpr=Expression)?;
		public ParserRule getRule() { return rule; }

		//{be::BDefValue} final?="final"? (("var" | type=TypeRef) name=ID) ("=" valueExpr=Expression)?
		public Group getGroup() { return cGroup; }

		//{be::BDefValue}
		public Action getBDefValueAction_0() { return cBDefValueAction_0; }

		//final?="final"?
		public Assignment getFinalAssignment_1() { return cFinalAssignment_1; }

		//"final"
		public Keyword getFinalFinalKeyword_1_0() { return cFinalFinalKeyword_1_0; }

		//("var" | type=TypeRef) name=ID
		public Group getGroup_2() { return cGroup_2; }

		//"var" | type=TypeRef
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }

		//"var"
		public Keyword getVarKeyword_2_0_0() { return cVarKeyword_2_0_0; }

		//type=TypeRef
		public Assignment getTypeAssignment_2_0_1() { return cTypeAssignment_2_0_1; }

		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_2_0_1_0() { return cTypeTypeRefParserRuleCall_2_0_1_0; }

		//name=ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0() { return cNameIDTerminalRuleCall_2_1_0; }

		//("=" valueExpr=Expression)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//valueExpr=Expression
		public Assignment getValueExprAssignment_3_1() { return cValueExprAssignment_3_1; }

		//Expression
		public RuleCall getValueExprExpressionParserRuleCall_3_1_0() { return cValueExprExpressionParserRuleCall_3_1_0; }
	}

	public class ValDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBDefValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFinalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cFinalFinalKeyword_1_0 = (Keyword)cFinalAssignment_1.eContents().get(0);
		private final Assignment cImmutableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cImmutableValKeyword_2_0 = (Keyword)cImmutableAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeRefParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cValueExprAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValueExprExpressionParserRuleCall_6_0 = (RuleCall)cValueExprAssignment_6.eContents().get(0);
		
		//ValDeclaration returns be::BExpression:
		//	{be::BDefValue} final?="final"? immutable?="val" type=TypeRef? name=ID "=" valueExpr=Expression;
		public ParserRule getRule() { return rule; }

		//{be::BDefValue} final?="final"? immutable?="val" type=TypeRef? name=ID "=" valueExpr=Expression
		public Group getGroup() { return cGroup; }

		//{be::BDefValue}
		public Action getBDefValueAction_0() { return cBDefValueAction_0; }

		//final?="final"?
		public Assignment getFinalAssignment_1() { return cFinalAssignment_1; }

		//"final"
		public Keyword getFinalFinalKeyword_1_0() { return cFinalFinalKeyword_1_0; }

		//immutable?="val"
		public Assignment getImmutableAssignment_2() { return cImmutableAssignment_2; }

		//"val"
		public Keyword getImmutableValKeyword_2_0() { return cImmutableValKeyword_2_0; }

		//type=TypeRef?
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_3_0() { return cTypeTypeRefParserRuleCall_3_0; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }

		//"="
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }

		//valueExpr=Expression
		public Assignment getValueExprAssignment_6() { return cValueExprAssignment_6; }

		//Expression
		public RuleCall getValueExprExpressionParserRuleCall_6_0() { return cValueExprExpressionParserRuleCall_6_0; }
	}

	public class TypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClosureTypeRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleTypeRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// TODO: typereference is simplified to only the name of a java type - for model imports
		//// the model is imported with name == namespace, and types in the model are referenced after
		//// '::' e.g. "resource:a resouceURi.ecore" as mymodel, and a classifier in this model is
		//// referenced as mymodel::mytype
		//// There is more work required to link a reference to such a type and it is therefore deferred
		//// until we are up on Xtext 0.8 with better scoping and linking.
		//// For now, this is just proof of concept.
		//// 
		//TypeRef returns be::IType:
		//	ClosureTypeRef | SimpleTypeRef;
		public ParserRule getRule() { return rule; }

		//ClosureTypeRef | SimpleTypeRef
		public Alternatives getAlternatives() { return cAlternatives; }

		//ClosureTypeRef
		public RuleCall getClosureTypeRefParserRuleCall_0() { return cClosureTypeRefParserRuleCall_0; }

		//SimpleTypeRef
		public RuleCall getSimpleTypeRefParserRuleCall_1() { return cSimpleTypeRefParserRuleCall_1; }
	}

	public class SimpleTypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleTypeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cB3ParameterizedTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRawTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRawTypeB3JavaImportCrossReference_1_0 = (CrossReference)cRawTypeAssignment_1.eContents().get(0);
		private final RuleCall cRawTypeB3JavaImportIDTerminalRuleCall_1_0_1 = (RuleCall)cRawTypeB3JavaImportCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cActualArgumentsListAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cActualArgumentsListB3JavaImportCrossReference_2_1_0 = (CrossReference)cActualArgumentsListAssignment_2_1.eContents().get(0);
		private final RuleCall cActualArgumentsListB3JavaImportIDTerminalRuleCall_2_1_0_1 = (RuleCall)cActualArgumentsListB3JavaImportCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cActualArgumentsListAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cActualArgumentsListB3JavaImportCrossReference_2_2_1_0 = (CrossReference)cActualArgumentsListAssignment_2_2_1.eContents().get(0);
		private final RuleCall cActualArgumentsListB3JavaImportIDTerminalRuleCall_2_2_1_0_1 = (RuleCall)cActualArgumentsListB3JavaImportCrossReference_2_2_1_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		////		('<' actualArgumentsList+=TypeParam (',' actualArgumentsList+=TypeParam)* '>' )? // TODO: Support wildcard as well
		//SimpleTypeRef returns be::IType:
		//	{be::B3ParameterizedType} rawType=[be::B3JavaImport] ("<" actualArgumentsList+=[be::B3JavaImport] (","
		//	actualArgumentsList+=[be::B3JavaImport])* ">")?;
		public ParserRule getRule() { return rule; }

		//{be::B3ParameterizedType} rawType=[be::B3JavaImport] ("<" actualArgumentsList+=[be::B3JavaImport] (","
		//actualArgumentsList+=[be::B3JavaImport])* ">")?
		public Group getGroup() { return cGroup; }

		//{be::B3ParameterizedType}
		public Action getB3ParameterizedTypeAction_0() { return cB3ParameterizedTypeAction_0; }

		//rawType=[be::B3JavaImport]
		public Assignment getRawTypeAssignment_1() { return cRawTypeAssignment_1; }

		//[be::B3JavaImport]
		public CrossReference getRawTypeB3JavaImportCrossReference_1_0() { return cRawTypeB3JavaImportCrossReference_1_0; }

		//ID
		public RuleCall getRawTypeB3JavaImportIDTerminalRuleCall_1_0_1() { return cRawTypeB3JavaImportIDTerminalRuleCall_1_0_1; }

		//("<" actualArgumentsList+=[be::B3JavaImport] ("," actualArgumentsList+=[be::B3JavaImport])* ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//actualArgumentsList+=[be::B3JavaImport]
		public Assignment getActualArgumentsListAssignment_2_1() { return cActualArgumentsListAssignment_2_1; }

		//[be::B3JavaImport]
		public CrossReference getActualArgumentsListB3JavaImportCrossReference_2_1_0() { return cActualArgumentsListB3JavaImportCrossReference_2_1_0; }

		//ID
		public RuleCall getActualArgumentsListB3JavaImportIDTerminalRuleCall_2_1_0_1() { return cActualArgumentsListB3JavaImportIDTerminalRuleCall_2_1_0_1; }

		//("," actualArgumentsList+=[be::B3JavaImport])*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//actualArgumentsList+=[be::B3JavaImport]
		public Assignment getActualArgumentsListAssignment_2_2_1() { return cActualArgumentsListAssignment_2_2_1; }

		//[be::B3JavaImport]
		public CrossReference getActualArgumentsListB3JavaImportCrossReference_2_2_1_0() { return cActualArgumentsListB3JavaImportCrossReference_2_2_1_0; }

		//ID
		public RuleCall getActualArgumentsListB3JavaImportIDTerminalRuleCall_2_2_1_0_1() { return cActualArgumentsListB3JavaImportIDTerminalRuleCall_2_2_1_0_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_3() { return cGreaterThanSignKeyword_2_3; }
	}

	public class ClosureTypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClosureTypeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cB3FunctionTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Assignment cParameterTypesAssignment_1_1_0_0 = (Assignment)cGroup_1_1_0.eContents().get(0);
		private final CrossReference cParameterTypesB3JavaImportCrossReference_1_1_0_0_0 = (CrossReference)cParameterTypesAssignment_1_1_0_0.eContents().get(0);
		private final RuleCall cParameterTypesB3JavaImportIDTerminalRuleCall_1_1_0_0_0_1 = (RuleCall)cParameterTypesB3JavaImportCrossReference_1_1_0_0_0.eContents().get(1);
		private final Group cGroup_1_1_0_1 = (Group)cGroup_1_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0_1_0 = (Keyword)cGroup_1_1_0_1.eContents().get(0);
		private final Assignment cParameterTypesAssignment_1_1_0_1_1 = (Assignment)cGroup_1_1_0_1.eContents().get(1);
		private final CrossReference cParameterTypesB3JavaImportCrossReference_1_1_0_1_1_0 = (CrossReference)cParameterTypesAssignment_1_1_0_1_1.eContents().get(0);
		private final RuleCall cParameterTypesB3JavaImportIDTerminalRuleCall_1_1_0_1_1_0_1 = (RuleCall)cParameterTypesB3JavaImportCrossReference_1_1_0_1_1_0.eContents().get(1);
		private final Group cGroup_1_1_0_2 = (Group)cGroup_1_1_0.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_0_2_0 = (Keyword)cGroup_1_1_0_2.eContents().get(0);
		private final Assignment cVarArgsAssignment_1_1_0_2_1 = (Assignment)cGroup_1_1_0_2.eContents().get(1);
		private final Keyword cVarArgsFullStopFullStopFullStopKeyword_1_1_0_2_1_0 = (Keyword)cVarArgsAssignment_1_1_0_2_1.eContents().get(0);
		private final Assignment cParameterTypesAssignment_1_1_0_2_2 = (Assignment)cGroup_1_1_0_2.eContents().get(2);
		private final CrossReference cParameterTypesB3JavaImportCrossReference_1_1_0_2_2_0 = (CrossReference)cParameterTypesAssignment_1_1_0_2_2.eContents().get(0);
		private final RuleCall cParameterTypesB3JavaImportIDTerminalRuleCall_1_1_0_2_2_0_1 = (RuleCall)cParameterTypesB3JavaImportCrossReference_1_1_0_2_2_0.eContents().get(1);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Assignment cVarArgsAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final Keyword cVarArgsFullStopFullStopFullStopKeyword_1_1_1_0_0 = (Keyword)cVarArgsAssignment_1_1_1_0.eContents().get(0);
		private final Assignment cParameterTypesAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final CrossReference cParameterTypesB3JavaImportCrossReference_1_1_1_1_0 = (CrossReference)cParameterTypesAssignment_1_1_1_1.eContents().get(0);
		private final RuleCall cParameterTypesB3JavaImportIDTerminalRuleCall_1_1_1_1_0_1 = (RuleCall)cParameterTypesB3JavaImportCrossReference_1_1_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cReturnTypeAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final CrossReference cReturnTypeB3JavaImportCrossReference_1_4_0 = (CrossReference)cReturnTypeAssignment_1_4.eContents().get(0);
		private final RuleCall cReturnTypeB3JavaImportIDTerminalRuleCall_1_4_0_1 = (RuleCall)cReturnTypeB3JavaImportCrossReference_1_4_0.eContents().get(1);
		
		//// ClosureTypeRef declares parameters and return type	
		//// TODO: use TypeRef instead of direct reference to imported class
		//ClosureTypeRef returns be::IType:
		//	{be::B3FunctionType} ("(" (parameterTypes+=[be::B3JavaImport] ("," parameterTypes+=[be::B3JavaImport])* (","
		//	varArgs?="..." parameterTypes+=[be::B3JavaImport])? | varArgs?="..." parameterTypes+=[be::B3JavaImport])? ")" "=>"
		//	returnType=[be::B3JavaImport]);
		public ParserRule getRule() { return rule; }

		//{be::B3FunctionType} ("(" (parameterTypes+=[be::B3JavaImport] ("," parameterTypes+=[be::B3JavaImport])* (","
		//varArgs?="..." parameterTypes+=[be::B3JavaImport])? | varArgs?="..." parameterTypes+=[be::B3JavaImport])? ")" "=>"
		//returnType=[be::B3JavaImport])
		public Group getGroup() { return cGroup; }

		//{be::B3FunctionType}
		public Action getB3FunctionTypeAction_0() { return cB3FunctionTypeAction_0; }

		//"(" (parameterTypes+=[be::B3JavaImport] ("," parameterTypes+=[be::B3JavaImport])* ("," varArgs?="..."
		//parameterTypes+=[be::B3JavaImport])? | varArgs?="..." parameterTypes+=[be::B3JavaImport])? ")" "=>"
		//returnType=[be::B3JavaImport]
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//(parameterTypes+=[be::B3JavaImport] ("," parameterTypes+=[be::B3JavaImport])* ("," varArgs?="..."
		//parameterTypes+=[be::B3JavaImport])? | varArgs?="..." parameterTypes+=[be::B3JavaImport])?
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//parameterTypes+=[be::B3JavaImport] ("," parameterTypes+=[be::B3JavaImport])* ("," varArgs?="..."
		//parameterTypes+=[be::B3JavaImport])?
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//parameterTypes+=[be::B3JavaImport]
		public Assignment getParameterTypesAssignment_1_1_0_0() { return cParameterTypesAssignment_1_1_0_0; }

		//[be::B3JavaImport]
		public CrossReference getParameterTypesB3JavaImportCrossReference_1_1_0_0_0() { return cParameterTypesB3JavaImportCrossReference_1_1_0_0_0; }

		//ID
		public RuleCall getParameterTypesB3JavaImportIDTerminalRuleCall_1_1_0_0_0_1() { return cParameterTypesB3JavaImportIDTerminalRuleCall_1_1_0_0_0_1; }

		//("," parameterTypes+=[be::B3JavaImport])*
		public Group getGroup_1_1_0_1() { return cGroup_1_1_0_1; }

		//","
		public Keyword getCommaKeyword_1_1_0_1_0() { return cCommaKeyword_1_1_0_1_0; }

		//parameterTypes+=[be::B3JavaImport]
		public Assignment getParameterTypesAssignment_1_1_0_1_1() { return cParameterTypesAssignment_1_1_0_1_1; }

		//[be::B3JavaImport]
		public CrossReference getParameterTypesB3JavaImportCrossReference_1_1_0_1_1_0() { return cParameterTypesB3JavaImportCrossReference_1_1_0_1_1_0; }

		//ID
		public RuleCall getParameterTypesB3JavaImportIDTerminalRuleCall_1_1_0_1_1_0_1() { return cParameterTypesB3JavaImportIDTerminalRuleCall_1_1_0_1_1_0_1; }

		//("," varArgs?="..." parameterTypes+=[be::B3JavaImport])?
		public Group getGroup_1_1_0_2() { return cGroup_1_1_0_2; }

		//","
		public Keyword getCommaKeyword_1_1_0_2_0() { return cCommaKeyword_1_1_0_2_0; }

		//varArgs?="..."
		public Assignment getVarArgsAssignment_1_1_0_2_1() { return cVarArgsAssignment_1_1_0_2_1; }

		//"..."
		public Keyword getVarArgsFullStopFullStopFullStopKeyword_1_1_0_2_1_0() { return cVarArgsFullStopFullStopFullStopKeyword_1_1_0_2_1_0; }

		//parameterTypes+=[be::B3JavaImport]
		public Assignment getParameterTypesAssignment_1_1_0_2_2() { return cParameterTypesAssignment_1_1_0_2_2; }

		//[be::B3JavaImport]
		public CrossReference getParameterTypesB3JavaImportCrossReference_1_1_0_2_2_0() { return cParameterTypesB3JavaImportCrossReference_1_1_0_2_2_0; }

		//ID
		public RuleCall getParameterTypesB3JavaImportIDTerminalRuleCall_1_1_0_2_2_0_1() { return cParameterTypesB3JavaImportIDTerminalRuleCall_1_1_0_2_2_0_1; }

		//varArgs?="..." parameterTypes+=[be::B3JavaImport]
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//varArgs?="..."
		public Assignment getVarArgsAssignment_1_1_1_0() { return cVarArgsAssignment_1_1_1_0; }

		//"..."
		public Keyword getVarArgsFullStopFullStopFullStopKeyword_1_1_1_0_0() { return cVarArgsFullStopFullStopFullStopKeyword_1_1_1_0_0; }

		//parameterTypes+=[be::B3JavaImport]
		public Assignment getParameterTypesAssignment_1_1_1_1() { return cParameterTypesAssignment_1_1_1_1; }

		//[be::B3JavaImport]
		public CrossReference getParameterTypesB3JavaImportCrossReference_1_1_1_1_0() { return cParameterTypesB3JavaImportCrossReference_1_1_1_1_0; }

		//ID
		public RuleCall getParameterTypesB3JavaImportIDTerminalRuleCall_1_1_1_1_0_1() { return cParameterTypesB3JavaImportIDTerminalRuleCall_1_1_1_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1_3() { return cEqualsSignGreaterThanSignKeyword_1_3; }

		//returnType=[be::B3JavaImport]
		public Assignment getReturnTypeAssignment_1_4() { return cReturnTypeAssignment_1_4; }

		//[be::B3JavaImport]
		public CrossReference getReturnTypeB3JavaImportCrossReference_1_4_0() { return cReturnTypeB3JavaImportCrossReference_1_4_0; }

		//ID
		public RuleCall getReturnTypeB3JavaImportIDTerminalRuleCall_1_4_0_1() { return cReturnTypeB3JavaImportIDTerminalRuleCall_1_4_0_1; }
	}

	public class TypeParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeRefParamParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWildcardRefParamParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// TODO: TypeParam's and Wildcard refs currently unused. Support should be added
		////	
		//TypeParam returns be::IType:
		//	TypeRefParam | WildcardRefParam;
		public ParserRule getRule() { return rule; }

		//TypeRefParam | WildcardRefParam
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypeRefParam
		public RuleCall getTypeRefParamParserRuleCall_0() { return cTypeRefParamParserRuleCall_0; }

		//WildcardRefParam
		public RuleCall getWildcardRefParamParserRuleCall_1() { return cWildcardRefParamParserRuleCall_1; }
	}

	public class TypeRefParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeRefParam");
		private final RuleCall cTypeRefParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TypeRefParam returns be::IType:
		//	TypeRef;
		public ParserRule getRule() { return rule; }

		//TypeRef
		public RuleCall getTypeRefParserRuleCall() { return cTypeRefParserRuleCall; }
	}

	public class WildcardRefParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WildcardRefParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cB3WildcardTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cExtendsKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cUpperBoundsListAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cUpperBoundsListTypeRefParserRuleCall_2_0_1_0 = (RuleCall)cUpperBoundsListAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_0_2 = (Group)cGroup_2_0.eContents().get(2);
		private final Keyword cCommaKeyword_2_0_2_0 = (Keyword)cGroup_2_0_2.eContents().get(0);
		private final Assignment cUpperBoundsListAssignment_2_0_2_1 = (Assignment)cGroup_2_0_2.eContents().get(1);
		private final RuleCall cUpperBoundsListTypeRefParserRuleCall_2_0_2_1_0 = (RuleCall)cUpperBoundsListAssignment_2_0_2_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cSuperKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cLowerBoundsListAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cLowerBoundsListTypeRefParserRuleCall_2_1_1_0 = (RuleCall)cLowerBoundsListAssignment_2_1_1.eContents().get(0);
		
		//WildcardRefParam returns be::IType:
		//	{be::B3WildcardType} "?" ("extends" upperBoundsList+=TypeRef ("," upperBoundsList+=TypeRef)* | "super"
		//	lowerBoundsList+=TypeRef)?;
		public ParserRule getRule() { return rule; }

		//{be::B3WildcardType} "?" ("extends" upperBoundsList+=TypeRef ("," upperBoundsList+=TypeRef)* | "super"
		//lowerBoundsList+=TypeRef)?
		public Group getGroup() { return cGroup; }

		//{be::B3WildcardType}
		public Action getB3WildcardTypeAction_0() { return cB3WildcardTypeAction_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1() { return cQuestionMarkKeyword_1; }

		//("extends" upperBoundsList+=TypeRef ("," upperBoundsList+=TypeRef)* | "super" lowerBoundsList+=TypeRef)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"extends" upperBoundsList+=TypeRef ("," upperBoundsList+=TypeRef)*
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"extends"
		public Keyword getExtendsKeyword_2_0_0() { return cExtendsKeyword_2_0_0; }

		//upperBoundsList+=TypeRef
		public Assignment getUpperBoundsListAssignment_2_0_1() { return cUpperBoundsListAssignment_2_0_1; }

		//TypeRef
		public RuleCall getUpperBoundsListTypeRefParserRuleCall_2_0_1_0() { return cUpperBoundsListTypeRefParserRuleCall_2_0_1_0; }

		//("," upperBoundsList+=TypeRef)*
		public Group getGroup_2_0_2() { return cGroup_2_0_2; }

		//","
		public Keyword getCommaKeyword_2_0_2_0() { return cCommaKeyword_2_0_2_0; }

		//upperBoundsList+=TypeRef
		public Assignment getUpperBoundsListAssignment_2_0_2_1() { return cUpperBoundsListAssignment_2_0_2_1; }

		//TypeRef
		public RuleCall getUpperBoundsListTypeRefParserRuleCall_2_0_2_1_0() { return cUpperBoundsListTypeRefParserRuleCall_2_0_2_1_0; }

		//"super" lowerBoundsList+=TypeRef
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"super"
		public Keyword getSuperKeyword_2_1_0() { return cSuperKeyword_2_1_0; }

		//lowerBoundsList+=TypeRef
		public Assignment getLowerBoundsListAssignment_2_1_1() { return cLowerBoundsListAssignment_2_1_1; }

		//TypeRef
		public RuleCall getLowerBoundsListTypeRefParserRuleCall_2_1_1_0() { return cLowerBoundsListTypeRefParserRuleCall_2_1_1_0; }
	}

	public class CachedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CachedExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBCachedExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cCachedKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExprAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprOrExpressionParserRuleCall_0_2_0 = (RuleCall)cExprAssignment_0_2.eContents().get(0);
		private final RuleCall cOrExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CachedExpression returns be::BExpression:
		//	{be::BCachedExpression} "cached" expr=OrExpression | OrExpression;
		public ParserRule getRule() { return rule; }

		//{be::BCachedExpression} "cached" expr=OrExpression | OrExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//{be::BCachedExpression} "cached" expr=OrExpression
		public Group getGroup_0() { return cGroup_0; }

		//{be::BCachedExpression}
		public Action getBCachedExpressionAction_0_0() { return cBCachedExpressionAction_0_0; }

		//"cached"
		public Keyword getCachedKeyword_0_1() { return cCachedKeyword_0_1; }

		//expr=OrExpression
		public Assignment getExprAssignment_0_2() { return cExprAssignment_0_2; }

		//OrExpression
		public RuleCall getExprOrExpressionParserRuleCall_0_2_0() { return cExprOrExpressionParserRuleCall_0_2_0; }

		//OrExpression
		public RuleCall getOrExpressionParserRuleCall_1() { return cOrExpressionParserRuleCall_1; }
	}

	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBOrExpressionLeftExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightExprAssignment_1_2.eContents().get(0);
		
		//OrExpression returns be::BExpression:
		//	AndExpression ({be::BOrExpression.leftExpr=current} "||" rightExpr=AndExpression)*;
		public ParserRule getRule() { return rule; }

		//AndExpression ({be::BOrExpression.leftExpr=current} "||" rightExpr=AndExpression)*
		public Group getGroup() { return cGroup; }

		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }

		//({be::BOrExpression.leftExpr=current} "||" rightExpr=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{be::BOrExpression.leftExpr=current}
		public Action getBOrExpressionLeftExprAction_1_0() { return cBOrExpressionLeftExprAction_1_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }

		//rightExpr=AndExpression
		public Assignment getRightExprAssignment_1_2() { return cRightExprAssignment_1_2; }

		//AndExpression
		public RuleCall getRightExprAndExpressionParserRuleCall_1_2_0() { return cRightExprAndExpressionParserRuleCall_1_2_0; }
	}

	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBAndExpressionLeftExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprRelationalExpressionParserRuleCall_1_2_0 = (RuleCall)cRightExprAssignment_1_2.eContents().get(0);
		
		//AndExpression returns be::BExpression:
		//	RelationalExpression ({be::BAndExpression.leftExpr=current} "&&" rightExpr=RelationalExpression)*;
		public ParserRule getRule() { return rule; }

		//RelationalExpression ({be::BAndExpression.leftExpr=current} "&&" rightExpr=RelationalExpression)*
		public Group getGroup() { return cGroup; }

		//RelationalExpression
		public RuleCall getRelationalExpressionParserRuleCall_0() { return cRelationalExpressionParserRuleCall_0; }

		//({be::BAndExpression.leftExpr=current} "&&" rightExpr=RelationalExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{be::BAndExpression.leftExpr=current}
		public Action getBAndExpressionLeftExprAction_1_0() { return cBAndExpressionLeftExprAction_1_0; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }

		//rightExpr=RelationalExpression
		public Assignment getRightExprAssignment_1_2() { return cRightExprAssignment_1_2; }

		//RelationalExpression
		public RuleCall getRightExprRelationalExpressionParserRuleCall_1_2_0() { return cRightExprRelationalExpressionParserRuleCall_1_2_0; }
	}

	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cInstanceOfExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBBinaryOpExpressionLeftExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cFunctionNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFunctionNameRelationalOperatorParserRuleCall_1_1_0 = (RuleCall)cFunctionNameAssignment_1_1.eContents().get(0);
		private final Assignment cRightExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprInstanceOfExpressionParserRuleCall_1_2_0 = (RuleCall)cRightExprAssignment_1_2.eContents().get(0);
		
		//// DEPRECATED - bitwise operators available as system functions (still available in backend if someone wants to
		//// use the backend for some other language with a different grammar).
		//// BitwiseExpression returns be::BExpression :
		//// RelationalExpression ({be::BBinaryOpExpression.leftExpr=current} functionName=("&" | "^" | "|") rightExpr=RelationalExpression)*;
		//RelationalExpression returns be::BExpression:
		//	InstanceOfExpression ({be::BBinaryOpExpression.leftExpr=current} functionName=RelationalOperator
		//	rightExpr=InstanceOfExpression)*;
		public ParserRule getRule() { return rule; }

		//InstanceOfExpression ({be::BBinaryOpExpression.leftExpr=current} functionName=RelationalOperator
		//rightExpr=InstanceOfExpression)*
		public Group getGroup() { return cGroup; }

		//InstanceOfExpression
		public RuleCall getInstanceOfExpressionParserRuleCall_0() { return cInstanceOfExpressionParserRuleCall_0; }

		//({be::BBinaryOpExpression.leftExpr=current} functionName=RelationalOperator rightExpr=InstanceOfExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{be::BBinaryOpExpression.leftExpr=current}
		public Action getBBinaryOpExpressionLeftExprAction_1_0() { return cBBinaryOpExpressionLeftExprAction_1_0; }

		//functionName=RelationalOperator
		public Assignment getFunctionNameAssignment_1_1() { return cFunctionNameAssignment_1_1; }

		//RelationalOperator
		public RuleCall getFunctionNameRelationalOperatorParserRuleCall_1_1_0() { return cFunctionNameRelationalOperatorParserRuleCall_1_1_0; }

		//rightExpr=InstanceOfExpression
		public Assignment getRightExprAssignment_1_2() { return cRightExprAssignment_1_2; }

		//InstanceOfExpression
		public RuleCall getRightExprInstanceOfExpressionParserRuleCall_1_2_0() { return cRightExprInstanceOfExpressionParserRuleCall_1_2_0; }
	}

	public class InstanceOfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstanceOfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBBinaryOpExpressionLeftExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cFunctionNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cFunctionNameInstanceofKeyword_1_1_0 = (Keyword)cFunctionNameAssignment_1_1.eContents().get(0);
		private final Assignment cRightExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprLiteralTypeParserRuleCall_1_2_0 = (RuleCall)cRightExprAssignment_1_2.eContents().get(0);
		
		//InstanceOfExpression returns be::BExpression:
		//	AdditiveExpression ({be::BBinaryOpExpression.leftExpr=current} functionName="instanceof" rightExpr=LiteralType)*;
		public ParserRule getRule() { return rule; }

		//AdditiveExpression ({be::BBinaryOpExpression.leftExpr=current} functionName="instanceof" rightExpr=LiteralType)*
		public Group getGroup() { return cGroup; }

		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall_0() { return cAdditiveExpressionParserRuleCall_0; }

		//({be::BBinaryOpExpression.leftExpr=current} functionName="instanceof" rightExpr=LiteralType)*
		public Group getGroup_1() { return cGroup_1; }

		//{be::BBinaryOpExpression.leftExpr=current}
		public Action getBBinaryOpExpressionLeftExprAction_1_0() { return cBBinaryOpExpressionLeftExprAction_1_0; }

		//functionName="instanceof"
		public Assignment getFunctionNameAssignment_1_1() { return cFunctionNameAssignment_1_1; }

		//"instanceof"
		public Keyword getFunctionNameInstanceofKeyword_1_1_0() { return cFunctionNameInstanceofKeyword_1_1_0; }

		//rightExpr=LiteralType
		public Assignment getRightExprAssignment_1_2() { return cRightExprAssignment_1_2; }

		//LiteralType
		public RuleCall getRightExprLiteralTypeParserRuleCall_1_2_0() { return cRightExprLiteralTypeParserRuleCall_1_2_0; }
	}

	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBBinaryOpExpressionLeftExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cFunctionNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cFunctionNameAlternatives_1_1_0 = (Alternatives)cFunctionNameAssignment_1_1.eContents().get(0);
		private final Keyword cFunctionNamePlusSignKeyword_1_1_0_0 = (Keyword)cFunctionNameAlternatives_1_1_0.eContents().get(0);
		private final Keyword cFunctionNameHyphenMinusKeyword_1_1_0_1 = (Keyword)cFunctionNameAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprMultiplicativeExpressionParserRuleCall_1_2_0 = (RuleCall)cRightExprAssignment_1_2.eContents().get(0);
		
		//// DEPRECATED - bitwise operators available as system functions (still available in backend if someone wants to
		//// use the backend for some other language with a different grammar).
		//// ShiftExpression returns be::BExpression:
		//// AdditiveExpression ({be::BBinaryOpExpression.leftExpr=current} functionName=("<<" | ">>" | ">>>") rightExpr=AdditiveExpression)*;
		//AdditiveExpression returns be::BExpression:
		//	MultiplicativeExpression ({be::BBinaryOpExpression.leftExpr=current} functionName=("+" | "-")
		//	rightExpr=MultiplicativeExpression)*;
		public ParserRule getRule() { return rule; }

		//MultiplicativeExpression ({be::BBinaryOpExpression.leftExpr=current} functionName=("+" | "-")
		//rightExpr=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//MultiplicativeExpression
		public RuleCall getMultiplicativeExpressionParserRuleCall_0() { return cMultiplicativeExpressionParserRuleCall_0; }

		//({be::BBinaryOpExpression.leftExpr=current} functionName=("+" | "-") rightExpr=MultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{be::BBinaryOpExpression.leftExpr=current}
		public Action getBBinaryOpExpressionLeftExprAction_1_0() { return cBBinaryOpExpressionLeftExprAction_1_0; }

		//functionName=("+" | "-")
		public Assignment getFunctionNameAssignment_1_1() { return cFunctionNameAssignment_1_1; }

		//"+" | "-"
		public Alternatives getFunctionNameAlternatives_1_1_0() { return cFunctionNameAlternatives_1_1_0; }

		//"+"
		public Keyword getFunctionNamePlusSignKeyword_1_1_0_0() { return cFunctionNamePlusSignKeyword_1_1_0_0; }

		//"-"
		public Keyword getFunctionNameHyphenMinusKeyword_1_1_0_1() { return cFunctionNameHyphenMinusKeyword_1_1_0_1; }

		//rightExpr=MultiplicativeExpression
		public Assignment getRightExprAssignment_1_2() { return cRightExprAssignment_1_2; }

		//MultiplicativeExpression
		public RuleCall getRightExprMultiplicativeExpressionParserRuleCall_1_2_0() { return cRightExprMultiplicativeExpressionParserRuleCall_1_2_0; }
	}

	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSetExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBBinaryOpExpressionLeftExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cFunctionNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cFunctionNameAlternatives_1_1_0 = (Alternatives)cFunctionNameAssignment_1_1.eContents().get(0);
		private final Keyword cFunctionNameAsteriskKeyword_1_1_0_0 = (Keyword)cFunctionNameAlternatives_1_1_0.eContents().get(0);
		private final Keyword cFunctionNameSolidusKeyword_1_1_0_1 = (Keyword)cFunctionNameAlternatives_1_1_0.eContents().get(1);
		private final Keyword cFunctionNamePercentSignKeyword_1_1_0_2 = (Keyword)cFunctionNameAlternatives_1_1_0.eContents().get(2);
		private final Assignment cRightExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprSetExpressionParserRuleCall_1_2_0 = (RuleCall)cRightExprAssignment_1_2.eContents().get(0);
		
		//MultiplicativeExpression returns be::BExpression:
		//	SetExpression ({be::BBinaryOpExpression.leftExpr=current} functionName=("*" | "/" | "%") rightExpr=SetExpression)*;
		public ParserRule getRule() { return rule; }

		//SetExpression ({be::BBinaryOpExpression.leftExpr=current} functionName=("*" | "/" | "%") rightExpr=SetExpression)*
		public Group getGroup() { return cGroup; }

		//SetExpression
		public RuleCall getSetExpressionParserRuleCall_0() { return cSetExpressionParserRuleCall_0; }

		//({be::BBinaryOpExpression.leftExpr=current} functionName=("*" | "/" | "%") rightExpr=SetExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{be::BBinaryOpExpression.leftExpr=current}
		public Action getBBinaryOpExpressionLeftExprAction_1_0() { return cBBinaryOpExpressionLeftExprAction_1_0; }

		//functionName=("*" | "/" | "%")
		public Assignment getFunctionNameAssignment_1_1() { return cFunctionNameAssignment_1_1; }

		//"*" | "/" | "%"
		public Alternatives getFunctionNameAlternatives_1_1_0() { return cFunctionNameAlternatives_1_1_0; }

		//"*"
		public Keyword getFunctionNameAsteriskKeyword_1_1_0_0() { return cFunctionNameAsteriskKeyword_1_1_0_0; }

		//"/"
		public Keyword getFunctionNameSolidusKeyword_1_1_0_1() { return cFunctionNameSolidusKeyword_1_1_0_1; }

		//"%"
		public Keyword getFunctionNamePercentSignKeyword_1_1_0_2() { return cFunctionNamePercentSignKeyword_1_1_0_2; }

		//rightExpr=SetExpression
		public Assignment getRightExprAssignment_1_2() { return cRightExprAssignment_1_2; }

		//SetExpression
		public RuleCall getRightExprSetExpressionParserRuleCall_1_2_0() { return cRightExprSetExpressionParserRuleCall_1_2_0; }
	}

	public class SetExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryOrInfixExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBBinaryOpExpressionLeftExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cFunctionNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cFunctionNameFullStopFullStopKeyword_1_1_0 = (Keyword)cFunctionNameAssignment_1_1.eContents().get(0);
		private final Assignment cRightExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprUnaryOrInfixExpressionParserRuleCall_1_2_0 = (RuleCall)cRightExprAssignment_1_2.eContents().get(0);
		
		//SetExpression returns be::BExpression:
		//	UnaryOrInfixExpression ({be::BBinaryOpExpression.leftExpr=current} functionName=".."
		//	rightExpr=UnaryOrInfixExpression)*;
		public ParserRule getRule() { return rule; }

		//UnaryOrInfixExpression ({be::BBinaryOpExpression.leftExpr=current} functionName=".." rightExpr=UnaryOrInfixExpression)*
		public Group getGroup() { return cGroup; }

		//UnaryOrInfixExpression
		public RuleCall getUnaryOrInfixExpressionParserRuleCall_0() { return cUnaryOrInfixExpressionParserRuleCall_0; }

		//({be::BBinaryOpExpression.leftExpr=current} functionName=".." rightExpr=UnaryOrInfixExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{be::BBinaryOpExpression.leftExpr=current}
		public Action getBBinaryOpExpressionLeftExprAction_1_0() { return cBBinaryOpExpressionLeftExprAction_1_0; }

		//functionName=".."
		public Assignment getFunctionNameAssignment_1_1() { return cFunctionNameAssignment_1_1; }

		//".."
		public Keyword getFunctionNameFullStopFullStopKeyword_1_1_0() { return cFunctionNameFullStopFullStopKeyword_1_1_0; }

		//rightExpr=UnaryOrInfixExpression
		public Assignment getRightExprAssignment_1_2() { return cRightExprAssignment_1_2; }

		//UnaryOrInfixExpression
		public RuleCall getRightExprUnaryOrInfixExpressionParserRuleCall_1_2_0() { return cRightExprUnaryOrInfixExpressionParserRuleCall_1_2_0; }
	}

	public class UnaryOrInfixExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOrInfixExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPostopExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPreopExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//UnaryOrInfixExpression returns be::BExpression:
		//	PostopExpression | UnaryExpression | PreopExpression;
		public ParserRule getRule() { return rule; }

		//PostopExpression | UnaryExpression | PreopExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//PostopExpression
		public RuleCall getPostopExpressionParserRuleCall_0() { return cPostopExpressionParserRuleCall_0; }

		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_1() { return cUnaryExpressionParserRuleCall_1; }

		//PreopExpression
		public RuleCall getPreopExpressionParserRuleCall_2() { return cPreopExpressionParserRuleCall_2; }
	}

	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBUnaryOpExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunctionNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cFunctionNameAlternatives_1_0 = (Alternatives)cFunctionNameAssignment_1.eContents().get(0);
		private final Keyword cFunctionNameExclamationMarkKeyword_1_0_0 = (Keyword)cFunctionNameAlternatives_1_0.eContents().get(0);
		private final Keyword cFunctionNameHyphenMinusKeyword_1_0_1 = (Keyword)cFunctionNameAlternatives_1_0.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprInfixExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//// DEPRECATED - bitwise operators available as system functions (still available in backend if someone wants to
		//// use the backend for some other language with a different grammar).
		//// Bitwise unary expression ~ for 2's complement deprecated, b3 language uses a system function instead
		//// UnaryExpression returns be::BExpression:
		////	 {be::BUnaryOpExpression} functionName=("!" | "-" | "~") expr=InfixExpression;
		//UnaryExpression returns be::BExpression:
		//	{be::BUnaryOpExpression} functionName=("!" | "-") expr=InfixExpression;
		public ParserRule getRule() { return rule; }

		//{be::BUnaryOpExpression} functionName=("!" | "-") expr=InfixExpression
		public Group getGroup() { return cGroup; }

		//{be::BUnaryOpExpression}
		public Action getBUnaryOpExpressionAction_0() { return cBUnaryOpExpressionAction_0; }

		//functionName=("!" | "-")
		public Assignment getFunctionNameAssignment_1() { return cFunctionNameAssignment_1; }

		//"!" | "-"
		public Alternatives getFunctionNameAlternatives_1_0() { return cFunctionNameAlternatives_1_0; }

		//"!"
		public Keyword getFunctionNameExclamationMarkKeyword_1_0_0() { return cFunctionNameExclamationMarkKeyword_1_0_0; }

		//"-"
		public Keyword getFunctionNameHyphenMinusKeyword_1_0_1() { return cFunctionNameHyphenMinusKeyword_1_0_1; }

		//expr=InfixExpression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//InfixExpression
		public RuleCall getExprInfixExpressionParserRuleCall_2_0() { return cExprInfixExpressionParserRuleCall_2_0; }
	}

	public class PreopExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PreopExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBUnaryPreOpExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunctionNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cFunctionNameAlternatives_1_0 = (Alternatives)cFunctionNameAssignment_1.eContents().get(0);
		private final Keyword cFunctionNamePlusSignPlusSignKeyword_1_0_0 = (Keyword)cFunctionNameAlternatives_1_0.eContents().get(0);
		private final Keyword cFunctionNameHyphenMinusHyphenMinusKeyword_1_0_1 = (Keyword)cFunctionNameAlternatives_1_0.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprInfixExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//PreopExpression returns be::BExpression:
		//	{be::BUnaryPreOpExpression} functionName=("++" | "--") expr=InfixExpression;
		public ParserRule getRule() { return rule; }

		//{be::BUnaryPreOpExpression} functionName=("++" | "--") expr=InfixExpression
		public Group getGroup() { return cGroup; }

		//{be::BUnaryPreOpExpression}
		public Action getBUnaryPreOpExpressionAction_0() { return cBUnaryPreOpExpressionAction_0; }

		//functionName=("++" | "--")
		public Assignment getFunctionNameAssignment_1() { return cFunctionNameAssignment_1; }

		//"++" | "--"
		public Alternatives getFunctionNameAlternatives_1_0() { return cFunctionNameAlternatives_1_0; }

		//"++"
		public Keyword getFunctionNamePlusSignPlusSignKeyword_1_0_0() { return cFunctionNamePlusSignPlusSignKeyword_1_0_0; }

		//"--"
		public Keyword getFunctionNameHyphenMinusHyphenMinusKeyword_1_0_1() { return cFunctionNameHyphenMinusHyphenMinusKeyword_1_0_1; }

		//expr=InfixExpression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//InfixExpression
		public RuleCall getExprInfixExpressionParserRuleCall_2_0() { return cExprInfixExpressionParserRuleCall_2_0; }
	}

	public class PostopExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PostopExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cInfixExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBUnaryPostOpExpressionExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cFunctionNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cFunctionNameAlternatives_1_1_0 = (Alternatives)cFunctionNameAssignment_1_1.eContents().get(0);
		private final Keyword cFunctionNameHyphenMinusHyphenMinusKeyword_1_1_0_0 = (Keyword)cFunctionNameAlternatives_1_1_0.eContents().get(0);
		private final Keyword cFunctionNamePlusSignPlusSignKeyword_1_1_0_1 = (Keyword)cFunctionNameAlternatives_1_1_0.eContents().get(1);
		
		//PostopExpression returns be::BExpression:
		//	InfixExpression ({be::BUnaryPostOpExpression.expr=current} functionName=("--" | "++"))?;
		public ParserRule getRule() { return rule; }

		//InfixExpression ({be::BUnaryPostOpExpression.expr=current} functionName=("--" | "++"))?
		public Group getGroup() { return cGroup; }

		//InfixExpression
		public RuleCall getInfixExpressionParserRuleCall_0() { return cInfixExpressionParserRuleCall_0; }

		//({be::BUnaryPostOpExpression.expr=current} functionName=("--" | "++"))?
		public Group getGroup_1() { return cGroup_1; }

		//{be::BUnaryPostOpExpression.expr=current}
		public Action getBUnaryPostOpExpressionExprAction_1_0() { return cBUnaryPostOpExpressionExprAction_1_0; }

		//functionName=("--" | "++")
		public Assignment getFunctionNameAssignment_1_1() { return cFunctionNameAssignment_1_1; }

		//"--" | "++"
		public Alternatives getFunctionNameAlternatives_1_1_0() { return cFunctionNameAlternatives_1_1_0; }

		//"--"
		public Keyword getFunctionNameHyphenMinusHyphenMinusKeyword_1_1_0_0() { return cFunctionNameHyphenMinusHyphenMinusKeyword_1_1_0_0; }

		//"++"
		public Keyword getFunctionNamePlusSignPlusSignKeyword_1_1_0_1() { return cFunctionNamePlusSignPlusSignKeyword_1_1_0_1; }
	}

	public class InfixExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InfixExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCallExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cBCallFeatureFuncExprAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cNameAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cNameID_or_KWParserRuleCall_1_0_2_0 = (RuleCall)cNameAssignment_1_0_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Assignment cParameterListAssignment_1_0_4 = (Assignment)cGroup_1_0.eContents().get(4);
		private final RuleCall cParameterListParameterListParserRuleCall_1_0_4_0 = (RuleCall)cParameterListAssignment_1_0_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_5 = (Keyword)cGroup_1_0.eContents().get(5);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cBAtExpressionObjExprAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cIndexExprAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cIndexExprExpressionParserRuleCall_1_1_2_0 = (RuleCall)cIndexExprAssignment_1_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cBFeatureExpressionObjExprAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cFullStopKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cFeatureNameAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cFeatureNameID_or_KWParserRuleCall_1_2_2_0 = (RuleCall)cFeatureNameAssignment_1_2_2.eContents().get(0);
		
		//InfixExpression returns be::BExpression:
		//	CallExpression ({be::BCallFeature.funcExpr=current} "." name=ID_or_KW "(" parameterList=ParameterList? ")" |
		//	{be::BAtExpression.objExpr=current} "[" indexExpr=Expression "]" | {be::BFeatureExpression.objExpr=current} "."
		//	featureName=ID_or_KW)*;
		public ParserRule getRule() { return rule; }

		//CallExpression ({be::BCallFeature.funcExpr=current} "." name=ID_or_KW "(" parameterList=ParameterList? ")" |
		//{be::BAtExpression.objExpr=current} "[" indexExpr=Expression "]" | {be::BFeatureExpression.objExpr=current} "."
		//featureName=ID_or_KW)*
		public Group getGroup() { return cGroup; }

		//CallExpression
		public RuleCall getCallExpressionParserRuleCall_0() { return cCallExpressionParserRuleCall_0; }

		//({be::BCallFeature.funcExpr=current} "." name=ID_or_KW "(" parameterList=ParameterList? ")" |
		//{be::BAtExpression.objExpr=current} "[" indexExpr=Expression "]" | {be::BFeatureExpression.objExpr=current} "."
		//featureName=ID_or_KW)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{be::BCallFeature.funcExpr=current} "." name=ID_or_KW "(" parameterList=ParameterList? ")"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{be::BCallFeature.funcExpr=current}
		public Action getBCallFeatureFuncExprAction_1_0_0() { return cBCallFeatureFuncExprAction_1_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_0_1() { return cFullStopKeyword_1_0_1; }

		//name=ID_or_KW
		public Assignment getNameAssignment_1_0_2() { return cNameAssignment_1_0_2; }

		//ID_or_KW
		public RuleCall getNameID_or_KWParserRuleCall_1_0_2_0() { return cNameID_or_KWParserRuleCall_1_0_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_3() { return cLeftParenthesisKeyword_1_0_3; }

		//parameterList=ParameterList?
		public Assignment getParameterListAssignment_1_0_4() { return cParameterListAssignment_1_0_4; }

		//ParameterList
		public RuleCall getParameterListParameterListParserRuleCall_1_0_4_0() { return cParameterListParameterListParserRuleCall_1_0_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_5() { return cRightParenthesisKeyword_1_0_5; }

		//{be::BAtExpression.objExpr=current} "[" indexExpr=Expression "]"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{be::BAtExpression.objExpr=current}
		public Action getBAtExpressionObjExprAction_1_1_0() { return cBAtExpressionObjExprAction_1_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_1() { return cLeftSquareBracketKeyword_1_1_1; }

		//indexExpr=Expression
		public Assignment getIndexExprAssignment_1_1_2() { return cIndexExprAssignment_1_1_2; }

		//Expression
		public RuleCall getIndexExprExpressionParserRuleCall_1_1_2_0() { return cIndexExprExpressionParserRuleCall_1_1_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_3() { return cRightSquareBracketKeyword_1_1_3; }

		//{be::BFeatureExpression.objExpr=current} "." featureName=ID_or_KW
		public Group getGroup_1_2() { return cGroup_1_2; }

		//{be::BFeatureExpression.objExpr=current}
		public Action getBFeatureExpressionObjExprAction_1_2_0() { return cBFeatureExpressionObjExprAction_1_2_0; }

		//"."
		public Keyword getFullStopKeyword_1_2_1() { return cFullStopKeyword_1_2_1; }

		//featureName=ID_or_KW
		public Assignment getFeatureNameAssignment_1_2_2() { return cFeatureNameAssignment_1_2_2; }

		//ID_or_KW
		public RuleCall getFeatureNameID_or_KWParserRuleCall_1_2_2_0() { return cFeatureNameID_or_KWParserRuleCall_1_2_2_0; }
	}

	public class CallExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CallExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBCallFunctionFuncExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cParameterListAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cParameterListParameterListParserRuleCall_1_2_0 = (RuleCall)cParameterListAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//CallExpression returns be::BExpression:
		//	PrimaryExpression ({be::BCallFunction.funcExpr=current} "(" parameterList=ParameterList? ")")*;
		public ParserRule getRule() { return rule; }

		//PrimaryExpression ({be::BCallFunction.funcExpr=current} "(" parameterList=ParameterList? ")")*
		public Group getGroup() { return cGroup; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//({be::BCallFunction.funcExpr=current} "(" parameterList=ParameterList? ")")*
		public Group getGroup_1() { return cGroup_1; }

		//{be::BCallFunction.funcExpr=current}
		public Action getBCallFunctionFuncExprAction_1_0() { return cBCallFunctionFuncExprAction_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//parameterList=ParameterList?
		public Assignment getParameterListAssignment_1_2() { return cParameterListAssignment_1_2; }

		//ParameterList
		public RuleCall getParameterListParameterListParserRuleCall_1_2_0() { return cParameterListParameterListParserRuleCall_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFeatureCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstructorCallExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPropertyValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cParanthesizedExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cIfExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cBlockExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cSwitchExpressionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cThrowExpressionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cTryCatchExpressionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cProceedExpressionParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cWithExpressionParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cWithContextExpressionParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		
		//PrimaryExpression returns be::BExpression:
		//	FeatureCall | ConstructorCallExpression | VariableValue | Literal | PropertyValue | ParanthesizedExpression |
		//	IfExpression | BlockExpression | SwitchExpression | ThrowExpression | TryCatchExpression | ProceedExpression |
		//	WithExpression | WithContextExpression;
		public ParserRule getRule() { return rule; }

		//FeatureCall | ConstructorCallExpression | VariableValue | Literal | PropertyValue | ParanthesizedExpression |
		//IfExpression | BlockExpression | SwitchExpression | ThrowExpression | TryCatchExpression | ProceedExpression |
		//WithExpression | WithContextExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//FeatureCall
		public RuleCall getFeatureCallParserRuleCall_0() { return cFeatureCallParserRuleCall_0; }

		//ConstructorCallExpression
		public RuleCall getConstructorCallExpressionParserRuleCall_1() { return cConstructorCallExpressionParserRuleCall_1; }

		//VariableValue
		public RuleCall getVariableValueParserRuleCall_2() { return cVariableValueParserRuleCall_2; }

		//Literal
		public RuleCall getLiteralParserRuleCall_3() { return cLiteralParserRuleCall_3; }

		//PropertyValue
		public RuleCall getPropertyValueParserRuleCall_4() { return cPropertyValueParserRuleCall_4; }

		//ParanthesizedExpression
		public RuleCall getParanthesizedExpressionParserRuleCall_5() { return cParanthesizedExpressionParserRuleCall_5; }

		//IfExpression
		public RuleCall getIfExpressionParserRuleCall_6() { return cIfExpressionParserRuleCall_6; }

		//BlockExpression
		public RuleCall getBlockExpressionParserRuleCall_7() { return cBlockExpressionParserRuleCall_7; }

		//SwitchExpression
		public RuleCall getSwitchExpressionParserRuleCall_8() { return cSwitchExpressionParserRuleCall_8; }

		//ThrowExpression
		public RuleCall getThrowExpressionParserRuleCall_9() { return cThrowExpressionParserRuleCall_9; }

		//TryCatchExpression
		public RuleCall getTryCatchExpressionParserRuleCall_10() { return cTryCatchExpressionParserRuleCall_10; }

		//ProceedExpression
		public RuleCall getProceedExpressionParserRuleCall_11() { return cProceedExpressionParserRuleCall_11; }

		//WithExpression
		public RuleCall getWithExpressionParserRuleCall_12() { return cWithExpressionParserRuleCall_12; }

		//WithContextExpression
		public RuleCall getWithContextExpressionParserRuleCall_13() { return cWithContextExpressionParserRuleCall_13; }
	}

	public class WithExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WithExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBWithExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cReferencedAdviceAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cReferencedAdviceBAdviceCrossReference_2_0_0 = (CrossReference)cReferencedAdviceAssignment_2_0.eContents().get(0);
		private final RuleCall cReferencedAdviceBAdviceIDTerminalRuleCall_2_0_0_1 = (RuleCall)cReferencedAdviceBAdviceCrossReference_2_0_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cReferencedAdviceAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final CrossReference cReferencedAdviceBAdviceCrossReference_2_1_1_0 = (CrossReference)cReferencedAdviceAssignment_2_1_1.eContents().get(0);
		private final RuleCall cReferencedAdviceBAdviceIDTerminalRuleCall_2_1_1_0_1 = (RuleCall)cReferencedAdviceBAdviceCrossReference_2_1_1_0.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cPropertySetsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cPropertySetsPropertySetParserRuleCall_3_0_0 = (RuleCall)cPropertySetsAssignment_3_0.eContents().get(0);
		private final Assignment cPropertySetsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cPropertySetsPropertySetDefaultParserRuleCall_3_1_0 = (RuleCall)cPropertySetsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cAlternatives_3.eContents().get(2);
		private final Keyword cConcernKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cConcernsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cConcernsConcern_AnonymousParserRuleCall_3_2_1_0 = (RuleCall)cConcernsAssignment_3_2_1.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cColonKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cFuncExprAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cFuncExprExpressionParserRuleCall_4_0_1_0 = (RuleCall)cFuncExprAssignment_4_0_1.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cFuncExprAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cFuncExprBlockExpressionWithoutBracketsParserRuleCall_4_1_1_0 = (RuleCall)cFuncExprAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_1_2 = (Keyword)cGroup_4_1.eContents().get(2);
		
		//// Validation checks that there is at least one of references, properties or concern.
		//WithExpression returns be::BWithExpression:
		//	{be::BWithExpression} "with" (referencedAdvice+=[be::BAdvice] ("," referencedAdvice+=[be::BAdvice])*)?
		//	(propertySets+=PropertySet //		( '(' referencedAdvice += [be::BAdvice | ID] (',' referencedAdvice += [be::BAdvice | ID])* ')' )? 
		//	| propertySets+=PropertySetDefault | "concern" concerns+=Concern_Anonymous)* (":" funcExpr=Expression | "{"
		//	funcExpr=BlockExpressionWithoutBrackets "}");
		public ParserRule getRule() { return rule; }

		//{be::BWithExpression} "with" (referencedAdvice+=[be::BAdvice] ("," referencedAdvice+=[be::BAdvice])*)?
		//(propertySets+=PropertySet //		( '(' referencedAdvice += [be::BAdvice | ID] (',' referencedAdvice += [be::BAdvice | ID])* ')' )? 
		//| propertySets+=PropertySetDefault | "concern" concerns+=Concern_Anonymous)* (":" funcExpr=Expression | "{"
		//funcExpr=BlockExpressionWithoutBrackets "}")
		public Group getGroup() { return cGroup; }

		//{be::BWithExpression}
		public Action getBWithExpressionAction_0() { return cBWithExpressionAction_0; }

		//"with"
		public Keyword getWithKeyword_1() { return cWithKeyword_1; }

		//(referencedAdvice+=[be::BAdvice] ("," referencedAdvice+=[be::BAdvice])*)?
		public Group getGroup_2() { return cGroup_2; }

		//referencedAdvice+=[be::BAdvice]
		public Assignment getReferencedAdviceAssignment_2_0() { return cReferencedAdviceAssignment_2_0; }

		//[be::BAdvice]
		public CrossReference getReferencedAdviceBAdviceCrossReference_2_0_0() { return cReferencedAdviceBAdviceCrossReference_2_0_0; }

		//ID
		public RuleCall getReferencedAdviceBAdviceIDTerminalRuleCall_2_0_0_1() { return cReferencedAdviceBAdviceIDTerminalRuleCall_2_0_0_1; }

		//("," referencedAdvice+=[be::BAdvice])*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//referencedAdvice+=[be::BAdvice]
		public Assignment getReferencedAdviceAssignment_2_1_1() { return cReferencedAdviceAssignment_2_1_1; }

		//[be::BAdvice]
		public CrossReference getReferencedAdviceBAdviceCrossReference_2_1_1_0() { return cReferencedAdviceBAdviceCrossReference_2_1_1_0; }

		//ID
		public RuleCall getReferencedAdviceBAdviceIDTerminalRuleCall_2_1_1_0_1() { return cReferencedAdviceBAdviceIDTerminalRuleCall_2_1_1_0_1; }

		//(propertySets+=PropertySet //		( '(' referencedAdvice += [be::BAdvice | ID] (',' referencedAdvice += [be::BAdvice | ID])* ')' )? 
		//| propertySets+=PropertySetDefault | "concern" concerns+=Concern_Anonymous)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//propertySets+=PropertySet
		public Assignment getPropertySetsAssignment_3_0() { return cPropertySetsAssignment_3_0; }

		//PropertySet
		public RuleCall getPropertySetsPropertySetParserRuleCall_3_0_0() { return cPropertySetsPropertySetParserRuleCall_3_0_0; }

		//propertySets+=PropertySetDefault
		public Assignment getPropertySetsAssignment_3_1() { return cPropertySetsAssignment_3_1; }

		//PropertySetDefault
		public RuleCall getPropertySetsPropertySetDefaultParserRuleCall_3_1_0() { return cPropertySetsPropertySetDefaultParserRuleCall_3_1_0; }

		//"concern" concerns+=Concern_Anonymous
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"concern"
		public Keyword getConcernKeyword_3_2_0() { return cConcernKeyword_3_2_0; }

		//concerns+=Concern_Anonymous
		public Assignment getConcernsAssignment_3_2_1() { return cConcernsAssignment_3_2_1; }

		//Concern_Anonymous
		public RuleCall getConcernsConcern_AnonymousParserRuleCall_3_2_1_0() { return cConcernsConcern_AnonymousParserRuleCall_3_2_1_0; }

		//":" funcExpr=Expression | "{" funcExpr=BlockExpressionWithoutBrackets "}"
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//":" funcExpr=Expression
		public Group getGroup_4_0() { return cGroup_4_0; }

		//":"
		public Keyword getColonKeyword_4_0_0() { return cColonKeyword_4_0_0; }

		//funcExpr=Expression
		public Assignment getFuncExprAssignment_4_0_1() { return cFuncExprAssignment_4_0_1; }

		//Expression
		public RuleCall getFuncExprExpressionParserRuleCall_4_0_1_0() { return cFuncExprExpressionParserRuleCall_4_0_1_0; }

		//"{" funcExpr=BlockExpressionWithoutBrackets "}"
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_1_0() { return cLeftCurlyBracketKeyword_4_1_0; }

		//funcExpr=BlockExpressionWithoutBrackets
		public Assignment getFuncExprAssignment_4_1_1() { return cFuncExprAssignment_4_1_1; }

		//BlockExpressionWithoutBrackets
		public RuleCall getFuncExprBlockExpressionWithoutBracketsParserRuleCall_4_1_1_0() { return cFuncExprBlockExpressionWithoutBracketsParserRuleCall_4_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_1_2() { return cRightCurlyBracketKeyword_4_1_2; }
	}

	public class WithContextExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WithContextExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBWithContextExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cContextKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprExpressionParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_4_1_0 = (RuleCall)cNameAssignment_4_1.eContents().get(0);
		private final Assignment cContextBlockAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cContextBlockBlockExpressionParserRuleCall_5_0 = (RuleCall)cContextBlockAssignment_5.eContents().get(0);
		
		//WithContextExpression returns be::BWithContextExpression:
		//	{be::BWithContextExpression} "with" "context" expr=Expression ("as" name=ID)? contextBlock=BlockExpression;
		public ParserRule getRule() { return rule; }

		//{be::BWithContextExpression} "with" "context" expr=Expression ("as" name=ID)? contextBlock=BlockExpression
		public Group getGroup() { return cGroup; }

		//{be::BWithContextExpression}
		public Action getBWithContextExpressionAction_0() { return cBWithContextExpressionAction_0; }

		//"with"
		public Keyword getWithKeyword_1() { return cWithKeyword_1; }

		//"context"
		public Keyword getContextKeyword_2() { return cContextKeyword_2; }

		//expr=Expression
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_3_0() { return cExprExpressionParserRuleCall_3_0; }

		//("as" name=ID)?
		public Group getGroup_4() { return cGroup_4; }

		//"as"
		public Keyword getAsKeyword_4_0() { return cAsKeyword_4_0; }

		//name=ID
		public Assignment getNameAssignment_4_1() { return cNameAssignment_4_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_1_0() { return cNameIDTerminalRuleCall_4_1_0; }

		//contextBlock=BlockExpression
		public Assignment getContextBlockAssignment_5() { return cContextBlockAssignment_5; }

		//BlockExpression
		public RuleCall getContextBlockBlockExpressionParserRuleCall_5_0() { return cContextBlockBlockExpressionParserRuleCall_5_0; }
	}

	public class ProceedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProceedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBProceedExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cProceedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ProceedExpression returns be::BExpression:
		//	{be::BProceedExpression} "proceed";
		public ParserRule getRule() { return rule; }

		//{be::BProceedExpression} "proceed"
		public Group getGroup() { return cGroup; }

		//{be::BProceedExpression}
		public Action getBProceedExpressionAction_0() { return cBProceedExpressionAction_0; }

		//"proceed"
		public Keyword getProceedKeyword_1() { return cProceedKeyword_1; }
	}

	public class WildcardExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WildcardExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBLiteralAnyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword c_Keyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//WildcardExpression returns be::BLiteralAny:
		//	{be::BLiteralAny} "_";
		public ParserRule getRule() { return rule; }

		//{be::BLiteralAny} "_"
		public Group getGroup() { return cGroup; }

		//{be::BLiteralAny}
		public Action getBLiteralAnyAction_0() { return cBLiteralAnyAction_0; }

		//"_"
		public Keyword get_Keyword_1() { return c_Keyword_1; }
	}

	public class ThrowExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ThrowExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBThrowExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cThrowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//ThrowExpression returns be::BExpression:
		//	{be::BThrowExpression} "throw" expr=Expression;
		public ParserRule getRule() { return rule; }

		//{be::BThrowExpression} "throw" expr=Expression
		public Group getGroup() { return cGroup; }

		//{be::BThrowExpression}
		public Action getBThrowExpressionAction_0() { return cBThrowExpressionAction_0; }

		//"throw"
		public Keyword getThrowKeyword_1() { return cThrowKeyword_1; }

		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }
	}

	public class TryCatchExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TryCatchExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBTryExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTryExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTryExprExpressionParserRuleCall_2_0 = (RuleCall)cTryExprAssignment_2.eContents().get(0);
		private final Assignment cCatchBlocksAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCatchBlocksCatchBlockParserRuleCall_3_0 = (RuleCall)cCatchBlocksAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFinallyKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFinallyExprAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFinallyExprExpressionParserRuleCall_4_1_0 = (RuleCall)cFinallyExprAssignment_4_1.eContents().get(0);
		private final Keyword cEndtryKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TryCatchExpression returns be::BExpression:
		//	{be::BTryExpression} "try" tryExpr=Expression catchBlocks+=CatchBlock* ("finally" finallyExpr=Expression)? "endtry";
		public ParserRule getRule() { return rule; }

		//{be::BTryExpression} "try" tryExpr=Expression catchBlocks+=CatchBlock* ("finally" finallyExpr=Expression)? "endtry"
		public Group getGroup() { return cGroup; }

		//{be::BTryExpression}
		public Action getBTryExpressionAction_0() { return cBTryExpressionAction_0; }

		//"try"
		public Keyword getTryKeyword_1() { return cTryKeyword_1; }

		//tryExpr=Expression
		public Assignment getTryExprAssignment_2() { return cTryExprAssignment_2; }

		//Expression
		public RuleCall getTryExprExpressionParserRuleCall_2_0() { return cTryExprExpressionParserRuleCall_2_0; }

		//catchBlocks+=CatchBlock*
		public Assignment getCatchBlocksAssignment_3() { return cCatchBlocksAssignment_3; }

		//CatchBlock
		public RuleCall getCatchBlocksCatchBlockParserRuleCall_3_0() { return cCatchBlocksCatchBlockParserRuleCall_3_0; }

		//("finally" finallyExpr=Expression)?
		public Group getGroup_4() { return cGroup_4; }

		//"finally"
		public Keyword getFinallyKeyword_4_0() { return cFinallyKeyword_4_0; }

		//finallyExpr=Expression
		public Assignment getFinallyExprAssignment_4_1() { return cFinallyExprAssignment_4_1; }

		//Expression
		public RuleCall getFinallyExprExpressionParserRuleCall_4_1_0() { return cFinallyExprExpressionParserRuleCall_4_1_0; }

		//"endtry"
		public Keyword getEndtryKeyword_5() { return cEndtryKeyword_5; }
	}

	public class CatchBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CatchBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBCatchAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCatchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeRefParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCatchExprAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCatchExprExpressionParserRuleCall_5_0 = (RuleCall)cCatchExprAssignment_5.eContents().get(0);
		
		//CatchBlock returns be::BCatch:
		//	{be::BCatch} "catch" type=TypeRef name=ID ":" catchExpr=Expression;
		public ParserRule getRule() { return rule; }

		//{be::BCatch} "catch" type=TypeRef name=ID ":" catchExpr=Expression
		public Group getGroup() { return cGroup; }

		//{be::BCatch}
		public Action getBCatchAction_0() { return cBCatchAction_0; }

		//"catch"
		public Keyword getCatchKeyword_1() { return cCatchKeyword_1; }

		//type=TypeRef
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_2_0() { return cTypeTypeRefParserRuleCall_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//catchExpr=Expression
		public Assignment getCatchExprAssignment_5() { return cCatchExprAssignment_5; }

		//Expression
		public RuleCall getCatchExprExpressionParserRuleCall_5_0() { return cCatchExprExpressionParserRuleCall_5_0; }
	}

	public class SwitchExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SwitchExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBSwitchExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSwitchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSwitchExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSwitchExpressionExpressionParserRuleCall_2_0 = (RuleCall)cSwitchExpressionAssignment_2.eContents().get(0);
		private final Assignment cCaseListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCaseListCaseParserRuleCall_3_0 = (RuleCall)cCaseListAssignment_3.eContents().get(0);
		private final Keyword cEndswitchKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SwitchExpression returns be::BExpression:
		//	{be::BSwitchExpression} "switch" switchExpression=Expression? caseList+=Case+ "endswitch";
		public ParserRule getRule() { return rule; }

		//{be::BSwitchExpression} "switch" switchExpression=Expression? caseList+=Case+ "endswitch"
		public Group getGroup() { return cGroup; }

		//{be::BSwitchExpression}
		public Action getBSwitchExpressionAction_0() { return cBSwitchExpressionAction_0; }

		//"switch"
		public Keyword getSwitchKeyword_1() { return cSwitchKeyword_1; }

		//switchExpression=Expression?
		public Assignment getSwitchExpressionAssignment_2() { return cSwitchExpressionAssignment_2; }

		//Expression
		public RuleCall getSwitchExpressionExpressionParserRuleCall_2_0() { return cSwitchExpressionExpressionParserRuleCall_2_0; }

		//caseList+=Case+
		public Assignment getCaseListAssignment_3() { return cCaseListAssignment_3; }

		//Case
		public RuleCall getCaseListCaseParserRuleCall_3_0() { return cCaseListCaseParserRuleCall_3_0; }

		//"endswitch"
		public Keyword getEndswitchKeyword_4() { return cEndswitchKeyword_4; }
	}

	public class CaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Case");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBCaseAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cCaseKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cConditionExprAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cConditionExprExpressionParserRuleCall_1_0_1_0 = (RuleCall)cConditionExprAssignment_1_0_1.eContents().get(0);
		private final Keyword cDefaultKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenExprExpressionParserRuleCall_3_0 = (RuleCall)cThenExprAssignment_3.eContents().get(0);
		
		//Case returns be::BCase:
		//	{be::BCase} ("case" conditionExpr=Expression | "default") ":" thenExpr=Expression;
		public ParserRule getRule() { return rule; }

		//{be::BCase} ("case" conditionExpr=Expression | "default") ":" thenExpr=Expression
		public Group getGroup() { return cGroup; }

		//{be::BCase}
		public Action getBCaseAction_0() { return cBCaseAction_0; }

		//"case" conditionExpr=Expression | "default"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"case" conditionExpr=Expression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"case"
		public Keyword getCaseKeyword_1_0_0() { return cCaseKeyword_1_0_0; }

		//conditionExpr=Expression
		public Assignment getConditionExprAssignment_1_0_1() { return cConditionExprAssignment_1_0_1; }

		//Expression
		public RuleCall getConditionExprExpressionParserRuleCall_1_0_1_0() { return cConditionExprExpressionParserRuleCall_1_0_1_0; }

		//"default"
		public Keyword getDefaultKeyword_1_1() { return cDefaultKeyword_1_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//thenExpr=Expression
		public Assignment getThenExprAssignment_3() { return cThenExprAssignment_3; }

		//Expression
		public RuleCall getThenExprExpressionParserRuleCall_3_0() { return cThenExprExpressionParserRuleCall_3_0; }
	}

	public class BlockExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BlockExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBChainedExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExpressionsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionsTopLevelExpressionParserRuleCall_2_0_0 = (RuleCall)cExpressionsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BlockExpression returns be::BExpression:
		//	{be::BChainedExpression} "{" (expressions+=TopLevelExpression ";")* "}";
		public ParserRule getRule() { return rule; }

		//{be::BChainedExpression} "{" (expressions+=TopLevelExpression ";")* "}"
		public Group getGroup() { return cGroup; }

		//{be::BChainedExpression}
		public Action getBChainedExpressionAction_0() { return cBChainedExpressionAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(expressions+=TopLevelExpression ";")*
		public Group getGroup_2() { return cGroup_2; }

		//expressions+=TopLevelExpression
		public Assignment getExpressionsAssignment_2_0() { return cExpressionsAssignment_2_0; }

		//TopLevelExpression
		public RuleCall getExpressionsTopLevelExpressionParserRuleCall_2_0_0() { return cExpressionsTopLevelExpressionParserRuleCall_2_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class IfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBIfExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExprExpressionParserRuleCall_2_0 = (RuleCall)cConditionExprAssignment_2.eContents().get(0);
		private final Keyword cThenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenExprExpressionParserRuleCall_4_0 = (RuleCall)cThenExprAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cElseExprAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cElseExprElseIfExpressionParserRuleCall_5_0_0 = (RuleCall)cElseExprAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cElseKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cElseExprAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cElseExprExpressionParserRuleCall_5_1_1_0 = (RuleCall)cElseExprAssignment_5_1_1.eContents().get(0);
		private final Keyword cEndifKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IfExpression returns be::BExpression:
		//	{be::BIfExpression} "if" conditionExpr=Expression "then" thenExpr=Expression (elseExpr=ElseIfExpression | "else"
		//	elseExpr=Expression)? "endif";
		public ParserRule getRule() { return rule; }

		//{be::BIfExpression} "if" conditionExpr=Expression "then" thenExpr=Expression (elseExpr=ElseIfExpression | "else"
		//elseExpr=Expression)? "endif"
		public Group getGroup() { return cGroup; }

		//{be::BIfExpression}
		public Action getBIfExpressionAction_0() { return cBIfExpressionAction_0; }

		//"if"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }

		//conditionExpr=Expression
		public Assignment getConditionExprAssignment_2() { return cConditionExprAssignment_2; }

		//Expression
		public RuleCall getConditionExprExpressionParserRuleCall_2_0() { return cConditionExprExpressionParserRuleCall_2_0; }

		//"then"
		public Keyword getThenKeyword_3() { return cThenKeyword_3; }

		//thenExpr=Expression
		public Assignment getThenExprAssignment_4() { return cThenExprAssignment_4; }

		//Expression
		public RuleCall getThenExprExpressionParserRuleCall_4_0() { return cThenExprExpressionParserRuleCall_4_0; }

		//(elseExpr=ElseIfExpression | "else" elseExpr=Expression)?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//elseExpr=ElseIfExpression
		public Assignment getElseExprAssignment_5_0() { return cElseExprAssignment_5_0; }

		//ElseIfExpression
		public RuleCall getElseExprElseIfExpressionParserRuleCall_5_0_0() { return cElseExprElseIfExpressionParserRuleCall_5_0_0; }

		//"else" elseExpr=Expression
		public Group getGroup_5_1() { return cGroup_5_1; }

		//"else"
		public Keyword getElseKeyword_5_1_0() { return cElseKeyword_5_1_0; }

		//elseExpr=Expression
		public Assignment getElseExprAssignment_5_1_1() { return cElseExprAssignment_5_1_1; }

		//Expression
		public RuleCall getElseExprExpressionParserRuleCall_5_1_1_0() { return cElseExprExpressionParserRuleCall_5_1_1_0; }

		//"endif"
		public Keyword getEndifKeyword_6() { return cEndifKeyword_6; }
	}

	public class ElseIfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElseIfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBIfExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cElseifKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExprExpressionParserRuleCall_2_0 = (RuleCall)cConditionExprAssignment_2.eContents().get(0);
		private final Keyword cThenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenExprExpressionParserRuleCall_4_0 = (RuleCall)cThenExprAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cElseExprAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cElseExprElseIfExpressionParserRuleCall_5_0_0 = (RuleCall)cElseExprAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cElseKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cElseExprAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cElseExprExpressionParserRuleCall_5_1_1_0 = (RuleCall)cElseExprAssignment_5_1_1.eContents().get(0);
		
		//ElseIfExpression returns be::BExpression:
		//	{be::BIfExpression} "elseif" conditionExpr=Expression "then" thenExpr=Expression (elseExpr=ElseIfExpression | "else"
		//	elseExpr=Expression)?;
		public ParserRule getRule() { return rule; }

		//{be::BIfExpression} "elseif" conditionExpr=Expression "then" thenExpr=Expression (elseExpr=ElseIfExpression | "else"
		//elseExpr=Expression)?
		public Group getGroup() { return cGroup; }

		//{be::BIfExpression}
		public Action getBIfExpressionAction_0() { return cBIfExpressionAction_0; }

		//"elseif"
		public Keyword getElseifKeyword_1() { return cElseifKeyword_1; }

		//conditionExpr=Expression
		public Assignment getConditionExprAssignment_2() { return cConditionExprAssignment_2; }

		//Expression
		public RuleCall getConditionExprExpressionParserRuleCall_2_0() { return cConditionExprExpressionParserRuleCall_2_0; }

		//"then"
		public Keyword getThenKeyword_3() { return cThenKeyword_3; }

		//thenExpr=Expression
		public Assignment getThenExprAssignment_4() { return cThenExprAssignment_4; }

		//Expression
		public RuleCall getThenExprExpressionParserRuleCall_4_0() { return cThenExprExpressionParserRuleCall_4_0; }

		//(elseExpr=ElseIfExpression | "else" elseExpr=Expression)?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//elseExpr=ElseIfExpression
		public Assignment getElseExprAssignment_5_0() { return cElseExprAssignment_5_0; }

		//ElseIfExpression
		public RuleCall getElseExprElseIfExpressionParserRuleCall_5_0_0() { return cElseExprElseIfExpressionParserRuleCall_5_0_0; }

		//"else" elseExpr=Expression
		public Group getGroup_5_1() { return cGroup_5_1; }

		//"else"
		public Keyword getElseKeyword_5_1_0() { return cElseKeyword_5_1_0; }

		//elseExpr=Expression
		public Assignment getElseExprAssignment_5_1_1() { return cElseExprAssignment_5_1_1; }

		//Expression
		public RuleCall getElseExprExpressionParserRuleCall_5_1_1_0() { return cElseExprExpressionParserRuleCall_5_1_1_0; }
	}

	public class PropertyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBVariableExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNamedValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNamedValueINamedValueCrossReference_1_0 = (CrossReference)cNamedValueAssignment_1.eContents().get(0);
		private final RuleCall cNamedValueINamedValuePIDTerminalRuleCall_1_0_1 = (RuleCall)cNamedValueINamedValueCrossReference_1_0.eContents().get(1);
		
		////	name = PID
		//PropertyValue returns be::BExpression:
		//	{be::BVariableExpression} namedValue=[be::INamedValue|PID];
		public ParserRule getRule() { return rule; }

		//{be::BVariableExpression} namedValue=[be::INamedValue|PID]
		public Group getGroup() { return cGroup; }

		//{be::BVariableExpression}
		public Action getBVariableExpressionAction_0() { return cBVariableExpressionAction_0; }

		//namedValue=[be::INamedValue|PID]
		public Assignment getNamedValueAssignment_1() { return cNamedValueAssignment_1; }

		//[be::INamedValue|PID]
		public CrossReference getNamedValueINamedValueCrossReference_1_0() { return cNamedValueINamedValueCrossReference_1_0; }

		//PID
		public RuleCall getNamedValueINamedValuePIDTerminalRuleCall_1_0_1() { return cNamedValueINamedValuePIDTerminalRuleCall_1_0_1; }
	}

	public class VariableValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBVariableExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNamedValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNamedValueINamedValueCrossReference_1_0 = (CrossReference)cNamedValueAssignment_1.eContents().get(0);
		private final RuleCall cNamedValueINamedValueID_or_KWParserRuleCall_1_0_1 = (RuleCall)cNamedValueINamedValueCrossReference_1_0.eContents().get(1);
		
		//VariableValue returns be::BExpression:
		//	{be::BVariableExpression} namedValue=[be::INamedValue|ID_or_KW];
		public ParserRule getRule() { return rule; }

		//{be::BVariableExpression} namedValue=[be::INamedValue|ID_or_KW]
		public Group getGroup() { return cGroup; }

		//{be::BVariableExpression}
		public Action getBVariableExpressionAction_0() { return cBVariableExpressionAction_0; }

		//namedValue=[be::INamedValue|ID_or_KW]
		public Assignment getNamedValueAssignment_1() { return cNamedValueAssignment_1; }

		//[be::INamedValue|ID_or_KW]
		public CrossReference getNamedValueINamedValueCrossReference_1_0() { return cNamedValueINamedValueCrossReference_1_0; }

		//ID_or_KW
		public RuleCall getNamedValueINamedValueID_or_KWParserRuleCall_1_0_1() { return cNamedValueINamedValueID_or_KWParserRuleCall_1_0_1; }
	}

	public class ID_or_KWElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ID_or_KW");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKWParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ID_or_KW returns ecore::EString:
		//	ID | KW;
		public ParserRule getRule() { return rule; }

		//ID | KW
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//KW
		public RuleCall getKWParserRuleCall_1() { return cKWParserRuleCall_1; }
	}

	public class ID_or_KW_NO_UNITElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ID_or_KW_NO_UNIT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKW_NO_UNITParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ID_or_KW_NO_UNIT returns ecore::EString:
		//	ID | KW_NO_UNIT;
		public ParserRule getRule() { return rule; }

		//ID | KW_NO_UNIT
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//KW_NO_UNIT
		public RuleCall getKW_NO_UNITParserRuleCall_1() { return cKW_NO_UNITParserRuleCall_1; }
	}

	public class KWElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KW");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cKW_NO_UNITParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cUnitKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//KW returns ecore::EString:
		//	KW_NO_UNIT | "unit";
		public ParserRule getRule() { return rule; }

		//KW_NO_UNIT | "unit"
		public Alternatives getAlternatives() { return cAlternatives; }

		//KW_NO_UNIT
		public RuleCall getKW_NO_UNITParserRuleCall_0() { return cKW_NO_UNITParserRuleCall_0; }

		//"unit"
		public Keyword getUnitKeyword_1() { return cUnitKeyword_1; }
	}

	public class KW_NO_UNITElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KW_NO_UNIT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cInputKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOutputKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSourceKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cResultKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPropertiesKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cBuilderKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cThisKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cNameKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cModifyKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cGreedyKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cVersionKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cRequiresKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cProvidesKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		
		//KW_NO_UNIT returns ecore::EString:
		//	"input" | "output" | "source" | "result" | "properties" | "builder" | "this" | "name" | "modify" | "greedy" |
		//	"version" | "requires" | "provides";
		public ParserRule getRule() { return rule; }

		//"input" | "output" | "source" | "result" | "properties" | "builder" | "this" | "name" | "modify" | "greedy" | "version"
		//| "requires" | "provides"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"input"
		public Keyword getInputKeyword_0() { return cInputKeyword_0; }

		//"output"
		public Keyword getOutputKeyword_1() { return cOutputKeyword_1; }

		//"source"
		public Keyword getSourceKeyword_2() { return cSourceKeyword_2; }

		//"result"
		public Keyword getResultKeyword_3() { return cResultKeyword_3; }

		//"properties"
		public Keyword getPropertiesKeyword_4() { return cPropertiesKeyword_4; }

		//"builder"
		public Keyword getBuilderKeyword_5() { return cBuilderKeyword_5; }

		//"this"
		public Keyword getThisKeyword_6() { return cThisKeyword_6; }

		//"name"
		public Keyword getNameKeyword_7() { return cNameKeyword_7; }

		//"modify"
		public Keyword getModifyKeyword_8() { return cModifyKeyword_8; }

		//"greedy"
		public Keyword getGreedyKeyword_9() { return cGreedyKeyword_9; }

		//"version"
		public Keyword getVersionKeyword_10() { return cVersionKeyword_10; }

		//"requires"
		public Keyword getRequiresKeyword_11() { return cRequiresKeyword_11; }

		//"provides"
		public Keyword getProvidesKeyword_12() { return cProvidesKeyword_12; }
	}

	public class FeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureCall");
		private final RuleCall cOperationCallParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// DEPRECATED: calling ".feature" with implicit 'this'
		////	| ({be::BCallFeature} "." name=ID_or_KW  "(" (parameterList = ParameterList)? ")")
		////	| ({be::BFeatureExpression} "." featureName=ID_or_KW)
		//FeatureCall returns be::BExpression:
		//	OperationCall;
		public ParserRule getRule() { return rule; }

		//OperationCall
		public RuleCall getOperationCallParserRuleCall() { return cOperationCallParserRuleCall; }
	}

	public class OperationCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBCallNamedFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFuncRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFuncRefIFunctionCrossReference_1_0 = (CrossReference)cFuncRefAssignment_1.eContents().get(0);
		private final RuleCall cFuncRefIFunctionIDTerminalRuleCall_1_0_1 = (RuleCall)cFuncRefIFunctionCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParameterListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParameterListParameterListParserRuleCall_3_0 = (RuleCall)cParameterListAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OperationCall returns be::BCallExpression:
		//	{be::BCallNamedFunction} funcRef=[be::IFunction] "(" parameterList=ParameterList? ")";
		public ParserRule getRule() { return rule; }

		//{be::BCallNamedFunction} funcRef=[be::IFunction] "(" parameterList=ParameterList? ")"
		public Group getGroup() { return cGroup; }

		//{be::BCallNamedFunction}
		public Action getBCallNamedFunctionAction_0() { return cBCallNamedFunctionAction_0; }

		//funcRef=[be::IFunction]
		public Assignment getFuncRefAssignment_1() { return cFuncRefAssignment_1; }

		//[be::IFunction]
		public CrossReference getFuncRefIFunctionCrossReference_1_0() { return cFuncRefIFunctionCrossReference_1_0; }

		//ID
		public RuleCall getFuncRefIFunctionIDTerminalRuleCall_1_0_1() { return cFuncRefIFunctionIDTerminalRuleCall_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//parameterList=ParameterList?
		public Assignment getParameterListAssignment_3() { return cParameterListAssignment_3; }

		//ParameterList
		public RuleCall getParameterListParameterListParserRuleCall_3_0() { return cParameterListParameterListParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ConstructorCallExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstructorCallExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBCreateExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeExprLiteralTypeParserRuleCall_2_0 = (RuleCall)cTypeExprAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParameterListAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParameterListParameterListParserRuleCall_3_1_0 = (RuleCall)cParameterListAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_4_1_0 = (RuleCall)cNameAssignment_4_1.eContents().get(0);
		private final Assignment cContextBlockAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cContextBlockInitializationBlockExpressionParserRuleCall_5_0 = (RuleCall)cContextBlockAssignment_5.eContents().get(0);
		
		//ConstructorCallExpression returns be::BExpression:
		//	{be::BCreateExpression} "new" typeExpr=LiteralType ("(" parameterList=ParameterList? ")")? ("as" name=ID)?
		//	contextBlock=InitializationBlockExpression?;
		public ParserRule getRule() { return rule; }

		//{be::BCreateExpression} "new" typeExpr=LiteralType ("(" parameterList=ParameterList? ")")? ("as" name=ID)?
		//contextBlock=InitializationBlockExpression?
		public Group getGroup() { return cGroup; }

		//{be::BCreateExpression}
		public Action getBCreateExpressionAction_0() { return cBCreateExpressionAction_0; }

		//"new"
		public Keyword getNewKeyword_1() { return cNewKeyword_1; }

		//typeExpr=LiteralType
		public Assignment getTypeExprAssignment_2() { return cTypeExprAssignment_2; }

		//LiteralType
		public RuleCall getTypeExprLiteralTypeParserRuleCall_2_0() { return cTypeExprLiteralTypeParserRuleCall_2_0; }

		//("(" parameterList=ParameterList? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//parameterList=ParameterList?
		public Assignment getParameterListAssignment_3_1() { return cParameterListAssignment_3_1; }

		//ParameterList
		public RuleCall getParameterListParameterListParserRuleCall_3_1_0() { return cParameterListParameterListParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }

		//("as" name=ID)?
		public Group getGroup_4() { return cGroup_4; }

		//"as"
		public Keyword getAsKeyword_4_0() { return cAsKeyword_4_0; }

		//name=ID
		public Assignment getNameAssignment_4_1() { return cNameAssignment_4_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_1_0() { return cNameIDTerminalRuleCall_4_1_0; }

		//contextBlock=InitializationBlockExpression?
		public Assignment getContextBlockAssignment_5() { return cContextBlockAssignment_5; }

		//InitializationBlockExpression
		public RuleCall getContextBlockInitializationBlockExpressionParserRuleCall_5_0() { return cContextBlockInitializationBlockExpressionParserRuleCall_5_0; }
	}

	public class InitializationBlockExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InitializationBlockExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBChainedExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExpressionsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionsInitializationExpressionParserRuleCall_2_0_0 = (RuleCall)cExpressionsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InitializationBlockExpression returns be::BExpression:
		//	{be::BChainedExpression} "{" (expressions+=InitializationExpression ";")* "}";
		public ParserRule getRule() { return rule; }

		//{be::BChainedExpression} "{" (expressions+=InitializationExpression ";")* "}"
		public Group getGroup() { return cGroup; }

		//{be::BChainedExpression}
		public Action getBChainedExpressionAction_0() { return cBChainedExpressionAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(expressions+=InitializationExpression ";")*
		public Group getGroup_2() { return cGroup_2; }

		//expressions+=InitializationExpression
		public Assignment getExpressionsAssignment_2_0() { return cExpressionsAssignment_2_0; }

		//InitializationExpression
		public RuleCall getExpressionsInitializationExpressionParserRuleCall_2_0_0() { return cExpressionsInitializationExpressionParserRuleCall_2_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class InitializationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InitializationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBAssignmentExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLeftExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExprFeatureOfThisParserRuleCall_1_0 = (RuleCall)cLeftExprAssignment_1.eContents().get(0);
		private final Assignment cFunctionNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cFunctionNameColonKeyword_2_0 = (Keyword)cFunctionNameAssignment_2.eContents().get(0);
		private final Assignment cRightExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExprExpressionParserRuleCall_3_0 = (RuleCall)cRightExprAssignment_3.eContents().get(0);
		
		//InitializationExpression returns be::BExpression:
		//	{be::BAssignmentExpression} leftExpr=FeatureOfThis functionName=":" rightExpr=Expression;
		public ParserRule getRule() { return rule; }

		//{be::BAssignmentExpression} leftExpr=FeatureOfThis functionName=":" rightExpr=Expression
		public Group getGroup() { return cGroup; }

		//{be::BAssignmentExpression}
		public Action getBAssignmentExpressionAction_0() { return cBAssignmentExpressionAction_0; }

		//leftExpr=FeatureOfThis
		public Assignment getLeftExprAssignment_1() { return cLeftExprAssignment_1; }

		//FeatureOfThis
		public RuleCall getLeftExprFeatureOfThisParserRuleCall_1_0() { return cLeftExprFeatureOfThisParserRuleCall_1_0; }

		//functionName=":"
		public Assignment getFunctionNameAssignment_2() { return cFunctionNameAssignment_2; }

		//":"
		public Keyword getFunctionNameColonKeyword_2_0() { return cFunctionNameColonKeyword_2_0; }

		//rightExpr=Expression
		public Assignment getRightExprAssignment_3() { return cRightExprAssignment_3; }

		//Expression
		public RuleCall getRightExprExpressionParserRuleCall_3_0() { return cRightExprExpressionParserRuleCall_3_0; }
	}

	public class FeatureOfThisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureOfThis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBFeatureExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFeatureNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeatureNameID_or_KWParserRuleCall_1_0 = (RuleCall)cFeatureNameAssignment_1.eContents().get(0);
		
		//FeatureOfThis returns be::BExpression:
		//	{be::BFeatureExpression} // TODO: objExpr = null, means use "this" (cheat)
		//	featureName=ID_or_KW;
		public ParserRule getRule() { return rule; }

		//{be::BFeatureExpression} // TODO: objExpr = null, means use "this" (cheat)
		//featureName=ID_or_KW
		public Group getGroup() { return cGroup; }

		//{be::BFeatureExpression}
		public Action getBFeatureExpressionAction_0() { return cBFeatureExpressionAction_0; }

		//// TODO: objExpr = null, means use "this" (cheat)
		//featureName=ID_or_KW
		public Assignment getFeatureNameAssignment_1() { return cFeatureNameAssignment_1; }

		//ID_or_KW
		public RuleCall getFeatureNameID_or_KWParserRuleCall_1_0() { return cFeatureNameID_or_KWParserRuleCall_1_0; }
	}

	public class BuildConcernContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuildConcernContext");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnitConcernContextParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBuilderConcernContextParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionConcernContextParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// Used in a concern to describe pointcuts/advice for units and/or builders
		//BuildConcernContext returns be::BConcernContext:
		//	UnitConcernContext | BuilderConcernContext | FunctionConcernContext;
		public ParserRule getRule() { return rule; }

		//UnitConcernContext | BuilderConcernContext | FunctionConcernContext
		public Alternatives getAlternatives() { return cAlternatives; }

		//UnitConcernContext
		public RuleCall getUnitConcernContextParserRuleCall_0() { return cUnitConcernContextParserRuleCall_0; }

		//BuilderConcernContext
		public RuleCall getBuilderConcernContextParserRuleCall_1() { return cBuilderConcernContextParserRuleCall_1; }

		//FunctionConcernContext
		public RuleCall getFunctionConcernContextParserRuleCall_2() { return cFunctionConcernContextParserRuleCall_2; }
	}

	public class FunctionConcernContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionConcernContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBFunctionConcernContextAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDocumentationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDocumentationDOCUMENTATIONParserRuleCall_1_0 = (RuleCall)cDocumentationAssignment_1.eContents().get(0);
		private final Keyword cContextKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cFunctionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNamePredicateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNamePredicateFunctionNamePredicateParserRuleCall_4_0 = (RuleCall)cNamePredicateAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Alternatives cAlternatives_5_1 = (Alternatives)cGroup_5.eContents().get(1);
		private final Group cGroup_5_1_0 = (Group)cAlternatives_5_1.eContents().get(0);
		private final Assignment cParametersAssignment_5_1_0_0 = (Assignment)cGroup_5_1_0.eContents().get(0);
		private final RuleCall cParametersParameterPredicateParserRuleCall_5_1_0_0_0 = (RuleCall)cParametersAssignment_5_1_0_0.eContents().get(0);
		private final Group cGroup_5_1_0_1 = (Group)cGroup_5_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0_1_0 = (Keyword)cGroup_5_1_0_1.eContents().get(0);
		private final Assignment cParametersAssignment_5_1_0_1_1 = (Assignment)cGroup_5_1_0_1.eContents().get(1);
		private final RuleCall cParametersParameterPredicateParserRuleCall_5_1_0_1_1_0 = (RuleCall)cParametersAssignment_5_1_0_1_1.eContents().get(0);
		private final Group cGroup_5_1_0_2 = (Group)cGroup_5_1_0.eContents().get(2);
		private final Keyword cCommaKeyword_5_1_0_2_0 = (Keyword)cGroup_5_1_0_2.eContents().get(0);
		private final Assignment cVarArgsAssignment_5_1_0_2_1 = (Assignment)cGroup_5_1_0_2.eContents().get(1);
		private final Keyword cVarArgsFullStopFullStopFullStopKeyword_5_1_0_2_1_0 = (Keyword)cVarArgsAssignment_5_1_0_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_5_1_0_2_2 = (Assignment)cGroup_5_1_0_2.eContents().get(2);
		private final RuleCall cParametersParameterVarargsPredicateParserRuleCall_5_1_0_2_2_0 = (RuleCall)cParametersAssignment_5_1_0_2_2.eContents().get(0);
		private final Group cGroup_5_1_1 = (Group)cAlternatives_5_1.eContents().get(1);
		private final Assignment cVarArgsAssignment_5_1_1_0 = (Assignment)cGroup_5_1_1.eContents().get(0);
		private final Keyword cVarArgsFullStopFullStopFullStopKeyword_5_1_1_0_0 = (Keyword)cVarArgsAssignment_5_1_1_0.eContents().get(0);
		private final Assignment cParametersAssignment_5_1_1_1 = (Assignment)cGroup_5_1_1.eContents().get(1);
		private final RuleCall cParametersParameterVarargsPredicateParserRuleCall_5_1_1_1_0 = (RuleCall)cParametersAssignment_5_1_1_1.eContents().get(0);
		private final Assignment cMatchParametersAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final Keyword cMatchParametersRightParenthesisKeyword_5_2_0 = (Keyword)cMatchParametersAssignment_5_2.eContents().get(0);
		private final Assignment cFuncExprAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFuncExprBlockExpressionParserRuleCall_6_0 = (RuleCall)cFuncExprAssignment_6.eContents().get(0);
		
		//FunctionConcernContext returns be::BFunctionConcernContext:
		//	{be::BFunctionConcernContext} documentation=DOCUMENTATION? "context" "function" namePredicate=FunctionNamePredicate
		//	("(" (parameters+=ParameterPredicate ("," parameters+=ParameterPredicate)* ("," varArgs?="..."
		//	parameters+=ParameterVarargsPredicate)? | varArgs?="..." parameters+=ParameterVarargsPredicate)?
		//	matchParameters?=")")? funcExpr=BlockExpression;
		public ParserRule getRule() { return rule; }

		//{be::BFunctionConcernContext} documentation=DOCUMENTATION? "context" "function" namePredicate=FunctionNamePredicate ("("
		//(parameters+=ParameterPredicate ("," parameters+=ParameterPredicate)* ("," varArgs?="..."
		//parameters+=ParameterVarargsPredicate)? | varArgs?="..." parameters+=ParameterVarargsPredicate)? matchParameters?=")")?
		//funcExpr=BlockExpression
		public Group getGroup() { return cGroup; }

		//{be::BFunctionConcernContext}
		public Action getBFunctionConcernContextAction_0() { return cBFunctionConcernContextAction_0; }

		//documentation=DOCUMENTATION?
		public Assignment getDocumentationAssignment_1() { return cDocumentationAssignment_1; }

		//DOCUMENTATION
		public RuleCall getDocumentationDOCUMENTATIONParserRuleCall_1_0() { return cDocumentationDOCUMENTATIONParserRuleCall_1_0; }

		//"context"
		public Keyword getContextKeyword_2() { return cContextKeyword_2; }

		//"function"
		public Keyword getFunctionKeyword_3() { return cFunctionKeyword_3; }

		//namePredicate=FunctionNamePredicate
		public Assignment getNamePredicateAssignment_4() { return cNamePredicateAssignment_4; }

		//FunctionNamePredicate
		public RuleCall getNamePredicateFunctionNamePredicateParserRuleCall_4_0() { return cNamePredicateFunctionNamePredicateParserRuleCall_4_0; }

		//("(" (parameters+=ParameterPredicate ("," parameters+=ParameterPredicate)* ("," varArgs?="..."
		//parameters+=ParameterVarargsPredicate)? | varArgs?="..." parameters+=ParameterVarargsPredicate)? matchParameters?=")")?
		public Group getGroup_5() { return cGroup_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }

		//(parameters+=ParameterPredicate ("," parameters+=ParameterPredicate)* ("," varArgs?="..."
		//parameters+=ParameterVarargsPredicate)? | varArgs?="..." parameters+=ParameterVarargsPredicate)?
		public Alternatives getAlternatives_5_1() { return cAlternatives_5_1; }

		//parameters+=ParameterPredicate ("," parameters+=ParameterPredicate)* ("," varArgs?="..."
		//parameters+=ParameterVarargsPredicate)?
		public Group getGroup_5_1_0() { return cGroup_5_1_0; }

		//parameters+=ParameterPredicate
		public Assignment getParametersAssignment_5_1_0_0() { return cParametersAssignment_5_1_0_0; }

		//ParameterPredicate
		public RuleCall getParametersParameterPredicateParserRuleCall_5_1_0_0_0() { return cParametersParameterPredicateParserRuleCall_5_1_0_0_0; }

		//("," parameters+=ParameterPredicate)*
		public Group getGroup_5_1_0_1() { return cGroup_5_1_0_1; }

		//","
		public Keyword getCommaKeyword_5_1_0_1_0() { return cCommaKeyword_5_1_0_1_0; }

		//parameters+=ParameterPredicate
		public Assignment getParametersAssignment_5_1_0_1_1() { return cParametersAssignment_5_1_0_1_1; }

		//ParameterPredicate
		public RuleCall getParametersParameterPredicateParserRuleCall_5_1_0_1_1_0() { return cParametersParameterPredicateParserRuleCall_5_1_0_1_1_0; }

		//("," varArgs?="..." parameters+=ParameterVarargsPredicate)?
		public Group getGroup_5_1_0_2() { return cGroup_5_1_0_2; }

		//","
		public Keyword getCommaKeyword_5_1_0_2_0() { return cCommaKeyword_5_1_0_2_0; }

		//varArgs?="..."
		public Assignment getVarArgsAssignment_5_1_0_2_1() { return cVarArgsAssignment_5_1_0_2_1; }

		//"..."
		public Keyword getVarArgsFullStopFullStopFullStopKeyword_5_1_0_2_1_0() { return cVarArgsFullStopFullStopFullStopKeyword_5_1_0_2_1_0; }

		//parameters+=ParameterVarargsPredicate
		public Assignment getParametersAssignment_5_1_0_2_2() { return cParametersAssignment_5_1_0_2_2; }

		//ParameterVarargsPredicate
		public RuleCall getParametersParameterVarargsPredicateParserRuleCall_5_1_0_2_2_0() { return cParametersParameterVarargsPredicateParserRuleCall_5_1_0_2_2_0; }

		//varArgs?="..." parameters+=ParameterVarargsPredicate
		public Group getGroup_5_1_1() { return cGroup_5_1_1; }

		//varArgs?="..."
		public Assignment getVarArgsAssignment_5_1_1_0() { return cVarArgsAssignment_5_1_1_0; }

		//"..."
		public Keyword getVarArgsFullStopFullStopFullStopKeyword_5_1_1_0_0() { return cVarArgsFullStopFullStopFullStopKeyword_5_1_1_0_0; }

		//parameters+=ParameterVarargsPredicate
		public Assignment getParametersAssignment_5_1_1_1() { return cParametersAssignment_5_1_1_1; }

		//ParameterVarargsPredicate
		public RuleCall getParametersParameterVarargsPredicateParserRuleCall_5_1_1_1_0() { return cParametersParameterVarargsPredicateParserRuleCall_5_1_1_1_0; }

		//matchParameters?=")"
		public Assignment getMatchParametersAssignment_5_2() { return cMatchParametersAssignment_5_2; }

		//")"
		public Keyword getMatchParametersRightParenthesisKeyword_5_2_0() { return cMatchParametersRightParenthesisKeyword_5_2_0; }

		//funcExpr=BlockExpression
		public Assignment getFuncExprAssignment_6() { return cFuncExprAssignment_6; }

		//BlockExpression
		public RuleCall getFuncExprBlockExpressionParserRuleCall_6_0() { return cFuncExprBlockExpressionParserRuleCall_6_0; }
	}

	public class FunctionNamePredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionNamePredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBFunctionNamePredicateAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNamePredicateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePredicateNamePredicateParserRuleCall_1_0 = (RuleCall)cNamePredicateAssignment_1.eContents().get(0);
		
		//FunctionNamePredicate returns be::BFunctionNamePredicate:
		//	{be::BFunctionNamePredicate} namePredicate=NamePredicate;
		public ParserRule getRule() { return rule; }

		//{be::BFunctionNamePredicate} namePredicate=NamePredicate
		public Group getGroup() { return cGroup; }

		//{be::BFunctionNamePredicate}
		public Action getBFunctionNamePredicateAction_0() { return cBFunctionNamePredicateAction_0; }

		//namePredicate=NamePredicate
		public Assignment getNamePredicateAssignment_1() { return cNamePredicateAssignment_1; }

		//NamePredicate
		public RuleCall getNamePredicateNamePredicateParserRuleCall_1_0() { return cNamePredicateNamePredicateParserRuleCall_1_0; }
	}

	public class ParameterPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterPredicate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBParameterPredicateAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword c_Keyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cTypePredicateOpAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cTypePredicateOpTypePredicateOpParserRuleCall_0_1_1_0 = (RuleCall)cTypePredicateOpAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTypeTypeRefParserRuleCall_1_0_0 = (RuleCall)cTypeAssignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cTypePredicateOpAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cTypePredicateOpTypePredicateOpParserRuleCall_1_1_0_0 = (RuleCall)cTypePredicateOpAssignment_1_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_1_0 = (RuleCall)cNameAssignment_1_1_1.eContents().get(0);
		
		//ParameterPredicate returns be::BParameterPredicate:
		//	{be::BParameterPredicate} ("_" typePredicateOp=TypePredicateOp?) | type=TypeRef (typePredicateOp=TypePredicateOp |
		//	name=ID)?;
		public ParserRule getRule() { return rule; }

		//{be::BParameterPredicate} ("_" typePredicateOp=TypePredicateOp?) | type=TypeRef (typePredicateOp=TypePredicateOp |
		//name=ID)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//{be::BParameterPredicate} ("_" typePredicateOp=TypePredicateOp?)
		public Group getGroup_0() { return cGroup_0; }

		//{be::BParameterPredicate}
		public Action getBParameterPredicateAction_0_0() { return cBParameterPredicateAction_0_0; }

		//"_" typePredicateOp=TypePredicateOp?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"_"
		public Keyword get_Keyword_0_1_0() { return c_Keyword_0_1_0; }

		//typePredicateOp=TypePredicateOp?
		public Assignment getTypePredicateOpAssignment_0_1_1() { return cTypePredicateOpAssignment_0_1_1; }

		//TypePredicateOp
		public RuleCall getTypePredicateOpTypePredicateOpParserRuleCall_0_1_1_0() { return cTypePredicateOpTypePredicateOpParserRuleCall_0_1_1_0; }

		//type=TypeRef (typePredicateOp=TypePredicateOp | name=ID)?
		public Group getGroup_1() { return cGroup_1; }

		//type=TypeRef
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }

		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_1_0_0() { return cTypeTypeRefParserRuleCall_1_0_0; }

		//(typePredicateOp=TypePredicateOp | name=ID)?
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//typePredicateOp=TypePredicateOp
		public Assignment getTypePredicateOpAssignment_1_1_0() { return cTypePredicateOpAssignment_1_1_0; }

		//TypePredicateOp
		public RuleCall getTypePredicateOpTypePredicateOpParserRuleCall_1_1_0_0() { return cTypePredicateOpTypePredicateOpParserRuleCall_1_1_0_0; }

		//name=ID
		public Assignment getNameAssignment_1_1_1() { return cNameAssignment_1_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_1_0() { return cNameIDTerminalRuleCall_1_1_1_0; }
	}

	public class ParameterVarargsPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterVarargsPredicate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBParameterPredicateAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword c_Keyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTypeTypeRefParserRuleCall_1_0_0 = (RuleCall)cTypeAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		
		//// Varargs can only be last, and it only makes sense to skip the type (not to use ?*+)	
		//ParameterVarargsPredicate returns be::BParameterPredicate:
		//	{be::BParameterPredicate} "_" | type=TypeRef name=ID?;
		public ParserRule getRule() { return rule; }

		//{be::BParameterPredicate} "_" | type=TypeRef name=ID?
		public Alternatives getAlternatives() { return cAlternatives; }

		//{be::BParameterPredicate} "_"
		public Group getGroup_0() { return cGroup_0; }

		//{be::BParameterPredicate}
		public Action getBParameterPredicateAction_0_0() { return cBParameterPredicateAction_0_0; }

		//"_"
		public Keyword get_Keyword_0_1() { return c_Keyword_0_1; }

		//type=TypeRef name=ID?
		public Group getGroup_1() { return cGroup_1; }

		//type=TypeRef
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }

		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_1_0_0() { return cTypeTypeRefParserRuleCall_1_0_0; }

		//name=ID?
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
	}

	public class TypePredicateOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypePredicateOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//TypePredicateOp returns ecore::EString:
		//	"?" | "*" | "+";
		public ParserRule getRule() { return rule; }

		//"?" | "*" | "+"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"?"
		public Keyword getQuestionMarkKeyword_0() { return cQuestionMarkKeyword_0; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }

		//"+"
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }
	}

	public class UnitConcernContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitConcernContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnitConcernContextAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDocumentationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDocumentationDOCUMENTATIONParserRuleCall_1_0 = (RuleCall)cDocumentationAssignment_1.eContents().get(0);
		private final Keyword cUnitContextKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSelectUnitsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cQueryAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cQueryUnitOrExpressionParserRuleCall_6_0 = (RuleCall)cQueryAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cModifySelectedKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cColonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cLeftCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cSourceKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Keyword cColonKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Assignment cSourceLocationAssignment_11_2 = (Assignment)cGroup_11.eContents().get(2);
		private final RuleCall cSourceLocationURIParserRuleCall_11_2_0 = (RuleCall)cSourceLocationAssignment_11_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_11_3 = (Keyword)cGroup_11.eContents().get(3);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cOutputKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Keyword cColonKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Assignment cOutputLocationAssignment_12_2 = (Assignment)cGroup_12.eContents().get(2);
		private final RuleCall cOutputLocationURIParserRuleCall_12_2_0 = (RuleCall)cOutputLocationAssignment_12_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_12_3 = (Keyword)cGroup_12.eContents().get(3);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cProvidesKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Keyword cColonKeyword_13_1 = (Keyword)cGroup_13.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_13_2 = (Keyword)cGroup_13.eContents().get(2);
		private final Alternatives cAlternatives_13_3 = (Alternatives)cGroup_13.eContents().get(3);
		private final Group cGroup_13_3_0 = (Group)cAlternatives_13_3.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_13_3_0_0 = (Keyword)cGroup_13_3_0.eContents().get(0);
		private final Assignment cProvidesRemovalsAssignment_13_3_0_1 = (Assignment)cGroup_13_3_0.eContents().get(1);
		private final RuleCall cProvidesRemovalsProvidesPredicateParserRuleCall_13_3_0_1_0 = (RuleCall)cProvidesRemovalsAssignment_13_3_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_13_3_0_2 = (Keyword)cGroup_13_3_0.eContents().get(2);
		private final Group cGroup_13_3_1 = (Group)cAlternatives_13_3.eContents().get(1);
		private final Keyword cPlusSignKeyword_13_3_1_0 = (Keyword)cGroup_13_3_1.eContents().get(0);
		private final Assignment cProvidedCapabilitiesAssignment_13_3_1_1 = (Assignment)cGroup_13_3_1.eContents().get(1);
		private final RuleCall cProvidedCapabilitiesProvidedCapabilityParserRuleCall_13_3_1_1_0 = (RuleCall)cProvidedCapabilitiesAssignment_13_3_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_13_3_1_2 = (Keyword)cGroup_13_3_1.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_13_4 = (Keyword)cGroup_13.eContents().get(4);
		private final Keyword cSemicolonKeyword_13_5 = (Keyword)cGroup_13.eContents().get(5);
		private final Group cGroup_14 = (Group)cGroup.eContents().get(14);
		private final Keyword cRequiresKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final Keyword cColonKeyword_14_1 = (Keyword)cGroup_14.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_14_2 = (Keyword)cGroup_14.eContents().get(2);
		private final Alternatives cAlternatives_14_3 = (Alternatives)cGroup_14.eContents().get(3);
		private final Group cGroup_14_3_0 = (Group)cAlternatives_14_3.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_14_3_0_0 = (Keyword)cGroup_14_3_0.eContents().get(0);
		private final Assignment cRequiresRemovalsAssignment_14_3_0_1 = (Assignment)cGroup_14_3_0.eContents().get(1);
		private final RuleCall cRequiresRemovalsRequiresPredicateParserRuleCall_14_3_0_1_0 = (RuleCall)cRequiresRemovalsAssignment_14_3_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_14_3_0_2 = (Keyword)cGroup_14_3_0.eContents().get(2);
		private final Group cGroup_14_3_1 = (Group)cAlternatives_14_3.eContents().get(1);
		private final Keyword cPlusSignKeyword_14_3_1_0 = (Keyword)cGroup_14_3_1.eContents().get(0);
		private final Assignment cRequiredCapabilitiesAssignment_14_3_1_1 = (Assignment)cGroup_14_3_1.eContents().get(1);
		private final RuleCall cRequiredCapabilitiesAliasedRequiredCapabilityParserRuleCall_14_3_1_1_0 = (RuleCall)cRequiredCapabilitiesAssignment_14_3_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_14_3_1_2 = (Keyword)cGroup_14_3_1.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_14_4 = (Keyword)cGroup_14.eContents().get(4);
		private final Keyword cSemicolonKeyword_14_5 = (Keyword)cGroup_14.eContents().get(5);
		private final Group cGroup_15 = (Group)cGroup.eContents().get(15);
		private final Keyword cSelectRequiredKeyword_15_0 = (Keyword)cGroup_15.eContents().get(0);
		private final Keyword cColonKeyword_15_1 = (Keyword)cGroup_15.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_15_2 = (Keyword)cGroup_15.eContents().get(2);
		private final Alternatives cAlternatives_15_3 = (Alternatives)cGroup_15.eContents().get(3);
		private final Group cGroup_15_3_0 = (Group)cAlternatives_15_3.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_15_3_0_0 = (Keyword)cGroup_15_3_0.eContents().get(0);
		private final Assignment cRequiredPredicatesRemovalsAssignment_15_3_0_1 = (Assignment)cGroup_15_3_0.eContents().get(1);
		private final RuleCall cRequiredPredicatesRemovalsCapabilityPredicateParserRuleCall_15_3_0_1_0 = (RuleCall)cRequiredPredicatesRemovalsAssignment_15_3_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_15_3_0_2 = (Keyword)cGroup_15_3_0.eContents().get(2);
		private final Group cGroup_15_3_1 = (Group)cAlternatives_15_3.eContents().get(1);
		private final Keyword cPlusSignKeyword_15_3_1_0 = (Keyword)cGroup_15_3_1.eContents().get(0);
		private final Assignment cRequiredPredicatesAssignment_15_3_1_1 = (Assignment)cGroup_15_3_1.eContents().get(1);
		private final RuleCall cRequiredPredicatesCapabilityPredicateParserRuleCall_15_3_1_1_0 = (RuleCall)cRequiredPredicatesAssignment_15_3_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_15_3_1_2 = (Keyword)cGroup_15_3_1.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_15_4 = (Keyword)cGroup_15.eContents().get(4);
		private final Keyword cSemicolonKeyword_15_5 = (Keyword)cGroup_15.eContents().get(5);
		private final Alternatives cAlternatives_16 = (Alternatives)cGroup.eContents().get(16);
		private final Assignment cFunctionsAssignment_16_0 = (Assignment)cAlternatives_16.eContents().get(0);
		private final RuleCall cFunctionsBuilderParserRuleCall_16_0_0 = (RuleCall)cFunctionsAssignment_16_0.eContents().get(0);
		private final Assignment cBuilderContextsAssignment_16_1 = (Assignment)cAlternatives_16.eContents().get(1);
		private final RuleCall cBuilderContextsBuilderConcernContextParserRuleCall_16_1_0 = (RuleCall)cBuilderContextsAssignment_16_1.eContents().get(0);
		private final Group cGroup_17 = (Group)cGroup.eContents().get(17);
		private final Keyword cHyphenMinusKeyword_17_0 = (Keyword)cGroup_17.eContents().get(0);
		private final Assignment cDefaultPropertiesRemovalsAssignment_17_1 = (Assignment)cGroup_17.eContents().get(1);
		private final RuleCall cDefaultPropertiesRemovalsPIDTerminalRuleCall_17_1_0 = (RuleCall)cDefaultPropertiesRemovalsAssignment_17_1.eContents().get(0);
		private final Group cGroup_17_2 = (Group)cGroup_17.eContents().get(2);
		private final Keyword cCommaKeyword_17_2_0 = (Keyword)cGroup_17_2.eContents().get(0);
		private final Assignment cDefaultPropertiesRemovalsAssignment_17_2_1 = (Assignment)cGroup_17_2.eContents().get(1);
		private final RuleCall cDefaultPropertiesRemovalsPIDTerminalRuleCall_17_2_1_0 = (RuleCall)cDefaultPropertiesRemovalsAssignment_17_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_17_3 = (Keyword)cGroup_17.eContents().get(3);
		private final Group cGroup_18 = (Group)cGroup.eContents().get(18);
		private final Keyword cPlusSignKeyword_18_0 = (Keyword)cGroup_18.eContents().get(0);
		private final Assignment cDefaultPropertiesAdditionsAssignment_18_1 = (Assignment)cGroup_18.eContents().get(1);
		private final RuleCall cDefaultPropertiesAdditionsPropertySetDefaultParserRuleCall_18_1_0 = (RuleCall)cDefaultPropertiesAdditionsAssignment_18_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_19 = (Keyword)cGroup.eContents().get(19);
		private final Keyword cSemicolonKeyword_20 = (Keyword)cGroup.eContents().get(20);
		private final Keyword cRightCurlyBracketKeyword_21 = (Keyword)cGroup.eContents().get(21);
		
		//// Advice for units consists of Builders, and advice for Builders
		//UnitConcernContext returns build::UnitConcernContext:
		//	{build::UnitConcernContext} documentation=DOCUMENTATION? "unit-context" "{" "select-units" ":" query=UnitOrExpression
		//	";" "modify-selected" ":" "{" ("source" ":" sourceLocation=URI ";")? ("output" ":" outputLocation=URI ";")?
		//	("provides" ":" "{" ("-" providesRemovals+=ProvidesPredicate ";" | "+" providedCapabilities+=ProvidedCapability ";")*
		//	"}" ";")? ("requires" ":" "{" ("-" requiresRemovals+=RequiresPredicate ";" | "+"
		//	requiredCapabilities+=AliasedRequiredCapability ";")* "}" ";")? ("select-required" ":" "{" ("-"
		//	requiredPredicatesRemovals+=CapabilityPredicate ";" | "+" requiredPredicates+=CapabilityPredicate ";")* "}" ";")?
		//	(functions+=Builder | builderContexts+=BuilderConcernContext)* // TODO - this is sort of bogus, can not remove a default property, changing the default is the same as
		//	// specifying the value of a property... If introducing new functions those functions may need to see
		//	// different properties, and those may need to be default - rethink
		//	("-" defaultPropertiesRemovals+=PID ("," defaultPropertiesRemovals+=PID)* ";")? ("+"
		//	defaultPropertiesAdditions=PropertySetDefault)? "}" ";" "}";
		public ParserRule getRule() { return rule; }

		//{build::UnitConcernContext} documentation=DOCUMENTATION? "unit-context" "{" "select-units" ":" query=UnitOrExpression
		//";" "modify-selected" ":" "{" ("source" ":" sourceLocation=URI ";")? ("output" ":" outputLocation=URI ";")? ("provides"
		//":" "{" ("-" providesRemovals+=ProvidesPredicate ";" | "+" providedCapabilities+=ProvidedCapability ";")* "}" ";")?
		//("requires" ":" "{" ("-" requiresRemovals+=RequiresPredicate ";" | "+" requiredCapabilities+=AliasedRequiredCapability
		//";")* "}" ";")? ("select-required" ":" "{" ("-" requiredPredicatesRemovals+=CapabilityPredicate ";" | "+"
		//requiredPredicates+=CapabilityPredicate ";")* "}" ";")? (functions+=Builder | builderContexts+=BuilderConcernContext)* // TODO - this is sort of bogus, can not remove a default property, changing the default is the same as
		//// specifying the value of a property... If introducing new functions those functions may need to see
		//// different properties, and those may need to be default - rethink
		//("-" defaultPropertiesRemovals+=PID ("," defaultPropertiesRemovals+=PID)* ";")? ("+"
		//defaultPropertiesAdditions=PropertySetDefault)? "}" ";" "}"
		public Group getGroup() { return cGroup; }

		//{build::UnitConcernContext}
		public Action getUnitConcernContextAction_0() { return cUnitConcernContextAction_0; }

		//documentation=DOCUMENTATION?
		public Assignment getDocumentationAssignment_1() { return cDocumentationAssignment_1; }

		//DOCUMENTATION
		public RuleCall getDocumentationDOCUMENTATIONParserRuleCall_1_0() { return cDocumentationDOCUMENTATIONParserRuleCall_1_0; }

		//"unit-context"
		public Keyword getUnitContextKeyword_2() { return cUnitContextKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//"select-units"
		public Keyword getSelectUnitsKeyword_4() { return cSelectUnitsKeyword_4; }

		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//query=UnitOrExpression
		public Assignment getQueryAssignment_6() { return cQueryAssignment_6; }

		//UnitOrExpression
		public RuleCall getQueryUnitOrExpressionParserRuleCall_6_0() { return cQueryUnitOrExpressionParserRuleCall_6_0; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }

		//"modify-selected"
		public Keyword getModifySelectedKeyword_8() { return cModifySelectedKeyword_8; }

		//":"
		public Keyword getColonKeyword_9() { return cColonKeyword_9; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_10() { return cLeftCurlyBracketKeyword_10; }

		//("source" ":" sourceLocation=URI ";")?
		public Group getGroup_11() { return cGroup_11; }

		//"source"
		public Keyword getSourceKeyword_11_0() { return cSourceKeyword_11_0; }

		//":"
		public Keyword getColonKeyword_11_1() { return cColonKeyword_11_1; }

		//sourceLocation=URI
		public Assignment getSourceLocationAssignment_11_2() { return cSourceLocationAssignment_11_2; }

		//URI
		public RuleCall getSourceLocationURIParserRuleCall_11_2_0() { return cSourceLocationURIParserRuleCall_11_2_0; }

		//";"
		public Keyword getSemicolonKeyword_11_3() { return cSemicolonKeyword_11_3; }

		//("output" ":" outputLocation=URI ";")?
		public Group getGroup_12() { return cGroup_12; }

		//"output"
		public Keyword getOutputKeyword_12_0() { return cOutputKeyword_12_0; }

		//":"
		public Keyword getColonKeyword_12_1() { return cColonKeyword_12_1; }

		//outputLocation=URI
		public Assignment getOutputLocationAssignment_12_2() { return cOutputLocationAssignment_12_2; }

		//URI
		public RuleCall getOutputLocationURIParserRuleCall_12_2_0() { return cOutputLocationURIParserRuleCall_12_2_0; }

		//";"
		public Keyword getSemicolonKeyword_12_3() { return cSemicolonKeyword_12_3; }

		//("provides" ":" "{" ("-" providesRemovals+=ProvidesPredicate ";" | "+" providedCapabilities+=ProvidedCapability ";")*
		//"}" ";")?
		public Group getGroup_13() { return cGroup_13; }

		//"provides"
		public Keyword getProvidesKeyword_13_0() { return cProvidesKeyword_13_0; }

		//":"
		public Keyword getColonKeyword_13_1() { return cColonKeyword_13_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_13_2() { return cLeftCurlyBracketKeyword_13_2; }

		//("-" providesRemovals+=ProvidesPredicate ";" | "+" providedCapabilities+=ProvidedCapability ";")*
		public Alternatives getAlternatives_13_3() { return cAlternatives_13_3; }

		//"-" providesRemovals+=ProvidesPredicate ";"
		public Group getGroup_13_3_0() { return cGroup_13_3_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_13_3_0_0() { return cHyphenMinusKeyword_13_3_0_0; }

		//providesRemovals+=ProvidesPredicate
		public Assignment getProvidesRemovalsAssignment_13_3_0_1() { return cProvidesRemovalsAssignment_13_3_0_1; }

		//ProvidesPredicate
		public RuleCall getProvidesRemovalsProvidesPredicateParserRuleCall_13_3_0_1_0() { return cProvidesRemovalsProvidesPredicateParserRuleCall_13_3_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_13_3_0_2() { return cSemicolonKeyword_13_3_0_2; }

		//"+" providedCapabilities+=ProvidedCapability ";"
		public Group getGroup_13_3_1() { return cGroup_13_3_1; }

		//"+"
		public Keyword getPlusSignKeyword_13_3_1_0() { return cPlusSignKeyword_13_3_1_0; }

		//providedCapabilities+=ProvidedCapability
		public Assignment getProvidedCapabilitiesAssignment_13_3_1_1() { return cProvidedCapabilitiesAssignment_13_3_1_1; }

		//ProvidedCapability
		public RuleCall getProvidedCapabilitiesProvidedCapabilityParserRuleCall_13_3_1_1_0() { return cProvidedCapabilitiesProvidedCapabilityParserRuleCall_13_3_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_13_3_1_2() { return cSemicolonKeyword_13_3_1_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_13_4() { return cRightCurlyBracketKeyword_13_4; }

		//";"
		public Keyword getSemicolonKeyword_13_5() { return cSemicolonKeyword_13_5; }

		//("requires" ":" "{" ("-" requiresRemovals+=RequiresPredicate ";" | "+" requiredCapabilities+=AliasedRequiredCapability
		//";")* "}" ";")?
		public Group getGroup_14() { return cGroup_14; }

		//"requires"
		public Keyword getRequiresKeyword_14_0() { return cRequiresKeyword_14_0; }

		//":"
		public Keyword getColonKeyword_14_1() { return cColonKeyword_14_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_14_2() { return cLeftCurlyBracketKeyword_14_2; }

		//("-" requiresRemovals+=RequiresPredicate ";" | "+" requiredCapabilities+=AliasedRequiredCapability ";")*
		public Alternatives getAlternatives_14_3() { return cAlternatives_14_3; }

		//"-" requiresRemovals+=RequiresPredicate ";"
		public Group getGroup_14_3_0() { return cGroup_14_3_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_14_3_0_0() { return cHyphenMinusKeyword_14_3_0_0; }

		//requiresRemovals+=RequiresPredicate
		public Assignment getRequiresRemovalsAssignment_14_3_0_1() { return cRequiresRemovalsAssignment_14_3_0_1; }

		//RequiresPredicate
		public RuleCall getRequiresRemovalsRequiresPredicateParserRuleCall_14_3_0_1_0() { return cRequiresRemovalsRequiresPredicateParserRuleCall_14_3_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_14_3_0_2() { return cSemicolonKeyword_14_3_0_2; }

		//"+" requiredCapabilities+=AliasedRequiredCapability ";"
		public Group getGroup_14_3_1() { return cGroup_14_3_1; }

		//"+"
		public Keyword getPlusSignKeyword_14_3_1_0() { return cPlusSignKeyword_14_3_1_0; }

		//requiredCapabilities+=AliasedRequiredCapability
		public Assignment getRequiredCapabilitiesAssignment_14_3_1_1() { return cRequiredCapabilitiesAssignment_14_3_1_1; }

		//AliasedRequiredCapability
		public RuleCall getRequiredCapabilitiesAliasedRequiredCapabilityParserRuleCall_14_3_1_1_0() { return cRequiredCapabilitiesAliasedRequiredCapabilityParserRuleCall_14_3_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_14_3_1_2() { return cSemicolonKeyword_14_3_1_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_14_4() { return cRightCurlyBracketKeyword_14_4; }

		//";"
		public Keyword getSemicolonKeyword_14_5() { return cSemicolonKeyword_14_5; }

		//("select-required" ":" "{" ("-" requiredPredicatesRemovals+=CapabilityPredicate ";" | "+"
		//requiredPredicates+=CapabilityPredicate ";")* "}" ";")?
		public Group getGroup_15() { return cGroup_15; }

		//"select-required"
		public Keyword getSelectRequiredKeyword_15_0() { return cSelectRequiredKeyword_15_0; }

		//":"
		public Keyword getColonKeyword_15_1() { return cColonKeyword_15_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_15_2() { return cLeftCurlyBracketKeyword_15_2; }

		//("-" requiredPredicatesRemovals+=CapabilityPredicate ";" | "+" requiredPredicates+=CapabilityPredicate ";")*
		public Alternatives getAlternatives_15_3() { return cAlternatives_15_3; }

		//"-" requiredPredicatesRemovals+=CapabilityPredicate ";"
		public Group getGroup_15_3_0() { return cGroup_15_3_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_15_3_0_0() { return cHyphenMinusKeyword_15_3_0_0; }

		//requiredPredicatesRemovals+=CapabilityPredicate
		public Assignment getRequiredPredicatesRemovalsAssignment_15_3_0_1() { return cRequiredPredicatesRemovalsAssignment_15_3_0_1; }

		//CapabilityPredicate
		public RuleCall getRequiredPredicatesRemovalsCapabilityPredicateParserRuleCall_15_3_0_1_0() { return cRequiredPredicatesRemovalsCapabilityPredicateParserRuleCall_15_3_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_15_3_0_2() { return cSemicolonKeyword_15_3_0_2; }

		//"+" requiredPredicates+=CapabilityPredicate ";"
		public Group getGroup_15_3_1() { return cGroup_15_3_1; }

		//"+"
		public Keyword getPlusSignKeyword_15_3_1_0() { return cPlusSignKeyword_15_3_1_0; }

		//requiredPredicates+=CapabilityPredicate
		public Assignment getRequiredPredicatesAssignment_15_3_1_1() { return cRequiredPredicatesAssignment_15_3_1_1; }

		//CapabilityPredicate
		public RuleCall getRequiredPredicatesCapabilityPredicateParserRuleCall_15_3_1_1_0() { return cRequiredPredicatesCapabilityPredicateParserRuleCall_15_3_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_15_3_1_2() { return cSemicolonKeyword_15_3_1_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_15_4() { return cRightCurlyBracketKeyword_15_4; }

		//";"
		public Keyword getSemicolonKeyword_15_5() { return cSemicolonKeyword_15_5; }

		//(functions+=Builder | builderContexts+=BuilderConcernContext)*
		public Alternatives getAlternatives_16() { return cAlternatives_16; }

		//functions+=Builder
		public Assignment getFunctionsAssignment_16_0() { return cFunctionsAssignment_16_0; }

		//Builder
		public RuleCall getFunctionsBuilderParserRuleCall_16_0_0() { return cFunctionsBuilderParserRuleCall_16_0_0; }

		//builderContexts+=BuilderConcernContext
		public Assignment getBuilderContextsAssignment_16_1() { return cBuilderContextsAssignment_16_1; }

		//BuilderConcernContext
		public RuleCall getBuilderContextsBuilderConcernContextParserRuleCall_16_1_0() { return cBuilderContextsBuilderConcernContextParserRuleCall_16_1_0; }

		//("-" defaultPropertiesRemovals+=PID ("," defaultPropertiesRemovals+=PID)* ";")?
		public Group getGroup_17() { return cGroup_17; }

		//"-"
		public Keyword getHyphenMinusKeyword_17_0() { return cHyphenMinusKeyword_17_0; }

		//defaultPropertiesRemovals+=PID
		public Assignment getDefaultPropertiesRemovalsAssignment_17_1() { return cDefaultPropertiesRemovalsAssignment_17_1; }

		//PID
		public RuleCall getDefaultPropertiesRemovalsPIDTerminalRuleCall_17_1_0() { return cDefaultPropertiesRemovalsPIDTerminalRuleCall_17_1_0; }

		//("," defaultPropertiesRemovals+=PID)*
		public Group getGroup_17_2() { return cGroup_17_2; }

		//","
		public Keyword getCommaKeyword_17_2_0() { return cCommaKeyword_17_2_0; }

		//defaultPropertiesRemovals+=PID
		public Assignment getDefaultPropertiesRemovalsAssignment_17_2_1() { return cDefaultPropertiesRemovalsAssignment_17_2_1; }

		//PID
		public RuleCall getDefaultPropertiesRemovalsPIDTerminalRuleCall_17_2_1_0() { return cDefaultPropertiesRemovalsPIDTerminalRuleCall_17_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_17_3() { return cSemicolonKeyword_17_3; }

		//("+" defaultPropertiesAdditions=PropertySetDefault)?
		public Group getGroup_18() { return cGroup_18; }

		//"+"
		public Keyword getPlusSignKeyword_18_0() { return cPlusSignKeyword_18_0; }

		//defaultPropertiesAdditions=PropertySetDefault
		public Assignment getDefaultPropertiesAdditionsAssignment_18_1() { return cDefaultPropertiesAdditionsAssignment_18_1; }

		//PropertySetDefault
		public RuleCall getDefaultPropertiesAdditionsPropertySetDefaultParserRuleCall_18_1_0() { return cDefaultPropertiesAdditionsPropertySetDefaultParserRuleCall_18_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_19() { return cRightCurlyBracketKeyword_19; }

		//";"
		public Keyword getSemicolonKeyword_20() { return cSemicolonKeyword_20; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_21() { return cRightCurlyBracketKeyword_21; }
	}

	public class BuilderConcernContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuilderConcernContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBuilderConcernContextAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDocumentationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDocumentationDOCUMENTATIONParserRuleCall_1_0 = (RuleCall)cDocumentationAssignment_1.eContents().get(0);
		private final Keyword cBuilderContextKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSelectBuildersKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cQueryAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cQueryBuilderOrExpressionParserRuleCall_6_0 = (RuleCall)cQueryAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cHavingParametersKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cMatchParametersAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final Keyword cMatchParametersColonKeyword_8_1_0 = (Keyword)cMatchParametersAssignment_8_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Alternatives cAlternatives_8_3 = (Alternatives)cGroup_8.eContents().get(3);
		private final Group cGroup_8_3_0 = (Group)cAlternatives_8_3.eContents().get(0);
		private final Assignment cParametersAssignment_8_3_0_0 = (Assignment)cGroup_8_3_0.eContents().get(0);
		private final RuleCall cParametersParameterPredicateParserRuleCall_8_3_0_0_0 = (RuleCall)cParametersAssignment_8_3_0_0.eContents().get(0);
		private final Group cGroup_8_3_0_1 = (Group)cGroup_8_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_8_3_0_1_0 = (Keyword)cGroup_8_3_0_1.eContents().get(0);
		private final Assignment cParametersAssignment_8_3_0_1_1 = (Assignment)cGroup_8_3_0_1.eContents().get(1);
		private final RuleCall cParametersParameterPredicateParserRuleCall_8_3_0_1_1_0 = (RuleCall)cParametersAssignment_8_3_0_1_1.eContents().get(0);
		private final Group cGroup_8_3_0_2 = (Group)cGroup_8_3_0.eContents().get(2);
		private final Keyword cCommaKeyword_8_3_0_2_0 = (Keyword)cGroup_8_3_0_2.eContents().get(0);
		private final Assignment cVarArgsAssignment_8_3_0_2_1 = (Assignment)cGroup_8_3_0_2.eContents().get(1);
		private final Keyword cVarArgsFullStopFullStopFullStopKeyword_8_3_0_2_1_0 = (Keyword)cVarArgsAssignment_8_3_0_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_8_3_0_2_2 = (Assignment)cGroup_8_3_0_2.eContents().get(2);
		private final RuleCall cParametersParameterVarargsPredicateParserRuleCall_8_3_0_2_2_0 = (RuleCall)cParametersAssignment_8_3_0_2_2.eContents().get(0);
		private final Group cGroup_8_3_1 = (Group)cAlternatives_8_3.eContents().get(1);
		private final Assignment cVarArgsAssignment_8_3_1_0 = (Assignment)cGroup_8_3_1.eContents().get(0);
		private final Keyword cVarArgsFullStopFullStopFullStopKeyword_8_3_1_0_0 = (Keyword)cVarArgsAssignment_8_3_1_0.eContents().get(0);
		private final Assignment cParametersAssignment_8_3_1_1 = (Assignment)cGroup_8_3_1.eContents().get(1);
		private final RuleCall cParametersParameterVarargsPredicateParserRuleCall_8_3_1_1_0 = (RuleCall)cParametersAssignment_8_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Keyword cSemicolonKeyword_8_5 = (Keyword)cGroup_8.eContents().get(5);
		private final Keyword cModifySelectedKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cColonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cConditionsKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Keyword cColonKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_12_2 = (Keyword)cGroup_12.eContents().get(2);
		private final Group cGroup_12_3 = (Group)cGroup_12.eContents().get(3);
		private final Keyword cHyphenMinusKeyword_12_3_0 = (Keyword)cGroup_12_3.eContents().get(0);
		private final Assignment cRemovePreConditionAssignment_12_3_1 = (Assignment)cGroup_12_3.eContents().get(1);
		private final Keyword cRemovePreConditionPreconditionKeyword_12_3_1_0 = (Keyword)cRemovePreConditionAssignment_12_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_12_3_2 = (Keyword)cGroup_12_3.eContents().get(2);
		private final Group cGroup_12_4 = (Group)cGroup_12.eContents().get(4);
		private final Keyword cPlusSignKeyword_12_4_0 = (Keyword)cGroup_12_4.eContents().get(0);
		private final Keyword cPreconditionKeyword_12_4_1 = (Keyword)cGroup_12_4.eContents().get(1);
		private final Keyword cColonKeyword_12_4_2 = (Keyword)cGroup_12_4.eContents().get(2);
		private final Assignment cPrecondExprAssignment_12_4_3 = (Assignment)cGroup_12_4.eContents().get(3);
		private final RuleCall cPrecondExprExpressionParserRuleCall_12_4_3_0 = (RuleCall)cPrecondExprAssignment_12_4_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_12_4_4 = (Keyword)cGroup_12_4.eContents().get(4);
		private final Group cGroup_12_5 = (Group)cGroup_12.eContents().get(5);
		private final Keyword cHyphenMinusKeyword_12_5_0 = (Keyword)cGroup_12_5.eContents().get(0);
		private final Assignment cRemovePostInputConditionAssignment_12_5_1 = (Assignment)cGroup_12_5.eContents().get(1);
		private final Keyword cRemovePostInputConditionPostinputconditionKeyword_12_5_1_0 = (Keyword)cRemovePostInputConditionAssignment_12_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_12_5_2 = (Keyword)cGroup_12_5.eContents().get(2);
		private final Group cGroup_12_6 = (Group)cGroup_12.eContents().get(6);
		private final Keyword cPlusSignKeyword_12_6_0 = (Keyword)cGroup_12_6.eContents().get(0);
		private final Keyword cPostinputconditionKeyword_12_6_1 = (Keyword)cGroup_12_6.eContents().get(1);
		private final Keyword cColonKeyword_12_6_2 = (Keyword)cGroup_12_6.eContents().get(2);
		private final Assignment cPostinputcondExprAssignment_12_6_3 = (Assignment)cGroup_12_6.eContents().get(3);
		private final RuleCall cPostinputcondExprExpressionParserRuleCall_12_6_3_0 = (RuleCall)cPostinputcondExprAssignment_12_6_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_12_6_4 = (Keyword)cGroup_12_6.eContents().get(4);
		private final Group cGroup_12_7 = (Group)cGroup_12.eContents().get(7);
		private final Keyword cHyphenMinusKeyword_12_7_0 = (Keyword)cGroup_12_7.eContents().get(0);
		private final Assignment cRemovePostConditionAssignment_12_7_1 = (Assignment)cGroup_12_7.eContents().get(1);
		private final Keyword cRemovePostConditionPostconditionKeyword_12_7_1_0 = (Keyword)cRemovePostConditionAssignment_12_7_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_12_7_2 = (Keyword)cGroup_12_7.eContents().get(2);
		private final Group cGroup_12_8 = (Group)cGroup_12.eContents().get(8);
		private final Keyword cPlusSignKeyword_12_8_0 = (Keyword)cGroup_12_8.eContents().get(0);
		private final Keyword cPostconditionKeyword_12_8_1 = (Keyword)cGroup_12_8.eContents().get(1);
		private final Keyword cColonKeyword_12_8_2 = (Keyword)cGroup_12_8.eContents().get(2);
		private final Assignment cPostcondExprAssignment_12_8_3 = (Assignment)cGroup_12_8.eContents().get(3);
		private final RuleCall cPostcondExprExpressionParserRuleCall_12_8_3_0 = (RuleCall)cPostcondExprAssignment_12_8_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_12_8_4 = (Keyword)cGroup_12_8.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_12_9 = (Keyword)cGroup_12.eContents().get(9);
		private final Keyword cSemicolonKeyword_12_10 = (Keyword)cGroup_12.eContents().get(10);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cProvidesKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Keyword cColonKeyword_13_1 = (Keyword)cGroup_13.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_13_2 = (Keyword)cGroup_13.eContents().get(2);
		private final Alternatives cAlternatives_13_3 = (Alternatives)cGroup_13.eContents().get(3);
		private final Group cGroup_13_3_0 = (Group)cAlternatives_13_3.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_13_3_0_0 = (Keyword)cGroup_13_3_0.eContents().get(0);
		private final Assignment cProvidesRemovalsAssignment_13_3_0_1 = (Assignment)cGroup_13_3_0.eContents().get(1);
		private final RuleCall cProvidesRemovalsProvidesPredicateParserRuleCall_13_3_0_1_0 = (RuleCall)cProvidesRemovalsAssignment_13_3_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_13_3_0_2 = (Keyword)cGroup_13_3_0.eContents().get(2);
		private final Group cGroup_13_3_1 = (Group)cAlternatives_13_3.eContents().get(1);
		private final Keyword cPlusSignKeyword_13_3_1_0 = (Keyword)cGroup_13_3_1.eContents().get(0);
		private final Assignment cProvidedCapabilitiesAssignment_13_3_1_1 = (Assignment)cGroup_13_3_1.eContents().get(1);
		private final RuleCall cProvidedCapabilitiesProvidedCapabilityParserRuleCall_13_3_1_1_0 = (RuleCall)cProvidedCapabilitiesAssignment_13_3_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_13_3_1_2 = (Keyword)cGroup_13_3_1.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_13_4 = (Keyword)cGroup_13.eContents().get(4);
		private final Keyword cSemicolonKeyword_13_5 = (Keyword)cGroup_13.eContents().get(5);
		private final Group cGroup_14 = (Group)cGroup.eContents().get(14);
		private final Keyword cHyphenMinusKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final Assignment cDefaultPropertiesRemovalsAssignment_14_1 = (Assignment)cGroup_14.eContents().get(1);
		private final RuleCall cDefaultPropertiesRemovalsPIDTerminalRuleCall_14_1_0 = (RuleCall)cDefaultPropertiesRemovalsAssignment_14_1.eContents().get(0);
		private final Group cGroup_14_2 = (Group)cGroup_14.eContents().get(2);
		private final Keyword cCommaKeyword_14_2_0 = (Keyword)cGroup_14_2.eContents().get(0);
		private final Assignment cDefaultPropertiesRemovalsAssignment_14_2_1 = (Assignment)cGroup_14_2.eContents().get(1);
		private final RuleCall cDefaultPropertiesRemovalsPIDTerminalRuleCall_14_2_1_0 = (RuleCall)cDefaultPropertiesRemovalsAssignment_14_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_14_3 = (Keyword)cGroup_14.eContents().get(3);
		private final Group cGroup_15 = (Group)cGroup.eContents().get(15);
		private final Keyword cPlusSignKeyword_15_0 = (Keyword)cGroup_15.eContents().get(0);
		private final Assignment cDefaultPropertiesAdditionsAssignment_15_1 = (Assignment)cGroup_15.eContents().get(1);
		private final RuleCall cDefaultPropertiesAdditionsPropertySetDefaultParserRuleCall_15_1_0 = (RuleCall)cDefaultPropertiesAdditionsAssignment_15_1.eContents().get(0);
		private final Group cGroup_16 = (Group)cGroup.eContents().get(16);
		private final Keyword cInputKeyword_16_0 = (Keyword)cGroup_16.eContents().get(0);
		private final Keyword cColonKeyword_16_1 = (Keyword)cGroup_16.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_16_2 = (Keyword)cGroup_16.eContents().get(2);
		private final Alternatives cAlternatives_16_3 = (Alternatives)cGroup_16.eContents().get(3);
		private final Group cGroup_16_3_0 = (Group)cAlternatives_16_3.eContents().get(0);
		private final Keyword cPlusSignKeyword_16_3_0_0 = (Keyword)cGroup_16_3_0.eContents().get(0);
		private final Assignment cInputAdditionsAssignment_16_3_0_1 = (Assignment)cGroup_16_3_0.eContents().get(1);
		private final RuleCall cInputAdditionsBuilderInputParserRuleCall_16_3_0_1_0 = (RuleCall)cInputAdditionsAssignment_16_3_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_16_3_0_2 = (Keyword)cGroup_16_3_0.eContents().get(2);
		private final Group cGroup_16_3_1 = (Group)cAlternatives_16_3.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_16_3_1_0 = (Keyword)cGroup_16_3_1.eContents().get(0);
		private final Assignment cInputRemovalsAssignment_16_3_1_1 = (Assignment)cGroup_16_3_1.eContents().get(1);
		private final RuleCall cInputRemovalsInputPredicateParserRuleCall_16_3_1_1_0 = (RuleCall)cInputRemovalsAssignment_16_3_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_16_3_1_2 = (Keyword)cGroup_16_3_1.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_16_4 = (Keyword)cGroup_16.eContents().get(4);
		private final Keyword cSemicolonKeyword_16_5 = (Keyword)cGroup_16.eContents().get(5);
		private final Group cGroup_17 = (Group)cGroup.eContents().get(17);
		private final Keyword cSourceKeyword_17_0 = (Keyword)cGroup_17.eContents().get(0);
		private final Keyword cColonKeyword_17_1 = (Keyword)cGroup_17.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_17_2 = (Keyword)cGroup_17.eContents().get(2);
		private final Alternatives cAlternatives_17_3 = (Alternatives)cGroup_17.eContents().get(3);
		private final Group cGroup_17_3_0 = (Group)cAlternatives_17_3.eContents().get(0);
		private final Keyword cPlusSignKeyword_17_3_0_0 = (Keyword)cGroup_17_3_0.eContents().get(0);
		private final Assignment cSourceAdditionsAssignment_17_3_0_1 = (Assignment)cGroup_17_3_0.eContents().get(1);
		private final RuleCall cSourceAdditionsConditionalPathVectorParserRuleCall_17_3_0_1_0 = (RuleCall)cSourceAdditionsAssignment_17_3_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_17_3_0_2 = (Keyword)cGroup_17_3_0.eContents().get(2);
		private final Group cGroup_17_3_1 = (Group)cAlternatives_17_3.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_17_3_1_0 = (Keyword)cGroup_17_3_1.eContents().get(0);
		private final Keyword cSourceKeyword_17_3_1_1 = (Keyword)cGroup_17_3_1.eContents().get(1);
		private final Keyword cTildeEqualsSignKeyword_17_3_1_2 = (Keyword)cGroup_17_3_1.eContents().get(2);
		private final Assignment cSourceRemovalsAssignment_17_3_1_3 = (Assignment)cGroup_17_3_1.eContents().get(3);
		private final RuleCall cSourceRemovalsSourcePredicateParserRuleCall_17_3_1_3_0 = (RuleCall)cSourceRemovalsAssignment_17_3_1_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_17_3_1_4 = (Keyword)cGroup_17_3_1.eContents().get(4);
		private final Group cGroup_17_4 = (Group)cGroup_17.eContents().get(4);
		private final Keyword cHyphenMinusKeyword_17_4_0 = (Keyword)cGroup_17_4.eContents().get(0);
		private final Keyword cAnnotationsKeyword_17_4_1 = (Keyword)cGroup_17_4.eContents().get(1);
		private final Keyword cTildeEqualsSignKeyword_17_4_2 = (Keyword)cGroup_17_4.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_17_4_3 = (Keyword)cGroup_17_4.eContents().get(3);
		private final Assignment cSourceAnnotationsRemovalsAssignment_17_4_4 = (Assignment)cGroup_17_4.eContents().get(4);
		private final RuleCall cSourceAnnotationsRemovalsPIDTerminalRuleCall_17_4_4_0 = (RuleCall)cSourceAnnotationsRemovalsAssignment_17_4_4.eContents().get(0);
		private final Group cGroup_17_4_5 = (Group)cGroup_17_4.eContents().get(5);
		private final Keyword cCommaKeyword_17_4_5_0 = (Keyword)cGroup_17_4_5.eContents().get(0);
		private final Assignment cOutputAnnotationsRemovalsAssignment_17_4_5_1 = (Assignment)cGroup_17_4_5.eContents().get(1);
		private final RuleCall cOutputAnnotationsRemovalsPIDTerminalRuleCall_17_4_5_1_0 = (RuleCall)cOutputAnnotationsRemovalsAssignment_17_4_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_17_4_6 = (Keyword)cGroup_17_4.eContents().get(6);
		private final Keyword cSemicolonKeyword_17_4_7 = (Keyword)cGroup_17_4.eContents().get(7);
		private final Group cGroup_17_5 = (Group)cGroup_17.eContents().get(5);
		private final Keyword cPlusSignKeyword_17_5_0 = (Keyword)cGroup_17_5.eContents().get(0);
		private final Keyword cAnnotationsKeyword_17_5_1 = (Keyword)cGroup_17_5.eContents().get(1);
		private final Keyword cColonKeyword_17_5_2 = (Keyword)cGroup_17_5.eContents().get(2);
		private final Assignment cSourceAnnotationAdditionsAssignment_17_5_3 = (Assignment)cGroup_17_5.eContents().get(3);
		private final RuleCall cSourceAnnotationAdditionsAnnotationSetParserRuleCall_17_5_3_0 = (RuleCall)cSourceAnnotationAdditionsAssignment_17_5_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_17_6 = (Keyword)cGroup_17.eContents().get(6);
		private final Keyword cSemicolonKeyword_17_7 = (Keyword)cGroup_17.eContents().get(7);
		private final Group cGroup_18 = (Group)cGroup.eContents().get(18);
		private final Keyword cOutputKeyword_18_0 = (Keyword)cGroup_18.eContents().get(0);
		private final Keyword cColonKeyword_18_1 = (Keyword)cGroup_18.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_18_2 = (Keyword)cGroup_18.eContents().get(2);
		private final Alternatives cAlternatives_18_3 = (Alternatives)cGroup_18.eContents().get(3);
		private final Group cGroup_18_3_0 = (Group)cAlternatives_18_3.eContents().get(0);
		private final Keyword cPlusSignKeyword_18_3_0_0 = (Keyword)cGroup_18_3_0.eContents().get(0);
		private final Assignment cOutputAdditionsAssignment_18_3_0_1 = (Assignment)cGroup_18_3_0.eContents().get(1);
		private final RuleCall cOutputAdditionsConditionalPathVectorParserRuleCall_18_3_0_1_0 = (RuleCall)cOutputAdditionsAssignment_18_3_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_18_3_0_2 = (Keyword)cGroup_18_3_0.eContents().get(2);
		private final Group cGroup_18_3_1 = (Group)cAlternatives_18_3.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_18_3_1_0 = (Keyword)cGroup_18_3_1.eContents().get(0);
		private final Keyword cOutputKeyword_18_3_1_1 = (Keyword)cGroup_18_3_1.eContents().get(1);
		private final Keyword cTildeEqualsSignKeyword_18_3_1_2 = (Keyword)cGroup_18_3_1.eContents().get(2);
		private final Assignment cOutputRemovalsAssignment_18_3_1_3 = (Assignment)cGroup_18_3_1.eContents().get(3);
		private final RuleCall cOutputRemovalsOutputPredicateParserRuleCall_18_3_1_3_0 = (RuleCall)cOutputRemovalsAssignment_18_3_1_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_18_3_1_4 = (Keyword)cGroup_18_3_1.eContents().get(4);
		private final Group cGroup_18_4 = (Group)cGroup_18.eContents().get(4);
		private final Keyword cHyphenMinusKeyword_18_4_0 = (Keyword)cGroup_18_4.eContents().get(0);
		private final Keyword cAnnotationsKeyword_18_4_1 = (Keyword)cGroup_18_4.eContents().get(1);
		private final Keyword cTildeEqualsSignKeyword_18_4_2 = (Keyword)cGroup_18_4.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_18_4_3 = (Keyword)cGroup_18_4.eContents().get(3);
		private final Assignment cOutputAnnotationsRemovalsAssignment_18_4_4 = (Assignment)cGroup_18_4.eContents().get(4);
		private final RuleCall cOutputAnnotationsRemovalsPIDTerminalRuleCall_18_4_4_0 = (RuleCall)cOutputAnnotationsRemovalsAssignment_18_4_4.eContents().get(0);
		private final Group cGroup_18_4_5 = (Group)cGroup_18_4.eContents().get(5);
		private final Keyword cCommaKeyword_18_4_5_0 = (Keyword)cGroup_18_4_5.eContents().get(0);
		private final Assignment cOutputAnnotationsRemovalsAssignment_18_4_5_1 = (Assignment)cGroup_18_4_5.eContents().get(1);
		private final RuleCall cOutputAnnotationsRemovalsPIDTerminalRuleCall_18_4_5_1_0 = (RuleCall)cOutputAnnotationsRemovalsAssignment_18_4_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_18_4_6 = (Keyword)cGroup_18_4.eContents().get(6);
		private final Keyword cSemicolonKeyword_18_4_7 = (Keyword)cGroup_18_4.eContents().get(7);
		private final Group cGroup_18_5 = (Group)cGroup_18.eContents().get(5);
		private final Keyword cPlusSignKeyword_18_5_0 = (Keyword)cGroup_18_5.eContents().get(0);
		private final Keyword cAnnotationsKeyword_18_5_1 = (Keyword)cGroup_18_5.eContents().get(1);
		private final Keyword cColonKeyword_18_5_2 = (Keyword)cGroup_18_5.eContents().get(2);
		private final Assignment cOutputAnnotationAdditionsAssignment_18_5_3 = (Assignment)cGroup_18_5.eContents().get(3);
		private final RuleCall cOutputAnnotationAdditionsAnnotationSetParserRuleCall_18_5_3_0 = (RuleCall)cOutputAnnotationAdditionsAssignment_18_5_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_18_6 = (Keyword)cGroup_18.eContents().get(6);
		private final Keyword cSemicolonKeyword_18_7 = (Keyword)cGroup_18.eContents().get(7);
		private final Group cGroup_19 = (Group)cGroup.eContents().get(19);
		private final Keyword cResultKeyword_19_0 = (Keyword)cGroup_19.eContents().get(0);
		private final Keyword cColonKeyword_19_1 = (Keyword)cGroup_19.eContents().get(1);
		private final Assignment cFuncExprAssignment_19_2 = (Assignment)cGroup_19.eContents().get(2);
		private final RuleCall cFuncExprExpressionParserRuleCall_19_2_0 = (RuleCall)cFuncExprAssignment_19_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_19_3 = (Keyword)cGroup_19.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_20 = (Keyword)cGroup.eContents().get(20);
		private final Keyword cSemicolonKeyword_21 = (Keyword)cGroup.eContents().get(21);
		private final Keyword cRightCurlyBracketKeyword_22 = (Keyword)cGroup.eContents().get(22);
		
		//// Advice for Builders	
		//BuilderConcernContext returns build::BuilderConcernContext:
		//	{build::BuilderConcernContext} documentation=DOCUMENTATION? "builder-context" "{" "select-builders" ":"
		//	query=BuilderOrExpression ";" ("having-parameters" matchParameters?=":" "(" (parameters+=ParameterPredicate (","
		//	parameters+=ParameterPredicate)* ("," varArgs?="..." parameters+=ParameterVarargsPredicate)? | varArgs?="..."
		//	parameters+=ParameterVarargsPredicate)? ")" ";")? "modify-selected" ":" "{" ("conditions" ":" "{" ("-"
		//	removePreCondition?="precondition" ";")? ("+" "precondition" ":" precondExpr=Expression ";")? ("-"
		//	removePostInputCondition?="postinputcondition" ";")? ("+" "postinputcondition" ":" postinputcondExpr=Expression ";")?
		//	("-" removePostCondition?="postcondition" ";")? ("+" "postcondition" ":" postcondExpr=Expression ";")? "}" ";")?
		//	("provides" ":" "{" ("-" providesRemovals+=ProvidesPredicate ";" | "+" providedCapabilities+=ProvidedCapability ";")*
		//	"}" ";")? // TODO: rethink advice of default properties
		//	("-" defaultPropertiesRemovals+=PID ("," defaultPropertiesRemovals+=PID)* ";")? ("+"
		//	defaultPropertiesAdditions=PropertySetDefault)? ("input" ":" "{" ("+" inputAdditions+=BuilderInput ";" | "-"
		//	inputRemovals+=InputPredicate ";")* "}" ";")? ("source" ":" "{" ("+" sourceAdditions+=ConditionalPathVector ";" | "-"
		//	"source" "~=" sourceRemovals+=SourcePredicate ";")* // TODO : rethink advice of annotations
		//	("-" "annotations" "~=" "[" sourceAnnotationsRemovals+=PID ("," outputAnnotationsRemovals+=PID)* "]" ";")? ("+"
		//	"annotations" ":" sourceAnnotationAdditions=AnnotationSet)? "}" ";")? ("output" ":" "{" ("+"
		//	outputAdditions+=ConditionalPathVector ";" | "-" "output" "~=" outputRemovals+=OutputPredicate ";")* // TODO : rethink advice of annotations
		//	("-" "annotations" "~=" "[" outputAnnotationsRemovals+=PID ("," outputAnnotationsRemovals+=PID)* "]" ";")? ("+"
		//	"annotations" ":" outputAnnotationAdditions=AnnotationSet)? "}" ";")? ("result" ":" funcExpr=Expression ";")? // replaces the builder's funcExpression
		//	"}" ";" "}";
		public ParserRule getRule() { return rule; }

		//{build::BuilderConcernContext} documentation=DOCUMENTATION? "builder-context" "{" "select-builders" ":"
		//query=BuilderOrExpression ";" ("having-parameters" matchParameters?=":" "(" (parameters+=ParameterPredicate (","
		//parameters+=ParameterPredicate)* ("," varArgs?="..." parameters+=ParameterVarargsPredicate)? | varArgs?="..."
		//parameters+=ParameterVarargsPredicate)? ")" ";")? "modify-selected" ":" "{" ("conditions" ":" "{" ("-"
		//removePreCondition?="precondition" ";")? ("+" "precondition" ":" precondExpr=Expression ";")? ("-"
		//removePostInputCondition?="postinputcondition" ";")? ("+" "postinputcondition" ":" postinputcondExpr=Expression ";")?
		//("-" removePostCondition?="postcondition" ";")? ("+" "postcondition" ":" postcondExpr=Expression ";")? "}" ";")?
		//("provides" ":" "{" ("-" providesRemovals+=ProvidesPredicate ";" | "+" providedCapabilities+=ProvidedCapability ";")*
		//"}" ";")? // TODO: rethink advice of default properties
		//("-" defaultPropertiesRemovals+=PID ("," defaultPropertiesRemovals+=PID)* ";")? ("+"
		//defaultPropertiesAdditions=PropertySetDefault)? ("input" ":" "{" ("+" inputAdditions+=BuilderInput ";" | "-"
		//inputRemovals+=InputPredicate ";")* "}" ";")? ("source" ":" "{" ("+" sourceAdditions+=ConditionalPathVector ";" | "-"
		//"source" "~=" sourceRemovals+=SourcePredicate ";")* // TODO : rethink advice of annotations
		//("-" "annotations" "~=" "[" sourceAnnotationsRemovals+=PID ("," outputAnnotationsRemovals+=PID)* "]" ";")? ("+"
		//"annotations" ":" sourceAnnotationAdditions=AnnotationSet)? "}" ";")? ("output" ":" "{" ("+"
		//outputAdditions+=ConditionalPathVector ";" | "-" "output" "~=" outputRemovals+=OutputPredicate ";")* // TODO : rethink advice of annotations
		//("-" "annotations" "~=" "[" outputAnnotationsRemovals+=PID ("," outputAnnotationsRemovals+=PID)* "]" ";")? ("+"
		//"annotations" ":" outputAnnotationAdditions=AnnotationSet)? "}" ";")? ("result" ":" funcExpr=Expression ";")? // replaces the builder's funcExpression
		//"}" ";" "}"
		public Group getGroup() { return cGroup; }

		//{build::BuilderConcernContext}
		public Action getBuilderConcernContextAction_0() { return cBuilderConcernContextAction_0; }

		//documentation=DOCUMENTATION?
		public Assignment getDocumentationAssignment_1() { return cDocumentationAssignment_1; }

		//DOCUMENTATION
		public RuleCall getDocumentationDOCUMENTATIONParserRuleCall_1_0() { return cDocumentationDOCUMENTATIONParserRuleCall_1_0; }

		//"builder-context"
		public Keyword getBuilderContextKeyword_2() { return cBuilderContextKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//"select-builders"
		public Keyword getSelectBuildersKeyword_4() { return cSelectBuildersKeyword_4; }

		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//query=BuilderOrExpression
		public Assignment getQueryAssignment_6() { return cQueryAssignment_6; }

		//BuilderOrExpression
		public RuleCall getQueryBuilderOrExpressionParserRuleCall_6_0() { return cQueryBuilderOrExpressionParserRuleCall_6_0; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }

		//("having-parameters" matchParameters?=":" "(" (parameters+=ParameterPredicate ("," parameters+=ParameterPredicate)* (","
		//varArgs?="..." parameters+=ParameterVarargsPredicate)? | varArgs?="..." parameters+=ParameterVarargsPredicate)? ")"
		//";")?
		public Group getGroup_8() { return cGroup_8; }

		//"having-parameters"
		public Keyword getHavingParametersKeyword_8_0() { return cHavingParametersKeyword_8_0; }

		//matchParameters?=":"
		public Assignment getMatchParametersAssignment_8_1() { return cMatchParametersAssignment_8_1; }

		//":"
		public Keyword getMatchParametersColonKeyword_8_1_0() { return cMatchParametersColonKeyword_8_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_8_2() { return cLeftParenthesisKeyword_8_2; }

		//(parameters+=ParameterPredicate ("," parameters+=ParameterPredicate)* ("," varArgs?="..."
		//parameters+=ParameterVarargsPredicate)? | varArgs?="..." parameters+=ParameterVarargsPredicate)?
		public Alternatives getAlternatives_8_3() { return cAlternatives_8_3; }

		//parameters+=ParameterPredicate ("," parameters+=ParameterPredicate)* ("," varArgs?="..."
		//parameters+=ParameterVarargsPredicate)?
		public Group getGroup_8_3_0() { return cGroup_8_3_0; }

		//parameters+=ParameterPredicate
		public Assignment getParametersAssignment_8_3_0_0() { return cParametersAssignment_8_3_0_0; }

		//ParameterPredicate
		public RuleCall getParametersParameterPredicateParserRuleCall_8_3_0_0_0() { return cParametersParameterPredicateParserRuleCall_8_3_0_0_0; }

		//("," parameters+=ParameterPredicate)*
		public Group getGroup_8_3_0_1() { return cGroup_8_3_0_1; }

		//","
		public Keyword getCommaKeyword_8_3_0_1_0() { return cCommaKeyword_8_3_0_1_0; }

		//parameters+=ParameterPredicate
		public Assignment getParametersAssignment_8_3_0_1_1() { return cParametersAssignment_8_3_0_1_1; }

		//ParameterPredicate
		public RuleCall getParametersParameterPredicateParserRuleCall_8_3_0_1_1_0() { return cParametersParameterPredicateParserRuleCall_8_3_0_1_1_0; }

		//("," varArgs?="..." parameters+=ParameterVarargsPredicate)?
		public Group getGroup_8_3_0_2() { return cGroup_8_3_0_2; }

		//","
		public Keyword getCommaKeyword_8_3_0_2_0() { return cCommaKeyword_8_3_0_2_0; }

		//varArgs?="..."
		public Assignment getVarArgsAssignment_8_3_0_2_1() { return cVarArgsAssignment_8_3_0_2_1; }

		//"..."
		public Keyword getVarArgsFullStopFullStopFullStopKeyword_8_3_0_2_1_0() { return cVarArgsFullStopFullStopFullStopKeyword_8_3_0_2_1_0; }

		//parameters+=ParameterVarargsPredicate
		public Assignment getParametersAssignment_8_3_0_2_2() { return cParametersAssignment_8_3_0_2_2; }

		//ParameterVarargsPredicate
		public RuleCall getParametersParameterVarargsPredicateParserRuleCall_8_3_0_2_2_0() { return cParametersParameterVarargsPredicateParserRuleCall_8_3_0_2_2_0; }

		//varArgs?="..." parameters+=ParameterVarargsPredicate
		public Group getGroup_8_3_1() { return cGroup_8_3_1; }

		//varArgs?="..."
		public Assignment getVarArgsAssignment_8_3_1_0() { return cVarArgsAssignment_8_3_1_0; }

		//"..."
		public Keyword getVarArgsFullStopFullStopFullStopKeyword_8_3_1_0_0() { return cVarArgsFullStopFullStopFullStopKeyword_8_3_1_0_0; }

		//parameters+=ParameterVarargsPredicate
		public Assignment getParametersAssignment_8_3_1_1() { return cParametersAssignment_8_3_1_1; }

		//ParameterVarargsPredicate
		public RuleCall getParametersParameterVarargsPredicateParserRuleCall_8_3_1_1_0() { return cParametersParameterVarargsPredicateParserRuleCall_8_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8_4() { return cRightParenthesisKeyword_8_4; }

		//";"
		public Keyword getSemicolonKeyword_8_5() { return cSemicolonKeyword_8_5; }

		//"modify-selected"
		public Keyword getModifySelectedKeyword_9() { return cModifySelectedKeyword_9; }

		//":"
		public Keyword getColonKeyword_10() { return cColonKeyword_10; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_11() { return cLeftCurlyBracketKeyword_11; }

		//("conditions" ":" "{" ("-" removePreCondition?="precondition" ";")? ("+" "precondition" ":" precondExpr=Expression ";")?
		//("-" removePostInputCondition?="postinputcondition" ";")? ("+" "postinputcondition" ":" postinputcondExpr=Expression
		//";")? ("-" removePostCondition?="postcondition" ";")? ("+" "postcondition" ":" postcondExpr=Expression ";")? "}" ";")?
		public Group getGroup_12() { return cGroup_12; }

		//"conditions"
		public Keyword getConditionsKeyword_12_0() { return cConditionsKeyword_12_0; }

		//":"
		public Keyword getColonKeyword_12_1() { return cColonKeyword_12_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_12_2() { return cLeftCurlyBracketKeyword_12_2; }

		//("-" removePreCondition?="precondition" ";")?
		public Group getGroup_12_3() { return cGroup_12_3; }

		//"-"
		public Keyword getHyphenMinusKeyword_12_3_0() { return cHyphenMinusKeyword_12_3_0; }

		//removePreCondition?="precondition"
		public Assignment getRemovePreConditionAssignment_12_3_1() { return cRemovePreConditionAssignment_12_3_1; }

		//"precondition"
		public Keyword getRemovePreConditionPreconditionKeyword_12_3_1_0() { return cRemovePreConditionPreconditionKeyword_12_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_12_3_2() { return cSemicolonKeyword_12_3_2; }

		//("+" "precondition" ":" precondExpr=Expression ";")?
		public Group getGroup_12_4() { return cGroup_12_4; }

		//"+"
		public Keyword getPlusSignKeyword_12_4_0() { return cPlusSignKeyword_12_4_0; }

		//"precondition"
		public Keyword getPreconditionKeyword_12_4_1() { return cPreconditionKeyword_12_4_1; }

		//":"
		public Keyword getColonKeyword_12_4_2() { return cColonKeyword_12_4_2; }

		//precondExpr=Expression
		public Assignment getPrecondExprAssignment_12_4_3() { return cPrecondExprAssignment_12_4_3; }

		//Expression
		public RuleCall getPrecondExprExpressionParserRuleCall_12_4_3_0() { return cPrecondExprExpressionParserRuleCall_12_4_3_0; }

		//";"
		public Keyword getSemicolonKeyword_12_4_4() { return cSemicolonKeyword_12_4_4; }

		//("-" removePostInputCondition?="postinputcondition" ";")?
		public Group getGroup_12_5() { return cGroup_12_5; }

		//"-"
		public Keyword getHyphenMinusKeyword_12_5_0() { return cHyphenMinusKeyword_12_5_0; }

		//removePostInputCondition?="postinputcondition"
		public Assignment getRemovePostInputConditionAssignment_12_5_1() { return cRemovePostInputConditionAssignment_12_5_1; }

		//"postinputcondition"
		public Keyword getRemovePostInputConditionPostinputconditionKeyword_12_5_1_0() { return cRemovePostInputConditionPostinputconditionKeyword_12_5_1_0; }

		//";"
		public Keyword getSemicolonKeyword_12_5_2() { return cSemicolonKeyword_12_5_2; }

		//("+" "postinputcondition" ":" postinputcondExpr=Expression ";")?
		public Group getGroup_12_6() { return cGroup_12_6; }

		//"+"
		public Keyword getPlusSignKeyword_12_6_0() { return cPlusSignKeyword_12_6_0; }

		//"postinputcondition"
		public Keyword getPostinputconditionKeyword_12_6_1() { return cPostinputconditionKeyword_12_6_1; }

		//":"
		public Keyword getColonKeyword_12_6_2() { return cColonKeyword_12_6_2; }

		//postinputcondExpr=Expression
		public Assignment getPostinputcondExprAssignment_12_6_3() { return cPostinputcondExprAssignment_12_6_3; }

		//Expression
		public RuleCall getPostinputcondExprExpressionParserRuleCall_12_6_3_0() { return cPostinputcondExprExpressionParserRuleCall_12_6_3_0; }

		//";"
		public Keyword getSemicolonKeyword_12_6_4() { return cSemicolonKeyword_12_6_4; }

		//("-" removePostCondition?="postcondition" ";")?
		public Group getGroup_12_7() { return cGroup_12_7; }

		//"-"
		public Keyword getHyphenMinusKeyword_12_7_0() { return cHyphenMinusKeyword_12_7_0; }

		//removePostCondition?="postcondition"
		public Assignment getRemovePostConditionAssignment_12_7_1() { return cRemovePostConditionAssignment_12_7_1; }

		//"postcondition"
		public Keyword getRemovePostConditionPostconditionKeyword_12_7_1_0() { return cRemovePostConditionPostconditionKeyword_12_7_1_0; }

		//";"
		public Keyword getSemicolonKeyword_12_7_2() { return cSemicolonKeyword_12_7_2; }

		//("+" "postcondition" ":" postcondExpr=Expression ";")?
		public Group getGroup_12_8() { return cGroup_12_8; }

		//"+"
		public Keyword getPlusSignKeyword_12_8_0() { return cPlusSignKeyword_12_8_0; }

		//"postcondition"
		public Keyword getPostconditionKeyword_12_8_1() { return cPostconditionKeyword_12_8_1; }

		//":"
		public Keyword getColonKeyword_12_8_2() { return cColonKeyword_12_8_2; }

		//postcondExpr=Expression
		public Assignment getPostcondExprAssignment_12_8_3() { return cPostcondExprAssignment_12_8_3; }

		//Expression
		public RuleCall getPostcondExprExpressionParserRuleCall_12_8_3_0() { return cPostcondExprExpressionParserRuleCall_12_8_3_0; }

		//";"
		public Keyword getSemicolonKeyword_12_8_4() { return cSemicolonKeyword_12_8_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_12_9() { return cRightCurlyBracketKeyword_12_9; }

		//";"
		public Keyword getSemicolonKeyword_12_10() { return cSemicolonKeyword_12_10; }

		//("provides" ":" "{" ("-" providesRemovals+=ProvidesPredicate ";" | "+" providedCapabilities+=ProvidedCapability ";")*
		//"}" ";")?
		public Group getGroup_13() { return cGroup_13; }

		//"provides"
		public Keyword getProvidesKeyword_13_0() { return cProvidesKeyword_13_0; }

		//":"
		public Keyword getColonKeyword_13_1() { return cColonKeyword_13_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_13_2() { return cLeftCurlyBracketKeyword_13_2; }

		//("-" providesRemovals+=ProvidesPredicate ";" | "+" providedCapabilities+=ProvidedCapability ";")*
		public Alternatives getAlternatives_13_3() { return cAlternatives_13_3; }

		//"-" providesRemovals+=ProvidesPredicate ";"
		public Group getGroup_13_3_0() { return cGroup_13_3_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_13_3_0_0() { return cHyphenMinusKeyword_13_3_0_0; }

		//providesRemovals+=ProvidesPredicate
		public Assignment getProvidesRemovalsAssignment_13_3_0_1() { return cProvidesRemovalsAssignment_13_3_0_1; }

		//ProvidesPredicate
		public RuleCall getProvidesRemovalsProvidesPredicateParserRuleCall_13_3_0_1_0() { return cProvidesRemovalsProvidesPredicateParserRuleCall_13_3_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_13_3_0_2() { return cSemicolonKeyword_13_3_0_2; }

		//"+" providedCapabilities+=ProvidedCapability ";"
		public Group getGroup_13_3_1() { return cGroup_13_3_1; }

		//"+"
		public Keyword getPlusSignKeyword_13_3_1_0() { return cPlusSignKeyword_13_3_1_0; }

		//providedCapabilities+=ProvidedCapability
		public Assignment getProvidedCapabilitiesAssignment_13_3_1_1() { return cProvidedCapabilitiesAssignment_13_3_1_1; }

		//ProvidedCapability
		public RuleCall getProvidedCapabilitiesProvidedCapabilityParserRuleCall_13_3_1_1_0() { return cProvidedCapabilitiesProvidedCapabilityParserRuleCall_13_3_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_13_3_1_2() { return cSemicolonKeyword_13_3_1_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_13_4() { return cRightCurlyBracketKeyword_13_4; }

		//";"
		public Keyword getSemicolonKeyword_13_5() { return cSemicolonKeyword_13_5; }

		//("-" defaultPropertiesRemovals+=PID ("," defaultPropertiesRemovals+=PID)* ";")?
		public Group getGroup_14() { return cGroup_14; }

		//"-"
		public Keyword getHyphenMinusKeyword_14_0() { return cHyphenMinusKeyword_14_0; }

		//defaultPropertiesRemovals+=PID
		public Assignment getDefaultPropertiesRemovalsAssignment_14_1() { return cDefaultPropertiesRemovalsAssignment_14_1; }

		//PID
		public RuleCall getDefaultPropertiesRemovalsPIDTerminalRuleCall_14_1_0() { return cDefaultPropertiesRemovalsPIDTerminalRuleCall_14_1_0; }

		//("," defaultPropertiesRemovals+=PID)*
		public Group getGroup_14_2() { return cGroup_14_2; }

		//","
		public Keyword getCommaKeyword_14_2_0() { return cCommaKeyword_14_2_0; }

		//defaultPropertiesRemovals+=PID
		public Assignment getDefaultPropertiesRemovalsAssignment_14_2_1() { return cDefaultPropertiesRemovalsAssignment_14_2_1; }

		//PID
		public RuleCall getDefaultPropertiesRemovalsPIDTerminalRuleCall_14_2_1_0() { return cDefaultPropertiesRemovalsPIDTerminalRuleCall_14_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_14_3() { return cSemicolonKeyword_14_3; }

		//("+" defaultPropertiesAdditions=PropertySetDefault)?
		public Group getGroup_15() { return cGroup_15; }

		//"+"
		public Keyword getPlusSignKeyword_15_0() { return cPlusSignKeyword_15_0; }

		//defaultPropertiesAdditions=PropertySetDefault
		public Assignment getDefaultPropertiesAdditionsAssignment_15_1() { return cDefaultPropertiesAdditionsAssignment_15_1; }

		//PropertySetDefault
		public RuleCall getDefaultPropertiesAdditionsPropertySetDefaultParserRuleCall_15_1_0() { return cDefaultPropertiesAdditionsPropertySetDefaultParserRuleCall_15_1_0; }

		//("input" ":" "{" ("+" inputAdditions+=BuilderInput ";" | "-" inputRemovals+=InputPredicate ";")* "}" ";")?
		public Group getGroup_16() { return cGroup_16; }

		//"input"
		public Keyword getInputKeyword_16_0() { return cInputKeyword_16_0; }

		//":"
		public Keyword getColonKeyword_16_1() { return cColonKeyword_16_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_16_2() { return cLeftCurlyBracketKeyword_16_2; }

		//("+" inputAdditions+=BuilderInput ";" | "-" inputRemovals+=InputPredicate ";")*
		public Alternatives getAlternatives_16_3() { return cAlternatives_16_3; }

		//"+" inputAdditions+=BuilderInput ";"
		public Group getGroup_16_3_0() { return cGroup_16_3_0; }

		//"+"
		public Keyword getPlusSignKeyword_16_3_0_0() { return cPlusSignKeyword_16_3_0_0; }

		//inputAdditions+=BuilderInput
		public Assignment getInputAdditionsAssignment_16_3_0_1() { return cInputAdditionsAssignment_16_3_0_1; }

		//BuilderInput
		public RuleCall getInputAdditionsBuilderInputParserRuleCall_16_3_0_1_0() { return cInputAdditionsBuilderInputParserRuleCall_16_3_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_16_3_0_2() { return cSemicolonKeyword_16_3_0_2; }

		//"-" inputRemovals+=InputPredicate ";"
		public Group getGroup_16_3_1() { return cGroup_16_3_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_16_3_1_0() { return cHyphenMinusKeyword_16_3_1_0; }

		//inputRemovals+=InputPredicate
		public Assignment getInputRemovalsAssignment_16_3_1_1() { return cInputRemovalsAssignment_16_3_1_1; }

		//InputPredicate
		public RuleCall getInputRemovalsInputPredicateParserRuleCall_16_3_1_1_0() { return cInputRemovalsInputPredicateParserRuleCall_16_3_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_16_3_1_2() { return cSemicolonKeyword_16_3_1_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_16_4() { return cRightCurlyBracketKeyword_16_4; }

		//";"
		public Keyword getSemicolonKeyword_16_5() { return cSemicolonKeyword_16_5; }

		//("source" ":" "{" ("+" sourceAdditions+=ConditionalPathVector ";" | "-" "source" "~=" sourceRemovals+=SourcePredicate
		//";")* // TODO : rethink advice of annotations
		//("-" "annotations" "~=" "[" sourceAnnotationsRemovals+=PID ("," outputAnnotationsRemovals+=PID)* "]" ";")? ("+"
		//"annotations" ":" sourceAnnotationAdditions=AnnotationSet)? "}" ";")?
		public Group getGroup_17() { return cGroup_17; }

		//"source"
		public Keyword getSourceKeyword_17_0() { return cSourceKeyword_17_0; }

		//":"
		public Keyword getColonKeyword_17_1() { return cColonKeyword_17_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_17_2() { return cLeftCurlyBracketKeyword_17_2; }

		//("+" sourceAdditions+=ConditionalPathVector ";" | "-" "source" "~=" sourceRemovals+=SourcePredicate ";")*
		public Alternatives getAlternatives_17_3() { return cAlternatives_17_3; }

		//"+" sourceAdditions+=ConditionalPathVector ";"
		public Group getGroup_17_3_0() { return cGroup_17_3_0; }

		//"+"
		public Keyword getPlusSignKeyword_17_3_0_0() { return cPlusSignKeyword_17_3_0_0; }

		//sourceAdditions+=ConditionalPathVector
		public Assignment getSourceAdditionsAssignment_17_3_0_1() { return cSourceAdditionsAssignment_17_3_0_1; }

		//ConditionalPathVector
		public RuleCall getSourceAdditionsConditionalPathVectorParserRuleCall_17_3_0_1_0() { return cSourceAdditionsConditionalPathVectorParserRuleCall_17_3_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_17_3_0_2() { return cSemicolonKeyword_17_3_0_2; }

		//"-" "source" "~=" sourceRemovals+=SourcePredicate ";"
		public Group getGroup_17_3_1() { return cGroup_17_3_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_17_3_1_0() { return cHyphenMinusKeyword_17_3_1_0; }

		//"source"
		public Keyword getSourceKeyword_17_3_1_1() { return cSourceKeyword_17_3_1_1; }

		//"~="
		public Keyword getTildeEqualsSignKeyword_17_3_1_2() { return cTildeEqualsSignKeyword_17_3_1_2; }

		//sourceRemovals+=SourcePredicate
		public Assignment getSourceRemovalsAssignment_17_3_1_3() { return cSourceRemovalsAssignment_17_3_1_3; }

		//SourcePredicate
		public RuleCall getSourceRemovalsSourcePredicateParserRuleCall_17_3_1_3_0() { return cSourceRemovalsSourcePredicateParserRuleCall_17_3_1_3_0; }

		//";"
		public Keyword getSemicolonKeyword_17_3_1_4() { return cSemicolonKeyword_17_3_1_4; }

		//("-" "annotations" "~=" "[" sourceAnnotationsRemovals+=PID ("," outputAnnotationsRemovals+=PID)* "]" ";")?
		public Group getGroup_17_4() { return cGroup_17_4; }

		//"-"
		public Keyword getHyphenMinusKeyword_17_4_0() { return cHyphenMinusKeyword_17_4_0; }

		//"annotations"
		public Keyword getAnnotationsKeyword_17_4_1() { return cAnnotationsKeyword_17_4_1; }

		//"~="
		public Keyword getTildeEqualsSignKeyword_17_4_2() { return cTildeEqualsSignKeyword_17_4_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_17_4_3() { return cLeftSquareBracketKeyword_17_4_3; }

		//sourceAnnotationsRemovals+=PID
		public Assignment getSourceAnnotationsRemovalsAssignment_17_4_4() { return cSourceAnnotationsRemovalsAssignment_17_4_4; }

		//PID
		public RuleCall getSourceAnnotationsRemovalsPIDTerminalRuleCall_17_4_4_0() { return cSourceAnnotationsRemovalsPIDTerminalRuleCall_17_4_4_0; }

		//("," outputAnnotationsRemovals+=PID)*
		public Group getGroup_17_4_5() { return cGroup_17_4_5; }

		//","
		public Keyword getCommaKeyword_17_4_5_0() { return cCommaKeyword_17_4_5_0; }

		//outputAnnotationsRemovals+=PID
		public Assignment getOutputAnnotationsRemovalsAssignment_17_4_5_1() { return cOutputAnnotationsRemovalsAssignment_17_4_5_1; }

		//PID
		public RuleCall getOutputAnnotationsRemovalsPIDTerminalRuleCall_17_4_5_1_0() { return cOutputAnnotationsRemovalsPIDTerminalRuleCall_17_4_5_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_17_4_6() { return cRightSquareBracketKeyword_17_4_6; }

		//";"
		public Keyword getSemicolonKeyword_17_4_7() { return cSemicolonKeyword_17_4_7; }

		//("+" "annotations" ":" sourceAnnotationAdditions=AnnotationSet)?
		public Group getGroup_17_5() { return cGroup_17_5; }

		//"+"
		public Keyword getPlusSignKeyword_17_5_0() { return cPlusSignKeyword_17_5_0; }

		//"annotations"
		public Keyword getAnnotationsKeyword_17_5_1() { return cAnnotationsKeyword_17_5_1; }

		//":"
		public Keyword getColonKeyword_17_5_2() { return cColonKeyword_17_5_2; }

		//sourceAnnotationAdditions=AnnotationSet
		public Assignment getSourceAnnotationAdditionsAssignment_17_5_3() { return cSourceAnnotationAdditionsAssignment_17_5_3; }

		//AnnotationSet
		public RuleCall getSourceAnnotationAdditionsAnnotationSetParserRuleCall_17_5_3_0() { return cSourceAnnotationAdditionsAnnotationSetParserRuleCall_17_5_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_17_6() { return cRightCurlyBracketKeyword_17_6; }

		//";"
		public Keyword getSemicolonKeyword_17_7() { return cSemicolonKeyword_17_7; }

		//("output" ":" "{" ("+" outputAdditions+=ConditionalPathVector ";" | "-" "output" "~=" outputRemovals+=OutputPredicate
		//";")* // TODO : rethink advice of annotations
		//("-" "annotations" "~=" "[" outputAnnotationsRemovals+=PID ("," outputAnnotationsRemovals+=PID)* "]" ";")? ("+"
		//"annotations" ":" outputAnnotationAdditions=AnnotationSet)? "}" ";")?
		public Group getGroup_18() { return cGroup_18; }

		//"output"
		public Keyword getOutputKeyword_18_0() { return cOutputKeyword_18_0; }

		//":"
		public Keyword getColonKeyword_18_1() { return cColonKeyword_18_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_18_2() { return cLeftCurlyBracketKeyword_18_2; }

		//("+" outputAdditions+=ConditionalPathVector ";" | "-" "output" "~=" outputRemovals+=OutputPredicate ";")*
		public Alternatives getAlternatives_18_3() { return cAlternatives_18_3; }

		//"+" outputAdditions+=ConditionalPathVector ";"
		public Group getGroup_18_3_0() { return cGroup_18_3_0; }

		//"+"
		public Keyword getPlusSignKeyword_18_3_0_0() { return cPlusSignKeyword_18_3_0_0; }

		//outputAdditions+=ConditionalPathVector
		public Assignment getOutputAdditionsAssignment_18_3_0_1() { return cOutputAdditionsAssignment_18_3_0_1; }

		//ConditionalPathVector
		public RuleCall getOutputAdditionsConditionalPathVectorParserRuleCall_18_3_0_1_0() { return cOutputAdditionsConditionalPathVectorParserRuleCall_18_3_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_18_3_0_2() { return cSemicolonKeyword_18_3_0_2; }

		//"-" "output" "~=" outputRemovals+=OutputPredicate ";"
		public Group getGroup_18_3_1() { return cGroup_18_3_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_18_3_1_0() { return cHyphenMinusKeyword_18_3_1_0; }

		//"output"
		public Keyword getOutputKeyword_18_3_1_1() { return cOutputKeyword_18_3_1_1; }

		//"~="
		public Keyword getTildeEqualsSignKeyword_18_3_1_2() { return cTildeEqualsSignKeyword_18_3_1_2; }

		//outputRemovals+=OutputPredicate
		public Assignment getOutputRemovalsAssignment_18_3_1_3() { return cOutputRemovalsAssignment_18_3_1_3; }

		//OutputPredicate
		public RuleCall getOutputRemovalsOutputPredicateParserRuleCall_18_3_1_3_0() { return cOutputRemovalsOutputPredicateParserRuleCall_18_3_1_3_0; }

		//";"
		public Keyword getSemicolonKeyword_18_3_1_4() { return cSemicolonKeyword_18_3_1_4; }

		//("-" "annotations" "~=" "[" outputAnnotationsRemovals+=PID ("," outputAnnotationsRemovals+=PID)* "]" ";")?
		public Group getGroup_18_4() { return cGroup_18_4; }

		//"-"
		public Keyword getHyphenMinusKeyword_18_4_0() { return cHyphenMinusKeyword_18_4_0; }

		//"annotations"
		public Keyword getAnnotationsKeyword_18_4_1() { return cAnnotationsKeyword_18_4_1; }

		//"~="
		public Keyword getTildeEqualsSignKeyword_18_4_2() { return cTildeEqualsSignKeyword_18_4_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_18_4_3() { return cLeftSquareBracketKeyword_18_4_3; }

		//outputAnnotationsRemovals+=PID
		public Assignment getOutputAnnotationsRemovalsAssignment_18_4_4() { return cOutputAnnotationsRemovalsAssignment_18_4_4; }

		//PID
		public RuleCall getOutputAnnotationsRemovalsPIDTerminalRuleCall_18_4_4_0() { return cOutputAnnotationsRemovalsPIDTerminalRuleCall_18_4_4_0; }

		//("," outputAnnotationsRemovals+=PID)*
		public Group getGroup_18_4_5() { return cGroup_18_4_5; }

		//","
		public Keyword getCommaKeyword_18_4_5_0() { return cCommaKeyword_18_4_5_0; }

		//outputAnnotationsRemovals+=PID
		public Assignment getOutputAnnotationsRemovalsAssignment_18_4_5_1() { return cOutputAnnotationsRemovalsAssignment_18_4_5_1; }

		//PID
		public RuleCall getOutputAnnotationsRemovalsPIDTerminalRuleCall_18_4_5_1_0() { return cOutputAnnotationsRemovalsPIDTerminalRuleCall_18_4_5_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_18_4_6() { return cRightSquareBracketKeyword_18_4_6; }

		//";"
		public Keyword getSemicolonKeyword_18_4_7() { return cSemicolonKeyword_18_4_7; }

		//("+" "annotations" ":" outputAnnotationAdditions=AnnotationSet)?
		public Group getGroup_18_5() { return cGroup_18_5; }

		//"+"
		public Keyword getPlusSignKeyword_18_5_0() { return cPlusSignKeyword_18_5_0; }

		//"annotations"
		public Keyword getAnnotationsKeyword_18_5_1() { return cAnnotationsKeyword_18_5_1; }

		//":"
		public Keyword getColonKeyword_18_5_2() { return cColonKeyword_18_5_2; }

		//outputAnnotationAdditions=AnnotationSet
		public Assignment getOutputAnnotationAdditionsAssignment_18_5_3() { return cOutputAnnotationAdditionsAssignment_18_5_3; }

		//AnnotationSet
		public RuleCall getOutputAnnotationAdditionsAnnotationSetParserRuleCall_18_5_3_0() { return cOutputAnnotationAdditionsAnnotationSetParserRuleCall_18_5_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_18_6() { return cRightCurlyBracketKeyword_18_6; }

		//";"
		public Keyword getSemicolonKeyword_18_7() { return cSemicolonKeyword_18_7; }

		//("result" ":" funcExpr=Expression ";")?
		public Group getGroup_19() { return cGroup_19; }

		//"result"
		public Keyword getResultKeyword_19_0() { return cResultKeyword_19_0; }

		//":"
		public Keyword getColonKeyword_19_1() { return cColonKeyword_19_1; }

		//funcExpr=Expression
		public Assignment getFuncExprAssignment_19_2() { return cFuncExprAssignment_19_2; }

		//Expression
		public RuleCall getFuncExprExpressionParserRuleCall_19_2_0() { return cFuncExprExpressionParserRuleCall_19_2_0; }

		//";"
		public Keyword getSemicolonKeyword_19_3() { return cSemicolonKeyword_19_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_20() { return cRightCurlyBracketKeyword_20; }

		//";"
		public Keyword getSemicolonKeyword_21() { return cSemicolonKeyword_21; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_22() { return cRightCurlyBracketKeyword_22; }
	}

	public class UnitOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBOrExpressionLeftExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprUnitAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightExprAssignment_1_2.eContents().get(0);
		
		//UnitOrExpression returns be::BExpression:
		//	UnitAndExpression ({be::BOrExpression.leftExpr=current} "||" rightExpr=UnitAndExpression)*;
		public ParserRule getRule() { return rule; }

		//UnitAndExpression ({be::BOrExpression.leftExpr=current} "||" rightExpr=UnitAndExpression)*
		public Group getGroup() { return cGroup; }

		//UnitAndExpression
		public RuleCall getUnitAndExpressionParserRuleCall_0() { return cUnitAndExpressionParserRuleCall_0; }

		//({be::BOrExpression.leftExpr=current} "||" rightExpr=UnitAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{be::BOrExpression.leftExpr=current}
		public Action getBOrExpressionLeftExprAction_1_0() { return cBOrExpressionLeftExprAction_1_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }

		//rightExpr=UnitAndExpression
		public Assignment getRightExprAssignment_1_2() { return cRightExprAssignment_1_2; }

		//UnitAndExpression
		public RuleCall getRightExprUnitAndExpressionParserRuleCall_1_2_0() { return cRightExprUnitAndExpressionParserRuleCall_1_2_0; }
	}

	public class UnitAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitNotOrPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBAndExpressionLeftExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprUnitNotOrPrimaryExpressionParserRuleCall_1_2_0 = (RuleCall)cRightExprAssignment_1_2.eContents().get(0);
		
		//UnitAndExpression returns be::BExpression:
		//	UnitNotOrPrimaryExpression ({be::BAndExpression.leftExpr=current} "&&" rightExpr=UnitNotOrPrimaryExpression)*;
		public ParserRule getRule() { return rule; }

		//UnitNotOrPrimaryExpression ({be::BAndExpression.leftExpr=current} "&&" rightExpr=UnitNotOrPrimaryExpression)*
		public Group getGroup() { return cGroup; }

		//UnitNotOrPrimaryExpression
		public RuleCall getUnitNotOrPrimaryExpressionParserRuleCall_0() { return cUnitNotOrPrimaryExpressionParserRuleCall_0; }

		//({be::BAndExpression.leftExpr=current} "&&" rightExpr=UnitNotOrPrimaryExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{be::BAndExpression.leftExpr=current}
		public Action getBAndExpressionLeftExprAction_1_0() { return cBAndExpressionLeftExprAction_1_0; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }

		//rightExpr=UnitNotOrPrimaryExpression
		public Assignment getRightExprAssignment_1_2() { return cRightExprAssignment_1_2; }

		//UnitNotOrPrimaryExpression
		public RuleCall getRightExprUnitNotOrPrimaryExpressionParserRuleCall_1_2_0() { return cRightExprUnitNotOrPrimaryExpressionParserRuleCall_1_2_0; }
	}

	public class UnitNotOrPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitNotOrPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnitNotExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnitPrimaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnitNotOrPrimaryExpression returns be::BExpression:
		//	UnitNotExpression | UnitPrimaryExpression;
		public ParserRule getRule() { return rule; }

		//UnitNotExpression | UnitPrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//UnitNotExpression
		public RuleCall getUnitNotExpressionParserRuleCall_0() { return cUnitNotExpressionParserRuleCall_0; }

		//UnitPrimaryExpression
		public RuleCall getUnitPrimaryExpressionParserRuleCall_1() { return cUnitPrimaryExpressionParserRuleCall_1; }
	}

	public class UnitNotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitNotExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBUnaryOpExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunctionNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cFunctionNameExclamationMarkKeyword_1_0 = (Keyword)cFunctionNameAssignment_1.eContents().get(0);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprUnitPrimaryExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//UnitNotExpression returns be::BExpression:
		//	{be::BUnaryOpExpression} functionName="!" expr=UnitPrimaryExpression;
		public ParserRule getRule() { return rule; }

		//{be::BUnaryOpExpression} functionName="!" expr=UnitPrimaryExpression
		public Group getGroup() { return cGroup; }

		//{be::BUnaryOpExpression}
		public Action getBUnaryOpExpressionAction_0() { return cBUnaryOpExpressionAction_0; }

		//functionName="!"
		public Assignment getFunctionNameAssignment_1() { return cFunctionNameAssignment_1; }

		//"!"
		public Keyword getFunctionNameExclamationMarkKeyword_1_0() { return cFunctionNameExclamationMarkKeyword_1_0; }

		//expr=UnitPrimaryExpression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//UnitPrimaryExpression
		public RuleCall getExprUnitPrimaryExpressionParserRuleCall_2_0() { return cExprUnitPrimaryExpressionParserRuleCall_2_0; }
	}

	public class UnitPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRequiresPredicateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cImplementsPredcicateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cProvidesPredicateParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUnitNamePredicateParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cGroupedUnitPrimaryExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//UnitPrimaryExpression returns be::BExpression:
		//	RequiresPredicate | ImplementsPredcicate | ProvidesPredicate | UnitNamePredicate | GroupedUnitPrimaryExpression;
		public ParserRule getRule() { return rule; }

		//RequiresPredicate | ImplementsPredcicate | ProvidesPredicate | UnitNamePredicate | GroupedUnitPrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//RequiresPredicate
		public RuleCall getRequiresPredicateParserRuleCall_0() { return cRequiresPredicateParserRuleCall_0; }

		//ImplementsPredcicate
		public RuleCall getImplementsPredcicateParserRuleCall_1() { return cImplementsPredcicateParserRuleCall_1; }

		//ProvidesPredicate
		public RuleCall getProvidesPredicateParserRuleCall_2() { return cProvidesPredicateParserRuleCall_2; }

		//UnitNamePredicate
		public RuleCall getUnitNamePredicateParserRuleCall_3() { return cUnitNamePredicateParserRuleCall_3; }

		//GroupedUnitPrimaryExpression
		public RuleCall getGroupedUnitPrimaryExpressionParserRuleCall_4() { return cGroupedUnitPrimaryExpressionParserRuleCall_4; }
	}

	public class GroupedUnitPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GroupedUnitPrimaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cUnitOrExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//GroupedUnitPrimaryExpression returns be::BExpression:
		//	"(" UnitOrExpression ")";
		public ParserRule getRule() { return rule; }

		//"(" UnitOrExpression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//UnitOrExpression
		public RuleCall getUnitOrExpressionParserRuleCall_1() { return cUnitOrExpressionParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class RequiresPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequiresPredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRequiresPredicateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRequiresKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMetaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cMetaEnvKeyword_2_0 = (Keyword)cMetaAssignment_2.eContents().get(0);
		private final Keyword cTildeEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCapabilityPredicateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCapabilityPredicateCapabilityPredicateParserRuleCall_4_0 = (RuleCall)cCapabilityPredicateAssignment_4.eContents().get(0);
		
		//RequiresPredicate returns build::RequiresPredicate:
		//	{build::RequiresPredicate} "requires" meta?="env"? "~=" capabilityPredicate=CapabilityPredicate;
		public ParserRule getRule() { return rule; }

		//{build::RequiresPredicate} "requires" meta?="env"? "~=" capabilityPredicate=CapabilityPredicate
		public Group getGroup() { return cGroup; }

		//{build::RequiresPredicate}
		public Action getRequiresPredicateAction_0() { return cRequiresPredicateAction_0; }

		//"requires"
		public Keyword getRequiresKeyword_1() { return cRequiresKeyword_1; }

		//meta?="env"?
		public Assignment getMetaAssignment_2() { return cMetaAssignment_2; }

		//"env"
		public Keyword getMetaEnvKeyword_2_0() { return cMetaEnvKeyword_2_0; }

		//"~="
		public Keyword getTildeEqualsSignKeyword_3() { return cTildeEqualsSignKeyword_3; }

		//capabilityPredicate=CapabilityPredicate
		public Assignment getCapabilityPredicateAssignment_4() { return cCapabilityPredicateAssignment_4; }

		//CapabilityPredicate
		public RuleCall getCapabilityPredicateCapabilityPredicateParserRuleCall_4_0() { return cCapabilityPredicateCapabilityPredicateParserRuleCall_4_0; }
	}

	public class ImplementsPredcicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImplementsPredcicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImplementsPredicateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeRefParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//ImplementsPredcicate returns be::BExpression:
		//	{build::ImplementsPredicate} "is" "==" type=TypeRef;
		public ParserRule getRule() { return rule; }

		//{build::ImplementsPredicate} "is" "==" type=TypeRef
		public Group getGroup() { return cGroup; }

		//{build::ImplementsPredicate}
		public Action getImplementsPredicateAction_0() { return cImplementsPredicateAction_0; }

		//"is"
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignKeyword_2; }

		//type=TypeRef
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_3_0() { return cTypeTypeRefParserRuleCall_3_0; }
	}

	public class ProvidesPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProvidesPredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProvidesPredicateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cProvidesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTildeEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCapabilityPredicateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCapabilityPredicateCapabilityPredicateParserRuleCall_3_0 = (RuleCall)cCapabilityPredicateAssignment_3.eContents().get(0);
		
		//ProvidesPredicate returns build::ProvidesPredicate:
		//	{build::ProvidesPredicate} "provides" "~=" capabilityPredicate=CapabilityPredicate;
		public ParserRule getRule() { return rule; }

		//{build::ProvidesPredicate} "provides" "~=" capabilityPredicate=CapabilityPredicate
		public Group getGroup() { return cGroup; }

		//{build::ProvidesPredicate}
		public Action getProvidesPredicateAction_0() { return cProvidesPredicateAction_0; }

		//"provides"
		public Keyword getProvidesKeyword_1() { return cProvidesKeyword_1; }

		//"~="
		public Keyword getTildeEqualsSignKeyword_2() { return cTildeEqualsSignKeyword_2; }

		//capabilityPredicate=CapabilityPredicate
		public Assignment getCapabilityPredicateAssignment_3() { return cCapabilityPredicateAssignment_3; }

		//CapabilityPredicate
		public RuleCall getCapabilityPredicateCapabilityPredicateParserRuleCall_3_0() { return cCapabilityPredicateCapabilityPredicateParserRuleCall_3_0; }
	}

	public class UnitNamePredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitNamePredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnitNamePredicateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUnitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTildeEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cNameKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNamePredicateAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNamePredicateQualifiedNamePredicateParserRuleCall_4_1_0 = (RuleCall)cNamePredicateAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cVersionKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cTildeEqualsSignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cVersionRangeAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cVersionRangeVersionRangeLiteralParserRuleCall_5_2_0 = (RuleCall)cVersionRangeAssignment_5_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//UnitNamePredicate returns build::CapabilityPredicate:
		//	{build::UnitNamePredicate} "unit" "~=" "{" ("name" namePredicate=QualifiedNamePredicate ";") ("version" "~="
		//	versionRange=VersionRangeLiteral ";")? "}";
		public ParserRule getRule() { return rule; }

		//{build::UnitNamePredicate} "unit" "~=" "{" ("name" namePredicate=QualifiedNamePredicate ";") ("version" "~="
		//versionRange=VersionRangeLiteral ";")? "}"
		public Group getGroup() { return cGroup; }

		//{build::UnitNamePredicate}
		public Action getUnitNamePredicateAction_0() { return cUnitNamePredicateAction_0; }

		//"unit"
		public Keyword getUnitKeyword_1() { return cUnitKeyword_1; }

		//"~="
		public Keyword getTildeEqualsSignKeyword_2() { return cTildeEqualsSignKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//"name" namePredicate=QualifiedNamePredicate ";"
		public Group getGroup_4() { return cGroup_4; }

		//"name"
		public Keyword getNameKeyword_4_0() { return cNameKeyword_4_0; }

		//namePredicate=QualifiedNamePredicate
		public Assignment getNamePredicateAssignment_4_1() { return cNamePredicateAssignment_4_1; }

		//QualifiedNamePredicate
		public RuleCall getNamePredicateQualifiedNamePredicateParserRuleCall_4_1_0() { return cNamePredicateQualifiedNamePredicateParserRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4_2() { return cSemicolonKeyword_4_2; }

		//("version" "~=" versionRange=VersionRangeLiteral ";")?
		public Group getGroup_5() { return cGroup_5; }

		//"version"
		public Keyword getVersionKeyword_5_0() { return cVersionKeyword_5_0; }

		//"~="
		public Keyword getTildeEqualsSignKeyword_5_1() { return cTildeEqualsSignKeyword_5_1; }

		//versionRange=VersionRangeLiteral
		public Assignment getVersionRangeAssignment_5_2() { return cVersionRangeAssignment_5_2; }

		//VersionRangeLiteral
		public RuleCall getVersionRangeVersionRangeLiteralParserRuleCall_5_2_0() { return cVersionRangeVersionRangeLiteralParserRuleCall_5_2_0; }

		//";"
		public Keyword getSemicolonKeyword_5_3() { return cSemicolonKeyword_5_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class BuilderNamePredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuilderNamePredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBuilderNamePredicateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBuilderKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTildeEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cNameKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNamePredicateAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNamePredicateQualifiedNamePredicateParserRuleCall_4_1_0 = (RuleCall)cNamePredicateAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//BuilderNamePredicate returns build::BuilderNamePredicate:
		//	{build::BuilderNamePredicate} "builder" "~=" "{" ("name" namePredicate=QualifiedNamePredicate ";") "}";
		public ParserRule getRule() { return rule; }

		//{build::BuilderNamePredicate} "builder" "~=" "{" ("name" namePredicate=QualifiedNamePredicate ";") "}"
		public Group getGroup() { return cGroup; }

		//{build::BuilderNamePredicate}
		public Action getBuilderNamePredicateAction_0() { return cBuilderNamePredicateAction_0; }

		//"builder"
		public Keyword getBuilderKeyword_1() { return cBuilderKeyword_1; }

		//"~="
		public Keyword getTildeEqualsSignKeyword_2() { return cTildeEqualsSignKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//"name" namePredicate=QualifiedNamePredicate ";"
		public Group getGroup_4() { return cGroup_4; }

		//"name"
		public Keyword getNameKeyword_4_0() { return cNameKeyword_4_0; }

		//namePredicate=QualifiedNamePredicate
		public Assignment getNamePredicateAssignment_4_1() { return cNamePredicateAssignment_4_1; }

		//QualifiedNamePredicate
		public RuleCall getNamePredicateQualifiedNamePredicateParserRuleCall_4_1_0() { return cNamePredicateQualifiedNamePredicateParserRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4_2() { return cSemicolonKeyword_4_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class InputPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputPredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInputPredicateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInputKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTildeEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cCapabilityPredicateAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cCapabilityPredicateCapabilityPredicateParserRuleCall_4_0_0 = (RuleCall)cCapabilityPredicateAssignment_4_0.eContents().get(0);
		private final Assignment cCapabilityPredicateAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cCapabilityPredicateUnitNamePredicateParserRuleCall_4_1_0 = (RuleCall)cCapabilityPredicateAssignment_4_1.eContents().get(0);
		private final Keyword cUnitKeyword_4_2 = (Keyword)cAlternatives_4.eContents().get(2);
		private final Keyword cCalledBuilderKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBuilderPredicateAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBuilderPredicateQualifiedNamePredicateParserRuleCall_6_0 = (RuleCall)cBuilderPredicateAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//InputPredicate returns build::InputPredicate:
		//	{build::InputPredicate} "input" "~=" "{" (capabilityPredicate=CapabilityPredicate |
		//	capabilityPredicate=UnitNamePredicate | "unit"?) "called-builder" builderPredicate=QualifiedNamePredicate ";" "}";
		public ParserRule getRule() { return rule; }

		//{build::InputPredicate} "input" "~=" "{" (capabilityPredicate=CapabilityPredicate |
		//capabilityPredicate=UnitNamePredicate | "unit"?) "called-builder" builderPredicate=QualifiedNamePredicate ";" "}"
		public Group getGroup() { return cGroup; }

		//{build::InputPredicate}
		public Action getInputPredicateAction_0() { return cInputPredicateAction_0; }

		//"input"
		public Keyword getInputKeyword_1() { return cInputKeyword_1; }

		//"~="
		public Keyword getTildeEqualsSignKeyword_2() { return cTildeEqualsSignKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//capabilityPredicate=CapabilityPredicate | capabilityPredicate=UnitNamePredicate | "unit"?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//capabilityPredicate=CapabilityPredicate
		public Assignment getCapabilityPredicateAssignment_4_0() { return cCapabilityPredicateAssignment_4_0; }

		//CapabilityPredicate
		public RuleCall getCapabilityPredicateCapabilityPredicateParserRuleCall_4_0_0() { return cCapabilityPredicateCapabilityPredicateParserRuleCall_4_0_0; }

		//capabilityPredicate=UnitNamePredicate
		public Assignment getCapabilityPredicateAssignment_4_1() { return cCapabilityPredicateAssignment_4_1; }

		//UnitNamePredicate
		public RuleCall getCapabilityPredicateUnitNamePredicateParserRuleCall_4_1_0() { return cCapabilityPredicateUnitNamePredicateParserRuleCall_4_1_0; }

		//"unit"?
		public Keyword getUnitKeyword_4_2() { return cUnitKeyword_4_2; }

		//"called-builder"
		public Keyword getCalledBuilderKeyword_5() { return cCalledBuilderKeyword_5; }

		//builderPredicate=QualifiedNamePredicate
		public Assignment getBuilderPredicateAssignment_6() { return cBuilderPredicateAssignment_6; }

		//QualifiedNamePredicate
		public RuleCall getBuilderPredicateQualifiedNamePredicateParserRuleCall_6_0() { return cBuilderPredicateQualifiedNamePredicateParserRuleCall_6_0; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class SourcePredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SourcePredicate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSourcePredicateAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cPathVectorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPathVectorBasePathPredicateParserRuleCall_0_1_0 = (RuleCall)cPathVectorAssignment_0_1.eContents().get(0);
		private final Assignment cPathVectorAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPathVectorPathPredicateParserRuleCall_1_0 = (RuleCall)cPathVectorAssignment_1.eContents().get(0);
		private final Assignment cPathPatternAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cPathPatternPatternLiteralParserRuleCall_2_0 = (RuleCall)cPathPatternAssignment_2.eContents().get(0);
		
		//SourcePredicate returns build::SourcePredicate:
		//	{build::SourcePredicate} pathVector=BasePathPredicate | pathVector=PathPredicate | pathPattern=PatternLiteral;
		public ParserRule getRule() { return rule; }

		//{build::SourcePredicate} pathVector=BasePathPredicate | pathVector=PathPredicate | pathPattern=PatternLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//{build::SourcePredicate} pathVector=BasePathPredicate
		public Group getGroup_0() { return cGroup_0; }

		//{build::SourcePredicate}
		public Action getSourcePredicateAction_0_0() { return cSourcePredicateAction_0_0; }

		//pathVector=BasePathPredicate
		public Assignment getPathVectorAssignment_0_1() { return cPathVectorAssignment_0_1; }

		//BasePathPredicate
		public RuleCall getPathVectorBasePathPredicateParserRuleCall_0_1_0() { return cPathVectorBasePathPredicateParserRuleCall_0_1_0; }

		//pathVector=PathPredicate
		public Assignment getPathVectorAssignment_1() { return cPathVectorAssignment_1; }

		//PathPredicate
		public RuleCall getPathVectorPathPredicateParserRuleCall_1_0() { return cPathVectorPathPredicateParserRuleCall_1_0; }

		//pathPattern=PatternLiteral
		public Assignment getPathPatternAssignment_2() { return cPathPatternAssignment_2; }

		//PatternLiteral
		public RuleCall getPathPatternPatternLiteralParserRuleCall_2_0() { return cPathPatternPatternLiteralParserRuleCall_2_0; }
	}

	public class OutputPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutputPredicate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOutputPredicateAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cPathVectorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPathVectorBasePathPredicateParserRuleCall_0_1_0 = (RuleCall)cPathVectorAssignment_0_1.eContents().get(0);
		private final Assignment cPathVectorAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPathVectorPathPredicateParserRuleCall_1_0 = (RuleCall)cPathVectorAssignment_1.eContents().get(0);
		private final Assignment cPathPatternAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cPathPatternPatternLiteralParserRuleCall_2_0 = (RuleCall)cPathPatternAssignment_2.eContents().get(0);
		
		//OutputPredicate returns build::OutputPredicate:
		//	{build::OutputPredicate} pathVector=BasePathPredicate | pathVector=PathPredicate | pathPattern=PatternLiteral;
		public ParserRule getRule() { return rule; }

		//{build::OutputPredicate} pathVector=BasePathPredicate | pathVector=PathPredicate | pathPattern=PatternLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//{build::OutputPredicate} pathVector=BasePathPredicate
		public Group getGroup_0() { return cGroup_0; }

		//{build::OutputPredicate}
		public Action getOutputPredicateAction_0_0() { return cOutputPredicateAction_0_0; }

		//pathVector=BasePathPredicate
		public Assignment getPathVectorAssignment_0_1() { return cPathVectorAssignment_0_1; }

		//BasePathPredicate
		public RuleCall getPathVectorBasePathPredicateParserRuleCall_0_1_0() { return cPathVectorBasePathPredicateParserRuleCall_0_1_0; }

		//pathVector=PathPredicate
		public Assignment getPathVectorAssignment_1() { return cPathVectorAssignment_1; }

		//PathPredicate
		public RuleCall getPathVectorPathPredicateParserRuleCall_1_0() { return cPathVectorPathPredicateParserRuleCall_1_0; }

		//pathPattern=PatternLiteral
		public Assignment getPathPatternAssignment_2() { return cPathPatternAssignment_2; }

		//PatternLiteral
		public RuleCall getPathPatternPatternLiteralParserRuleCall_2_0() { return cPathPatternPatternLiteralParserRuleCall_2_0; }
	}

	public class BasePathPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasePathPredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPathVectorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cBasePathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBasePathPathParserRuleCall_1_0 = (RuleCall)cBasePathAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPathsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPathsPathParserRuleCall_3_0 = (RuleCall)cPathsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPathsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPathsPathParserRuleCall_4_1_0 = (RuleCall)cPathsAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//BasePathPredicate returns build::PathVector:
		//	{build::PathVector} basePath=Path "[" paths+=Path ("," paths+=Path)* "]";
		public ParserRule getRule() { return rule; }

		//{build::PathVector} basePath=Path "[" paths+=Path ("," paths+=Path)* "]"
		public Group getGroup() { return cGroup; }

		//{build::PathVector}
		public Action getPathVectorAction_0() { return cPathVectorAction_0; }

		//basePath=Path
		public Assignment getBasePathAssignment_1() { return cBasePathAssignment_1; }

		//Path
		public RuleCall getBasePathPathParserRuleCall_1_0() { return cBasePathPathParserRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//paths+=Path
		public Assignment getPathsAssignment_3() { return cPathsAssignment_3; }

		//Path
		public RuleCall getPathsPathParserRuleCall_3_0() { return cPathsPathParserRuleCall_3_0; }

		//("," paths+=Path)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//paths+=Path
		public Assignment getPathsAssignment_4_1() { return cPathsAssignment_4_1; }

		//Path
		public RuleCall getPathsPathParserRuleCall_4_1_0() { return cPathsPathParserRuleCall_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class PathPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PathPredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPathVectorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPathsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathsPathParserRuleCall_1_0 = (RuleCall)cPathsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPathsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPathsPathParserRuleCall_2_1_0 = (RuleCall)cPathsAssignment_2_1.eContents().get(0);
		
		//PathPredicate returns build::PathVector:
		//	{build::PathVector} paths+=Path ("," paths+=Path)*;
		public ParserRule getRule() { return rule; }

		//{build::PathVector} paths+=Path ("," paths+=Path)*
		public Group getGroup() { return cGroup; }

		//{build::PathVector}
		public Action getPathVectorAction_0() { return cPathVectorAction_0; }

		//paths+=Path
		public Assignment getPathsAssignment_1() { return cPathsAssignment_1; }

		//Path
		public RuleCall getPathsPathParserRuleCall_1_0() { return cPathsPathParserRuleCall_1_0; }

		//("," paths+=Path)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//paths+=Path
		public Assignment getPathsAssignment_2_1() { return cPathsAssignment_2_1; }

		//Path
		public RuleCall getPathsPathParserRuleCall_2_1_0() { return cPathsPathParserRuleCall_2_1_0; }
	}

	public class CapabilityPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CapabilityPredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCapabilityPredicateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCapabilityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNameSpaceKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNameSpacePredicateAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameSpacePredicateQualifiedNamePredicateParserRuleCall_3_1_0 = (RuleCall)cNameSpacePredicateAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cNameKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNamePredicateAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNamePredicateQualifiedNamePredicateParserRuleCall_4_1_0 = (RuleCall)cNamePredicateAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cVersionKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cTildeEqualsSignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cVersionRangeAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cVersionRangeVersionRangeLiteralParserRuleCall_5_2_0 = (RuleCall)cVersionRangeAssignment_5_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//CapabilityPredicate returns build::CapabilityPredicate:
		//	{build::CapabilityPredicate} "capability" "{" ("name-space" nameSpacePredicate=QualifiedNamePredicate ";") ("name"
		//	namePredicate=QualifiedNamePredicate ";") ("version" "~=" versionRange=VersionRangeLiteral ";")? "}";
		public ParserRule getRule() { return rule; }

		//{build::CapabilityPredicate} "capability" "{" ("name-space" nameSpacePredicate=QualifiedNamePredicate ";") ("name"
		//namePredicate=QualifiedNamePredicate ";") ("version" "~=" versionRange=VersionRangeLiteral ";")? "}"
		public Group getGroup() { return cGroup; }

		//{build::CapabilityPredicate}
		public Action getCapabilityPredicateAction_0() { return cCapabilityPredicateAction_0; }

		//"capability"
		public Keyword getCapabilityKeyword_1() { return cCapabilityKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"name-space" nameSpacePredicate=QualifiedNamePredicate ";"
		public Group getGroup_3() { return cGroup_3; }

		//"name-space"
		public Keyword getNameSpaceKeyword_3_0() { return cNameSpaceKeyword_3_0; }

		//nameSpacePredicate=QualifiedNamePredicate
		public Assignment getNameSpacePredicateAssignment_3_1() { return cNameSpacePredicateAssignment_3_1; }

		//QualifiedNamePredicate
		public RuleCall getNameSpacePredicateQualifiedNamePredicateParserRuleCall_3_1_0() { return cNameSpacePredicateQualifiedNamePredicateParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }

		//"name" namePredicate=QualifiedNamePredicate ";"
		public Group getGroup_4() { return cGroup_4; }

		//"name"
		public Keyword getNameKeyword_4_0() { return cNameKeyword_4_0; }

		//namePredicate=QualifiedNamePredicate
		public Assignment getNamePredicateAssignment_4_1() { return cNamePredicateAssignment_4_1; }

		//QualifiedNamePredicate
		public RuleCall getNamePredicateQualifiedNamePredicateParserRuleCall_4_1_0() { return cNamePredicateQualifiedNamePredicateParserRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4_2() { return cSemicolonKeyword_4_2; }

		//("version" "~=" versionRange=VersionRangeLiteral ";")?
		public Group getGroup_5() { return cGroup_5; }

		//"version"
		public Keyword getVersionKeyword_5_0() { return cVersionKeyword_5_0; }

		//"~="
		public Keyword getTildeEqualsSignKeyword_5_1() { return cTildeEqualsSignKeyword_5_1; }

		//versionRange=VersionRangeLiteral
		public Assignment getVersionRangeAssignment_5_2() { return cVersionRangeAssignment_5_2; }

		//VersionRangeLiteral
		public RuleCall getVersionRangeVersionRangeLiteralParserRuleCall_5_2_0() { return cVersionRangeVersionRangeLiteralParserRuleCall_5_2_0; }

		//";"
		public Keyword getSemicolonKeyword_5_3() { return cSemicolonKeyword_5_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class QualifiedNamePredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNamePredicate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBNamePredicateAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cNameEscapedQualifiedNameParserRuleCall_0_1_1_0 = (RuleCall)cNameAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cTildeEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNamePatternAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNamePatternPatternLiteralParserRuleCall_1_1_0 = (RuleCall)cNamePatternAssignment_1_1.eContents().get(0);
		
		//QualifiedNamePredicate returns be::BNamePredicate:
		//	{be::BNamePredicate} ("==" name=EscapedQualifiedName) | "~=" namePattern=PatternLiteral;
		public ParserRule getRule() { return rule; }

		//{be::BNamePredicate} ("==" name=EscapedQualifiedName) | "~=" namePattern=PatternLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//{be::BNamePredicate} ("==" name=EscapedQualifiedName)
		public Group getGroup_0() { return cGroup_0; }

		//{be::BNamePredicate}
		public Action getBNamePredicateAction_0_0() { return cBNamePredicateAction_0_0; }

		//"==" name=EscapedQualifiedName
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0_1_0() { return cEqualsSignEqualsSignKeyword_0_1_0; }

		//name=EscapedQualifiedName
		public Assignment getNameAssignment_0_1_1() { return cNameAssignment_0_1_1; }

		//EscapedQualifiedName
		public RuleCall getNameEscapedQualifiedNameParserRuleCall_0_1_1_0() { return cNameEscapedQualifiedNameParserRuleCall_0_1_1_0; }

		//"~=" namePattern=PatternLiteral
		public Group getGroup_1() { return cGroup_1; }

		//"~="
		public Keyword getTildeEqualsSignKeyword_1_0() { return cTildeEqualsSignKeyword_1_0; }

		//namePattern=PatternLiteral
		public Assignment getNamePatternAssignment_1_1() { return cNamePatternAssignment_1_1; }

		//PatternLiteral
		public RuleCall getNamePatternPatternLiteralParserRuleCall_1_1_0() { return cNamePatternPatternLiteralParserRuleCall_1_1_0; }
	}

	public class NamePredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamePredicate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBNamePredicateAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameEscapedQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cNamePatternAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNamePatternPatternLiteralParserRuleCall_1_0 = (RuleCall)cNamePatternAssignment_1.eContents().get(0);
		
		//NamePredicate returns be::BNamePredicate:
		//	{be::BNamePredicate} name=EscapedQualifiedName | namePattern=PatternLiteral;
		public ParserRule getRule() { return rule; }

		//{be::BNamePredicate} name=EscapedQualifiedName | namePattern=PatternLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//{be::BNamePredicate} name=EscapedQualifiedName
		public Group getGroup_0() { return cGroup_0; }

		//{be::BNamePredicate}
		public Action getBNamePredicateAction_0_0() { return cBNamePredicateAction_0_0; }

		//name=EscapedQualifiedName
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//EscapedQualifiedName
		public RuleCall getNameEscapedQualifiedNameParserRuleCall_0_1_0() { return cNameEscapedQualifiedNameParserRuleCall_0_1_0; }

		//namePattern=PatternLiteral
		public Assignment getNamePatternAssignment_1() { return cNamePatternAssignment_1; }

		//PatternLiteral
		public RuleCall getNamePatternPatternLiteralParserRuleCall_1_0() { return cNamePatternPatternLiteralParserRuleCall_1_0; }
	}

	public class BuilderOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuilderOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBuilderAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBOrExpressionLeftExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprBuilderAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightExprAssignment_1_2.eContents().get(0);
		
		//BuilderOrExpression returns be::BExpression:
		//	BuilderAndExpression ({be::BOrExpression.leftExpr=current} "||" rightExpr=BuilderAndExpression)*;
		public ParserRule getRule() { return rule; }

		//BuilderAndExpression ({be::BOrExpression.leftExpr=current} "||" rightExpr=BuilderAndExpression)*
		public Group getGroup() { return cGroup; }

		//BuilderAndExpression
		public RuleCall getBuilderAndExpressionParserRuleCall_0() { return cBuilderAndExpressionParserRuleCall_0; }

		//({be::BOrExpression.leftExpr=current} "||" rightExpr=BuilderAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{be::BOrExpression.leftExpr=current}
		public Action getBOrExpressionLeftExprAction_1_0() { return cBOrExpressionLeftExprAction_1_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }

		//rightExpr=BuilderAndExpression
		public Assignment getRightExprAssignment_1_2() { return cRightExprAssignment_1_2; }

		//BuilderAndExpression
		public RuleCall getRightExprBuilderAndExpressionParserRuleCall_1_2_0() { return cRightExprBuilderAndExpressionParserRuleCall_1_2_0; }
	}

	public class BuilderAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuilderAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBuilderNotOrPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBAndExpressionLeftExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprBuilderNotOrPrimaryExpressionParserRuleCall_1_2_0 = (RuleCall)cRightExprAssignment_1_2.eContents().get(0);
		
		//BuilderAndExpression returns be::BExpression:
		//	BuilderNotOrPrimaryExpression ({be::BAndExpression.leftExpr=current} "&&" rightExpr=BuilderNotOrPrimaryExpression)*;
		public ParserRule getRule() { return rule; }

		//BuilderNotOrPrimaryExpression ({be::BAndExpression.leftExpr=current} "&&" rightExpr=BuilderNotOrPrimaryExpression)*
		public Group getGroup() { return cGroup; }

		//BuilderNotOrPrimaryExpression
		public RuleCall getBuilderNotOrPrimaryExpressionParserRuleCall_0() { return cBuilderNotOrPrimaryExpressionParserRuleCall_0; }

		//({be::BAndExpression.leftExpr=current} "&&" rightExpr=BuilderNotOrPrimaryExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{be::BAndExpression.leftExpr=current}
		public Action getBAndExpressionLeftExprAction_1_0() { return cBAndExpressionLeftExprAction_1_0; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }

		//rightExpr=BuilderNotOrPrimaryExpression
		public Assignment getRightExprAssignment_1_2() { return cRightExprAssignment_1_2; }

		//BuilderNotOrPrimaryExpression
		public RuleCall getRightExprBuilderNotOrPrimaryExpressionParserRuleCall_1_2_0() { return cRightExprBuilderNotOrPrimaryExpressionParserRuleCall_1_2_0; }
	}

	public class BuilderNotOrPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuilderNotOrPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBuilderNotExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBuilderPrimaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BuilderNotOrPrimaryExpression returns be::BExpression:
		//	BuilderNotExpression | BuilderPrimaryExpression;
		public ParserRule getRule() { return rule; }

		//BuilderNotExpression | BuilderPrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//BuilderNotExpression
		public RuleCall getBuilderNotExpressionParserRuleCall_0() { return cBuilderNotExpressionParserRuleCall_0; }

		//BuilderPrimaryExpression
		public RuleCall getBuilderPrimaryExpressionParserRuleCall_1() { return cBuilderPrimaryExpressionParserRuleCall_1; }
	}

	public class BuilderNotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuilderNotExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBUnaryOpExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunctionNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cFunctionNameExclamationMarkKeyword_1_0 = (Keyword)cFunctionNameAssignment_1.eContents().get(0);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprBuilderPrimaryExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//BuilderNotExpression returns be::BExpression:
		//	{be::BUnaryOpExpression} functionName="!" expr=BuilderPrimaryExpression;
		public ParserRule getRule() { return rule; }

		//{be::BUnaryOpExpression} functionName="!" expr=BuilderPrimaryExpression
		public Group getGroup() { return cGroup; }

		//{be::BUnaryOpExpression}
		public Action getBUnaryOpExpressionAction_0() { return cBUnaryOpExpressionAction_0; }

		//functionName="!"
		public Assignment getFunctionNameAssignment_1() { return cFunctionNameAssignment_1; }

		//"!"
		public Keyword getFunctionNameExclamationMarkKeyword_1_0() { return cFunctionNameExclamationMarkKeyword_1_0; }

		//expr=BuilderPrimaryExpression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//BuilderPrimaryExpression
		public RuleCall getExprBuilderPrimaryExpressionParserRuleCall_2_0() { return cExprBuilderPrimaryExpressionParserRuleCall_2_0; }
	}

	public class BuilderPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuilderPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInputPredicateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProvidesPredicateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBuilderNamePredicateParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGroupedBuilderPrimaryExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//BuilderPrimaryExpression returns be::BExpression:
		//	InputPredicate | ProvidesPredicate | BuilderNamePredicate | GroupedBuilderPrimaryExpression;
		public ParserRule getRule() { return rule; }

		//InputPredicate | ProvidesPredicate | BuilderNamePredicate | GroupedBuilderPrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//InputPredicate
		public RuleCall getInputPredicateParserRuleCall_0() { return cInputPredicateParserRuleCall_0; }

		//ProvidesPredicate
		public RuleCall getProvidesPredicateParserRuleCall_1() { return cProvidesPredicateParserRuleCall_1; }

		//BuilderNamePredicate
		public RuleCall getBuilderNamePredicateParserRuleCall_2() { return cBuilderNamePredicateParserRuleCall_2; }

		//GroupedBuilderPrimaryExpression
		public RuleCall getGroupedBuilderPrimaryExpressionParserRuleCall_3() { return cGroupedBuilderPrimaryExpressionParserRuleCall_3; }
	}

	public class GroupedBuilderPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GroupedBuilderPrimaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBuilderOrExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//GroupedBuilderPrimaryExpression returns be::BExpression:
		//	"(" BuilderOrExpression ")";
		public ParserRule getRule() { return rule; }

		//"(" BuilderOrExpression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//BuilderOrExpression
		public RuleCall getBuilderOrExpressionParserRuleCall_1() { return cBuilderOrExpressionParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPatternLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralMapParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLiteralListParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLiteralFunctionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Literal returns be::BExpression:
		//	ValueLiteral | PatternLiteral | LiteralMap | LiteralList | LiteralFunction;
		public ParserRule getRule() { return rule; }

		//ValueLiteral | PatternLiteral | LiteralMap | LiteralList | LiteralFunction
		public Alternatives getAlternatives() { return cAlternatives; }

		//ValueLiteral
		public RuleCall getValueLiteralParserRuleCall_0() { return cValueLiteralParserRuleCall_0; }

		//PatternLiteral
		public RuleCall getPatternLiteralParserRuleCall_1() { return cPatternLiteralParserRuleCall_1; }

		//LiteralMap
		public RuleCall getLiteralMapParserRuleCall_2() { return cLiteralMapParserRuleCall_2; }

		//LiteralList
		public RuleCall getLiteralListParserRuleCall_3() { return cLiteralListParserRuleCall_3; }

		//LiteralFunction
		public RuleCall getLiteralFunctionParserRuleCall_4() { return cLiteralFunctionParserRuleCall_4; }
	}

	public class PatternLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PatternLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRegexpLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSimplePatternLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWildcardExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//PatternLiteral returns be::BPatternLiteralExpression:
		//	RegexpLiteral | SimplePatternLiteral | WildcardExpression;
		public ParserRule getRule() { return rule; }

		//RegexpLiteral | SimplePatternLiteral | WildcardExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//RegexpLiteral
		public RuleCall getRegexpLiteralParserRuleCall_0() { return cRegexpLiteralParserRuleCall_0; }

		//SimplePatternLiteral
		public RuleCall getSimplePatternLiteralParserRuleCall_1() { return cSimplePatternLiteralParserRuleCall_1; }

		//WildcardExpression
		public RuleCall getWildcardExpressionParserRuleCall_2() { return cWildcardExpressionParserRuleCall_2; }
	}

	public class LiteralListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBLiteralListExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cLessThanSignKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cEntryTypeAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cEntryTypeTypeRefParserRuleCall_0_2_1_0 = (RuleCall)cEntryTypeAssignment_0_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_2_2 = (Keyword)cGroup_0_2.eContents().get(2);
		private final Assignment cEntriesAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cEntriesExpressionParserRuleCall_0_3_0 = (RuleCall)cEntriesAssignment_0_3.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cCommaKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cEntriesAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cEntriesExpressionParserRuleCall_0_4_1_0 = (RuleCall)cEntriesAssignment_0_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBLiteralListExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cEntryTypeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cEntryTypeTypeRefParserRuleCall_1_3_0 = (RuleCall)cEntryTypeAssignment_1_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Keyword cRightSquareBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//LiteralList returns be::BExpression:
		//	{be::BLiteralListExpression} "[" ("<" entryType=TypeRef ">")? entries+=Expression ("," entries+=Expression)* "]" |
		//	{be::BLiteralListExpression} "[" "<" entryType=TypeRef ">" "]";
		public ParserRule getRule() { return rule; }

		//{be::BLiteralListExpression} "[" ("<" entryType=TypeRef ">")? entries+=Expression ("," entries+=Expression)* "]" |
		//{be::BLiteralListExpression} "[" "<" entryType=TypeRef ">" "]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{be::BLiteralListExpression} "[" ("<" entryType=TypeRef ">")? entries+=Expression ("," entries+=Expression)* "]"
		public Group getGroup_0() { return cGroup_0; }

		//{be::BLiteralListExpression}
		public Action getBLiteralListExpressionAction_0_0() { return cBLiteralListExpressionAction_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_1() { return cLeftSquareBracketKeyword_0_1; }

		//("<" entryType=TypeRef ">")?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"<"
		public Keyword getLessThanSignKeyword_0_2_0() { return cLessThanSignKeyword_0_2_0; }

		//entryType=TypeRef
		public Assignment getEntryTypeAssignment_0_2_1() { return cEntryTypeAssignment_0_2_1; }

		//TypeRef
		public RuleCall getEntryTypeTypeRefParserRuleCall_0_2_1_0() { return cEntryTypeTypeRefParserRuleCall_0_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_0_2_2() { return cGreaterThanSignKeyword_0_2_2; }

		//entries+=Expression
		public Assignment getEntriesAssignment_0_3() { return cEntriesAssignment_0_3; }

		//Expression
		public RuleCall getEntriesExpressionParserRuleCall_0_3_0() { return cEntriesExpressionParserRuleCall_0_3_0; }

		//("," entries+=Expression)*
		public Group getGroup_0_4() { return cGroup_0_4; }

		//","
		public Keyword getCommaKeyword_0_4_0() { return cCommaKeyword_0_4_0; }

		//entries+=Expression
		public Assignment getEntriesAssignment_0_4_1() { return cEntriesAssignment_0_4_1; }

		//Expression
		public RuleCall getEntriesExpressionParserRuleCall_0_4_1_0() { return cEntriesExpressionParserRuleCall_0_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_5() { return cRightSquareBracketKeyword_0_5; }

		//{be::BLiteralListExpression} "[" "<" entryType=TypeRef ">" "]"
		public Group getGroup_1() { return cGroup_1; }

		//{be::BLiteralListExpression}
		public Action getBLiteralListExpressionAction_1_0() { return cBLiteralListExpressionAction_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_2() { return cLessThanSignKeyword_1_2; }

		//entryType=TypeRef
		public Assignment getEntryTypeAssignment_1_3() { return cEntryTypeAssignment_1_3; }

		//TypeRef
		public RuleCall getEntryTypeTypeRefParserRuleCall_1_3_0() { return cEntryTypeTypeRefParserRuleCall_1_3_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_4() { return cGreaterThanSignKeyword_1_4; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_5() { return cRightSquareBracketKeyword_1_5; }
	}

	public class LiteralMapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralMap");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBLiteralMapExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cLessThanSignKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cKeyTypeAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cKeyTypeTypeRefParserRuleCall_0_2_1_0 = (RuleCall)cKeyTypeAssignment_0_2_1.eContents().get(0);
		private final Keyword cCommaKeyword_0_2_2 = (Keyword)cGroup_0_2.eContents().get(2);
		private final Assignment cValueTypeAssignment_0_2_3 = (Assignment)cGroup_0_2.eContents().get(3);
		private final RuleCall cValueTypeTypeRefParserRuleCall_0_2_3_0 = (RuleCall)cValueTypeAssignment_0_2_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_2_4 = (Keyword)cGroup_0_2.eContents().get(4);
		private final Assignment cEntriesAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cEntriesMapEntryParserRuleCall_0_3_0 = (RuleCall)cEntriesAssignment_0_3.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cCommaKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cEntriesAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cEntriesMapEntryParserRuleCall_0_4_1_0 = (RuleCall)cEntriesAssignment_0_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBLiteralMapExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cKeyTypeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cKeyTypeTypeRefParserRuleCall_1_3_0 = (RuleCall)cKeyTypeAssignment_1_3.eContents().get(0);
		private final Keyword cCommaKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cValueTypeAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cValueTypeTypeRefParserRuleCall_1_5_0 = (RuleCall)cValueTypeAssignment_1_5.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Keyword cRightSquareBracketKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		
		//LiteralMap returns be::BExpression:
		//	{be::BLiteralMapExpression} "[" ("<" keyType=TypeRef "," valueType=TypeRef ">")? entries+=MapEntry (","
		//	entries+=MapEntry)* "]" | {be::BLiteralMapExpression} "[" "<" keyType=TypeRef "," valueType=TypeRef ">" "]";
		public ParserRule getRule() { return rule; }

		//{be::BLiteralMapExpression} "[" ("<" keyType=TypeRef "," valueType=TypeRef ">")? entries+=MapEntry (","
		//entries+=MapEntry)* "]" | {be::BLiteralMapExpression} "[" "<" keyType=TypeRef "," valueType=TypeRef ">" "]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{be::BLiteralMapExpression} "[" ("<" keyType=TypeRef "," valueType=TypeRef ">")? entries+=MapEntry (","
		//entries+=MapEntry)* "]"
		public Group getGroup_0() { return cGroup_0; }

		//{be::BLiteralMapExpression}
		public Action getBLiteralMapExpressionAction_0_0() { return cBLiteralMapExpressionAction_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_1() { return cLeftSquareBracketKeyword_0_1; }

		//("<" keyType=TypeRef "," valueType=TypeRef ">")?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"<"
		public Keyword getLessThanSignKeyword_0_2_0() { return cLessThanSignKeyword_0_2_0; }

		//keyType=TypeRef
		public Assignment getKeyTypeAssignment_0_2_1() { return cKeyTypeAssignment_0_2_1; }

		//TypeRef
		public RuleCall getKeyTypeTypeRefParserRuleCall_0_2_1_0() { return cKeyTypeTypeRefParserRuleCall_0_2_1_0; }

		//","
		public Keyword getCommaKeyword_0_2_2() { return cCommaKeyword_0_2_2; }

		//valueType=TypeRef
		public Assignment getValueTypeAssignment_0_2_3() { return cValueTypeAssignment_0_2_3; }

		//TypeRef
		public RuleCall getValueTypeTypeRefParserRuleCall_0_2_3_0() { return cValueTypeTypeRefParserRuleCall_0_2_3_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_0_2_4() { return cGreaterThanSignKeyword_0_2_4; }

		//entries+=MapEntry
		public Assignment getEntriesAssignment_0_3() { return cEntriesAssignment_0_3; }

		//MapEntry
		public RuleCall getEntriesMapEntryParserRuleCall_0_3_0() { return cEntriesMapEntryParserRuleCall_0_3_0; }

		//("," entries+=MapEntry)*
		public Group getGroup_0_4() { return cGroup_0_4; }

		//","
		public Keyword getCommaKeyword_0_4_0() { return cCommaKeyword_0_4_0; }

		//entries+=MapEntry
		public Assignment getEntriesAssignment_0_4_1() { return cEntriesAssignment_0_4_1; }

		//MapEntry
		public RuleCall getEntriesMapEntryParserRuleCall_0_4_1_0() { return cEntriesMapEntryParserRuleCall_0_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_5() { return cRightSquareBracketKeyword_0_5; }

		//{be::BLiteralMapExpression} "[" "<" keyType=TypeRef "," valueType=TypeRef ">" "]"
		public Group getGroup_1() { return cGroup_1; }

		//{be::BLiteralMapExpression}
		public Action getBLiteralMapExpressionAction_1_0() { return cBLiteralMapExpressionAction_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_2() { return cLessThanSignKeyword_1_2; }

		//keyType=TypeRef
		public Assignment getKeyTypeAssignment_1_3() { return cKeyTypeAssignment_1_3; }

		//TypeRef
		public RuleCall getKeyTypeTypeRefParserRuleCall_1_3_0() { return cKeyTypeTypeRefParserRuleCall_1_3_0; }

		//","
		public Keyword getCommaKeyword_1_4() { return cCommaKeyword_1_4; }

		//valueType=TypeRef
		public Assignment getValueTypeAssignment_1_5() { return cValueTypeAssignment_1_5; }

		//TypeRef
		public RuleCall getValueTypeTypeRefParserRuleCall_1_5_0() { return cValueTypeTypeRefParserRuleCall_1_5_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_6() { return cGreaterThanSignKeyword_1_6; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_7() { return cRightSquareBracketKeyword_1_7; }
	}

	public class LiteralFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cClosureExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// A lambda enclosed in { }
		//LiteralFunction returns be::BExpression:
		//	"{" ClosureExpression "}";
		public ParserRule getRule() { return rule; }

		//"{" ClosureExpression "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//ClosureExpression
		public RuleCall getClosureExpressionParserRuleCall_1() { return cClosureExpressionParserRuleCall_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class ClosureExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClosureExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cB3FunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cReturnTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cReturnTypeTypeRefParserRuleCall_1_1_0 = (RuleCall)cReturnTypeAssignment_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Group cGroup_2_0_1 = (Group)cGroup_2_0.eContents().get(1);
		private final Assignment cParametersAssignment_2_0_1_0 = (Assignment)cGroup_2_0_1.eContents().get(0);
		private final RuleCall cParametersParameterDeclarationOptTypeParserRuleCall_2_0_1_0_0 = (RuleCall)cParametersAssignment_2_0_1_0.eContents().get(0);
		private final Group cGroup_2_0_1_1 = (Group)cGroup_2_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_0_1_1_0 = (Keyword)cGroup_2_0_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_0_1_1_1 = (Assignment)cGroup_2_0_1_1.eContents().get(1);
		private final RuleCall cParametersParameterDeclarationOptTypeParserRuleCall_2_0_1_1_1_0 = (RuleCall)cParametersAssignment_2_0_1_1_1.eContents().get(0);
		private final Group cGroup_2_0_1_2 = (Group)cGroup_2_0_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_0_1_2_0 = (Keyword)cGroup_2_0_1_2.eContents().get(0);
		private final Assignment cVarArgsAssignment_2_0_1_2_1 = (Assignment)cGroup_2_0_1_2.eContents().get(1);
		private final Keyword cVarArgsFullStopFullStopFullStopKeyword_2_0_1_2_1_0 = (Keyword)cVarArgsAssignment_2_0_1_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_0_1_2_2 = (Assignment)cGroup_2_0_1_2.eContents().get(2);
		private final RuleCall cParametersParameterDeclarationOptTypeParserRuleCall_2_0_1_2_2_0 = (RuleCall)cParametersAssignment_2_0_1_2_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cVarArgsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Keyword cVarArgsFullStopFullStopFullStopKeyword_2_1_0_0 = (Keyword)cVarArgsAssignment_2_1_0.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersParameterDeclarationOptTypeParserRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFuncExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFuncExprOneOrManyExpressionsParserRuleCall_4_0 = (RuleCall)cFuncExprAssignment_4.eContents().get(0);
		
		////LiteralFunction returns be::BExpression : {be::B3Function} 
		////	'{' ('<' returnType=TypeRef '>')?
		////	(
		////	(parameters += ParameterDeclaration (',' parameters += ParameterDeclaration)* 
		////		(',' varArgs?="..." parameters += ParameterDeclaration)?)
		////	| 	(    varArgs?="..." parameters += ParameterDeclaration)
		////	)? 
		////	'|' funcExpr=OneOrManyExpressions '}'
		////	;
		//// A lambda (without delimiters)
		//ClosureExpression returns be::BExpression:
		//	{be::B3Function} ("<" returnType=TypeRef ">")? ("|"? (parameters+=ParameterDeclarationOptType (","
		//	parameters+=ParameterDeclarationOptType)* ("," varArgs?="..." parameters+=ParameterDeclarationOptType)?) |
		//	varArgs?="..." parameters+=ParameterDeclarationOptType)? "|" funcExpr=OneOrManyExpressions;
		public ParserRule getRule() { return rule; }

		//{be::B3Function} ("<" returnType=TypeRef ">")? ("|"? (parameters+=ParameterDeclarationOptType (","
		//parameters+=ParameterDeclarationOptType)* ("," varArgs?="..." parameters+=ParameterDeclarationOptType)?) |
		//varArgs?="..." parameters+=ParameterDeclarationOptType)? "|" funcExpr=OneOrManyExpressions
		public Group getGroup() { return cGroup; }

		//{be::B3Function}
		public Action getB3FunctionAction_0() { return cB3FunctionAction_0; }

		//("<" returnType=TypeRef ">")?
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//returnType=TypeRef
		public Assignment getReturnTypeAssignment_1_1() { return cReturnTypeAssignment_1_1; }

		//TypeRef
		public RuleCall getReturnTypeTypeRefParserRuleCall_1_1_0() { return cReturnTypeTypeRefParserRuleCall_1_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_2() { return cGreaterThanSignKeyword_1_2; }

		//("|"? (parameters+=ParameterDeclarationOptType ("," parameters+=ParameterDeclarationOptType)* ("," varArgs?="..."
		//parameters+=ParameterDeclarationOptType)?) | varArgs?="..." parameters+=ParameterDeclarationOptType)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"|"? (parameters+=ParameterDeclarationOptType ("," parameters+=ParameterDeclarationOptType)* ("," varArgs?="..."
		//parameters+=ParameterDeclarationOptType)?)
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"|"?
		public Keyword getVerticalLineKeyword_2_0_0() { return cVerticalLineKeyword_2_0_0; }

		//parameters+=ParameterDeclarationOptType ("," parameters+=ParameterDeclarationOptType)* ("," varArgs?="..."
		//parameters+=ParameterDeclarationOptType)?
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }

		//parameters+=ParameterDeclarationOptType
		public Assignment getParametersAssignment_2_0_1_0() { return cParametersAssignment_2_0_1_0; }

		//ParameterDeclarationOptType
		public RuleCall getParametersParameterDeclarationOptTypeParserRuleCall_2_0_1_0_0() { return cParametersParameterDeclarationOptTypeParserRuleCall_2_0_1_0_0; }

		//("," parameters+=ParameterDeclarationOptType)*
		public Group getGroup_2_0_1_1() { return cGroup_2_0_1_1; }

		//","
		public Keyword getCommaKeyword_2_0_1_1_0() { return cCommaKeyword_2_0_1_1_0; }

		//parameters+=ParameterDeclarationOptType
		public Assignment getParametersAssignment_2_0_1_1_1() { return cParametersAssignment_2_0_1_1_1; }

		//ParameterDeclarationOptType
		public RuleCall getParametersParameterDeclarationOptTypeParserRuleCall_2_0_1_1_1_0() { return cParametersParameterDeclarationOptTypeParserRuleCall_2_0_1_1_1_0; }

		//("," varArgs?="..." parameters+=ParameterDeclarationOptType)?
		public Group getGroup_2_0_1_2() { return cGroup_2_0_1_2; }

		//","
		public Keyword getCommaKeyword_2_0_1_2_0() { return cCommaKeyword_2_0_1_2_0; }

		//varArgs?="..."
		public Assignment getVarArgsAssignment_2_0_1_2_1() { return cVarArgsAssignment_2_0_1_2_1; }

		//"..."
		public Keyword getVarArgsFullStopFullStopFullStopKeyword_2_0_1_2_1_0() { return cVarArgsFullStopFullStopFullStopKeyword_2_0_1_2_1_0; }

		//parameters+=ParameterDeclarationOptType
		public Assignment getParametersAssignment_2_0_1_2_2() { return cParametersAssignment_2_0_1_2_2; }

		//ParameterDeclarationOptType
		public RuleCall getParametersParameterDeclarationOptTypeParserRuleCall_2_0_1_2_2_0() { return cParametersParameterDeclarationOptTypeParserRuleCall_2_0_1_2_2_0; }

		//varArgs?="..." parameters+=ParameterDeclarationOptType
		public Group getGroup_2_1() { return cGroup_2_1; }

		//varArgs?="..."
		public Assignment getVarArgsAssignment_2_1_0() { return cVarArgsAssignment_2_1_0; }

		//"..."
		public Keyword getVarArgsFullStopFullStopFullStopKeyword_2_1_0_0() { return cVarArgsFullStopFullStopFullStopKeyword_2_1_0_0; }

		//parameters+=ParameterDeclarationOptType
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }

		//ParameterDeclarationOptType
		public RuleCall getParametersParameterDeclarationOptTypeParserRuleCall_2_1_1_0() { return cParametersParameterDeclarationOptTypeParserRuleCall_2_1_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_3() { return cVerticalLineKeyword_3; }

		//funcExpr=OneOrManyExpressions
		public Assignment getFuncExprAssignment_4() { return cFuncExprAssignment_4; }

		//OneOrManyExpressions
		public RuleCall getFuncExprOneOrManyExpressionsParserRuleCall_4_0() { return cFuncExprOneOrManyExpressionsParserRuleCall_4_0; }
	}

	public class OneOrManyExpressionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OneOrManyExpressions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBlockExpressionWithoutBracketsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OneOrManyExpressions returns be::BExpression:
		//	BlockExpressionWithoutBrackets | Expression;
		public ParserRule getRule() { return rule; }

		//BlockExpressionWithoutBrackets | Expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//BlockExpressionWithoutBrackets
		public RuleCall getBlockExpressionWithoutBracketsParserRuleCall_0() { return cBlockExpressionWithoutBracketsParserRuleCall_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}

	public class BlockExpressionWithoutBracketsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BlockExpressionWithoutBrackets");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBChainedExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionsTopLevelExpressionParserRuleCall_1_0_0 = (RuleCall)cExpressionsAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//BlockExpressionWithoutBrackets returns be::BExpression:
		//	{be::BChainedExpression} (expressions+=TopLevelExpression ";")* // should be +, but produces markers that are no good 
		//;
		public ParserRule getRule() { return rule; }

		//{be::BChainedExpression} (expressions+=TopLevelExpression ";")* // should be +, but produces markers that are no good
		public Group getGroup() { return cGroup; }

		//{be::BChainedExpression}
		public Action getBChainedExpressionAction_0() { return cBChainedExpressionAction_0; }

		//(expressions+=TopLevelExpression ";")*
		public Group getGroup_1() { return cGroup_1; }

		//expressions+=TopLevelExpression
		public Assignment getExpressionsAssignment_1_0() { return cExpressionsAssignment_1_0; }

		//TopLevelExpression
		public RuleCall getExpressionsTopLevelExpressionParserRuleCall_1_0_0() { return cExpressionsTopLevelExpressionParserRuleCall_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}

	public class MapEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MapEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBMapEntryAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyKeyLiteralParserRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//MapEntry returns be::BMapEntry:
		//	{be::BMapEntry} key=KeyLiteral ":" value=Expression;
		public ParserRule getRule() { return rule; }

		//{be::BMapEntry} key=KeyLiteral ":" value=Expression
		public Group getGroup() { return cGroup; }

		//{be::BMapEntry}
		public Action getBMapEntryAction_0() { return cBMapEntryAction_0; }

		//key=KeyLiteral
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }

		//KeyLiteral
		public RuleCall getKeyKeyLiteralParserRuleCall_1_0() { return cKeyKeyLiteralParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//value=Expression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_3_0() { return cValueExpressionParserRuleCall_3_0; }
	}

	public class KeyLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KeyLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBLiteralExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cValueAlternatives_1_0 = (Alternatives)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValueIDTerminalRuleCall_1_0_0 = (RuleCall)cValueAlternatives_1_0.eContents().get(0);
		private final RuleCall cValuePIDTerminalRuleCall_1_0_1 = (RuleCall)cValueAlternatives_1_0.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0_2 = (RuleCall)cValueAlternatives_1_0.eContents().get(2);
		
		//KeyLiteral returns be::BExpression:
		//	{be::BLiteralExpression} value=(ID | PID | STRING);
		public ParserRule getRule() { return rule; }

		//{be::BLiteralExpression} value=(ID | PID | STRING)
		public Group getGroup() { return cGroup; }

		//{be::BLiteralExpression}
		public Action getBLiteralExpressionAction_0() { return cBLiteralExpressionAction_0; }

		//value=(ID | PID | STRING)
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//ID | PID | STRING
		public Alternatives getValueAlternatives_1_0() { return cValueAlternatives_1_0; }

		//ID
		public RuleCall getValueIDTerminalRuleCall_1_0_0() { return cValueIDTerminalRuleCall_1_0_0; }

		//PID
		public RuleCall getValuePIDTerminalRuleCall_1_0_1() { return cValuePIDTerminalRuleCall_1_0_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0_2() { return cValueSTRINGTerminalRuleCall_1_0_2; }
	}

	public class LiteralTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBLiteralTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeRefParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//LiteralType returns be::BLiteralType:
		//	{be::BLiteralType} type=TypeRef;
		public ParserRule getRule() { return rule; }

		//{be::BLiteralType} type=TypeRef
		public Group getGroup() { return cGroup; }

		//{be::BLiteralType}
		public Action getBLiteralTypeAction_0() { return cBLiteralTypeAction_0; }

		//type=TypeRef
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_1_0() { return cTypeTypeRefParserRuleCall_1_0; }
	}

	public class ValueLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRealLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNullLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStringLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cUnitLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//ValueLiteral returns be::BExpression:
		//	BooleanLiteral //	| QueryLiteral
		//	| // SEE ISSUE 297089 - must be placed before IntegerLiteral
		//	RealLiteral | IntegerLiteral | NullLiteral | StringLiteral | UnitLiteral;
		public ParserRule getRule() { return rule; }

		//BooleanLiteral //	| QueryLiteral
		//| // SEE ISSUE 297089 - must be placed before IntegerLiteral
		//RealLiteral | IntegerLiteral | NullLiteral | StringLiteral | UnitLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_0() { return cBooleanLiteralParserRuleCall_0; }

		//// SEE ISSUE 297089 - must be placed before IntegerLiteral
		//RealLiteral
		public RuleCall getRealLiteralParserRuleCall_1() { return cRealLiteralParserRuleCall_1; }

		//IntegerLiteral
		public RuleCall getIntegerLiteralParserRuleCall_2() { return cIntegerLiteralParserRuleCall_2; }

		//NullLiteral
		public RuleCall getNullLiteralParserRuleCall_3() { return cNullLiteralParserRuleCall_3; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_4() { return cStringLiteralParserRuleCall_4; }

		//UnitLiteral
		public RuleCall getUnitLiteralParserRuleCall_5() { return cUnitLiteralParserRuleCall_5; }
	}

	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBLiteralExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueBooleanValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//BooleanLiteral returns be::BExpression:
		//	{be::BLiteralExpression} value=BooleanValue;
		public ParserRule getRule() { return rule; }

		//{be::BLiteralExpression} value=BooleanValue
		public Group getGroup() { return cGroup; }

		//{be::BLiteralExpression}
		public Action getBLiteralExpressionAction_0() { return cBLiteralExpressionAction_0; }

		//value=BooleanValue
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//BooleanValue
		public RuleCall getValueBooleanValueParserRuleCall_1_0() { return cValueBooleanValueParserRuleCall_1_0; }
	}

	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBLiteralExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueIntValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//IntegerLiteral returns be::BExpression:
		//	{be::BLiteralExpression} value=IntValue;
		public ParserRule getRule() { return rule; }

		//{be::BLiteralExpression} value=IntValue
		public Group getGroup() { return cGroup; }

		//{be::BLiteralExpression}
		public Action getBLiteralExpressionAction_0() { return cBLiteralExpressionAction_0; }

		//value=IntValue
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//IntValue
		public RuleCall getValueIntValueParserRuleCall_1_0() { return cValueIntValueParserRuleCall_1_0; }
	}

	public class UnitLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBLiteralExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cValueUnitKeyword_1_0 = (Keyword)cValueAssignment_1.eContents().get(0);
		
		//UnitLiteral returns be::BExpression:
		//	{be::BLiteralExpression} value="unit";
		public ParserRule getRule() { return rule; }

		//{be::BLiteralExpression} value="unit"
		public Group getGroup() { return cGroup; }

		//{be::BLiteralExpression}
		public Action getBLiteralExpressionAction_0() { return cBLiteralExpressionAction_0; }

		//value="unit"
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//"unit"
		public Keyword getValueUnitKeyword_1_0() { return cValueUnitKeyword_1_0; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBLiteralExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//StringLiteral returns be::BExpression:
		//	{be::BLiteralExpression} value=STRING;
		public ParserRule getRule() { return rule; }

		//{be::BLiteralExpression} value=STRING
		public Group getGroup() { return cGroup; }

		//{be::BLiteralExpression}
		public Action getBLiteralExpressionAction_0() { return cBLiteralExpressionAction_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class RealLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBLiteralExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueRealValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//RealLiteral returns be::BExpression:
		//	{be::BLiteralExpression} value=RealValue;
		public ParserRule getRule() { return rule; }

		//{be::BLiteralExpression} value=RealValue
		public Group getGroup() { return cGroup; }

		//{be::BLiteralExpression}
		public Action getBLiteralExpressionAction_0() { return cBLiteralExpressionAction_0; }

		//value=RealValue
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//RealValue
		public RuleCall getValueRealValueParserRuleCall_1_0() { return cValueRealValueParserRuleCall_1_0; }
	}

	public class RegexpLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RegexpLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBRegularExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPatternAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPatternREGULAR_EXPRTerminalRuleCall_1_0 = (RuleCall)cPatternAssignment_1.eContents().get(0);
		
		//RegexpLiteral returns be::BRegularExpression:
		//	{be::BRegularExpression} pattern=REGULAR_EXPR;
		public ParserRule getRule() { return rule; }

		//{be::BRegularExpression} pattern=REGULAR_EXPR
		public Group getGroup() { return cGroup; }

		//{be::BRegularExpression}
		public Action getBRegularExpressionAction_0() { return cBRegularExpressionAction_0; }

		//pattern=REGULAR_EXPR
		public Assignment getPatternAssignment_1() { return cPatternAssignment_1; }

		//REGULAR_EXPR
		public RuleCall getPatternREGULAR_EXPRTerminalRuleCall_1_0() { return cPatternREGULAR_EXPRTerminalRuleCall_1_0; }
	}

	public class SimplePatternLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimplePatternLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBSimplePatternExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPatternAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPatternSIMPLE_PATTERNTerminalRuleCall_1_0 = (RuleCall)cPatternAssignment_1.eContents().get(0);
		
		//SimplePatternLiteral returns be::BSimplePatternExpression:
		//	{be::BSimplePatternExpression} pattern=SIMPLE_PATTERN;
		public ParserRule getRule() { return rule; }

		//{be::BSimplePatternExpression} pattern=SIMPLE_PATTERN
		public Group getGroup() { return cGroup; }

		//{be::BSimplePatternExpression}
		public Action getBSimplePatternExpressionAction_0() { return cBSimplePatternExpressionAction_0; }

		//pattern=SIMPLE_PATTERN
		public Assignment getPatternAssignment_1() { return cPatternAssignment_1; }

		//SIMPLE_PATTERN
		public RuleCall getPatternSIMPLE_PATTERNTerminalRuleCall_1_0() { return cPatternSIMPLE_PATTERNTerminalRuleCall_1_0; }
	}

	public class NullLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBLiteralExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//// Note: NullLiteral has a java null value as its value
		//NullLiteral returns be::BExpression:
		//	{be::BLiteralExpression} "null";
		public ParserRule getRule() { return rule; }

		//{be::BLiteralExpression} "null"
		public Group getGroup() { return cGroup; }

		//{be::BLiteralExpression}
		public Action getBLiteralExpressionAction_0() { return cBLiteralExpressionAction_0; }

		//"null"
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}

	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		////ThisLiteral	returns  be::BExpression: {ThisLiteral} val="this";
		////SuperLiteral returns  be::BExpression: {SuperLiteral} val="super";
		//// Has conversion rule
		//BooleanValue returns ecore::EBooleanObject:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class RealValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealValue");
		private final RuleCall cREALParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// Has conversion rule
		//RealValue returns ecore::EDoubleObject:
		//	REAL;
		public ParserRule getRule() { return rule; }

		//REAL
		public RuleCall getREALParserRuleCall() { return cREALParserRuleCall; }
	}

	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHEXTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Has conversion rule that handles decimal, octal, and hexadecimal values with radix
		//IntValue returns ecore::EIntegerObject:
		//	INT | HEX;
		public ParserRule getRule() { return rule; }

		//INT | HEX
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//HEX
		public RuleCall getHEXTerminalRuleCall_1() { return cHEXTerminalRuleCall_1; }
	}

	public class ParanthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParanthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParanthesizedExpression returns be::BExpression:
		//	"(" Expression ")";
		public ParserRule getRule() { return rule; }

		//"(" Expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class VersionLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VersionLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAlfanumSymParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Has conversion rule
		//VersionLiteral returns build::Version:
		//	STRING | AlfanumSym;
		public ParserRule getRule() { return rule; }

		//STRING | AlfanumSym
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//AlfanumSym
		public RuleCall getAlfanumSymParserRuleCall_1() { return cAlfanumSymParserRuleCall_1; }
	}

	public class VersionRangeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VersionRangeLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cAlfanumSymParserRuleCall_0_1_1 = (RuleCall)cAlternatives_0_1.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Alternatives cAlternatives_0_2_1 = (Alternatives)cGroup_0_2.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0_2_1_0 = (RuleCall)cAlternatives_0_2_1.eContents().get(0);
		private final RuleCall cAlfanumSymParserRuleCall_0_2_1_1 = (RuleCall)cAlternatives_0_2_1.eContents().get(1);
		private final Alternatives cAlternatives_0_3 = (Alternatives)cGroup_0.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_0_3_0 = (Keyword)cAlternatives_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3_1 = (Keyword)cAlternatives_0_3.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cAlfanumSymParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//// Has conversion rule
		//VersionRangeLiteral returns build::VersionRange:
		//	("[" | "(") (STRING | AlfanumSym) ("," (STRING | AlfanumSym))? ("]" | ")") | (STRING | AlfanumSym);
		public ParserRule getRule() { return rule; }

		//("[" | "(") (STRING | AlfanumSym) ("," (STRING | AlfanumSym))? ("]" | ")") | (STRING | AlfanumSym)
		public Alternatives getAlternatives() { return cAlternatives; }

		//("[" | "(") (STRING | AlfanumSym) ("," (STRING | AlfanumSym))? ("]" | ")")
		public Group getGroup_0() { return cGroup_0; }

		//"[" | "("
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_0_0() { return cLeftSquareBracketKeyword_0_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0_1() { return cLeftParenthesisKeyword_0_0_1; }

		//STRING | AlfanumSym
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_1_0() { return cSTRINGTerminalRuleCall_0_1_0; }

		//AlfanumSym
		public RuleCall getAlfanumSymParserRuleCall_0_1_1() { return cAlfanumSymParserRuleCall_0_1_1; }

		//("," (STRING | AlfanumSym))?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//","
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }

		//STRING | AlfanumSym
		public Alternatives getAlternatives_0_2_1() { return cAlternatives_0_2_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_2_1_0() { return cSTRINGTerminalRuleCall_0_2_1_0; }

		//AlfanumSym
		public RuleCall getAlfanumSymParserRuleCall_0_2_1_1() { return cAlfanumSymParserRuleCall_0_2_1_1; }

		//"]" | ")"
		public Alternatives getAlternatives_0_3() { return cAlternatives_0_3; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_3_0() { return cRightSquareBracketKeyword_0_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_3_1() { return cRightParenthesisKeyword_0_3_1; }

		//STRING | AlfanumSym
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_0() { return cSTRINGTerminalRuleCall_1_0; }

		//AlfanumSym
		public RuleCall getAlfanumSymParserRuleCall_1_1() { return cAlfanumSymParserRuleCall_1_1; }
	}

	public class QIDREFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QIDREF");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cSuperKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Group cGroup_0_0_1 = (Group)cAlternatives_0_0.eContents().get(1);
		private final Alternatives cAlternatives_0_0_1_0 = (Alternatives)cGroup_0_0_1.eContents().get(0);
		private final Keyword cUnitKeyword_0_0_1_0_0 = (Keyword)cAlternatives_0_0_1_0.eContents().get(0);
		private final Keyword cThisKeyword_0_0_1_0_1 = (Keyword)cAlternatives_0_0_1_0.eContents().get(1);
		private final Group cGroup_0_0_1_1 = (Group)cGroup_0_0_1.eContents().get(1);
		private final Keyword cFullStopKeyword_0_0_1_1_0 = (Keyword)cGroup_0_0_1_1.eContents().get(0);
		private final Keyword cSuperKeyword_0_0_1_1_1 = (Keyword)cGroup_0_0_1_1.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final RuleCall cQIDParserRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final RuleCall cQIDParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Reference to qualified named item, possibly in unit, this or super, or
		//// this.super, or unit.super (ONLY USED BY PROPERTY SET - CLEAN THIS UP)
		//// TODO: super, unit, this - not yet handled - subject to change?
		//QIDREF returns ecore::EString:
		//	("super" | ("unit" | "this") ("." "super")?) ("." QID)? | QID;
		public ParserRule getRule() { return rule; }

		//("super" | ("unit" | "this") ("." "super")?) ("." QID)? | QID
		public Alternatives getAlternatives() { return cAlternatives; }

		//("super" | ("unit" | "this") ("." "super")?) ("." QID)?
		public Group getGroup_0() { return cGroup_0; }

		//"super" | ("unit" | "this") ("." "super")?
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//"super"
		public Keyword getSuperKeyword_0_0_0() { return cSuperKeyword_0_0_0; }

		//("unit" | "this") ("." "super")?
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }

		//"unit" | "this"
		public Alternatives getAlternatives_0_0_1_0() { return cAlternatives_0_0_1_0; }

		//"unit"
		public Keyword getUnitKeyword_0_0_1_0_0() { return cUnitKeyword_0_0_1_0_0; }

		//"this"
		public Keyword getThisKeyword_0_0_1_0_1() { return cThisKeyword_0_0_1_0_1; }

		//("." "super")?
		public Group getGroup_0_0_1_1() { return cGroup_0_0_1_1; }

		//"."
		public Keyword getFullStopKeyword_0_0_1_1_0() { return cFullStopKeyword_0_0_1_1_0; }

		//"super"
		public Keyword getSuperKeyword_0_0_1_1_1() { return cSuperKeyword_0_0_1_1_1; }

		//("." QID)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"."
		public Keyword getFullStopKeyword_0_1_0() { return cFullStopKeyword_0_1_0; }

		//QID
		public RuleCall getQIDParserRuleCall_0_1_1() { return cQIDParserRuleCall_0_1_1; }

		//QID
		public RuleCall getQIDParserRuleCall_1() { return cQIDParserRuleCall_1; }
	}

	public class QIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cID_or_KWParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cHEXTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cID_or_KWParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cID_or_KWParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Alternatives cAlternatives_2_2 = (Alternatives)cGroup_2.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_2_2_0 = (RuleCall)cAlternatives_2_2.eContents().get(0);
		private final RuleCall cHEXTerminalRuleCall_2_2_1 = (RuleCall)cAlternatives_2_2.eContents().get(1);
		private final RuleCall cID_or_KWParserRuleCall_2_2_2 = (RuleCall)cAlternatives_2_2.eContents().get(2);
		
		//// Qualified name
		//QID returns ecore::EString hidden():
		//	ID_or_KW (INT | HEX | ID_or_KW)* ("." ID_or_KW (INT | HEX | ID_or_KW)*)*;
		public ParserRule getRule() { return rule; }

		//ID_or_KW (INT | HEX | ID_or_KW)* ("." ID_or_KW (INT | HEX | ID_or_KW)*)*
		public Group getGroup() { return cGroup; }

		//ID_or_KW
		public RuleCall getID_or_KWParserRuleCall_0() { return cID_or_KWParserRuleCall_0; }

		//(INT | HEX | ID_or_KW)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }

		//HEX
		public RuleCall getHEXTerminalRuleCall_1_1() { return cHEXTerminalRuleCall_1_1; }

		//ID_or_KW
		public RuleCall getID_or_KWParserRuleCall_1_2() { return cID_or_KWParserRuleCall_1_2; }

		//("." ID_or_KW (INT | HEX | ID_or_KW)*)*
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//ID_or_KW
		public RuleCall getID_or_KWParserRuleCall_2_1() { return cID_or_KWParserRuleCall_2_1; }

		//(INT | HEX | ID_or_KW)*
		public Alternatives getAlternatives_2_2() { return cAlternatives_2_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_2_0() { return cINTTerminalRuleCall_2_2_0; }

		//HEX
		public RuleCall getHEXTerminalRuleCall_2_2_1() { return cHEXTerminalRuleCall_2_2_1; }

		//ID_or_KW
		public RuleCall getID_or_KWParserRuleCall_2_2_2() { return cID_or_KWParserRuleCall_2_2_2; }
	}

	public class EscapedQualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EscapedQualifiedName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQIDParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Allows a qualified name, or a string to be used as a name
		//EscapedQualifiedName returns ecore::EString:
		//	STRING | QID;
		public ParserRule getRule() { return rule; }

		//STRING | QID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//QID
		public RuleCall getQIDParserRuleCall_1() { return cQIDParserRuleCall_1; }
	}

	public class CapabilityInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CapabilityInterface");
		private final RuleCall cQIDParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//CapabilityInterface returns ecore::EString:
		//	QID;
		public ParserRule getRule() { return rule; }

		//QID
		public RuleCall getQIDParserRuleCall() { return cQIDParserRuleCall; }
	}

	public class TIMESTAMPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TIMESTAMP");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// RULE 'TERMINALS'
		//TIMESTAMP returns ecore::EDate:
		//	STRING;
		public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class SeparatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Separator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCommercialAtKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDollarSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPercentSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAmpersandKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cPlusSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cAsteriskKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cLessThanSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cGreaterThanSignKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cColonKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cQuestionMarkKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		
		//// Version, and VersionRange use these
		//// TODO: uncertain if the set of allowed chars is definitive.
		////
		//Separator returns ecore::EString:
		//	"-" | "!" | "@" | "$" | "%" | "&" | "+" | "=" | "*" | "<" | ">" | ":" | "?";
		public ParserRule getRule() { return rule; }

		//"-" | "!" | "@" | "$" | "%" | "&" | "+" | "=" | "*" | "<" | ">" | ":" | "?"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"-"
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_1() { return cExclamationMarkKeyword_1; }

		//"@"
		public Keyword getCommercialAtKeyword_2() { return cCommercialAtKeyword_2; }

		//"$"
		public Keyword getDollarSignKeyword_3() { return cDollarSignKeyword_3; }

		//"%"
		public Keyword getPercentSignKeyword_4() { return cPercentSignKeyword_4; }

		//"&"
		public Keyword getAmpersandKeyword_5() { return cAmpersandKeyword_5; }

		//"+"
		public Keyword getPlusSignKeyword_6() { return cPlusSignKeyword_6; }

		//"="
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }

		//"*"
		public Keyword getAsteriskKeyword_8() { return cAsteriskKeyword_8; }

		//"<"
		public Keyword getLessThanSignKeyword_9() { return cLessThanSignKeyword_9; }

		//">"
		public Keyword getGreaterThanSignKeyword_10() { return cGreaterThanSignKeyword_10; }

		//":"
		public Keyword getColonKeyword_11() { return cColonKeyword_11; }

		//"?"
		public Keyword getQuestionMarkKeyword_12() { return cQuestionMarkKeyword_12; }
	}

	public class AlfanumSymElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AlfanumSym");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cHEXTerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cEXT_INTTerminalRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cSeparatorParserRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_1_2 = (RuleCall)cAlternatives_1_1.eContents().get(2);
		private final RuleCall cHEXTerminalRuleCall_1_1_3 = (RuleCall)cAlternatives_1_1.eContents().get(3);
		private final RuleCall cEXT_INTTerminalRuleCall_1_1_4 = (RuleCall)cAlternatives_1_1.eContents().get(4);
		
		//AlfanumSym returns ecore::EString hidden():
		//	(ID | INT | HEX | EXT_INT) ("."? (Separator | ID | INT | HEX | EXT_INT))*;
		public ParserRule getRule() { return rule; }

		//(ID | INT | HEX | EXT_INT) ("."? (Separator | ID | INT | HEX | EXT_INT))*
		public Group getGroup() { return cGroup; }

		//ID | INT | HEX | EXT_INT
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_1() { return cINTTerminalRuleCall_0_1; }

		//HEX
		public RuleCall getHEXTerminalRuleCall_0_2() { return cHEXTerminalRuleCall_0_2; }

		//EXT_INT
		public RuleCall getEXT_INTTerminalRuleCall_0_3() { return cEXT_INTTerminalRuleCall_0_3; }

		//("."? (Separator | ID | INT | HEX | EXT_INT))*
		public Group getGroup_1() { return cGroup_1; }

		//"."?
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//Separator | ID | INT | HEX | EXT_INT
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//Separator
		public RuleCall getSeparatorParserRuleCall_1_1_0() { return cSeparatorParserRuleCall_1_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1_1() { return cIDTerminalRuleCall_1_1_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1_2() { return cINTTerminalRuleCall_1_1_2; }

		//HEX
		public RuleCall getHEXTerminalRuleCall_1_1_3() { return cHEXTerminalRuleCall_1_1_3; }

		//EXT_INT
		public RuleCall getEXT_INTTerminalRuleCall_1_1_4() { return cEXT_INTTerminalRuleCall_1_1_4; }
	}

	public class DOCUMENTATIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DOCUMENTATION");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTEXTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJAVADOCTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DOCUMENTATION returns ecore::EString:
		//	TEXT | JAVADOC;
		public ParserRule getRule() { return rule; }

		//TEXT | JAVADOC
		public Alternatives getAlternatives() { return cAlternatives; }

		//TEXT
		public RuleCall getTEXTTerminalRuleCall_0() { return cTEXTTerminalRuleCall_0; }

		//JAVADOC
		public RuleCall getJAVADOCTerminalRuleCall_1() { return cJAVADOCTerminalRuleCall_1; }
	}

	public class REALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "REAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cEXT_INTTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//REAL returns ecore::EString hidden():
		//	INT? "." (EXT_INT | INT);
		public ParserRule getRule() { return rule; }

		//INT? "." (EXT_INT | INT)
		public Group getGroup() { return cGroup; }

		//INT?
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//EXT_INT | INT
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//EXT_INT
		public RuleCall getEXT_INTTerminalRuleCall_2_0() { return cEXT_INTTerminalRuleCall_2_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}
	
	
	public class BranchPointTypeLatestElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BranchPointTypeLatest");
		private final EnumLiteralDeclaration cLatestEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cLatestLatestKeyword_0 = (Keyword)cLatestEnumLiteralDeclaration.eContents().get(0);
		
		//enum BranchPointTypeLatest returns build::BranchPointType:
		//	Latest="latest";
		public EnumRule getRule() { return rule; }

		//Latest="latest"
		public EnumLiteralDeclaration getLatestEnumLiteralDeclaration() { return cLatestEnumLiteralDeclaration; }

		//"latest"
		public Keyword getLatestLatestKeyword_0() { return cLatestLatestKeyword_0; }
	}

	public class BranchPointTypeOtherElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BranchPointTypeOther");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLatestEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLatestLatestKeyword_0_0 = (Keyword)cLatestEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRevisionEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRevisionRevisionKeyword_1_0 = (Keyword)cRevisionEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTagEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTagTagKeyword_2_0 = (Keyword)cTagEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTimestampEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTimestampTimestampKeyword_3_0 = (Keyword)cTimestampEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum BranchPointTypeOther returns build::BranchPointType:
		//	Latest="latest" | Revision="revision" | Tag="tag" | Timestamp="timestamp";
		public EnumRule getRule() { return rule; }

		//Latest="latest" | Revision="revision" | Tag="tag" | Timestamp="timestamp"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Latest="latest"
		public EnumLiteralDeclaration getLatestEnumLiteralDeclaration_0() { return cLatestEnumLiteralDeclaration_0; }

		//"latest"
		public Keyword getLatestLatestKeyword_0_0() { return cLatestLatestKeyword_0_0; }

		//Revision="revision"
		public EnumLiteralDeclaration getRevisionEnumLiteralDeclaration_1() { return cRevisionEnumLiteralDeclaration_1; }

		//"revision"
		public Keyword getRevisionRevisionKeyword_1_0() { return cRevisionRevisionKeyword_1_0; }

		//Tag="tag"
		public EnumLiteralDeclaration getTagEnumLiteralDeclaration_2() { return cTagEnumLiteralDeclaration_2; }

		//"tag"
		public Keyword getTagTagKeyword_2_0() { return cTagTagKeyword_2_0; }

		//Timestamp="timestamp"
		public EnumLiteralDeclaration getTimestampEnumLiteralDeclaration_3() { return cTimestampEnumLiteralDeclaration_3; }

		//"timestamp"
		public Keyword getTimestampTimestampKeyword_3_0() { return cTimestampTimestampKeyword_3_0; }
	}

	public class VisibilityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Visibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPublicPublicKeyword_0_0 = (Keyword)cPublicEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPrivatePrivateKeyword_1_0 = (Keyword)cPrivateEnumLiteralDeclaration_1.eContents().get(0);
		
		////// Aliases that help with unified naming (good for experiments - the indirection can be removed later)
		////BuilderName 	: EscapedQualifiedName ;
		////CapabilityName 	: STRING ; // although nice to just write a.b.c it clashes with a.b.c.builder()
		//enum Visibility returns be::Visibility:
		//	public | private;
		public EnumRule getRule() { return rule; }

		//public | private
		public Alternatives getAlternatives() { return cAlternatives; }

		//public
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration_0() { return cPublicEnumLiteralDeclaration_0; }

		//"public"
		public Keyword getPublicPublicKeyword_0_0() { return cPublicPublicKeyword_0_0; }

		//private
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration_1() { return cPrivateEnumLiteralDeclaration_1; }

		//"private"
		public Keyword getPrivatePrivateKeyword_1_0() { return cPrivatePrivateKeyword_1_0; }
	}

	public class ExecutionModeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ExecutionMode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cParallelEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cParallelParallelKeyword_0_0 = (Keyword)cParallelEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSequentialEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSequentialSequentialKeyword_1_0 = (Keyword)cSequentialEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ExecutionMode returns be::ExecutionMode:
		//	parallel | sequential;
		public EnumRule getRule() { return rule; }

		//parallel | sequential
		public Alternatives getAlternatives() { return cAlternatives; }

		//parallel
		public EnumLiteralDeclaration getParallelEnumLiteralDeclaration_0() { return cParallelEnumLiteralDeclaration_0; }

		//"parallel"
		public Keyword getParallelParallelKeyword_0_0() { return cParallelParallelKeyword_0_0; }

		//sequential
		public EnumLiteralDeclaration getSequentialEnumLiteralDeclaration_1() { return cSequentialEnumLiteralDeclaration_1; }

		//"sequential"
		public Keyword getSequentialSequentialKeyword_1_0() { return cSequentialSequentialKeyword_1_0; }
	}
	
	private BeeModelElements pBeeModel;
	private ImportElements pImport;
	private BuildUnitElements pBuildUnit;
	private ProvidedCapabilityElements pProvidedCapability;
	private AliasedRequiredCapabilityElements pAliasedRequiredCapability;
	private RequiredCapabilityElements pRequiredCapability;
	private RequiredCapability_UnfilteredElements pRequiredCapability_Unfiltered;
	private PropertySet_NamedElements pPropertySet_Named;
	private PropertySetElements pPropertySet;
	private AnnotationSetElements pAnnotationSet;
	private PropertySet_noKwElements pPropertySet_noKw;
	private PropertySetDefaultElements pPropertySetDefault;
	private PropertySetDefault_noKwElements pPropertySetDefault_noKw;
	private PropertyOperationDefaultElements pPropertyOperationDefault;
	private PropertyOperationElements pPropertyOperation;
	private ConditionalPropertyOperationElements pConditionalPropertyOperation;
	private PropertyDefinitionOperationElements pPropertyDefinitionOperation;
	private PropertyValDeclarationElements pPropertyValDeclaration;
	private PropertyVarDeclarationElements pPropertyVarDeclaration;
	private PropertySetOperationElements pPropertySetOperation;
	private PropertySetOperationDefaultElements pPropertySetOperationDefault;
	private SynchronizationElements pSynchronization;
	private BuilderQueryElements pBuilderQuery;
	private PathGroupElements pPathGroup;
	private PathVectorElements pPathVector;
	private BasePathVectorElements pBasePathVector;
	private UnbasedPathVectorElements pUnbasedPathVector;
	private ConditionalPathVectorElements pConditionalPathVector;
	private PathElements pPath;
	private BuilderInputConditionElements pBuilderInputCondition;
	private BuilderInputContextElements pBuilderInputContext;
	private BuilderInputNamedElements pBuilderInputNamed;
	private WithClauseElements pWithClause;
	private BuilderInputUnnamedElements pBuilderInputUnnamed;
	private BuildCallOnUnitRequirementElements pBuildCallOnUnitRequirement;
	private BuildCallOnCapabilityRequirementElements pBuildCallOnCapabilityRequirement;
	private BuildCallOnReferencedRequirementElements pBuildCallOnReferencedRequirement;
	private BuildCallOnSelectedRequirementElements pBuildCallOnSelectedRequirement;
	private BuilderInputGroupElements pBuilderInputGroup;
	private BuilderElements pBuilder;
	private PreConditionElements pPreCondition;
	private PostConditionElements pPostCondition;
	private PostInputConditionElements pPostInputCondition;
	private ParameterListElements pParameterList;
	private ParameterOrClosureElements pParameterOrClosure;
	private ParameterElements pParameter;
	private ClosureParameterElements pClosureParameter;
	private ParameterDeclarationOptTypeElements pParameterDeclarationOptType;
	private ParameterDeclarationElements pParameterDeclaration;
	private ParameterDeclarationUnitElements pParameterDeclarationUnit;
	private ParameterDeclarationNotUnitElements pParameterDeclarationNotUnit;
	private BuilderInputElements pBuilderInput;
	private RepositoryElements pRepository;
	private BranchPointTypeLatestElements unknownRuleBranchPointTypeLatest;
	private BranchPointTypeOtherElements unknownRuleBranchPointTypeOther;
	private MergeStrategyElements pMergeStrategy;
	private TriStateElements pTriState;
	private BranchElements pBranch;
	private BranchPointStringElements pBranchPointString;
	private UnitProviderElements pUnitProvider;
	private RepositoryUnitProviderElements pRepositoryUnitProvider;
	private RepoOptionElements pRepoOption;
	private TopLevelUnitProviderElements pTopLevelUnitProvider;
	private FirstFoundUnitProviderElements pFirstFoundUnitProvider;
	private BestFoundUnitProviderElements pBestFoundUnitProvider;
	private SwitchUnitProviderElements pSwitchUnitProvider;
	private SelectSwitchExpressionElements pSelectSwitchExpression;
	private RepositorySelectCaseElements pRepositorySelectCase;
	private ContainerConfigurationElements pContainerConfiguration;
	private URIElements pURI;
	private Concern_NamedElements pConcern_Named;
	private Concern_AnonymousElements pConcern_Anonymous;
	private FunctionElements pFunction;
	private AssignmentOperatorElements pAssignmentOperator;
	private RelationalOperatorElements pRelationalOperator;
	private TopLevelExpressionElements pTopLevelExpression;
	private ExpressionElements pExpression;
	private AssignmentExpressionElements pAssignmentExpression;
	private VarDeclarationElements pVarDeclaration;
	private ValDeclarationElements pValDeclaration;
	private TypeRefElements pTypeRef;
	private SimpleTypeRefElements pSimpleTypeRef;
	private ClosureTypeRefElements pClosureTypeRef;
	private TypeParamElements pTypeParam;
	private TypeRefParamElements pTypeRefParam;
	private WildcardRefParamElements pWildcardRefParam;
	private CachedExpressionElements pCachedExpression;
	private OrExpressionElements pOrExpression;
	private AndExpressionElements pAndExpression;
	private RelationalExpressionElements pRelationalExpression;
	private InstanceOfExpressionElements pInstanceOfExpression;
	private AdditiveExpressionElements pAdditiveExpression;
	private MultiplicativeExpressionElements pMultiplicativeExpression;
	private SetExpressionElements pSetExpression;
	private UnaryOrInfixExpressionElements pUnaryOrInfixExpression;
	private UnaryExpressionElements pUnaryExpression;
	private PreopExpressionElements pPreopExpression;
	private PostopExpressionElements pPostopExpression;
	private InfixExpressionElements pInfixExpression;
	private CallExpressionElements pCallExpression;
	private PrimaryExpressionElements pPrimaryExpression;
	private WithExpressionElements pWithExpression;
	private WithContextExpressionElements pWithContextExpression;
	private ProceedExpressionElements pProceedExpression;
	private WildcardExpressionElements pWildcardExpression;
	private ThrowExpressionElements pThrowExpression;
	private TryCatchExpressionElements pTryCatchExpression;
	private CatchBlockElements pCatchBlock;
	private SwitchExpressionElements pSwitchExpression;
	private CaseElements pCase;
	private BlockExpressionElements pBlockExpression;
	private IfExpressionElements pIfExpression;
	private ElseIfExpressionElements pElseIfExpression;
	private PropertyValueElements pPropertyValue;
	private VariableValueElements pVariableValue;
	private ID_or_KWElements pID_or_KW;
	private ID_or_KW_NO_UNITElements pID_or_KW_NO_UNIT;
	private KWElements pKW;
	private KW_NO_UNITElements pKW_NO_UNIT;
	private FeatureCallElements pFeatureCall;
	private OperationCallElements pOperationCall;
	private ConstructorCallExpressionElements pConstructorCallExpression;
	private InitializationBlockExpressionElements pInitializationBlockExpression;
	private InitializationExpressionElements pInitializationExpression;
	private FeatureOfThisElements pFeatureOfThis;
	private BuildConcernContextElements pBuildConcernContext;
	private FunctionConcernContextElements pFunctionConcernContext;
	private FunctionNamePredicateElements pFunctionNamePredicate;
	private ParameterPredicateElements pParameterPredicate;
	private ParameterVarargsPredicateElements pParameterVarargsPredicate;
	private TypePredicateOpElements pTypePredicateOp;
	private UnitConcernContextElements pUnitConcernContext;
	private BuilderConcernContextElements pBuilderConcernContext;
	private UnitOrExpressionElements pUnitOrExpression;
	private UnitAndExpressionElements pUnitAndExpression;
	private UnitNotOrPrimaryExpressionElements pUnitNotOrPrimaryExpression;
	private UnitNotExpressionElements pUnitNotExpression;
	private UnitPrimaryExpressionElements pUnitPrimaryExpression;
	private GroupedUnitPrimaryExpressionElements pGroupedUnitPrimaryExpression;
	private RequiresPredicateElements pRequiresPredicate;
	private ImplementsPredcicateElements pImplementsPredcicate;
	private ProvidesPredicateElements pProvidesPredicate;
	private UnitNamePredicateElements pUnitNamePredicate;
	private BuilderNamePredicateElements pBuilderNamePredicate;
	private InputPredicateElements pInputPredicate;
	private SourcePredicateElements pSourcePredicate;
	private OutputPredicateElements pOutputPredicate;
	private BasePathPredicateElements pBasePathPredicate;
	private PathPredicateElements pPathPredicate;
	private CapabilityPredicateElements pCapabilityPredicate;
	private QualifiedNamePredicateElements pQualifiedNamePredicate;
	private NamePredicateElements pNamePredicate;
	private BuilderOrExpressionElements pBuilderOrExpression;
	private BuilderAndExpressionElements pBuilderAndExpression;
	private BuilderNotOrPrimaryExpressionElements pBuilderNotOrPrimaryExpression;
	private BuilderNotExpressionElements pBuilderNotExpression;
	private BuilderPrimaryExpressionElements pBuilderPrimaryExpression;
	private GroupedBuilderPrimaryExpressionElements pGroupedBuilderPrimaryExpression;
	private LiteralElements pLiteral;
	private PatternLiteralElements pPatternLiteral;
	private LiteralListElements pLiteralList;
	private LiteralMapElements pLiteralMap;
	private LiteralFunctionElements pLiteralFunction;
	private ClosureExpressionElements pClosureExpression;
	private OneOrManyExpressionsElements pOneOrManyExpressions;
	private BlockExpressionWithoutBracketsElements pBlockExpressionWithoutBrackets;
	private MapEntryElements pMapEntry;
	private KeyLiteralElements pKeyLiteral;
	private LiteralTypeElements pLiteralType;
	private ValueLiteralElements pValueLiteral;
	private BooleanLiteralElements pBooleanLiteral;
	private IntegerLiteralElements pIntegerLiteral;
	private UnitLiteralElements pUnitLiteral;
	private StringLiteralElements pStringLiteral;
	private RealLiteralElements pRealLiteral;
	private RegexpLiteralElements pRegexpLiteral;
	private SimplePatternLiteralElements pSimplePatternLiteral;
	private NullLiteralElements pNullLiteral;
	private BooleanValueElements pBooleanValue;
	private RealValueElements pRealValue;
	private IntValueElements pIntValue;
	private ParanthesizedExpressionElements pParanthesizedExpression;
	private VersionLiteralElements pVersionLiteral;
	private VersionRangeLiteralElements pVersionRangeLiteral;
	private QIDREFElements pQIDREF;
	private QIDElements pQID;
	private EscapedQualifiedNameElements pEscapedQualifiedName;
	private CapabilityInterfaceElements pCapabilityInterface;
	private VisibilityElements unknownRuleVisibility;
	private ExecutionModeElements unknownRuleExecutionMode;
	private TIMESTAMPElements pTIMESTAMP;
	private SeparatorElements pSeparator;
	private AlfanumSymElements pAlfanumSym;
	private DOCUMENTATIONElements pDOCUMENTATION;
	private TerminalRule tID;
	private TerminalRule tPID;
	private TerminalRule tREGULAR_EXPR;
	private TerminalRule tSIMPLE_PATTERN;
	private TerminalRule tSTRING;
	private TerminalRule tTEXT;
	private TerminalRule tJAVADOC;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tHEX;
	private TerminalRule tINT;
	private REALElements pREAL;
	private TerminalRule tEXT_INT;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public BeeLangGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//// uncomments if things are needed that should not be in backend or build
	//// generate beeLang "http://www.eclipse.org/b3/BeeLang"
	//BeeModel returns build::BeeModel hidden(WS, SL_COMMENT, ML_COMMENT):
	//	{build::BeeModel} imports+=Import* (functions+=Function // * 
	//	// *
	//	// *
	//	// *
	//	//?
	//	// *
	//	//?
	//	| concerns+=Concern_Named | propertySets+=PropertySet_Named | buildUnits+=BuildUnit | providers+=TopLevelUnitProvider |
	//	repositories+=Repository | defaultProperties=PropertySetDefault)*;
	public BeeModelElements getBeeModelAccess() {
		return (pBeeModel != null) ? pBeeModel : (pBeeModel = new BeeModelElements());
	}
	
	public ParserRule getBeeModelRule() {
		return getBeeModelAccess().getRule();
	}

	//Import returns be::IType:
	//	{be::B3JavaImport} reexport?="reexport"? "use" qualifiedName=QID ("as" name=ID)? ";";
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//// Wanted later 
	////Import : (reexport ?='reexport')? 
	////		'import' importer=(JavaImporter | NativeImporter) ("as" name=ID)? ';' 
	////	; 
	////JavaImporter 	: qualifiedName=QID ;
	////NativeImporter 	: uriString = STRING ;
	//BuildUnit returns build::BuildUnit hidden(WS, ML_COMMENT, SL_COMMENT):
	//	{build::BuildUnit} documentation=DOCUMENTATION? executionMode=ExecutionMode? "unit" name=EscapedQualifiedName?
	//	("version" version=VersionLiteral)? ("is" implements+=SimpleTypeRef ("," implements+=SimpleTypeRef)*)? ("{" ("source"
	//	":" sourceLocation=Path ";" //?
	//	//?
	//	//?
	//	//?
	//	//?
	//	//?
	//	// *
	//	// *
	//	// *
	//	// *
	//	// *
	//	//?
	//	| "output" ":" outputLocation=Path ";" | "provides" ":" ("[" providedCapabilities+=ProvidedCapability (","
	//	providedCapabilities+=ProvidedCapability)* "]" | providedCapabilities+=ProvidedCapability) ";" | "requires" ":" ("["
	//	requiredCapabilities+=AliasedRequiredCapability ("," requiredCapabilities+=AliasedRequiredCapability)* "]" |
	//	requiredCapabilities+=AliasedRequiredCapability) ";" | "select-required" ":" ("["
	//	requiredPredicates+=CapabilityPredicate ("," requiredPredicates+=CapabilityPredicate)* "]" |
	//	requiredPredicates+=CapabilityPredicate) ";" | "requires" "env" ":" ("[" metaRequiredCapabilities+=RequiredCapability
	//	("," metaRequiredCapabilities+=RequiredCapability)* "]" | metaRequiredCapabilities+=RequiredCapability) ";" |
	//	(functions+=Builder // *
	//	| functions+=Function) | providers+=TopLevelUnitProvider | concerns+=Concern_Named | propertySets+=PropertySet_Named |
	//	containers+=ContainerConfiguration ";" | synchronizations+=Synchronization | repositories+=Repository |
	//	defaultProperties=PropertySetDefault)* "}" | ";");
	public BuildUnitElements getBuildUnitAccess() {
		return (pBuildUnit != null) ? pBuildUnit : (pBuildUnit = new BuildUnitElements());
	}
	
	public ParserRule getBuildUnitRule() {
		return getBuildUnitAccess().getRule();
	}

	//ProvidedCapability returns build::VersionedCapability:
	//	{build::VersionedCapability} ("unit" | "capability") ("{" (("when" ":" condExpr=Expression ";")? & ("name" ":"
	//	name=STRING ";")? & ("name-space" ":" nameSpace=CapabilityInterface ";")? & ("version" ":" version=VersionLiteral
	//	";")?) "}");
	public ProvidedCapabilityElements getProvidedCapabilityAccess() {
		return (pProvidedCapability != null) ? pProvidedCapability : (pProvidedCapability = new ProvidedCapabilityElements());
	}
	
	public ParserRule getProvidedCapabilityRule() {
		return getProvidedCapabilityAccess().getRule();
	}

	//// Capability required by a unit - always refers to capabilities with at least ns/name
	//// or the keyword "unit" instead of the namespace for buildunits
	//AliasedRequiredCapability returns build::RequiredCapability:
	//	{build::AliasedRequiredCapability} ("unit" | "capability") ("{" (("when" ":" condExpr=Expression ";")? & ("name" ":"
	//	name=STRING ";")? & ("name-space" ":" nameSpace=CapabilityInterface ";")? & (greedy?="greedy" ";")? & ("requires-min"
	//	":" min=IntValue ";")? & ("requires-max" ":" max=IntValue ";")? & ("version" ":" versionRange=VersionRangeLiteral
	//	";")?) "}") ("as" alias=ID)?;
	public AliasedRequiredCapabilityElements getAliasedRequiredCapabilityAccess() {
		return (pAliasedRequiredCapability != null) ? pAliasedRequiredCapability : (pAliasedRequiredCapability = new AliasedRequiredCapabilityElements());
	}
	
	public ParserRule getAliasedRequiredCapabilityRule() {
		return getAliasedRequiredCapabilityAccess().getRule();
	}

	//// Capability required by a unit - always refers to capabilities with at least ns/name
	//// or the keyword "unit" instead of the namespace for buildunits
	//RequiredCapability returns build::RequiredCapability:
	//	{build::RequiredCapability} ("unit" | "capability") ("{" (("when" ":" condExpr=Expression ";")? & ("name" ":"
	//	name=STRING ";")? & ("name-space" ":" nameSpace=CapabilityInterface ";")? & (greedy?="greedy" ";")? & ("requires-min"
	//	":" min=IntValue ";")? & ("requires-max" ":" max=IntValue ";")? & ("version" ":" versionRange=VersionRangeLiteral
	//	";")?) "}");
	public RequiredCapabilityElements getRequiredCapabilityAccess() {
		return (pRequiredCapability != null) ? pRequiredCapability : (pRequiredCapability = new RequiredCapabilityElements());
	}
	
	public ParserRule getRequiredCapabilityRule() {
		return getRequiredCapabilityAccess().getRule();
	}

	//// Capability required by a unit - always refers to capabilities with at least ns/name
	//// (can not refer to "unit")
	//// TODO: Interface should be a proper java interface
	//RequiredCapability_Unfiltered returns build::RequiredCapability:
	//	{build::RequiredCapability} ("unit" | "capability") ("{" ((greedy?="greedy" ";")? & ("name" ":" name=STRING ";")? &
	//	("name-space" ":" nameSpace=CapabilityInterface ";")? & ("requires-min" ":" min=IntValue ";")? & ("requires-max" ":"
	//	max=IntValue ";")? & ("version" ":" versionRange=VersionRangeLiteral ";")?) "}");
	public RequiredCapability_UnfilteredElements getRequiredCapability_UnfilteredAccess() {
		return (pRequiredCapability_Unfiltered != null) ? pRequiredCapability_Unfiltered : (pRequiredCapability_Unfiltered = new RequiredCapability_UnfilteredElements());
	}
	
	public ParserRule getRequiredCapability_UnfilteredRule() {
		return getRequiredCapability_UnfilteredAccess().getRule();
	}

	//// A named sequence of property statements
	//PropertySet_Named returns be::BPropertySet:
	//	{be::BPropertySet} documentation=DOCUMENTATION? "properties" name=ID ("extends" extends=[be::BPropertySet|QIDREF])?
	//	("{" operations+=PropertyOperation* "}" | ":" "load-from" ":" propertiesFile=URI ";");
	public PropertySet_NamedElements getPropertySet_NamedAccess() {
		return (pPropertySet_Named != null) ? pPropertySet_Named : (pPropertySet_Named = new PropertySet_NamedElements());
	}
	
	public ParserRule getPropertySet_NamedRule() {
		return getPropertySet_NamedAccess().getRule();
	}

	//// Sequence of possibly filtered property statements
	//PropertySet returns be::BPropertySet:
	//	{be::BPropertySet} documentation=DOCUMENTATION? "properties" ("extends" extends=[be::BPropertySet|QIDREF])? ("{"
	//	operations+=PropertyOperation* "}" | ":" "load-from" ":" propertiesFile=URI ";");
	public PropertySetElements getPropertySetAccess() {
		return (pPropertySet != null) ? pPropertySet : (pPropertySet = new PropertySetElements());
	}
	
	public ParserRule getPropertySetRule() {
		return getPropertySetAccess().getRule();
	}

	//AnnotationSet returns be::BPropertySet:
	//	PropertySet_noKw;
	public AnnotationSetElements getAnnotationSetAccess() {
		return (pAnnotationSet != null) ? pAnnotationSet : (pAnnotationSet = new AnnotationSetElements());
	}
	
	public ParserRule getAnnotationSetRule() {
		return getAnnotationSetAccess().getRule();
	}

	//// Sequence of possibly filtered property statements (same as property set but withput kw)
	//PropertySet_noKw returns be::BPropertySet:
	//	{be::BPropertySet} ("extends" extends=[be::BPropertySet|QIDREF])? ("{" operations+=PropertyOperation* "}" | ":"
	//	"load-from" ":" propertiesFile=URI ";");
	public PropertySet_noKwElements getPropertySet_noKwAccess() {
		return (pPropertySet_noKw != null) ? pPropertySet_noKw : (pPropertySet_noKw = new PropertySet_noKwElements());
	}
	
	public ParserRule getPropertySet_noKwRule() {
		return getPropertySet_noKwAccess().getRule();
	}

	//// Sequence of possibly filtered property statements (with default semantics)	
	//// - no loading from file = meaningsless as only declared properties can be references,
	//// they would need  to be in a different default set, or declared (in which case defaults are not
	//// really needed
	//// - only extension of other default sets
	//// - default sets can not have conditional declaration of properties
	//// TODO: only allowed to extend another default property set
	//PropertySetDefault returns be::BPropertySet:
	//	{be::BDefaultPropertySet} documentation=DOCUMENTATION? "default-properties" ("extends"
	//	extends=[be::BPropertySet|QIDREF])? "{" operations+=PropertyOperationDefault* "}";
	public PropertySetDefaultElements getPropertySetDefaultAccess() {
		return (pPropertySetDefault != null) ? pPropertySetDefault : (pPropertySetDefault = new PropertySetDefaultElements());
	}
	
	public ParserRule getPropertySetDefaultRule() {
		return getPropertySetDefaultAccess().getRule();
	}

	//// TODO: only allowed to extend another default property set
	//PropertySetDefault_noKw returns be::BPropertySet:
	//	{be::BPropertySet} ("extends" extends=[be::BPropertySet|QIDREF])? "{" operations+=PropertyOperation* "}";
	public PropertySetDefault_noKwElements getPropertySetDefault_noKwAccess() {
		return (pPropertySetDefault_noKw != null) ? pPropertySetDefault_noKw : (pPropertySetDefault_noKw = new PropertySetDefault_noKwElements());
	}
	
	public ParserRule getPropertySetDefault_noKwRule() {
		return getPropertySetDefault_noKwAccess().getRule();
	}

	//PropertyOperationDefault returns be::BPropertyOperation:
	//	PropertyDefinitionOperation | PropertySetOperationDefault;
	public PropertyOperationDefaultElements getPropertyOperationDefaultAccess() {
		return (pPropertyOperationDefault != null) ? pPropertyOperationDefault : (pPropertyOperationDefault = new PropertyOperationDefaultElements());
	}
	
	public ParserRule getPropertyOperationDefaultRule() {
		return getPropertyOperationDefaultAccess().getRule();
	}

	//PropertyOperation returns be::BPropertyOperation:
	//	ConditionalPropertyOperation | PropertyDefinitionOperation | PropertySetOperation;
	public PropertyOperationElements getPropertyOperationAccess() {
		return (pPropertyOperation != null) ? pPropertyOperation : (pPropertyOperation = new PropertyOperationElements());
	}
	
	public ParserRule getPropertyOperationRule() {
		return getPropertyOperationAccess().getRule();
	}

	//ConditionalPropertyOperation returns be::BPropertyOperation:
	//	{be::BConditionalPropertyOperation} "when" "(" condExpr=Expression ")" (body=PropertyDefinitionOperation |
	//	body=PropertySetOperation);
	public ConditionalPropertyOperationElements getConditionalPropertyOperationAccess() {
		return (pConditionalPropertyOperation != null) ? pConditionalPropertyOperation : (pConditionalPropertyOperation = new ConditionalPropertyOperationElements());
	}
	
	public ParserRule getConditionalPropertyOperationRule() {
		return getConditionalPropertyOperationAccess().getRule();
	}

	//PropertyDefinitionOperation returns be::BPropertyOperation:
	//	{be::BPropertyDefinitionOperation} (definition=PropertyValDeclaration | definition=PropertyVarDeclaration);
	public PropertyDefinitionOperationElements getPropertyDefinitionOperationAccess() {
		return (pPropertyDefinitionOperation != null) ? pPropertyDefinitionOperation : (pPropertyDefinitionOperation = new PropertyDefinitionOperationElements());
	}
	
	public ParserRule getPropertyDefinitionOperationRule() {
		return getPropertyDefinitionOperationAccess().getRule();
	}

	//// property values, must be assigned (but can be assigned null).
	//PropertyValDeclaration returns be::BDefProperty:
	//	{be::BDefProperty} final?="final"? type=TypeRef? name=PID "=" valueExpr=Expression ";";
	public PropertyValDeclarationElements getPropertyValDeclarationAccess() {
		return (pPropertyValDeclaration != null) ? pPropertyValDeclaration : (pPropertyValDeclaration = new PropertyValDeclarationElements());
	}
	
	public ParserRule getPropertyValDeclarationRule() {
		return getPropertyValDeclarationAccess().getRule();
	}

	//// property variables, value optionally assigned
	//PropertyVarDeclaration returns be::BDefProperty:
	//	{be::BDefProperty} final?="final"? mutable?="mutable" type=TypeRef? name=PID ("=" valueExpr=Expression)? ";";
	public PropertyVarDeclarationElements getPropertyVarDeclarationAccess() {
		return (pPropertyVarDeclaration != null) ? pPropertyVarDeclaration : (pPropertyVarDeclaration = new PropertyVarDeclarationElements());
	}
	
	public ParserRule getPropertyVarDeclarationRule() {
		return getPropertyVarDeclarationAccess().getRule();
	}

	//PropertySetOperation returns be::BPropertyOperation:
	//	{be::BPropertySetOperation} propertySet=PropertySet_noKw;
	public PropertySetOperationElements getPropertySetOperationAccess() {
		return (pPropertySetOperation != null) ? pPropertySetOperation : (pPropertySetOperation = new PropertySetOperationElements());
	}
	
	public ParserRule getPropertySetOperationRule() {
		return getPropertySetOperationAccess().getRule();
	}

	//PropertySetOperationDefault returns be::BPropertyOperation:
	//	{be::BPropertySetOperation} propertySet=PropertySetDefault_noKw;
	public PropertySetOperationDefaultElements getPropertySetOperationDefaultAccess() {
		return (pPropertySetOperationDefault != null) ? pPropertySetOperationDefault : (pPropertySetOperationDefault = new PropertySetOperationDefaultElements());
	}
	
	public ParserRule getPropertySetOperationDefaultRule() {
		return getPropertySetOperationDefaultAccess().getRule();
	}

	//Synchronization returns build::Synchronization:
	//	{build::Synchronization} "sequential" ":" "[" builderQueries+=BuilderQuery ("," builderQueries+=BuilderQuery)* "]"
	//	";";
	public SynchronizationElements getSynchronizationAccess() {
		return (pSynchronization != null) ? pSynchronization : (pSynchronization = new SynchronizationElements());
	}
	
	public ParserRule getSynchronizationRule() {
		return getSynchronizationAccess().getRule();
	}

	//BuilderQuery returns build::BuilderQuery:
	//	{build::BuilderQuery} ("unit" unitQuery=UnitOrExpression)? ("builder" builderQueries+=BuilderOrExpression) (","
	//	builderQueries+=BuilderOrExpression)*;
	public BuilderQueryElements getBuilderQueryAccess() {
		return (pBuilderQuery != null) ? pBuilderQuery : (pBuilderQuery = new BuilderQueryElements());
	}
	
	public ParserRule getBuilderQueryRule() {
		return getBuilderQueryAccess().getRule();
	}

	//// one path vector, or [ , separated list of path vectors + annotation ]	
	//PathGroup returns build::PathGroup:
	//	{build::PathGroup} ("[" (pathVectors+=ConditionalPathVector ("," pathVectors+=ConditionalPathVector)*)? ("annotations"
	//	annotations=AnnotationSet)? "]") | pathVectors+=ConditionalPathVector;
	public PathGroupElements getPathGroupAccess() {
		return (pPathGroup != null) ? pPathGroup : (pPathGroup = new PathGroupElements());
	}
	
	public ParserRule getPathGroupRule() {
		return getPathGroupAccess().getRule();
	}

	//PathVector returns build::PathVector:
	//	BasePathVector | UnbasedPathVector;
	public PathVectorElements getPathVectorAccess() {
		return (pPathVector != null) ? pPathVector : (pPathVector = new PathVectorElements());
	}
	
	public ParserRule getPathVectorRule() {
		return getPathVectorAccess().getRule();
	}

	//BasePathVector returns build::PathVector:
	//	{build::PathVector} basePath=Path "[" (paths+=Path ("," paths+=Path)*)? //';'
	//	"]";
	public BasePathVectorElements getBasePathVectorAccess() {
		return (pBasePathVector != null) ? pBasePathVector : (pBasePathVector = new BasePathVectorElements());
	}
	
	public ParserRule getBasePathVectorRule() {
		return getBasePathVectorAccess().getRule();
	}

	//UnbasedPathVector returns build::PathVector:
	//	{build::PathVector} paths+= // (',' paths+=Path)* ';'
	//	Path;
	public UnbasedPathVectorElements getUnbasedPathVectorAccess() {
		return (pUnbasedPathVector != null) ? pUnbasedPathVector : (pUnbasedPathVector = new UnbasedPathVectorElements());
	}
	
	public ParserRule getUnbasedPathVectorRule() {
		return getUnbasedPathVectorAccess().getRule();
	}

	//ConditionalPathVector returns build::ConditionalPathVector:
	//	{build::ConditionalPathVector} ("when" "(" condExpr=Expression ")" "[" pathVectors+=PathVector (","
	//	pathVectors+=PathVector)* "]") | ("when" "(" condExpr=Expression ")")? pathVectors+=PathVector;
	public ConditionalPathVectorElements getConditionalPathVectorAccess() {
		return (pConditionalPathVector != null) ? pConditionalPathVector : (pConditionalPathVector = new ConditionalPathVectorElements());
	}
	
	public ParserRule getConditionalPathVectorRule() {
		return getConditionalPathVectorAccess().getRule();
	}

	////// a path as a string (i.e. ID, QID, "..." or /QID/..
	////PathString 
	////	: STRING
	////	| ('/')? QID ('/' QID)* ('/')? 
	////	;
	//// A path can be written without quotes if it consists of safe chars 
	//Path returns be::URI hidden():
	//	STRING | "/"? QID ("/" QID)* "/"?;
	public PathElements getPathAccess() {
		return (pPath != null) ? pPath : (pPath = new PathElements());
	}
	
	public ParserRule getPathRule() {
		return getPathAccess().getRule();
	}

	//BuilderInputCondition returns build::BuilderInput:
	//	{build::BuilderInputCondition} "when" "(" condExpr=Expression ")" builderInput+=BuilderInputUnnamed;
	public BuilderInputConditionElements getBuilderInputConditionAccess() {
		return (pBuilderInputCondition != null) ? pBuilderInputCondition : (pBuilderInputCondition = new BuilderInputConditionElements());
	}
	
	public ParserRule getBuilderInputConditionRule() {
		return getBuilderInputConditionAccess().getRule();
	}

	//BuilderInputContext returns build::BuilderInput:
	//	{build::BuilderInputContextDecorator} withExpr=WithClause ":" builderInput+=BuilderInputUnnamed;
	public BuilderInputContextElements getBuilderInputContextAccess() {
		return (pBuilderInputContext != null) ? pBuilderInputContext : (pBuilderInputContext = new BuilderInputContextElements());
	}
	
	public ParserRule getBuilderInputContextRule() {
		return getBuilderInputContextAccess().getRule();
	}

	//BuilderInputNamed returns build::BuilderInput:
	//	BuilderInputUnnamed ({build::BuilderInputNameDecorator.builderInput+=current} "as" name=ID)?;
	public BuilderInputNamedElements getBuilderInputNamedAccess() {
		return (pBuilderInputNamed != null) ? pBuilderInputNamed : (pBuilderInputNamed = new BuilderInputNamedElements());
	}
	
	public ParserRule getBuilderInputNamedRule() {
		return getBuilderInputNamedAccess().getRule();
	}

	////Prerequisite returns build::Prerequisite : {build::Prerequisite} 
	////	('when' '(' condExpr=Expression ')' )?
	////	(withExpr = WithClause ':')?
	////	buildResult=BuilderInputUnnamed
	////	("as" name=ID)? // ';'
	////	;
	//// Validation checks that there is at least one of references, properties or concern.
	//WithClause returns be::BWithExpression:
	//	{be::BWithExpression} "with" (referencedAdvice+=[be::BAdvice] ("," referencedAdvice+=[be::BAdvice])*)?
	//	(propertySets+=PropertySet | propertySets+=PropertySetDefault | "concern" concerns+=Concern_Anonymous)*;
	public WithClauseElements getWithClauseAccess() {
		return (pWithClause != null) ? pWithClause : (pWithClause = new WithClauseElements());
	}
	
	public ParserRule getWithClauseRule() {
		return getWithClauseAccess().getRule();
	}

	//BuilderInputUnnamed returns build::BuilderInput:
	//	BuilderInputCondition | BuilderInputContext | BuildCallOnUnitRequirement | BuildCallOnCapabilityRequirement |
	//	BuildCallOnReferencedRequirement | BuildCallOnSelectedRequirement | BuilderInputGroup;
	public BuilderInputUnnamedElements getBuilderInputUnnamedAccess() {
		return (pBuilderInputUnnamed != null) ? pBuilderInputUnnamed : (pBuilderInputUnnamed = new BuilderInputUnnamedElements());
	}
	
	public ParserRule getBuilderInputUnnamedRule() {
		return getBuilderInputUnnamedAccess().getRule();
	}

	//// A reference to a builder in the same unit
	//BuildCallOnUnitRequirement returns build::BuilderInput:
	//	{build::BuildCallOnDeclaredRequirement} "unit" "." builderName=EscapedQualifiedName ("(" parameters=ParameterList?
	//	")");
	public BuildCallOnUnitRequirementElements getBuildCallOnUnitRequirementAccess() {
		return (pBuildCallOnUnitRequirement != null) ? pBuildCallOnUnitRequirement : (pBuildCallOnUnitRequirement = new BuildCallOnUnitRequirementElements());
	}
	
	public ParserRule getBuildCallOnUnitRequirementRule() {
		return getBuildCallOnUnitRequirementAccess().getRule();
	}

	//// A reference to a builder in a unit providing a capability (or if build name is omitted to the
	//// builder that provides the capability in that unit).
	//BuildCallOnCapabilityRequirement returns build::BuilderInput:
	//	{build::BuildCallOnDeclaredRequirement} requiredCapabilityDeclaration=RequiredCapability_Unfiltered ("."
	//	builderName=EscapedQualifiedName)? ("(" parameters=ParameterList? ")");
	public BuildCallOnCapabilityRequirementElements getBuildCallOnCapabilityRequirementAccess() {
		return (pBuildCallOnCapabilityRequirement != null) ? pBuildCallOnCapabilityRequirement : (pBuildCallOnCapabilityRequirement = new BuildCallOnCapabilityRequirementElements());
	}
	
	public ParserRule getBuildCallOnCapabilityRequirementRule() {
		return getBuildCallOnCapabilityRequirementAccess().getRule();
	}

	//// A reference to a builder in a unit providing a referenced capability (or if build name is omitted to the
	//// builder that provides the capability in that unit).
	//// TODO: validate that a referenced capability of unit has builderName set
	//BuildCallOnReferencedRequirement returns build::BuilderInput:
	//	{build::BuildCallOnReferencedRequirement} requiredCapabilityReference=[build::AliasedRequiredCapability] ("."
	//	builderName=EscapedQualifiedName)? ("(" parameters=ParameterList? ")");
	public BuildCallOnReferencedRequirementElements getBuildCallOnReferencedRequirementAccess() {
		return (pBuildCallOnReferencedRequirement != null) ? pBuildCallOnReferencedRequirement : (pBuildCallOnReferencedRequirement = new BuildCallOnReferencedRequirementElements());
	}
	
	public ParserRule getBuildCallOnReferencedRequirementRule() {
		return getBuildCallOnReferencedRequirementAccess().getRule();
	}

	//BuildCallOnSelectedRequirement returns build::BuilderInput:
	//	{build::BuildCallOnSelectedRequirements} "select-required" requiredPredicate=CapabilityPredicate ("."
	//	builderName=EscapedQualifiedName)? ("(" parameters=ParameterList? ")");
	public BuildCallOnSelectedRequirementElements getBuildCallOnSelectedRequirementAccess() {
		return (pBuildCallOnSelectedRequirement != null) ? pBuildCallOnSelectedRequirement : (pBuildCallOnSelectedRequirement = new BuildCallOnSelectedRequirementElements());
	}
	
	public ParserRule getBuildCallOnSelectedRequirementRule() {
		return getBuildCallOnSelectedRequirementAccess().getRule();
	}

	//BuilderInputGroup returns build::BuilderInput:
	//	{build::BuilderInputGroup} "[" (builderInput+=BuilderInput ("," builderInput+=BuilderInput)*)? "]";
	public BuilderInputGroupElements getBuilderInputGroupAccess() {
		return (pBuilderInputGroup != null) ? pBuilderInputGroup : (pBuilderInputGroup = new BuilderInputGroupElements());
	}
	
	public ParserRule getBuilderInputGroupRule() {
		return getBuilderInputGroupAccess().getRule();
	}

	//Builder returns build::Builder:
	//	{build::Builder} documentation=DOCUMENTATION? visibility=Visibility? executionMode=ExecutionMode? final?="final"?
	//	"builder" name=EscapedQualifiedName ("(" ((explicitUnitType=ParameterDeclarationUnit |
	//	parameters+=ParameterDeclarationNotUnit) ("," parameters+=ParameterDeclarationNotUnit)* ("," varArgs?="..."
	//	parameters+=ParameterDeclarationNotUnit)? // first parameter is always "unit", but is implied to "this unit" if builder is specified in
	//	// a build unit
	//	// TODO: validation and relevant content proposal
	//	| varArgs?="..." parameters+=ParameterDeclarationNotUnit)? ")")? //	(guard = GuardExpression)?
	//	precondExpr=PreCondition? postcondExpr=PostCondition? "{" (("provides" ":" ("["
	//	providedCapabilities+=ProvidedCapability ("," providedCapabilities+=ProvidedCapability)* "]" |
	//	providedCapabilities+=ProvidedCapability) ";")? & defaultProperties=PropertySetDefault?)? ("input" ":"
	//	input=BuilderInputGroup ";" postinputcondExpr=PostInputCondition?)? ("source" ":" source=PathGroup ";")? ("output" ":"
	//	output=PathGroup ";")? ("result" ":" funcExpr=Expression ";")? "}";
	public BuilderElements getBuilderAccess() {
		return (pBuilder != null) ? pBuilder : (pBuilder = new BuilderElements());
	}
	
	public ParserRule getBuilderRule() {
		return getBuilderAccess().getRule();
	}

	//PreCondition returns be::BExpression:
	//	"@precondition" ":" Expression ";";
	public PreConditionElements getPreConditionAccess() {
		return (pPreCondition != null) ? pPreCondition : (pPreCondition = new PreConditionElements());
	}
	
	public ParserRule getPreConditionRule() {
		return getPreConditionAccess().getRule();
	}

	//PostCondition returns be::BExpression:
	//	"@postcondition" ":" Expression ";";
	public PostConditionElements getPostConditionAccess() {
		return (pPostCondition != null) ? pPostCondition : (pPostCondition = new PostConditionElements());
	}
	
	public ParserRule getPostConditionRule() {
		return getPostConditionAccess().getRule();
	}

	//PostInputCondition returns be::BExpression:
	//	"@postinputcondition" ":" Expression ";";
	public PostInputConditionElements getPostInputConditionAccess() {
		return (pPostInputCondition != null) ? pPostInputCondition : (pPostInputCondition = new PostInputConditionElements());
	}
	
	public ParserRule getPostInputConditionRule() {
		return getPostInputConditionAccess().getRule();
	}

	//ParameterList returns be::BParameterList:
	//	{be::BParameterList} parameters+=ParameterOrClosure ("," parameters+=ParameterOrClosure)*;
	public ParameterListElements getParameterListAccess() {
		return (pParameterList != null) ? pParameterList : (pParameterList = new ParameterListElements());
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}

	//ParameterOrClosure returns be::BParameter:
	//	ClosureParameter | Parameter;
	public ParameterOrClosureElements getParameterOrClosureAccess() {
		return (pParameterOrClosure != null) ? pParameterOrClosure : (pParameterOrClosure = new ParameterOrClosureElements());
	}
	
	public ParserRule getParameterOrClosureRule() {
		return getParameterOrClosureAccess().getRule();
	}

	//Parameter returns be::BParameter:
	//	{be::BParameter} expr=Expression;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//ClosureParameter returns be::BParameter:
	//	{be::BParameter} expr=ClosureExpression;
	public ClosureParameterElements getClosureParameterAccess() {
		return (pClosureParameter != null) ? pClosureParameter : (pClosureParameter = new ClosureParameterElements());
	}
	
	public ParserRule getClosureParameterRule() {
		return getClosureParameterAccess().getRule();
	}

	//ParameterDeclarationOptType returns be::BParameterDeclaration:
	//	{be::BParameterDeclaration} (type=TypeRef? name=ID_or_KW);
	public ParameterDeclarationOptTypeElements getParameterDeclarationOptTypeAccess() {
		return (pParameterDeclarationOptType != null) ? pParameterDeclarationOptType : (pParameterDeclarationOptType = new ParameterDeclarationOptTypeElements());
	}
	
	public ParserRule getParameterDeclarationOptTypeRule() {
		return getParameterDeclarationOptTypeAccess().getRule();
	}

	//ParameterDeclaration returns be::BParameterDeclaration:
	//	{be::BParameterDeclaration} type=TypeRef name=ID_or_KW;
	public ParameterDeclarationElements getParameterDeclarationAccess() {
		return (pParameterDeclaration != null) ? pParameterDeclaration : (pParameterDeclaration = new ParameterDeclarationElements());
	}
	
	public ParserRule getParameterDeclarationRule() {
		return getParameterDeclarationAccess().getRule();
	}

	//ParameterDeclarationUnit returns be::BParameterDeclaration:
	//	{be::BParameterDeclaration} type=TypeRef name="unit";
	public ParameterDeclarationUnitElements getParameterDeclarationUnitAccess() {
		return (pParameterDeclarationUnit != null) ? pParameterDeclarationUnit : (pParameterDeclarationUnit = new ParameterDeclarationUnitElements());
	}
	
	public ParserRule getParameterDeclarationUnitRule() {
		return getParameterDeclarationUnitAccess().getRule();
	}

	//// Used in Builder where the first paramter can be called unit, but not others	
	//ParameterDeclarationNotUnit returns be::BParameterDeclaration:
	//	{be::BParameterDeclaration} type=TypeRef name=ID_or_KW_NO_UNIT;
	public ParameterDeclarationNotUnitElements getParameterDeclarationNotUnitAccess() {
		return (pParameterDeclarationNotUnit != null) ? pParameterDeclarationNotUnit : (pParameterDeclarationNotUnit = new ParameterDeclarationNotUnitElements());
	}
	
	public ParserRule getParameterDeclarationNotUnitRule() {
		return getParameterDeclarationNotUnitAccess().getRule();
	}

	//BuilderInput returns build::BuilderInput:
	//	BuilderInputNamed;
	public BuilderInputElements getBuilderInputAccess() {
		return (pBuilderInput != null) ? pBuilderInput : (pBuilderInput = new BuilderInputElements());
	}
	
	public ParserRule getBuilderInputRule() {
		return getBuilderInputAccess().getRule();
	}

	////	prerequisites += Prerequisite (',' prerequisites += Prerequisite)*
	////	;
	//Repository returns build::Repository:
	//	{build::Repository} documentation=DOCUMENTATION? "repository" handlerType=ID name=ID (":" "connection" ":"
	//	address=Expression ";" | "{" ("connection" ":" address=Expression ";")? options+=RepoOption* ("branches" ":" "["
	//	branches+=Branch ("," branches+=Branch)* "]" ";")? "}");
	public RepositoryElements getRepositoryAccess() {
		return (pRepository != null) ? pRepository : (pRepository = new RepositoryElements());
	}
	
	public ParserRule getRepositoryRule() {
		return getRepositoryAccess().getRule();
	}

	//enum BranchPointTypeLatest returns build::BranchPointType:
	//	Latest="latest";
	public BranchPointTypeLatestElements getBranchPointTypeLatestAccess() {
		return (unknownRuleBranchPointTypeLatest != null) ? unknownRuleBranchPointTypeLatest : (unknownRuleBranchPointTypeLatest = new BranchPointTypeLatestElements());
	}
	
	public EnumRule getBranchPointTypeLatestRule() {
		return getBranchPointTypeLatestAccess().getRule();
	}

	//enum BranchPointTypeOther returns build::BranchPointType:
	//	Latest="latest" | Revision="revision" | Tag="tag" | Timestamp="timestamp";
	public BranchPointTypeOtherElements getBranchPointTypeOtherAccess() {
		return (unknownRuleBranchPointTypeOther != null) ? unknownRuleBranchPointTypeOther : (unknownRuleBranchPointTypeOther = new BranchPointTypeOtherElements());
	}
	
	public EnumRule getBranchPointTypeOtherRule() {
		return getBranchPointTypeOtherAccess().getRule();
	}

	////enum BranchPointTypeTs returns build::BranchPointType : Timestamp="timestamp" ;
	////enum
	//MergeStrategy returns build::MergeConflictStrategy:
	//	ID_or_KW;
	public MergeStrategyElements getMergeStrategyAccess() {
		return (pMergeStrategy != null) ? pMergeStrategy : (pMergeStrategy = new MergeStrategyElements());
	}
	
	public ParserRule getMergeStrategyRule() {
		return getMergeStrategyAccess().getRule();
	}

	//TriState returns build::TriState:
	//	"true" | "false" | "default";
	public TriStateElements getTriStateAccess() {
		return (pTriState != null) ? pTriState : (pTriState = new TriStateElements());
	}
	
	public ParserRule getTriStateRule() {
		return getTriStateAccess().getRule();
	}

	////	  FailModified = "fail-modified"
	////	| KeepModified = "keep-modified"
	////	| Merge = "merge-modified"
	////	| NoUpdate = "no-update"
	////	| ReplaceModified = "replace-modified"
	////	| BranchPointDefault = "default"
	////;
	////		  | (branchPointType = BranchPointTypeTs branchPointTs = TIMESTAMP ';') 
	//Branch returns build::Branch:
	//	{build::Branch} documentation=DOCUMENTATION? "branch" name=EscapedQualifiedName "{"
	//	((branchPointType=BranchPointTypeLatest ";" | branchPointType=BranchPointTypeOther ":" branchPoint=Expression ";")? &
	//	("policy" ":" "{" (("checkout-content" ":" checkout=TriState ";")? (("accept-dirty" ":" acceptDirty=TriState ";")? &
	//	("update-content" ":" update=TriState ";")? & ("on-merge-conflict" ":" mergeStrategy=MergeStrategy ";")? |
	//	"replace-content" ":" replace=TriState ";"))? "}" ";")? & ("exclude" ":" "[" exclude+=NamePredicate (","
	//	exclude+=NamePredicate)* "]" ";")? & ("include" ":" "[" include+=NamePredicate ("," include+=NamePredicate)* "]"
	//	";")?) "}";
	public BranchElements getBranchAccess() {
		return (pBranch != null) ? pBranch : (pBranch = new BranchElements());
	}
	
	public ParserRule getBranchRule() {
		return getBranchAccess().getRule();
	}

	//// Branches and revisions have string form (they can be very long), and can be a string or INT/HEX
	//// The physical type of a revision is determined by a repository type.
	//BranchPointString returns ecore::EString:
	//	EscapedQualifiedName | INT | HEX;
	public BranchPointStringElements getBranchPointStringAccess() {
		return (pBranchPointString != null) ? pBranchPointString : (pBranchPointString = new BranchPointStringElements());
	}
	
	public ParserRule getBranchPointStringRule() {
		return getBranchPointStringAccess().getRule();
	}

	//UnitProvider returns build::UnitProvider:
	//	FirstFoundUnitProvider | BestFoundUnitProvider | SwitchUnitProvider | RepositoryUnitProvider;
	public UnitProviderElements getUnitProviderAccess() {
		return (pUnitProvider != null) ? pUnitProvider : (pUnitProvider = new UnitProviderElements());
	}
	
	public ParserRule getUnitProviderRule() {
		return getUnitProviderAccess().getRule();
	}

	//RepositoryUnitProvider returns build::RepositoryUnitProvider:
	//	{build::RepositoryUnitProvider} documentation=DOCUMENTATION? "repository" repository=[build::Repository] ("{"
	//	options+=RepoOption* "}")?;
	public RepositoryUnitProviderElements getRepositoryUnitProviderAccess() {
		return (pRepositoryUnitProvider != null) ? pRepositoryUnitProvider : (pRepositoryUnitProvider = new RepositoryUnitProviderElements());
	}
	
	public ParserRule getRepositoryUnitProviderRule() {
		return getRepositoryUnitProviderAccess().getRule();
	}

	//RepoOption returns build::RepoOption:
	//	{build::RepoOption} name=ID ":" expr=Expression ";";
	public RepoOptionElements getRepoOptionAccess() {
		return (pRepoOption != null) ? pRepoOption : (pRepoOption = new RepoOptionElements());
	}
	
	public ParserRule getRepoOptionRule() {
		return getRepoOptionAccess().getRule();
	}

	//TopLevelUnitProvider returns build::FirstFoundUnitProvider:
	//	{build::FirstFoundUnitProvider} documentation=DOCUMENTATION? "resolution" ":" "[" providers+=UnitProvider (","
	//	providers+=UnitProvider)* "]" ";";
	public TopLevelUnitProviderElements getTopLevelUnitProviderAccess() {
		return (pTopLevelUnitProvider != null) ? pTopLevelUnitProvider : (pTopLevelUnitProvider = new TopLevelUnitProviderElements());
	}
	
	public ParserRule getTopLevelUnitProviderRule() {
		return getTopLevelUnitProviderAccess().getRule();
	}

	//FirstFoundUnitProvider returns build::FirstFoundUnitProvider:
	//	{build::FirstFoundUnitProvider} documentation=DOCUMENTATION? "select-first" ":" "[" providers+=UnitProvider (","
	//	providers+=UnitProvider)* "]";
	public FirstFoundUnitProviderElements getFirstFoundUnitProviderAccess() {
		return (pFirstFoundUnitProvider != null) ? pFirstFoundUnitProvider : (pFirstFoundUnitProvider = new FirstFoundUnitProviderElements());
	}
	
	public ParserRule getFirstFoundUnitProviderRule() {
		return getFirstFoundUnitProviderAccess().getRule();
	}

	//BestFoundUnitProvider returns build::BestFoundUnitProvider:
	//	{build::BestFoundUnitProvider} documentation=DOCUMENTATION? "select-best" ":" "[" providers+=UnitProvider (","
	//	providers+=UnitProvider)* "]";
	public BestFoundUnitProviderElements getBestFoundUnitProviderAccess() {
		return (pBestFoundUnitProvider != null) ? pBestFoundUnitProvider : (pBestFoundUnitProvider = new BestFoundUnitProviderElements());
	}
	
	public ParserRule getBestFoundUnitProviderRule() {
		return getBestFoundUnitProviderAccess().getRule();
	}

	//SwitchUnitProvider returns build::SwitchUnitProvider:
	//	{build::SwitchUnitProvider} documentation=DOCUMENTATION? "select-switch" repoSwitch=SelectSwitchExpression;
	public SwitchUnitProviderElements getSwitchUnitProviderAccess() {
		return (pSwitchUnitProvider != null) ? pSwitchUnitProvider : (pSwitchUnitProvider = new SwitchUnitProviderElements());
	}
	
	public ParserRule getSwitchUnitProviderRule() {
		return getSwitchUnitProviderAccess().getRule();
	}

	//SelectSwitchExpression returns be::BSwitchExpression:
	//	{be::BSwitchExpression} switchExpression=Expression? caseList+=RepositorySelectCase+ "endswitch";
	public SelectSwitchExpressionElements getSelectSwitchExpressionAccess() {
		return (pSelectSwitchExpression != null) ? pSelectSwitchExpression : (pSelectSwitchExpression = new SelectSwitchExpressionElements());
	}
	
	public ParserRule getSelectSwitchExpressionRule() {
		return getSelectSwitchExpressionAccess().getRule();
	}

	//RepositorySelectCase returns be::BCase:
	//	{be::BCase} ("case" conditionExpr=Expression | "default") ":" thenExpr=UnitProvider;
	public RepositorySelectCaseElements getRepositorySelectCaseAccess() {
		return (pRepositorySelectCase != null) ? pRepositorySelectCase : (pRepositorySelectCase = new RepositorySelectCaseElements());
	}
	
	public ParserRule getRepositorySelectCaseRule() {
		return getRepositorySelectCaseAccess().getRule();
	}

	//ContainerConfiguration returns build::ContainerConfiguration:
	//	{build::ContainerConfiguration} documentation=DOCUMENTATION? "container" agentType=TypeRef name=ID
	//	(contextBlock=BlockExpression | ";");
	public ContainerConfigurationElements getContainerConfigurationAccess() {
		return (pContainerConfiguration != null) ? pContainerConfiguration : (pContainerConfiguration = new ContainerConfigurationElements());
	}
	
	public ParserRule getContainerConfigurationRule() {
		return getContainerConfigurationAccess().getRule();
	}

	//URI returns be::URI:
	//	STRING;
	public URIElements getURIAccess() {
		return (pURI != null) ? pURI : (pURI = new URIElements());
	}
	
	public ParserRule getURIRule() {
		return getURIAccess().getRule();
	}

	//Concern_Named returns be::BConcern:
	//	{be::BConcern} documentation=DOCUMENTATION? "concern" name=ID ("extends" superConcerns+=[be::BConcern] (","
	//	superConcerns+=[be::BConcern])*)? "{" (propertySets+=PropertySet | propertySets+=PropertySetDefault |
	//	functions+=Function | functions+=Builder | contexts+=BuildConcernContext)* "}";
	public Concern_NamedElements getConcern_NamedAccess() {
		return (pConcern_Named != null) ? pConcern_Named : (pConcern_Named = new Concern_NamedElements());
	}
	
	public ParserRule getConcern_NamedRule() {
		return getConcern_NamedAccess().getRule();
	}

	//Concern_Anonymous returns be::BConcern:
	//	{be::BConcern} ("extends" superConcerns+=[be::BConcern] ("," superConcerns+=[be::BConcern])*)? "{"
	//	(propertySets+=PropertySet | propertySets+=PropertySetDefault | functions+=Function | functions+=Builder |
	//	contexts+=BuildConcernContext)* "}";
	public Concern_AnonymousElements getConcern_AnonymousAccess() {
		return (pConcern_Anonymous != null) ? pConcern_Anonymous : (pConcern_Anonymous = new Concern_AnonymousElements());
	}
	
	public ParserRule getConcern_AnonymousRule() {
		return getConcern_AnonymousAccess().getRule();
	}

	//Function returns be::B3Function:
	//	{be::B3Function} documentation=DOCUMENTATION? visibility=Visibility? //    (executionMode = ExecutionMode)?	   	
	//	final?="final"? "function" returnType=TypeRef? name=ID //   	( '<' typeParams+= TypeParamDeclaration (',' typeParams+=TypeParamDeclaration)* '>')? // TODO: add support for this in the model
	//	("(" (parameters+=ParameterDeclaration ("," parameters+=ParameterDeclaration)* ("," varArgs?="..."
	//	parameters+=ParameterDeclaration)? | varArgs?="..." parameters+=ParameterDeclaration)? ")")? (":" funcExpr=Expression
	//	";" //   	(guard = GuardExpression)?
	//	| funcExpr=BlockExpression);
	public FunctionElements getFunctionAccess() {
		return (pFunction != null) ? pFunction : (pFunction = new FunctionElements());
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//// TODO: redesign into "static calculation"
	////GuardExpression returns be::BGuardExpression : {be::BGuardExpression} 
	////	"@callguard" ':' guardExpr = Expression ';' ;
	////TypeParamDeclaration 
	////	: ID ( ("extends" type+= TypeRef ('&' type+=TypeRef)*) | ("super" superType=TypeRef))?
	////	;
	/// * EXPRESSIONS * / // bitwise assignment deprecated, but available in backend if backend is used for some other grammar		
	////	| "&=" 	| "^=" | "|=" | "<<=" | ">>=" | ">>>=" 
	//AssignmentOperator returns ecore::EString:
	//	"=" | "+=" | "-=" | "*=" | "/=" | "%=";
	public AssignmentOperatorElements getAssignmentOperatorAccess() {
		return (pAssignmentOperator != null) ? pAssignmentOperator : (pAssignmentOperator = new AssignmentOperatorElements());
	}
	
	public ParserRule getAssignmentOperatorRule() {
		return getAssignmentOperatorAccess().getRule();
	}

	//RelationalOperator returns ecore::EString:
	//	"~=" | "==" | "===" | "!=" | "!==" | ">=" | "<=" | ">" | "<";
	public RelationalOperatorElements getRelationalOperatorAccess() {
		return (pRelationalOperator != null) ? pRelationalOperator : (pRelationalOperator = new RelationalOperatorElements());
	}
	
	public ParserRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}

	//// All expressions, including variable and value definitions. Note: order of rules is significant.
	//TopLevelExpression returns be::BExpression:
	//	VarDeclaration | ValDeclaration | AssignmentExpression;
	public TopLevelExpressionElements getTopLevelExpressionAccess() {
		return (pTopLevelExpression != null) ? pTopLevelExpression : (pTopLevelExpression = new TopLevelExpressionElements());
	}
	
	public ParserRule getTopLevelExpressionRule() {
		return getTopLevelExpressionAccess().getRule();
	}

	//// All expressions except variable and value definitions	 
	//Expression returns be::BExpression:
	//	AssignmentExpression;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//AssignmentExpression returns be::BExpression:
	//	CachedExpression ({be::BAssignmentExpression.leftExpr=current} functionName=AssignmentOperator
	//	rightExpr=AssignmentExpression)?;
	public AssignmentExpressionElements getAssignmentExpressionAccess() {
		return (pAssignmentExpression != null) ? pAssignmentExpression : (pAssignmentExpression = new AssignmentExpressionElements());
	}
	
	public ParserRule getAssignmentExpressionRule() {
		return getAssignmentExpressionAccess().getRule();
	}

	//VarDeclaration returns be::BExpression:
	//	{be::BDefValue} final?="final"? (("var" | type=TypeRef) name=ID) ("=" valueExpr=Expression)?;
	public VarDeclarationElements getVarDeclarationAccess() {
		return (pVarDeclaration != null) ? pVarDeclaration : (pVarDeclaration = new VarDeclarationElements());
	}
	
	public ParserRule getVarDeclarationRule() {
		return getVarDeclarationAccess().getRule();
	}

	//ValDeclaration returns be::BExpression:
	//	{be::BDefValue} final?="final"? immutable?="val" type=TypeRef? name=ID "=" valueExpr=Expression;
	public ValDeclarationElements getValDeclarationAccess() {
		return (pValDeclaration != null) ? pValDeclaration : (pValDeclaration = new ValDeclarationElements());
	}
	
	public ParserRule getValDeclarationRule() {
		return getValDeclarationAccess().getRule();
	}

	//// TODO: typereference is simplified to only the name of a java type - for model imports
	//// the model is imported with name == namespace, and types in the model are referenced after
	//// '::' e.g. "resource:a resouceURi.ecore" as mymodel, and a classifier in this model is
	//// referenced as mymodel::mytype
	//// There is more work required to link a reference to such a type and it is therefore deferred
	//// until we are up on Xtext 0.8 with better scoping and linking.
	//// For now, this is just proof of concept.
	//// 
	//TypeRef returns be::IType:
	//	ClosureTypeRef | SimpleTypeRef;
	public TypeRefElements getTypeRefAccess() {
		return (pTypeRef != null) ? pTypeRef : (pTypeRef = new TypeRefElements());
	}
	
	public ParserRule getTypeRefRule() {
		return getTypeRefAccess().getRule();
	}

	////		('<' actualArgumentsList+=TypeParam (',' actualArgumentsList+=TypeParam)* '>' )? // TODO: Support wildcard as well
	//SimpleTypeRef returns be::IType:
	//	{be::B3ParameterizedType} rawType=[be::B3JavaImport] ("<" actualArgumentsList+=[be::B3JavaImport] (","
	//	actualArgumentsList+=[be::B3JavaImport])* ">")?;
	public SimpleTypeRefElements getSimpleTypeRefAccess() {
		return (pSimpleTypeRef != null) ? pSimpleTypeRef : (pSimpleTypeRef = new SimpleTypeRefElements());
	}
	
	public ParserRule getSimpleTypeRefRule() {
		return getSimpleTypeRefAccess().getRule();
	}

	//// ClosureTypeRef declares parameters and return type	
	//// TODO: use TypeRef instead of direct reference to imported class
	//ClosureTypeRef returns be::IType:
	//	{be::B3FunctionType} ("(" (parameterTypes+=[be::B3JavaImport] ("," parameterTypes+=[be::B3JavaImport])* (","
	//	varArgs?="..." parameterTypes+=[be::B3JavaImport])? | varArgs?="..." parameterTypes+=[be::B3JavaImport])? ")" "=>"
	//	returnType=[be::B3JavaImport]);
	public ClosureTypeRefElements getClosureTypeRefAccess() {
		return (pClosureTypeRef != null) ? pClosureTypeRef : (pClosureTypeRef = new ClosureTypeRefElements());
	}
	
	public ParserRule getClosureTypeRefRule() {
		return getClosureTypeRefAccess().getRule();
	}

	//// TODO: TypeParam's and Wildcard refs currently unused. Support should be added
	////	
	//TypeParam returns be::IType:
	//	TypeRefParam | WildcardRefParam;
	public TypeParamElements getTypeParamAccess() {
		return (pTypeParam != null) ? pTypeParam : (pTypeParam = new TypeParamElements());
	}
	
	public ParserRule getTypeParamRule() {
		return getTypeParamAccess().getRule();
	}

	//TypeRefParam returns be::IType:
	//	TypeRef;
	public TypeRefParamElements getTypeRefParamAccess() {
		return (pTypeRefParam != null) ? pTypeRefParam : (pTypeRefParam = new TypeRefParamElements());
	}
	
	public ParserRule getTypeRefParamRule() {
		return getTypeRefParamAccess().getRule();
	}

	//WildcardRefParam returns be::IType:
	//	{be::B3WildcardType} "?" ("extends" upperBoundsList+=TypeRef ("," upperBoundsList+=TypeRef)* | "super"
	//	lowerBoundsList+=TypeRef)?;
	public WildcardRefParamElements getWildcardRefParamAccess() {
		return (pWildcardRefParam != null) ? pWildcardRefParam : (pWildcardRefParam = new WildcardRefParamElements());
	}
	
	public ParserRule getWildcardRefParamRule() {
		return getWildcardRefParamAccess().getRule();
	}

	//CachedExpression returns be::BExpression:
	//	{be::BCachedExpression} "cached" expr=OrExpression | OrExpression;
	public CachedExpressionElements getCachedExpressionAccess() {
		return (pCachedExpression != null) ? pCachedExpression : (pCachedExpression = new CachedExpressionElements());
	}
	
	public ParserRule getCachedExpressionRule() {
		return getCachedExpressionAccess().getRule();
	}

	//OrExpression returns be::BExpression:
	//	AndExpression ({be::BOrExpression.leftExpr=current} "||" rightExpr=AndExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return (pOrExpression != null) ? pOrExpression : (pOrExpression = new OrExpressionElements());
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//AndExpression returns be::BExpression:
	//	RelationalExpression ({be::BAndExpression.leftExpr=current} "&&" rightExpr=RelationalExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return (pAndExpression != null) ? pAndExpression : (pAndExpression = new AndExpressionElements());
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//// DEPRECATED - bitwise operators available as system functions (still available in backend if someone wants to
	//// use the backend for some other language with a different grammar).
	//// BitwiseExpression returns be::BExpression :
	//// RelationalExpression ({be::BBinaryOpExpression.leftExpr=current} functionName=("&" | "^" | "|") rightExpr=RelationalExpression)*;
	//RelationalExpression returns be::BExpression:
	//	InstanceOfExpression ({be::BBinaryOpExpression.leftExpr=current} functionName=RelationalOperator
	//	rightExpr=InstanceOfExpression)*;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return (pRelationalExpression != null) ? pRelationalExpression : (pRelationalExpression = new RelationalExpressionElements());
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//InstanceOfExpression returns be::BExpression:
	//	AdditiveExpression ({be::BBinaryOpExpression.leftExpr=current} functionName="instanceof" rightExpr=LiteralType)*;
	public InstanceOfExpressionElements getInstanceOfExpressionAccess() {
		return (pInstanceOfExpression != null) ? pInstanceOfExpression : (pInstanceOfExpression = new InstanceOfExpressionElements());
	}
	
	public ParserRule getInstanceOfExpressionRule() {
		return getInstanceOfExpressionAccess().getRule();
	}

	//// DEPRECATED - bitwise operators available as system functions (still available in backend if someone wants to
	//// use the backend for some other language with a different grammar).
	//// ShiftExpression returns be::BExpression:
	//// AdditiveExpression ({be::BBinaryOpExpression.leftExpr=current} functionName=("<<" | ">>" | ">>>") rightExpr=AdditiveExpression)*;
	//AdditiveExpression returns be::BExpression:
	//	MultiplicativeExpression ({be::BBinaryOpExpression.leftExpr=current} functionName=("+" | "-")
	//	rightExpr=MultiplicativeExpression)*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return (pAdditiveExpression != null) ? pAdditiveExpression : (pAdditiveExpression = new AdditiveExpressionElements());
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//MultiplicativeExpression returns be::BExpression:
	//	SetExpression ({be::BBinaryOpExpression.leftExpr=current} functionName=("*" | "/" | "%") rightExpr=SetExpression)*;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return (pMultiplicativeExpression != null) ? pMultiplicativeExpression : (pMultiplicativeExpression = new MultiplicativeExpressionElements());
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//SetExpression returns be::BExpression:
	//	UnaryOrInfixExpression ({be::BBinaryOpExpression.leftExpr=current} functionName=".."
	//	rightExpr=UnaryOrInfixExpression)*;
	public SetExpressionElements getSetExpressionAccess() {
		return (pSetExpression != null) ? pSetExpression : (pSetExpression = new SetExpressionElements());
	}
	
	public ParserRule getSetExpressionRule() {
		return getSetExpressionAccess().getRule();
	}

	//UnaryOrInfixExpression returns be::BExpression:
	//	PostopExpression | UnaryExpression | PreopExpression;
	public UnaryOrInfixExpressionElements getUnaryOrInfixExpressionAccess() {
		return (pUnaryOrInfixExpression != null) ? pUnaryOrInfixExpression : (pUnaryOrInfixExpression = new UnaryOrInfixExpressionElements());
	}
	
	public ParserRule getUnaryOrInfixExpressionRule() {
		return getUnaryOrInfixExpressionAccess().getRule();
	}

	//// DEPRECATED - bitwise operators available as system functions (still available in backend if someone wants to
	//// use the backend for some other language with a different grammar).
	//// Bitwise unary expression ~ for 2's complement deprecated, b3 language uses a system function instead
	//// UnaryExpression returns be::BExpression:
	////	 {be::BUnaryOpExpression} functionName=("!" | "-" | "~") expr=InfixExpression;
	//UnaryExpression returns be::BExpression:
	//	{be::BUnaryOpExpression} functionName=("!" | "-") expr=InfixExpression;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return (pUnaryExpression != null) ? pUnaryExpression : (pUnaryExpression = new UnaryExpressionElements());
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//PreopExpression returns be::BExpression:
	//	{be::BUnaryPreOpExpression} functionName=("++" | "--") expr=InfixExpression;
	public PreopExpressionElements getPreopExpressionAccess() {
		return (pPreopExpression != null) ? pPreopExpression : (pPreopExpression = new PreopExpressionElements());
	}
	
	public ParserRule getPreopExpressionRule() {
		return getPreopExpressionAccess().getRule();
	}

	//PostopExpression returns be::BExpression:
	//	InfixExpression ({be::BUnaryPostOpExpression.expr=current} functionName=("--" | "++"))?;
	public PostopExpressionElements getPostopExpressionAccess() {
		return (pPostopExpression != null) ? pPostopExpression : (pPostopExpression = new PostopExpressionElements());
	}
	
	public ParserRule getPostopExpressionRule() {
		return getPostopExpressionAccess().getRule();
	}

	//InfixExpression returns be::BExpression:
	//	CallExpression ({be::BCallFeature.funcExpr=current} "." name=ID_or_KW "(" parameterList=ParameterList? ")" |
	//	{be::BAtExpression.objExpr=current} "[" indexExpr=Expression "]" | {be::BFeatureExpression.objExpr=current} "."
	//	featureName=ID_or_KW)*;
	public InfixExpressionElements getInfixExpressionAccess() {
		return (pInfixExpression != null) ? pInfixExpression : (pInfixExpression = new InfixExpressionElements());
	}
	
	public ParserRule getInfixExpressionRule() {
		return getInfixExpressionAccess().getRule();
	}

	//CallExpression returns be::BExpression:
	//	PrimaryExpression ({be::BCallFunction.funcExpr=current} "(" parameterList=ParameterList? ")")*;
	public CallExpressionElements getCallExpressionAccess() {
		return (pCallExpression != null) ? pCallExpression : (pCallExpression = new CallExpressionElements());
	}
	
	public ParserRule getCallExpressionRule() {
		return getCallExpressionAccess().getRule();
	}

	//PrimaryExpression returns be::BExpression:
	//	FeatureCall | ConstructorCallExpression | VariableValue | Literal | PropertyValue | ParanthesizedExpression |
	//	IfExpression | BlockExpression | SwitchExpression | ThrowExpression | TryCatchExpression | ProceedExpression |
	//	WithExpression | WithContextExpression;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//// Validation checks that there is at least one of references, properties or concern.
	//WithExpression returns be::BWithExpression:
	//	{be::BWithExpression} "with" (referencedAdvice+=[be::BAdvice] ("," referencedAdvice+=[be::BAdvice])*)?
	//	(propertySets+=PropertySet //		( '(' referencedAdvice += [be::BAdvice | ID] (',' referencedAdvice += [be::BAdvice | ID])* ')' )? 
	//	| propertySets+=PropertySetDefault | "concern" concerns+=Concern_Anonymous)* (":" funcExpr=Expression | "{"
	//	funcExpr=BlockExpressionWithoutBrackets "}");
	public WithExpressionElements getWithExpressionAccess() {
		return (pWithExpression != null) ? pWithExpression : (pWithExpression = new WithExpressionElements());
	}
	
	public ParserRule getWithExpressionRule() {
		return getWithExpressionAccess().getRule();
	}

	//WithContextExpression returns be::BWithContextExpression:
	//	{be::BWithContextExpression} "with" "context" expr=Expression ("as" name=ID)? contextBlock=BlockExpression;
	public WithContextExpressionElements getWithContextExpressionAccess() {
		return (pWithContextExpression != null) ? pWithContextExpression : (pWithContextExpression = new WithContextExpressionElements());
	}
	
	public ParserRule getWithContextExpressionRule() {
		return getWithContextExpressionAccess().getRule();
	}

	//ProceedExpression returns be::BExpression:
	//	{be::BProceedExpression} "proceed";
	public ProceedExpressionElements getProceedExpressionAccess() {
		return (pProceedExpression != null) ? pProceedExpression : (pProceedExpression = new ProceedExpressionElements());
	}
	
	public ParserRule getProceedExpressionRule() {
		return getProceedExpressionAccess().getRule();
	}

	//WildcardExpression returns be::BLiteralAny:
	//	{be::BLiteralAny} "_";
	public WildcardExpressionElements getWildcardExpressionAccess() {
		return (pWildcardExpression != null) ? pWildcardExpression : (pWildcardExpression = new WildcardExpressionElements());
	}
	
	public ParserRule getWildcardExpressionRule() {
		return getWildcardExpressionAccess().getRule();
	}

	//ThrowExpression returns be::BExpression:
	//	{be::BThrowExpression} "throw" expr=Expression;
	public ThrowExpressionElements getThrowExpressionAccess() {
		return (pThrowExpression != null) ? pThrowExpression : (pThrowExpression = new ThrowExpressionElements());
	}
	
	public ParserRule getThrowExpressionRule() {
		return getThrowExpressionAccess().getRule();
	}

	//TryCatchExpression returns be::BExpression:
	//	{be::BTryExpression} "try" tryExpr=Expression catchBlocks+=CatchBlock* ("finally" finallyExpr=Expression)? "endtry";
	public TryCatchExpressionElements getTryCatchExpressionAccess() {
		return (pTryCatchExpression != null) ? pTryCatchExpression : (pTryCatchExpression = new TryCatchExpressionElements());
	}
	
	public ParserRule getTryCatchExpressionRule() {
		return getTryCatchExpressionAccess().getRule();
	}

	//CatchBlock returns be::BCatch:
	//	{be::BCatch} "catch" type=TypeRef name=ID ":" catchExpr=Expression;
	public CatchBlockElements getCatchBlockAccess() {
		return (pCatchBlock != null) ? pCatchBlock : (pCatchBlock = new CatchBlockElements());
	}
	
	public ParserRule getCatchBlockRule() {
		return getCatchBlockAccess().getRule();
	}

	//SwitchExpression returns be::BExpression:
	//	{be::BSwitchExpression} "switch" switchExpression=Expression? caseList+=Case+ "endswitch";
	public SwitchExpressionElements getSwitchExpressionAccess() {
		return (pSwitchExpression != null) ? pSwitchExpression : (pSwitchExpression = new SwitchExpressionElements());
	}
	
	public ParserRule getSwitchExpressionRule() {
		return getSwitchExpressionAccess().getRule();
	}

	//Case returns be::BCase:
	//	{be::BCase} ("case" conditionExpr=Expression | "default") ":" thenExpr=Expression;
	public CaseElements getCaseAccess() {
		return (pCase != null) ? pCase : (pCase = new CaseElements());
	}
	
	public ParserRule getCaseRule() {
		return getCaseAccess().getRule();
	}

	//BlockExpression returns be::BExpression:
	//	{be::BChainedExpression} "{" (expressions+=TopLevelExpression ";")* "}";
	public BlockExpressionElements getBlockExpressionAccess() {
		return (pBlockExpression != null) ? pBlockExpression : (pBlockExpression = new BlockExpressionElements());
	}
	
	public ParserRule getBlockExpressionRule() {
		return getBlockExpressionAccess().getRule();
	}

	//IfExpression returns be::BExpression:
	//	{be::BIfExpression} "if" conditionExpr=Expression "then" thenExpr=Expression (elseExpr=ElseIfExpression | "else"
	//	elseExpr=Expression)? "endif";
	public IfExpressionElements getIfExpressionAccess() {
		return (pIfExpression != null) ? pIfExpression : (pIfExpression = new IfExpressionElements());
	}
	
	public ParserRule getIfExpressionRule() {
		return getIfExpressionAccess().getRule();
	}

	//ElseIfExpression returns be::BExpression:
	//	{be::BIfExpression} "elseif" conditionExpr=Expression "then" thenExpr=Expression (elseExpr=ElseIfExpression | "else"
	//	elseExpr=Expression)?;
	public ElseIfExpressionElements getElseIfExpressionAccess() {
		return (pElseIfExpression != null) ? pElseIfExpression : (pElseIfExpression = new ElseIfExpressionElements());
	}
	
	public ParserRule getElseIfExpressionRule() {
		return getElseIfExpressionAccess().getRule();
	}

	////	name = PID
	//PropertyValue returns be::BExpression:
	//	{be::BVariableExpression} namedValue=[be::INamedValue|PID];
	public PropertyValueElements getPropertyValueAccess() {
		return (pPropertyValue != null) ? pPropertyValue : (pPropertyValue = new PropertyValueElements());
	}
	
	public ParserRule getPropertyValueRule() {
		return getPropertyValueAccess().getRule();
	}

	//VariableValue returns be::BExpression:
	//	{be::BVariableExpression} namedValue=[be::INamedValue|ID_or_KW];
	public VariableValueElements getVariableValueAccess() {
		return (pVariableValue != null) ? pVariableValue : (pVariableValue = new VariableValueElements());
	}
	
	public ParserRule getVariableValueRule() {
		return getVariableValueAccess().getRule();
	}

	//ID_or_KW returns ecore::EString:
	//	ID | KW;
	public ID_or_KWElements getID_or_KWAccess() {
		return (pID_or_KW != null) ? pID_or_KW : (pID_or_KW = new ID_or_KWElements());
	}
	
	public ParserRule getID_or_KWRule() {
		return getID_or_KWAccess().getRule();
	}

	//ID_or_KW_NO_UNIT returns ecore::EString:
	//	ID | KW_NO_UNIT;
	public ID_or_KW_NO_UNITElements getID_or_KW_NO_UNITAccess() {
		return (pID_or_KW_NO_UNIT != null) ? pID_or_KW_NO_UNIT : (pID_or_KW_NO_UNIT = new ID_or_KW_NO_UNITElements());
	}
	
	public ParserRule getID_or_KW_NO_UNITRule() {
		return getID_or_KW_NO_UNITAccess().getRule();
	}

	//KW returns ecore::EString:
	//	KW_NO_UNIT | "unit";
	public KWElements getKWAccess() {
		return (pKW != null) ? pKW : (pKW = new KWElements());
	}
	
	public ParserRule getKWRule() {
		return getKWAccess().getRule();
	}

	//KW_NO_UNIT returns ecore::EString:
	//	"input" | "output" | "source" | "result" | "properties" | "builder" | "this" | "name" | "modify" | "greedy" |
	//	"version" | "requires" | "provides";
	public KW_NO_UNITElements getKW_NO_UNITAccess() {
		return (pKW_NO_UNIT != null) ? pKW_NO_UNIT : (pKW_NO_UNIT = new KW_NO_UNITElements());
	}
	
	public ParserRule getKW_NO_UNITRule() {
		return getKW_NO_UNITAccess().getRule();
	}

	//// DEPRECATED: calling ".feature" with implicit 'this'
	////	| ({be::BCallFeature} "." name=ID_or_KW  "(" (parameterList = ParameterList)? ")")
	////	| ({be::BFeatureExpression} "." featureName=ID_or_KW)
	//FeatureCall returns be::BExpression:
	//	OperationCall;
	public FeatureCallElements getFeatureCallAccess() {
		return (pFeatureCall != null) ? pFeatureCall : (pFeatureCall = new FeatureCallElements());
	}
	
	public ParserRule getFeatureCallRule() {
		return getFeatureCallAccess().getRule();
	}

	//OperationCall returns be::BCallExpression:
	//	{be::BCallNamedFunction} funcRef=[be::IFunction] "(" parameterList=ParameterList? ")";
	public OperationCallElements getOperationCallAccess() {
		return (pOperationCall != null) ? pOperationCall : (pOperationCall = new OperationCallElements());
	}
	
	public ParserRule getOperationCallRule() {
		return getOperationCallAccess().getRule();
	}

	//ConstructorCallExpression returns be::BExpression:
	//	{be::BCreateExpression} "new" typeExpr=LiteralType ("(" parameterList=ParameterList? ")")? ("as" name=ID)?
	//	contextBlock=InitializationBlockExpression?;
	public ConstructorCallExpressionElements getConstructorCallExpressionAccess() {
		return (pConstructorCallExpression != null) ? pConstructorCallExpression : (pConstructorCallExpression = new ConstructorCallExpressionElements());
	}
	
	public ParserRule getConstructorCallExpressionRule() {
		return getConstructorCallExpressionAccess().getRule();
	}

	//InitializationBlockExpression returns be::BExpression:
	//	{be::BChainedExpression} "{" (expressions+=InitializationExpression ";")* "}";
	public InitializationBlockExpressionElements getInitializationBlockExpressionAccess() {
		return (pInitializationBlockExpression != null) ? pInitializationBlockExpression : (pInitializationBlockExpression = new InitializationBlockExpressionElements());
	}
	
	public ParserRule getInitializationBlockExpressionRule() {
		return getInitializationBlockExpressionAccess().getRule();
	}

	//InitializationExpression returns be::BExpression:
	//	{be::BAssignmentExpression} leftExpr=FeatureOfThis functionName=":" rightExpr=Expression;
	public InitializationExpressionElements getInitializationExpressionAccess() {
		return (pInitializationExpression != null) ? pInitializationExpression : (pInitializationExpression = new InitializationExpressionElements());
	}
	
	public ParserRule getInitializationExpressionRule() {
		return getInitializationExpressionAccess().getRule();
	}

	//FeatureOfThis returns be::BExpression:
	//	{be::BFeatureExpression} // TODO: objExpr = null, means use "this" (cheat)
	//	featureName=ID_or_KW;
	public FeatureOfThisElements getFeatureOfThisAccess() {
		return (pFeatureOfThis != null) ? pFeatureOfThis : (pFeatureOfThis = new FeatureOfThisElements());
	}
	
	public ParserRule getFeatureOfThisRule() {
		return getFeatureOfThisAccess().getRule();
	}

	//// Used in a concern to describe pointcuts/advice for units and/or builders
	//BuildConcernContext returns be::BConcernContext:
	//	UnitConcernContext | BuilderConcernContext | FunctionConcernContext;
	public BuildConcernContextElements getBuildConcernContextAccess() {
		return (pBuildConcernContext != null) ? pBuildConcernContext : (pBuildConcernContext = new BuildConcernContextElements());
	}
	
	public ParserRule getBuildConcernContextRule() {
		return getBuildConcernContextAccess().getRule();
	}

	//FunctionConcernContext returns be::BFunctionConcernContext:
	//	{be::BFunctionConcernContext} documentation=DOCUMENTATION? "context" "function" namePredicate=FunctionNamePredicate
	//	("(" (parameters+=ParameterPredicate ("," parameters+=ParameterPredicate)* ("," varArgs?="..."
	//	parameters+=ParameterVarargsPredicate)? | varArgs?="..." parameters+=ParameterVarargsPredicate)?
	//	matchParameters?=")")? funcExpr=BlockExpression;
	public FunctionConcernContextElements getFunctionConcernContextAccess() {
		return (pFunctionConcernContext != null) ? pFunctionConcernContext : (pFunctionConcernContext = new FunctionConcernContextElements());
	}
	
	public ParserRule getFunctionConcernContextRule() {
		return getFunctionConcernContextAccess().getRule();
	}

	//FunctionNamePredicate returns be::BFunctionNamePredicate:
	//	{be::BFunctionNamePredicate} namePredicate=NamePredicate;
	public FunctionNamePredicateElements getFunctionNamePredicateAccess() {
		return (pFunctionNamePredicate != null) ? pFunctionNamePredicate : (pFunctionNamePredicate = new FunctionNamePredicateElements());
	}
	
	public ParserRule getFunctionNamePredicateRule() {
		return getFunctionNamePredicateAccess().getRule();
	}

	//ParameterPredicate returns be::BParameterPredicate:
	//	{be::BParameterPredicate} ("_" typePredicateOp=TypePredicateOp?) | type=TypeRef (typePredicateOp=TypePredicateOp |
	//	name=ID)?;
	public ParameterPredicateElements getParameterPredicateAccess() {
		return (pParameterPredicate != null) ? pParameterPredicate : (pParameterPredicate = new ParameterPredicateElements());
	}
	
	public ParserRule getParameterPredicateRule() {
		return getParameterPredicateAccess().getRule();
	}

	//// Varargs can only be last, and it only makes sense to skip the type (not to use ?*+)	
	//ParameterVarargsPredicate returns be::BParameterPredicate:
	//	{be::BParameterPredicate} "_" | type=TypeRef name=ID?;
	public ParameterVarargsPredicateElements getParameterVarargsPredicateAccess() {
		return (pParameterVarargsPredicate != null) ? pParameterVarargsPredicate : (pParameterVarargsPredicate = new ParameterVarargsPredicateElements());
	}
	
	public ParserRule getParameterVarargsPredicateRule() {
		return getParameterVarargsPredicateAccess().getRule();
	}

	//TypePredicateOp returns ecore::EString:
	//	"?" | "*" | "+";
	public TypePredicateOpElements getTypePredicateOpAccess() {
		return (pTypePredicateOp != null) ? pTypePredicateOp : (pTypePredicateOp = new TypePredicateOpElements());
	}
	
	public ParserRule getTypePredicateOpRule() {
		return getTypePredicateOpAccess().getRule();
	}

	//// Advice for units consists of Builders, and advice for Builders
	//UnitConcernContext returns build::UnitConcernContext:
	//	{build::UnitConcernContext} documentation=DOCUMENTATION? "unit-context" "{" "select-units" ":" query=UnitOrExpression
	//	";" "modify-selected" ":" "{" ("source" ":" sourceLocation=URI ";")? ("output" ":" outputLocation=URI ";")?
	//	("provides" ":" "{" ("-" providesRemovals+=ProvidesPredicate ";" | "+" providedCapabilities+=ProvidedCapability ";")*
	//	"}" ";")? ("requires" ":" "{" ("-" requiresRemovals+=RequiresPredicate ";" | "+"
	//	requiredCapabilities+=AliasedRequiredCapability ";")* "}" ";")? ("select-required" ":" "{" ("-"
	//	requiredPredicatesRemovals+=CapabilityPredicate ";" | "+" requiredPredicates+=CapabilityPredicate ";")* "}" ";")?
	//	(functions+=Builder | builderContexts+=BuilderConcernContext)* // TODO - this is sort of bogus, can not remove a default property, changing the default is the same as
	//	// specifying the value of a property... If introducing new functions those functions may need to see
	//	// different properties, and those may need to be default - rethink
	//	("-" defaultPropertiesRemovals+=PID ("," defaultPropertiesRemovals+=PID)* ";")? ("+"
	//	defaultPropertiesAdditions=PropertySetDefault)? "}" ";" "}";
	public UnitConcernContextElements getUnitConcernContextAccess() {
		return (pUnitConcernContext != null) ? pUnitConcernContext : (pUnitConcernContext = new UnitConcernContextElements());
	}
	
	public ParserRule getUnitConcernContextRule() {
		return getUnitConcernContextAccess().getRule();
	}

	//// Advice for Builders	
	//BuilderConcernContext returns build::BuilderConcernContext:
	//	{build::BuilderConcernContext} documentation=DOCUMENTATION? "builder-context" "{" "select-builders" ":"
	//	query=BuilderOrExpression ";" ("having-parameters" matchParameters?=":" "(" (parameters+=ParameterPredicate (","
	//	parameters+=ParameterPredicate)* ("," varArgs?="..." parameters+=ParameterVarargsPredicate)? | varArgs?="..."
	//	parameters+=ParameterVarargsPredicate)? ")" ";")? "modify-selected" ":" "{" ("conditions" ":" "{" ("-"
	//	removePreCondition?="precondition" ";")? ("+" "precondition" ":" precondExpr=Expression ";")? ("-"
	//	removePostInputCondition?="postinputcondition" ";")? ("+" "postinputcondition" ":" postinputcondExpr=Expression ";")?
	//	("-" removePostCondition?="postcondition" ";")? ("+" "postcondition" ":" postcondExpr=Expression ";")? "}" ";")?
	//	("provides" ":" "{" ("-" providesRemovals+=ProvidesPredicate ";" | "+" providedCapabilities+=ProvidedCapability ";")*
	//	"}" ";")? // TODO: rethink advice of default properties
	//	("-" defaultPropertiesRemovals+=PID ("," defaultPropertiesRemovals+=PID)* ";")? ("+"
	//	defaultPropertiesAdditions=PropertySetDefault)? ("input" ":" "{" ("+" inputAdditions+=BuilderInput ";" | "-"
	//	inputRemovals+=InputPredicate ";")* "}" ";")? ("source" ":" "{" ("+" sourceAdditions+=ConditionalPathVector ";" | "-"
	//	"source" "~=" sourceRemovals+=SourcePredicate ";")* // TODO : rethink advice of annotations
	//	("-" "annotations" "~=" "[" sourceAnnotationsRemovals+=PID ("," outputAnnotationsRemovals+=PID)* "]" ";")? ("+"
	//	"annotations" ":" sourceAnnotationAdditions=AnnotationSet)? "}" ";")? ("output" ":" "{" ("+"
	//	outputAdditions+=ConditionalPathVector ";" | "-" "output" "~=" outputRemovals+=OutputPredicate ";")* // TODO : rethink advice of annotations
	//	("-" "annotations" "~=" "[" outputAnnotationsRemovals+=PID ("," outputAnnotationsRemovals+=PID)* "]" ";")? ("+"
	//	"annotations" ":" outputAnnotationAdditions=AnnotationSet)? "}" ";")? ("result" ":" funcExpr=Expression ";")? // replaces the builder's funcExpression
	//	"}" ";" "}";
	public BuilderConcernContextElements getBuilderConcernContextAccess() {
		return (pBuilderConcernContext != null) ? pBuilderConcernContext : (pBuilderConcernContext = new BuilderConcernContextElements());
	}
	
	public ParserRule getBuilderConcernContextRule() {
		return getBuilderConcernContextAccess().getRule();
	}

	//UnitOrExpression returns be::BExpression:
	//	UnitAndExpression ({be::BOrExpression.leftExpr=current} "||" rightExpr=UnitAndExpression)*;
	public UnitOrExpressionElements getUnitOrExpressionAccess() {
		return (pUnitOrExpression != null) ? pUnitOrExpression : (pUnitOrExpression = new UnitOrExpressionElements());
	}
	
	public ParserRule getUnitOrExpressionRule() {
		return getUnitOrExpressionAccess().getRule();
	}

	//UnitAndExpression returns be::BExpression:
	//	UnitNotOrPrimaryExpression ({be::BAndExpression.leftExpr=current} "&&" rightExpr=UnitNotOrPrimaryExpression)*;
	public UnitAndExpressionElements getUnitAndExpressionAccess() {
		return (pUnitAndExpression != null) ? pUnitAndExpression : (pUnitAndExpression = new UnitAndExpressionElements());
	}
	
	public ParserRule getUnitAndExpressionRule() {
		return getUnitAndExpressionAccess().getRule();
	}

	//UnitNotOrPrimaryExpression returns be::BExpression:
	//	UnitNotExpression | UnitPrimaryExpression;
	public UnitNotOrPrimaryExpressionElements getUnitNotOrPrimaryExpressionAccess() {
		return (pUnitNotOrPrimaryExpression != null) ? pUnitNotOrPrimaryExpression : (pUnitNotOrPrimaryExpression = new UnitNotOrPrimaryExpressionElements());
	}
	
	public ParserRule getUnitNotOrPrimaryExpressionRule() {
		return getUnitNotOrPrimaryExpressionAccess().getRule();
	}

	//UnitNotExpression returns be::BExpression:
	//	{be::BUnaryOpExpression} functionName="!" expr=UnitPrimaryExpression;
	public UnitNotExpressionElements getUnitNotExpressionAccess() {
		return (pUnitNotExpression != null) ? pUnitNotExpression : (pUnitNotExpression = new UnitNotExpressionElements());
	}
	
	public ParserRule getUnitNotExpressionRule() {
		return getUnitNotExpressionAccess().getRule();
	}

	//UnitPrimaryExpression returns be::BExpression:
	//	RequiresPredicate | ImplementsPredcicate | ProvidesPredicate | UnitNamePredicate | GroupedUnitPrimaryExpression;
	public UnitPrimaryExpressionElements getUnitPrimaryExpressionAccess() {
		return (pUnitPrimaryExpression != null) ? pUnitPrimaryExpression : (pUnitPrimaryExpression = new UnitPrimaryExpressionElements());
	}
	
	public ParserRule getUnitPrimaryExpressionRule() {
		return getUnitPrimaryExpressionAccess().getRule();
	}

	//GroupedUnitPrimaryExpression returns be::BExpression:
	//	"(" UnitOrExpression ")";
	public GroupedUnitPrimaryExpressionElements getGroupedUnitPrimaryExpressionAccess() {
		return (pGroupedUnitPrimaryExpression != null) ? pGroupedUnitPrimaryExpression : (pGroupedUnitPrimaryExpression = new GroupedUnitPrimaryExpressionElements());
	}
	
	public ParserRule getGroupedUnitPrimaryExpressionRule() {
		return getGroupedUnitPrimaryExpressionAccess().getRule();
	}

	//RequiresPredicate returns build::RequiresPredicate:
	//	{build::RequiresPredicate} "requires" meta?="env"? "~=" capabilityPredicate=CapabilityPredicate;
	public RequiresPredicateElements getRequiresPredicateAccess() {
		return (pRequiresPredicate != null) ? pRequiresPredicate : (pRequiresPredicate = new RequiresPredicateElements());
	}
	
	public ParserRule getRequiresPredicateRule() {
		return getRequiresPredicateAccess().getRule();
	}

	//ImplementsPredcicate returns be::BExpression:
	//	{build::ImplementsPredicate} "is" "==" type=TypeRef;
	public ImplementsPredcicateElements getImplementsPredcicateAccess() {
		return (pImplementsPredcicate != null) ? pImplementsPredcicate : (pImplementsPredcicate = new ImplementsPredcicateElements());
	}
	
	public ParserRule getImplementsPredcicateRule() {
		return getImplementsPredcicateAccess().getRule();
	}

	//ProvidesPredicate returns build::ProvidesPredicate:
	//	{build::ProvidesPredicate} "provides" "~=" capabilityPredicate=CapabilityPredicate;
	public ProvidesPredicateElements getProvidesPredicateAccess() {
		return (pProvidesPredicate != null) ? pProvidesPredicate : (pProvidesPredicate = new ProvidesPredicateElements());
	}
	
	public ParserRule getProvidesPredicateRule() {
		return getProvidesPredicateAccess().getRule();
	}

	//UnitNamePredicate returns build::CapabilityPredicate:
	//	{build::UnitNamePredicate} "unit" "~=" "{" ("name" namePredicate=QualifiedNamePredicate ";") ("version" "~="
	//	versionRange=VersionRangeLiteral ";")? "}";
	public UnitNamePredicateElements getUnitNamePredicateAccess() {
		return (pUnitNamePredicate != null) ? pUnitNamePredicate : (pUnitNamePredicate = new UnitNamePredicateElements());
	}
	
	public ParserRule getUnitNamePredicateRule() {
		return getUnitNamePredicateAccess().getRule();
	}

	//BuilderNamePredicate returns build::BuilderNamePredicate:
	//	{build::BuilderNamePredicate} "builder" "~=" "{" ("name" namePredicate=QualifiedNamePredicate ";") "}";
	public BuilderNamePredicateElements getBuilderNamePredicateAccess() {
		return (pBuilderNamePredicate != null) ? pBuilderNamePredicate : (pBuilderNamePredicate = new BuilderNamePredicateElements());
	}
	
	public ParserRule getBuilderNamePredicateRule() {
		return getBuilderNamePredicateAccess().getRule();
	}

	//InputPredicate returns build::InputPredicate:
	//	{build::InputPredicate} "input" "~=" "{" (capabilityPredicate=CapabilityPredicate |
	//	capabilityPredicate=UnitNamePredicate | "unit"?) "called-builder" builderPredicate=QualifiedNamePredicate ";" "}";
	public InputPredicateElements getInputPredicateAccess() {
		return (pInputPredicate != null) ? pInputPredicate : (pInputPredicate = new InputPredicateElements());
	}
	
	public ParserRule getInputPredicateRule() {
		return getInputPredicateAccess().getRule();
	}

	//SourcePredicate returns build::SourcePredicate:
	//	{build::SourcePredicate} pathVector=BasePathPredicate | pathVector=PathPredicate | pathPattern=PatternLiteral;
	public SourcePredicateElements getSourcePredicateAccess() {
		return (pSourcePredicate != null) ? pSourcePredicate : (pSourcePredicate = new SourcePredicateElements());
	}
	
	public ParserRule getSourcePredicateRule() {
		return getSourcePredicateAccess().getRule();
	}

	//OutputPredicate returns build::OutputPredicate:
	//	{build::OutputPredicate} pathVector=BasePathPredicate | pathVector=PathPredicate | pathPattern=PatternLiteral;
	public OutputPredicateElements getOutputPredicateAccess() {
		return (pOutputPredicate != null) ? pOutputPredicate : (pOutputPredicate = new OutputPredicateElements());
	}
	
	public ParserRule getOutputPredicateRule() {
		return getOutputPredicateAccess().getRule();
	}

	//BasePathPredicate returns build::PathVector:
	//	{build::PathVector} basePath=Path "[" paths+=Path ("," paths+=Path)* "]";
	public BasePathPredicateElements getBasePathPredicateAccess() {
		return (pBasePathPredicate != null) ? pBasePathPredicate : (pBasePathPredicate = new BasePathPredicateElements());
	}
	
	public ParserRule getBasePathPredicateRule() {
		return getBasePathPredicateAccess().getRule();
	}

	//PathPredicate returns build::PathVector:
	//	{build::PathVector} paths+=Path ("," paths+=Path)*;
	public PathPredicateElements getPathPredicateAccess() {
		return (pPathPredicate != null) ? pPathPredicate : (pPathPredicate = new PathPredicateElements());
	}
	
	public ParserRule getPathPredicateRule() {
		return getPathPredicateAccess().getRule();
	}

	//CapabilityPredicate returns build::CapabilityPredicate:
	//	{build::CapabilityPredicate} "capability" "{" ("name-space" nameSpacePredicate=QualifiedNamePredicate ";") ("name"
	//	namePredicate=QualifiedNamePredicate ";") ("version" "~=" versionRange=VersionRangeLiteral ";")? "}";
	public CapabilityPredicateElements getCapabilityPredicateAccess() {
		return (pCapabilityPredicate != null) ? pCapabilityPredicate : (pCapabilityPredicate = new CapabilityPredicateElements());
	}
	
	public ParserRule getCapabilityPredicateRule() {
		return getCapabilityPredicateAccess().getRule();
	}

	//QualifiedNamePredicate returns be::BNamePredicate:
	//	{be::BNamePredicate} ("==" name=EscapedQualifiedName) | "~=" namePattern=PatternLiteral;
	public QualifiedNamePredicateElements getQualifiedNamePredicateAccess() {
		return (pQualifiedNamePredicate != null) ? pQualifiedNamePredicate : (pQualifiedNamePredicate = new QualifiedNamePredicateElements());
	}
	
	public ParserRule getQualifiedNamePredicateRule() {
		return getQualifiedNamePredicateAccess().getRule();
	}

	//NamePredicate returns be::BNamePredicate:
	//	{be::BNamePredicate} name=EscapedQualifiedName | namePattern=PatternLiteral;
	public NamePredicateElements getNamePredicateAccess() {
		return (pNamePredicate != null) ? pNamePredicate : (pNamePredicate = new NamePredicateElements());
	}
	
	public ParserRule getNamePredicateRule() {
		return getNamePredicateAccess().getRule();
	}

	//BuilderOrExpression returns be::BExpression:
	//	BuilderAndExpression ({be::BOrExpression.leftExpr=current} "||" rightExpr=BuilderAndExpression)*;
	public BuilderOrExpressionElements getBuilderOrExpressionAccess() {
		return (pBuilderOrExpression != null) ? pBuilderOrExpression : (pBuilderOrExpression = new BuilderOrExpressionElements());
	}
	
	public ParserRule getBuilderOrExpressionRule() {
		return getBuilderOrExpressionAccess().getRule();
	}

	//BuilderAndExpression returns be::BExpression:
	//	BuilderNotOrPrimaryExpression ({be::BAndExpression.leftExpr=current} "&&" rightExpr=BuilderNotOrPrimaryExpression)*;
	public BuilderAndExpressionElements getBuilderAndExpressionAccess() {
		return (pBuilderAndExpression != null) ? pBuilderAndExpression : (pBuilderAndExpression = new BuilderAndExpressionElements());
	}
	
	public ParserRule getBuilderAndExpressionRule() {
		return getBuilderAndExpressionAccess().getRule();
	}

	//BuilderNotOrPrimaryExpression returns be::BExpression:
	//	BuilderNotExpression | BuilderPrimaryExpression;
	public BuilderNotOrPrimaryExpressionElements getBuilderNotOrPrimaryExpressionAccess() {
		return (pBuilderNotOrPrimaryExpression != null) ? pBuilderNotOrPrimaryExpression : (pBuilderNotOrPrimaryExpression = new BuilderNotOrPrimaryExpressionElements());
	}
	
	public ParserRule getBuilderNotOrPrimaryExpressionRule() {
		return getBuilderNotOrPrimaryExpressionAccess().getRule();
	}

	//BuilderNotExpression returns be::BExpression:
	//	{be::BUnaryOpExpression} functionName="!" expr=BuilderPrimaryExpression;
	public BuilderNotExpressionElements getBuilderNotExpressionAccess() {
		return (pBuilderNotExpression != null) ? pBuilderNotExpression : (pBuilderNotExpression = new BuilderNotExpressionElements());
	}
	
	public ParserRule getBuilderNotExpressionRule() {
		return getBuilderNotExpressionAccess().getRule();
	}

	//BuilderPrimaryExpression returns be::BExpression:
	//	InputPredicate | ProvidesPredicate | BuilderNamePredicate | GroupedBuilderPrimaryExpression;
	public BuilderPrimaryExpressionElements getBuilderPrimaryExpressionAccess() {
		return (pBuilderPrimaryExpression != null) ? pBuilderPrimaryExpression : (pBuilderPrimaryExpression = new BuilderPrimaryExpressionElements());
	}
	
	public ParserRule getBuilderPrimaryExpressionRule() {
		return getBuilderPrimaryExpressionAccess().getRule();
	}

	//GroupedBuilderPrimaryExpression returns be::BExpression:
	//	"(" BuilderOrExpression ")";
	public GroupedBuilderPrimaryExpressionElements getGroupedBuilderPrimaryExpressionAccess() {
		return (pGroupedBuilderPrimaryExpression != null) ? pGroupedBuilderPrimaryExpression : (pGroupedBuilderPrimaryExpression = new GroupedBuilderPrimaryExpressionElements());
	}
	
	public ParserRule getGroupedBuilderPrimaryExpressionRule() {
		return getGroupedBuilderPrimaryExpressionAccess().getRule();
	}

	//Literal returns be::BExpression:
	//	ValueLiteral | PatternLiteral | LiteralMap | LiteralList | LiteralFunction;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//PatternLiteral returns be::BPatternLiteralExpression:
	//	RegexpLiteral | SimplePatternLiteral | WildcardExpression;
	public PatternLiteralElements getPatternLiteralAccess() {
		return (pPatternLiteral != null) ? pPatternLiteral : (pPatternLiteral = new PatternLiteralElements());
	}
	
	public ParserRule getPatternLiteralRule() {
		return getPatternLiteralAccess().getRule();
	}

	//LiteralList returns be::BExpression:
	//	{be::BLiteralListExpression} "[" ("<" entryType=TypeRef ">")? entries+=Expression ("," entries+=Expression)* "]" |
	//	{be::BLiteralListExpression} "[" "<" entryType=TypeRef ">" "]";
	public LiteralListElements getLiteralListAccess() {
		return (pLiteralList != null) ? pLiteralList : (pLiteralList = new LiteralListElements());
	}
	
	public ParserRule getLiteralListRule() {
		return getLiteralListAccess().getRule();
	}

	//LiteralMap returns be::BExpression:
	//	{be::BLiteralMapExpression} "[" ("<" keyType=TypeRef "," valueType=TypeRef ">")? entries+=MapEntry (","
	//	entries+=MapEntry)* "]" | {be::BLiteralMapExpression} "[" "<" keyType=TypeRef "," valueType=TypeRef ">" "]";
	public LiteralMapElements getLiteralMapAccess() {
		return (pLiteralMap != null) ? pLiteralMap : (pLiteralMap = new LiteralMapElements());
	}
	
	public ParserRule getLiteralMapRule() {
		return getLiteralMapAccess().getRule();
	}

	//// A lambda enclosed in { }
	//LiteralFunction returns be::BExpression:
	//	"{" ClosureExpression "}";
	public LiteralFunctionElements getLiteralFunctionAccess() {
		return (pLiteralFunction != null) ? pLiteralFunction : (pLiteralFunction = new LiteralFunctionElements());
	}
	
	public ParserRule getLiteralFunctionRule() {
		return getLiteralFunctionAccess().getRule();
	}

	////LiteralFunction returns be::BExpression : {be::B3Function} 
	////	'{' ('<' returnType=TypeRef '>')?
	////	(
	////	(parameters += ParameterDeclaration (',' parameters += ParameterDeclaration)* 
	////		(',' varArgs?="..." parameters += ParameterDeclaration)?)
	////	| 	(    varArgs?="..." parameters += ParameterDeclaration)
	////	)? 
	////	'|' funcExpr=OneOrManyExpressions '}'
	////	;
	//// A lambda (without delimiters)
	//ClosureExpression returns be::BExpression:
	//	{be::B3Function} ("<" returnType=TypeRef ">")? ("|"? (parameters+=ParameterDeclarationOptType (","
	//	parameters+=ParameterDeclarationOptType)* ("," varArgs?="..." parameters+=ParameterDeclarationOptType)?) |
	//	varArgs?="..." parameters+=ParameterDeclarationOptType)? "|" funcExpr=OneOrManyExpressions;
	public ClosureExpressionElements getClosureExpressionAccess() {
		return (pClosureExpression != null) ? pClosureExpression : (pClosureExpression = new ClosureExpressionElements());
	}
	
	public ParserRule getClosureExpressionRule() {
		return getClosureExpressionAccess().getRule();
	}

	//OneOrManyExpressions returns be::BExpression:
	//	BlockExpressionWithoutBrackets | Expression;
	public OneOrManyExpressionsElements getOneOrManyExpressionsAccess() {
		return (pOneOrManyExpressions != null) ? pOneOrManyExpressions : (pOneOrManyExpressions = new OneOrManyExpressionsElements());
	}
	
	public ParserRule getOneOrManyExpressionsRule() {
		return getOneOrManyExpressionsAccess().getRule();
	}

	//BlockExpressionWithoutBrackets returns be::BExpression:
	//	{be::BChainedExpression} (expressions+=TopLevelExpression ";")* // should be +, but produces markers that are no good 
	//;
	public BlockExpressionWithoutBracketsElements getBlockExpressionWithoutBracketsAccess() {
		return (pBlockExpressionWithoutBrackets != null) ? pBlockExpressionWithoutBrackets : (pBlockExpressionWithoutBrackets = new BlockExpressionWithoutBracketsElements());
	}
	
	public ParserRule getBlockExpressionWithoutBracketsRule() {
		return getBlockExpressionWithoutBracketsAccess().getRule();
	}

	//MapEntry returns be::BMapEntry:
	//	{be::BMapEntry} key=KeyLiteral ":" value=Expression;
	public MapEntryElements getMapEntryAccess() {
		return (pMapEntry != null) ? pMapEntry : (pMapEntry = new MapEntryElements());
	}
	
	public ParserRule getMapEntryRule() {
		return getMapEntryAccess().getRule();
	}

	//KeyLiteral returns be::BExpression:
	//	{be::BLiteralExpression} value=(ID | PID | STRING);
	public KeyLiteralElements getKeyLiteralAccess() {
		return (pKeyLiteral != null) ? pKeyLiteral : (pKeyLiteral = new KeyLiteralElements());
	}
	
	public ParserRule getKeyLiteralRule() {
		return getKeyLiteralAccess().getRule();
	}

	//LiteralType returns be::BLiteralType:
	//	{be::BLiteralType} type=TypeRef;
	public LiteralTypeElements getLiteralTypeAccess() {
		return (pLiteralType != null) ? pLiteralType : (pLiteralType = new LiteralTypeElements());
	}
	
	public ParserRule getLiteralTypeRule() {
		return getLiteralTypeAccess().getRule();
	}

	//ValueLiteral returns be::BExpression:
	//	BooleanLiteral //	| QueryLiteral
	//	| // SEE ISSUE 297089 - must be placed before IntegerLiteral
	//	RealLiteral | IntegerLiteral | NullLiteral | StringLiteral | UnitLiteral;
	public ValueLiteralElements getValueLiteralAccess() {
		return (pValueLiteral != null) ? pValueLiteral : (pValueLiteral = new ValueLiteralElements());
	}
	
	public ParserRule getValueLiteralRule() {
		return getValueLiteralAccess().getRule();
	}

	//BooleanLiteral returns be::BExpression:
	//	{be::BLiteralExpression} value=BooleanValue;
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return (pBooleanLiteral != null) ? pBooleanLiteral : (pBooleanLiteral = new BooleanLiteralElements());
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//IntegerLiteral returns be::BExpression:
	//	{be::BLiteralExpression} value=IntValue;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return (pIntegerLiteral != null) ? pIntegerLiteral : (pIntegerLiteral = new IntegerLiteralElements());
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}

	//UnitLiteral returns be::BExpression:
	//	{be::BLiteralExpression} value="unit";
	public UnitLiteralElements getUnitLiteralAccess() {
		return (pUnitLiteral != null) ? pUnitLiteral : (pUnitLiteral = new UnitLiteralElements());
	}
	
	public ParserRule getUnitLiteralRule() {
		return getUnitLiteralAccess().getRule();
	}

	//StringLiteral returns be::BExpression:
	//	{be::BLiteralExpression} value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//RealLiteral returns be::BExpression:
	//	{be::BLiteralExpression} value=RealValue;
	public RealLiteralElements getRealLiteralAccess() {
		return (pRealLiteral != null) ? pRealLiteral : (pRealLiteral = new RealLiteralElements());
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}

	//RegexpLiteral returns be::BRegularExpression:
	//	{be::BRegularExpression} pattern=REGULAR_EXPR;
	public RegexpLiteralElements getRegexpLiteralAccess() {
		return (pRegexpLiteral != null) ? pRegexpLiteral : (pRegexpLiteral = new RegexpLiteralElements());
	}
	
	public ParserRule getRegexpLiteralRule() {
		return getRegexpLiteralAccess().getRule();
	}

	//SimplePatternLiteral returns be::BSimplePatternExpression:
	//	{be::BSimplePatternExpression} pattern=SIMPLE_PATTERN;
	public SimplePatternLiteralElements getSimplePatternLiteralAccess() {
		return (pSimplePatternLiteral != null) ? pSimplePatternLiteral : (pSimplePatternLiteral = new SimplePatternLiteralElements());
	}
	
	public ParserRule getSimplePatternLiteralRule() {
		return getSimplePatternLiteralAccess().getRule();
	}

	//// Note: NullLiteral has a java null value as its value
	//NullLiteral returns be::BExpression:
	//	{be::BLiteralExpression} "null";
	public NullLiteralElements getNullLiteralAccess() {
		return (pNullLiteral != null) ? pNullLiteral : (pNullLiteral = new NullLiteralElements());
	}
	
	public ParserRule getNullLiteralRule() {
		return getNullLiteralAccess().getRule();
	}

	////ThisLiteral	returns  be::BExpression: {ThisLiteral} val="this";
	////SuperLiteral returns  be::BExpression: {SuperLiteral} val="super";
	//// Has conversion rule
	//BooleanValue returns ecore::EBooleanObject:
	//	"true" | "false";
	public BooleanValueElements getBooleanValueAccess() {
		return (pBooleanValue != null) ? pBooleanValue : (pBooleanValue = new BooleanValueElements());
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}

	//// Has conversion rule
	//RealValue returns ecore::EDoubleObject:
	//	REAL;
	public RealValueElements getRealValueAccess() {
		return (pRealValue != null) ? pRealValue : (pRealValue = new RealValueElements());
	}
	
	public ParserRule getRealValueRule() {
		return getRealValueAccess().getRule();
	}

	//// Has conversion rule that handles decimal, octal, and hexadecimal values with radix
	//IntValue returns ecore::EIntegerObject:
	//	INT | HEX;
	public IntValueElements getIntValueAccess() {
		return (pIntValue != null) ? pIntValue : (pIntValue = new IntValueElements());
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}

	//ParanthesizedExpression returns be::BExpression:
	//	"(" Expression ")";
	public ParanthesizedExpressionElements getParanthesizedExpressionAccess() {
		return (pParanthesizedExpression != null) ? pParanthesizedExpression : (pParanthesizedExpression = new ParanthesizedExpressionElements());
	}
	
	public ParserRule getParanthesizedExpressionRule() {
		return getParanthesizedExpressionAccess().getRule();
	}

	//// Has conversion rule
	//VersionLiteral returns build::Version:
	//	STRING | AlfanumSym;
	public VersionLiteralElements getVersionLiteralAccess() {
		return (pVersionLiteral != null) ? pVersionLiteral : (pVersionLiteral = new VersionLiteralElements());
	}
	
	public ParserRule getVersionLiteralRule() {
		return getVersionLiteralAccess().getRule();
	}

	//// Has conversion rule
	//VersionRangeLiteral returns build::VersionRange:
	//	("[" | "(") (STRING | AlfanumSym) ("," (STRING | AlfanumSym))? ("]" | ")") | (STRING | AlfanumSym);
	public VersionRangeLiteralElements getVersionRangeLiteralAccess() {
		return (pVersionRangeLiteral != null) ? pVersionRangeLiteral : (pVersionRangeLiteral = new VersionRangeLiteralElements());
	}
	
	public ParserRule getVersionRangeLiteralRule() {
		return getVersionRangeLiteralAccess().getRule();
	}

	//// Reference to qualified named item, possibly in unit, this or super, or
	//// this.super, or unit.super (ONLY USED BY PROPERTY SET - CLEAN THIS UP)
	//// TODO: super, unit, this - not yet handled - subject to change?
	//QIDREF returns ecore::EString:
	//	("super" | ("unit" | "this") ("." "super")?) ("." QID)? | QID;
	public QIDREFElements getQIDREFAccess() {
		return (pQIDREF != null) ? pQIDREF : (pQIDREF = new QIDREFElements());
	}
	
	public ParserRule getQIDREFRule() {
		return getQIDREFAccess().getRule();
	}

	//// Qualified name
	//QID returns ecore::EString hidden():
	//	ID_or_KW (INT | HEX | ID_or_KW)* ("." ID_or_KW (INT | HEX | ID_or_KW)*)*;
	public QIDElements getQIDAccess() {
		return (pQID != null) ? pQID : (pQID = new QIDElements());
	}
	
	public ParserRule getQIDRule() {
		return getQIDAccess().getRule();
	}

	//// Allows a qualified name, or a string to be used as a name
	//EscapedQualifiedName returns ecore::EString:
	//	STRING | QID;
	public EscapedQualifiedNameElements getEscapedQualifiedNameAccess() {
		return (pEscapedQualifiedName != null) ? pEscapedQualifiedName : (pEscapedQualifiedName = new EscapedQualifiedNameElements());
	}
	
	public ParserRule getEscapedQualifiedNameRule() {
		return getEscapedQualifiedNameAccess().getRule();
	}

	//CapabilityInterface returns ecore::EString:
	//	QID;
	public CapabilityInterfaceElements getCapabilityInterfaceAccess() {
		return (pCapabilityInterface != null) ? pCapabilityInterface : (pCapabilityInterface = new CapabilityInterfaceElements());
	}
	
	public ParserRule getCapabilityInterfaceRule() {
		return getCapabilityInterfaceAccess().getRule();
	}

	////// Aliases that help with unified naming (good for experiments - the indirection can be removed later)
	////BuilderName 	: EscapedQualifiedName ;
	////CapabilityName 	: STRING ; // although nice to just write a.b.c it clashes with a.b.c.builder()
	//enum Visibility returns be::Visibility:
	//	public | private;
	public VisibilityElements getVisibilityAccess() {
		return (unknownRuleVisibility != null) ? unknownRuleVisibility : (unknownRuleVisibility = new VisibilityElements());
	}
	
	public EnumRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}

	//enum ExecutionMode returns be::ExecutionMode:
	//	parallel | sequential;
	public ExecutionModeElements getExecutionModeAccess() {
		return (unknownRuleExecutionMode != null) ? unknownRuleExecutionMode : (unknownRuleExecutionMode = new ExecutionModeElements());
	}
	
	public EnumRule getExecutionModeRule() {
		return getExecutionModeAccess().getRule();
	}

	//// RULE 'TERMINALS'
	//TIMESTAMP returns ecore::EDate:
	//	STRING;
	public TIMESTAMPElements getTIMESTAMPAccess() {
		return (pTIMESTAMP != null) ? pTIMESTAMP : (pTIMESTAMP = new TIMESTAMPElements());
	}
	
	public ParserRule getTIMESTAMPRule() {
		return getTIMESTAMPAccess().getRule();
	}

	//// Version, and VersionRange use these
	//// TODO: uncertain if the set of allowed chars is definitive.
	////
	//Separator returns ecore::EString:
	//	"-" | "!" | "@" | "$" | "%" | "&" | "+" | "=" | "*" | "<" | ">" | ":" | "?";
	public SeparatorElements getSeparatorAccess() {
		return (pSeparator != null) ? pSeparator : (pSeparator = new SeparatorElements());
	}
	
	public ParserRule getSeparatorRule() {
		return getSeparatorAccess().getRule();
	}

	//AlfanumSym returns ecore::EString hidden():
	//	(ID | INT | HEX | EXT_INT) ("."? (Separator | ID | INT | HEX | EXT_INT))*;
	public AlfanumSymElements getAlfanumSymAccess() {
		return (pAlfanumSym != null) ? pAlfanumSym : (pAlfanumSym = new AlfanumSymElements());
	}
	
	public ParserRule getAlfanumSymRule() {
		return getAlfanumSymAccess().getRule();
	}

	//DOCUMENTATION returns ecore::EString:
	//	TEXT | JAVADOC;
	public DOCUMENTATIONElements getDOCUMENTATIONAccess() {
		return (pDOCUMENTATION != null) ? pDOCUMENTATION : (pDOCUMENTATION = new DOCUMENTATIONElements());
	}
	
	public ParserRule getDOCUMENTATIONRule() {
		return getDOCUMENTATIONAccess().getRule();
	}

	//// --TERMINALS
	//// (NOTE: Does not use standard terminals to have full control).
	//// TODO: Possibly use some other char instead of ^ as escape mechanism for keywords??
	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "0".."9" | "_")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//// Property Names start with $ and are qualified. Must be handled by lexer as
	//// a.b.c is otherwise ambigous in expressions.
	//terminal PID:
	//	"$" "{" ID ("." ID)* "}";
	public TerminalRule getPIDRule() {
		return (tPID != null) ? tPID : (tPID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PID"));
	} 

	//// Java regexp - allows \ before any character == same as unescaped character if character is not an operator
	//terminal REGULAR_EXPR returns be::RegexpPattern:
	//	"~/" ("\\" !("\t" | "\r" | "\n") | !("\\" | "/" | " " | "\t" | "\r" | "\n"))* "/" ("u" | "m" | "i" | "c" | "d")*;
	public TerminalRule getREGULAR_EXPRRule() {
		return (tREGULAR_EXPR != null) ? tREGULAR_EXPR : (tREGULAR_EXPR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REGULAR_EXPR"));
	} 

	//terminal SIMPLE_PATTERN returns be::SimplePattern:
	//	"~" STRING;
	public TerminalRule getSIMPLE_PATTERNRule() {
		return (tSIMPLE_PATTERN != null) ? tSIMPLE_PATTERN : (tSIMPLE_PATTERN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SIMPLE_PATTERN"));
	} 

	//// JS String support escaped b,t,n,f,r, and u HEX*4, x HEX*2, and (deprecated (0-7)), 
	//// A string converter may need to handle the u, x, and octal escapes.
	//// Regular java string handles XXXX , and gives syntax error if
	//// format is not ok, the other two remains, and possibly the null.
	//// TODO: check STRING grammar
	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "x" | "0" | "\"" | "\'" | "\\") | !("\\" | "\"" | "\r" | "\n"))* "\""
	//	| "\'" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "x" | "0" | "\"" | "\'" | "\\") | !("\\" | "\'" | "\r" | "\n"))*
	//	"\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal TEXT:
	//	"«"->"»";
	public TerminalRule getTEXTRule() {
		return (tTEXT != null) ? tTEXT : (tTEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TEXT"));
	} 

	//terminal JAVADOC:
	//	"/ **"->"* /";
	public TerminalRule getJAVADOCRule() {
		return (tJAVADOC != null) ? tJAVADOC : (tJAVADOC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "JAVADOC"));
	} 

	//terminal ML_COMMENT:
	//	"/ *" !"*"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal HEX:
	//	"0" ("x" | "X") ("0".."9" | "a".."f" | "A".."F")+;
	public TerminalRule getHEXRule() {
		return (tHEX != null) ? tHEX : (tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX"));
	} 

	//terminal INT:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//REAL returns ecore::EString hidden():
	//	INT? "." (EXT_INT | INT);
	public REALElements getREALAccess() {
		return (pREAL != null) ? pREAL : (pREAL = new REALElements());
	}
	
	public ParserRule getREALRule() {
		return getREALAccess().getRule();
	}

	//terminal EXT_INT:
	//	INT ("e" | "E") ("-" | "+") INT;
	public TerminalRule getEXT_INTRule() {
		return (tEXT_INT != null) ? tEXT_INT : (tEXT_INT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXT_INT"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
