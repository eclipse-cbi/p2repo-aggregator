/*
 * generated by Xtext
 */
package org.eclipse.b3.formatting;

import org.eclipse.b3.services.BeeLangGrammarAccess;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#formatting
 * on how and when to use it
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
public class BeeLangFormatter extends AbstractDeclarativeFormatter {

	@Override
	protected void configureFormatting(FormattingConfig c) {
		BeeLangGrammarAccess f = (BeeLangGrammarAccess) getGrammarAccess();

		// GENERAL
		c.setAutoLinewrap(120);

		// ; and , rules
		for(Keyword k : f.findKeywords(";", ",", ".", "(", ")")) {
			if(";".contains(k.getValue()))
				c.setLinewrap().after(k);
			if(";,)".contains(k.getValue()))
				c.setNoSpace().before(k);
			else if(".".contains(k.getValue()))
				c.setNoSpace().around(k);
			else if("(".contains(k.getValue()))
				c.setNoSpace().after(k);
		}

		// Documentation
		c.setLinewrap().around(f.getDOCUMENTATIONRule());

		// Blocks
		c.setIndentation(
			f.getBlockExpressionAccess().getLeftCurlyBracketKeyword_1(),
			f.getBlockExpressionAccess().getRightCurlyBracketKeyword_3());
		c.setLinewrap().after(f.getBlockExpressionAccess().getLeftCurlyBracketKeyword_1());
		// c.setLinewrap().after(f.getBlockExpressionAccess().getSemicolonKeyword_2_1());
		// c.setNoSpace().before(f.getBlockExpressionAccess().getSemicolonKeyword_2_1());
		c.setLinewrap().after(f.getBlockExpressionAccess().getRightCurlyBracketKeyword_3());
		c.setLinewrap().before(f.getBlockExpressionAccess().getRightCurlyBracketKeyword_3());

		// SWITCH
		c.setIndentation(
			f.getSwitchExpressionAccess().getSwitchKeyword_1(), f.getSwitchExpressionAccess().getEndswitchKeyword_4());
		c.setLinewrap().before(f.getCaseAccess().getCaseKeyword_1_0_0());
		c.setLinewrap().before(f.getCaseAccess().getDefaultKeyword_1_1());
		c.setLinewrap().before(f.getSwitchExpressionAccess().getEndswitchKeyword_4());

		// REPOSITORY
		c.setIndentation(
			f.getRepositoryAccess().getLeftCurlyBracketKeyword_5_1_0(),
			f.getRepositoryAccess().getRightCurlyBracketKeyword_5_1_4());
		c.setLinewrap().after(f.getRepositoryAccess().getLeftCurlyBracketKeyword_5_1_0());
		c.setLinewrap().after(f.getRepositoryAccess().getRightCurlyBracketKeyword_5_1_4());
		// bracket for branches
		c.setIndentation(
			f.getRepositoryAccess().getLeftSquareBracketKeyword_5_1_3_2(),
			f.getRepositoryAccess().getRightSquareBracketKeyword_5_1_3_5());
		c.setLinewrap().after(f.getRepositoryAccess().getLeftSquareBracketKeyword_5_1_3_2());
		c.setLinewrap().before(f.getRepositoryAccess().getRightSquareBracketKeyword_5_1_3_5());
		c.setLinewrap().after(f.getRepositoryAccess().getCommaKeyword_5_1_3_4_0());
		c.setLinewrap(2).after(f.getRepositoryRule());

		// BRANCHES
		c.setIndentation(
			f.getBranchAccess().getLeftCurlyBracketKeyword_4(), f.getBranchAccess().getRightCurlyBracketKeyword_6());
		c.setLinewrap().after(f.getBranchAccess().getLeftCurlyBracketKeyword_4());

		// includes and excludes lists
		c.setIndentation(
			f.getBranchAccess().getLeftSquareBracketKeyword_5_2_2(),
			f.getBranchAccess().getRightSquareBracketKeyword_5_2_5());
		c.setIndentation(
			f.getBranchAccess().getLeftSquareBracketKeyword_5_3_2(),
			f.getBranchAccess().getRightSquareBracketKeyword_5_3_5());

		// RESOLUTION
		c.setIndentation(
			f.getTopLevelUnitProviderAccess().getLeftSquareBracketKeyword_4(),
			f.getTopLevelUnitProviderAccess().getRightSquareBracketKeyword_7());
		c.setLinewrap().after(f.getTopLevelUnitProviderAccess().getLeftSquareBracketKeyword_4());
		c.setLinewrap().after(f.getTopLevelUnitProviderAccess().getCommaKeyword_6_0());
		c.setLinewrap().before(f.getTopLevelUnitProviderAccess().getRightSquareBracketKeyword_7());
		c.setLinewrap(2).after(f.getTopLevelUnitProviderRule());

		// UNIT PROVIDERS
		// repository unit
		c.setIndentation(
			f.getRepositoryUnitProviderAccess().getLeftCurlyBracketKeyword_4_0(),
			f.getRepositoryUnitProviderAccess().getRightCurlyBracketKeyword_4_2());
		c.setLinewrap().after(f.getRepositoryUnitProviderAccess().getLeftCurlyBracketKeyword_4_0());
		c.setLinewrap().before(f.getRepositoryUnitProviderAccess().getRightCurlyBracketKeyword_4_2());
		// firstfound
		c.setIndentation(
			f.getFirstFoundUnitProviderAccess().getLeftSquareBracketKeyword_4(),
			f.getFirstFoundUnitProviderAccess().getRightSquareBracketKeyword_7());
		c.setLinewrap().bounds(
			f.getFirstFoundUnitProviderAccess().getLeftSquareBracketKeyword_4(),
			f.getFirstFoundUnitProviderAccess().getRightSquareBracketKeyword_7());
		c.setLinewrap().after(f.getFirstFoundUnitProviderAccess().getCommaKeyword_6_0());

		// best found
		c.setIndentation(
			f.getBestFoundUnitProviderAccess().getLeftSquareBracketKeyword_4(),
			f.getBestFoundUnitProviderAccess().getRightSquareBracketKeyword_7());
		c.setLinewrap().bounds(
			f.getBestFoundUnitProviderAccess().getLeftSquareBracketKeyword_4(),
			f.getBestFoundUnitProviderAccess().getRightSquareBracketKeyword_7());
		c.setLinewrap().after(f.getBestFoundUnitProviderAccess().getCommaKeyword_6_0());

		// BUILD UNIT

		// FUNCTION
		c.setLinewrap(2).after(f.getFunctionRule());
	}
}
