module org.eclipse.b3

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/org/eclipse/b3/BeeLang.xtext"
var file.extensions = "b3"
var projectName = "org.eclipse.b3.beelang"
var runtimeProject = "../${projectName}"

var javaTypesURI = "platform:/plugin/org.eclipse.xtext.common.types/model"
var backendURI =   "platform:/plugin/org.eclipse.b3.backend/model"
var buildURI =     "platform:/plugin/org.eclipse.b3.build/model/"

Workflow {
	
    bean = StandaloneSetup {
    	registerGeneratedEPackage = "org.eclipse.b3.backend.evaluator.b3backend.B3backendPackage"
		platformUri = "${runtimeProject}/.."
	}
    bean = StandaloneSetup {
    	registerGeneratedEPackage = "org.eclipse.b3.build.build.B3BuildPackage"
		platformUri = "${runtimeProject}/.."
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"

		language = {
			uri = grammarURI
			fileExtensions = file.extensions

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment {}

			// generates Java API for the generated EPackages 
			fragment = ecore.EcoreGeneratorFragment {
//				referencedGenModels = "uri to genmodel, uri to next genmodel"
				referencedGenModels = "classpath:/model/JavaVMTypes.genmodel,classpath:/model/B3Backend.genmodel,classpath:/model/B3Build.genmodel"
				skipGenerate = true
				// JavaVMTypes
				saveMapping = {
        			from = "classpath:/model/JavaVMTypes.genmodel"
        			to = "${javaTypesURI}/JavaVMTypes.genmodel"
    			}
				saveMapping = {
					from = "classpath:/model/JavaVMTypes.ecore"
					to = "${javaTypesURI}/JavaVMTypes.ecore"
				}
				// Backend model
				saveMapping = {
        			from = "classpath:/model/B3Backend.genmodel"
        			to = "${backendURI}/B3Backend.genmodel"
    			}
				saveMapping = {
					from = "classpath:/model/B3Backend.ecore"
					to = "${backendURI}/B3Backend.ecore"
				}
				// Build model
				saveMapping = {
        			from = "classpath:/model/B3Build.genmodel"
        			to = "${buildURI}/B3Build.genmodel"
    			}
				saveMapping = {
					from = "classpath:/model/B3Build.ecore"
					to = "${buildURI}/B3Build.ecore"
				}

	
			}
			
			fragment = types.TypesGeneratorFragment{}

			// the serialization component
			fragment = parseTreeConstructor.ParseTreeConstructorFragment {}

			// a custom ResourceFactory for use with EMF 
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = file.extensions
			}
				
			/* 
			 * The antlr parser generator fragment.
			 * If you don't already have it get it from http://download.itemis.com/updates/
			 * Use extended fragement to enable backtracking of lexer
			 */ 
			fragment = de.itemis.xtext.antlr.ex.rt.AntlrGeneratorFragment {
				options = {
					backtrack = true
					classSplitting = true
//					backtrackLexer = true
				}
			}

			// java-based API for validation 
			fragment = validation.JavaValidatorFragment {
				composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
//				composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
				registerForImportedPackages = true
			}
            
			// scoping and exporting API (legacy in b3)
			fragment = scoping.ImportURIScopingFragment {}
			fragment = exporting.SimpleNamesFragment {}

			// scoping and exporting API (switch to these later for b3)
//			fragment = scoping.ImportNamespacesScopingFragment {}
//			fragment = exporting.QualifiedNamesFragment {}
			fragment = builder.BuilderIntegrationFragment {}	

			// formatter API 
			fragment = formatting.FormatterFragment {}

			// labeling API 
			fragment = labeling.LabelProviderFragment {}

			// outline API 
			fragment = outline.TransformerFragment {}
			fragment = outline.OutlineNodeAdapterFactoryFragment {}
			fragment = outline.QuickOutlineFragment {}

			// quickfix API 
			fragment = quickfix.QuickfixProviderFragment {}

			// content assist API  
			fragment = contentAssist.JavaBasedContentAssistFragment {}

			// generates a more lightweight Antlr parser and lexer for tailored content assist  
//			fragment =  de.itemis.xtext.antlr.XtextAntlrUiGeneratorFragment { // no lexer backtracking
			fragment = de.itemis.xtext.antlr.ex.ca.ContentAssistParserGeneratorFragment	{
				options = {
					backtrack = true
					classSplitting = true
//					backtrackLexer = true
				}
			}

			// project wizard (optional) 
//			fragment = projectWizard.SimpleProjectWizardFragment {
//				generatorProjectName = "${projectName}.generator" 
//				modelFileExtension = file.extensions
//			}
		}
	}
}
